<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Alfred Nutile</title><link>https://alfrednutile.info/posts/</link><description>Recent content in Posts on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 12 Feb 2022 06:32:07 -0400</lastBuildDate><atom:link href="https://alfrednutile.info/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>SwiftUI: Switching to a page when a user clicks on notification</title><link>https://alfrednutile.info/posts/swift_notifications/</link><pubDate>Sat, 12 Feb 2022 06:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/swift_notifications/</guid><description>&lt;h3 id="quick-notes-to-self-on-how-to-have-the-user-go-to-a-specific-page-after-clicking-on-a-notification-in-ios">Quick Notes to Self on how to have the user go to a specific page after clicking on a Notification in iOS.&lt;/h3>
&lt;img src="images/notifications.gif" width="600">
&lt;p>The two main articles that helped are &lt;a href="https://stackoverflow.com/questions/62504400/programmatically-change-to-another-tab-in-swiftui">https://stackoverflow.com/questions/62504400/programmatically-change-to-another-tab-in-swiftui&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/62309251/how-can-i-open-a-specific-view-in-swiftui-when-a-user-opens-a-notification">https://stackoverflow.com/questions/62309251/how-can-i-open-a-specific-view-in-swiftui-when-a-user-opens-a-notification&lt;/a>&lt;/p>
&lt;p>One helped me to see how in a more “modern” SwiftUI way get the state of the Notification from the UIDelegate up to the SwiftUI view. The second one was key since I am using TabView and needed to change the view when this was updated.&lt;/p>
&lt;p>This will assume you have Firebase notifications already working. The pattern I used there can be seen in &lt;a href="https://designcode.io/swiftui-advanced-handbook-push-notifications-part-1">https://designcode.io/swiftui-advanced-handbook-push-notifications-part-1&lt;/a> some really great material here as well as &lt;a href="https://seanallen.teachable.com">https://seanallen.teachable.com&lt;/a>&lt;/p>
&lt;h2 id="setup-up-notificationmanager">Setup up &lt;code>NotificationManager&lt;/code>&lt;/h2>
&lt;p>I followed the first post but I was a bit more specific since I just, for now, have one page.&lt;/p>
&lt;p>For example when that person setups up the &lt;code>pageToNavigateTo&lt;/code> a number I just set it to&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift">notificationManager?.pageToNavigationTo = &lt;span style="color:#e6db74">&amp;#34;myRecalls&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This means I had to set the class as well&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationManager&lt;/span>: ObservableObject {
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> shared = NotificationManager()
@Published &lt;span style="color:#66d9ef">var&lt;/span> pageToNavigationTo : String?
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here, I followed along with everything else till they get to the page with the Navigation since I am using tabs. That is where the second article comes in. I set my tags on the Tabs and then set the default.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift"> @State &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> tabSelection = &lt;span style="color:#e6db74">&amp;#34;topics&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> body: some View {
ZStack {
VStack {
&lt;span style="color:#66d9ef">if&lt;/span>(authState.signedIn) {
TabView(selection: &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>tabSelection) {
TopicsParentsView()
.tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;Topics&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;house&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;topics&amp;#34;&lt;/span>)
MyRecallsView() .tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;My Recalls&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;person.crop.rectangle&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;myRecalls&amp;#34;&lt;/span>)
RecallsView() .tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;Recalls&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;list.dash&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;recalls&amp;#34;&lt;/span>)
AccountView()
.tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;My Account&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;person.crop.circle&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;account&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That was it. After a rebuild my notifications brought me right to the page. For me the articles, when I actually followed all the details, worked perfectly. Below are the full examples.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift">@main
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">TotalRecallsIoApp&lt;/span>: App {
@UIApplicationDelegateAdaptor(AppDelegate.&lt;span style="color:#66d9ef">self&lt;/span>) &lt;span style="color:#66d9ef">var&lt;/span> appDelegate
&lt;span style="color:#66d9ef">let&lt;/span> notificationManager = NotificationManager()
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setUpdNotificationManager&lt;/span>() {
appDelegate.notificationManager = notificationManager
}
&lt;span style="color:#66d9ef">var&lt;/span> body: some Scene {
&lt;span style="color:#66d9ef">let&lt;/span> authState = AuthState()
WindowGroup {
HomeView()
.environmentObject(authState)
.environmentObject(notificationManager)
.onAppear {
setUpdNotificationManager()
}
}
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NotificationManager&lt;/span>: ObservableObject {
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> shared = NotificationManager()
@Published &lt;span style="color:#66d9ef">var&lt;/span> pageToNavigationTo : String?
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then the AppDelegate&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift">@available(iOS &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>)
&lt;span style="color:#66d9ef">extension&lt;/span> &lt;span style="color:#a6e22e">AppDelegate&lt;/span> : UNUserNotificationCenterDelegate {
&lt;span style="color:#75715e">// Receive displayed notifications for iOS 10 devices.&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">userNotificationCenter&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> center: UNUserNotificationCenter,
willPresent notification: UNNotification,
withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&amp;gt; Void) {
&lt;span style="color:#66d9ef">let&lt;/span> userInfo = notification.request.content.userInfo
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> messageID = userInfo[gcmMessageIDKey] {
print(&lt;span style="color:#e6db74">&amp;#34;Message ID: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>messageID&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
}
print(userInfo)
&lt;span style="color:#75715e">// Change this to your preferred presentation option&lt;/span>
completionHandler([[.banner, .badge, .sound]])
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">application&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">application&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">userNotificationCenter&lt;/span>(&lt;span style="color:#66d9ef">_&lt;/span> center: UNUserNotificationCenter,
didReceive response: UNNotificationResponse,
withCompletionHandler completionHandler: @escaping () -&amp;gt; Void) {
&lt;span style="color:#66d9ef">let&lt;/span> userInfo = response.notification.request.content.userInfo
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> messageID = userInfo[gcmMessageIDKey] {
print(&lt;span style="color:#e6db74">&amp;#34;Message ID from userNotificationCenter didReceive: &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>messageID&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
}
print(userInfo)
print(&lt;span style="color:#e6db74">&amp;#34;DEBUG: User clicks on notifications&amp;#34;&lt;/span>)
notificationManager?.pageToNavigationTo = &lt;span style="color:#e6db74">&amp;#34;myRecalls&amp;#34;&lt;/span>
print(&lt;span style="color:#e6db74">&amp;#34;DEBUG: Done setting page &lt;/span>&lt;span style="color:#e6db74">\(&lt;/span>notificationManager?.pageToNavigationTo&lt;span style="color:#e6db74">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
completionHandler()
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally the page with TabView&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-swift" data-lang="swift">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">SwiftUI&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Firebase&lt;/span>
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HomeView&lt;/span>: View {
@EnvironmentObject &lt;span style="color:#66d9ef">var&lt;/span> authState: AuthState
@EnvironmentObject &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> notificationManager: NotificationManager
@State &lt;span style="color:#66d9ef">var&lt;/span> email = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
@State &lt;span style="color:#66d9ef">var&lt;/span> password = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
@State &lt;span style="color:#66d9ef">var&lt;/span> signedIn = &lt;span style="color:#66d9ef">false&lt;/span>
@State &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> tabSelection = &lt;span style="color:#e6db74">&amp;#34;topics&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> body: some View {
ZStack {
VStack {
&lt;span style="color:#66d9ef">if&lt;/span>(authState.signedIn) {
TabView(selection: &lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>tabSelection) {
TopicsParentsView()
.tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;Topics&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;house&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;topics&amp;#34;&lt;/span>)
MyRecallsView() .tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;My Recalls&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;person.crop.rectangle&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;myRecalls&amp;#34;&lt;/span>)
RecallsView() .tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;Recalls&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;list.dash&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;recalls&amp;#34;&lt;/span>)
AccountView()
.tabItem {
Label(&lt;span style="color:#e6db74">&amp;#34;My Account&amp;#34;&lt;/span>, systemImage: &lt;span style="color:#e6db74">&amp;#34;person.crop.circle&amp;#34;&lt;/span>)
}
.tag(&lt;span style="color:#e6db74">&amp;#34;account&amp;#34;&lt;/span>)
}
} &lt;span style="color:#66d9ef">else&lt;/span> {
LoginView()
}
}
.onAppear {
authState.signedIn = authState.isSignedIn
}
.onReceive(notificationManager.&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>pageToNavigationTo) {
&lt;span style="color:#66d9ef">guard&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> notificationSelection = $0 &lt;span style="color:#66d9ef">else&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> }
&lt;span style="color:#66d9ef">self&lt;/span>.tabSelection = notificationSelection
}
}
}
}
&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HomeView_Previews&lt;/span>: PreviewProvider {
@EnvironmentObject &lt;span style="color:#66d9ef">var&lt;/span> firebaseManager: FirebaseManager
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> previews: some View {
&lt;span style="color:#66d9ef">let&lt;/span> authState = AuthState()
HomeView().environmentObject(authState)
}
}
&lt;/code>&lt;/pre>&lt;/div></description><category>swiftui</category><category>swift</category><category>note2self</category></item><item><title>Get Fixture Put Fixture Helpers for Laravel</title><link>https://alfrednutile.info/posts/get_put/</link><pubDate>Sat, 25 Dec 2021 06:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/get_put/</guid><description>&lt;p>I do a lot with fixtures when testing. This means I put files in the &lt;code>tests/fixtures&lt;/code> folder that represet the JSON of what ever I am testing. For example maybe I hit an
API that returns&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And when I mock that API response I want to have that ready for me to use.&lt;/p>
&lt;p>I then save it to the folder &lt;code>tests/fixtures/foo.json&lt;/code> and can just use it.&lt;/p>
&lt;p>To do that I just do the following.&lt;/p>
&lt;h2 id="setup-a-helpersphp-file-in-your-app">Setup a helpers.php file in your app&lt;/h2>
&lt;p>Add the file &lt;code>app/helpers.php&lt;/code> for now with &lt;code>&amp;lt;?php&lt;/code> on top of it.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
&lt;/code>&lt;/pre>&lt;p>Not to exciting yet!&lt;/p>
&lt;p>Then add it to &lt;code>composer.json&lt;/code>&lt;/p>
&lt;pre>&lt;code>File: composer.json
38: &amp;quot;autoload-dev&amp;quot;: {
39: &amp;quot;psr-4&amp;quot;: {
40: &amp;quot;Tests\\&amp;quot;: &amp;quot;tests/&amp;quot;
41: },
42: &amp;quot;files&amp;quot;: [
43: &amp;quot;app/helpers.php&amp;quot;
44: ]
45: },
&lt;/code>&lt;/pre>&lt;p>Now run &lt;code>composer dump&lt;/code> and you are ready to add helpers to your app.&lt;/p>
&lt;h2 id="add-get-and-put-helpers">Add get and put helpers&lt;/h2>
&lt;p>To that file I add the getter and putter(?):&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Support\Facades\File;
if (!function_exists(&amp;quot;put_fixture&amp;quot;)) {
function put_fixture($file_name, $content = [], $json = true)
{
if ($json) {
$content = json_encode($content, 128);
}
File::put(
base_path(sprintf(&amp;quot;tests/fixtures/%s&amp;quot;, $file_name)),
$content
);
return true;
}
}
if (!function_exists(&amp;quot;get_fixture&amp;quot;)) {
function get_fixture($file_name)
{
$results = File::get(base_path(sprintf(
&amp;quot;tests/fixtures/%s&amp;quot;,
$file_name
)));
return json_decode($results, true);
}
}
&lt;/code>&lt;/pre>&lt;p>and I make the folder &lt;code>tests/fixtures&lt;/code>&lt;/p>
&lt;p>And now in my tests I can do this:&lt;/p>
&lt;pre>&lt;code>put_fixture('meta_data.json', $response_from_api_as_array);
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>NOTE: Many apis have good docs that sometimes show a JSON response I can save. But somtimes I want a real response to save it so I hit the api ONCE from my test
and mock it from then on&lt;/p>
&lt;/blockquote>
&lt;p>and I can use that later just like this&lt;/p>
&lt;pre>&lt;code>get_fixture('meta_data.json', $response_from_api_as_array);
&lt;/code>&lt;/pre>&lt;p>This will simply put a file and get that file &lt;code>tests/fixtures/meta_data.json&lt;/code>&lt;/p>
&lt;p>And the file will be JSON for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description><category>laravel</category><category>php</category><category>note2self</category><category>helpers</category></item><item><title>Odd Livewire Error(s)</title><link>https://alfrednutile.info/posts/livewire/</link><pubDate>Tue, 17 Aug 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/livewire/</guid><description>&lt;p>Just keeping track of some nuances to LiveWire&lt;/p>
&lt;h2 id="initialdatafingerprint">initialData.fingerprint&lt;/h2>
&lt;p>The table with rows was not interating. The rows had two columns of for-each loops so
as always you need keys, but I think my mistake was not making the keys different
for either of them.&lt;/p>
&lt;p>You can see the table below&lt;/p>
&lt;pre>&lt;code>@foreach( $imports as $import)
&amp;lt;tr class=&amp;quot;bg-emerald-200&amp;quot;&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ $import-&amp;gt;id }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ $import-&amp;gt;name }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ optional($import-&amp;gt;source)-&amp;gt;type }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;@if($import-&amp;gt;file_path)
@livewire('download-import', ['import' =&amp;gt; $import], key('download-' . $import-&amp;gt;id))
@else
&amp;lt;div&amp;gt;no file&amp;lt;/div&amp;gt;
@endif
&amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;
@livewire(&amp;quot;status-link&amp;quot;, [
'import' =&amp;gt; $import
], key('link-' . $import-&amp;gt;id))
&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
@endforeach
&lt;/code>&lt;/pre>&lt;p>The keys&lt;/p>
&lt;pre>&lt;code>key('download-' . $import-&amp;gt;id))
&lt;/code>&lt;/pre>&lt;p>and&lt;/p>
&lt;pre>&lt;code>key('link-' . $import-&amp;gt;id))
&lt;/code>&lt;/pre>&lt;p>Did not work when I was using &lt;code>key($import-&amp;gt;id)&lt;/code>&lt;/p>
&lt;p>The table and search all just stopped :(&lt;/p>
&lt;p>Anyways hope this saves the future me an hour!&lt;/p></description><category>laravel</category><category>livewire</category><category>note</category></item><item><title>CI - GitHub Actions and Laravel (Part 1 of 3)</title><link>https://alfrednutile.info/posts/ci_cd_part_one/</link><pubDate>Sun, 23 May 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/ci_cd_part_one/</guid><description>&lt;blockquote>
&lt;p>The point is GitHub Actions should be revolutionizing your team&amp;rsquo;s workflows; if it is not, you are missing something important.&lt;/p>
&lt;/blockquote>
&lt;p>This first post is part one of three. In this series I will cover the following topics.&lt;/p>
&lt;ul>
&lt;li>PT 1 CI - Simple Continuous Integration using GitHub Actions&lt;/li>
&lt;li>PT 2 CD - Simple Continuous Deployment using GitHub Actions&lt;/li>
&lt;li>PT 3 Security - Shifting Left on Security&lt;/li>
&lt;/ul>
&lt;p>Please keep in mind that the repository and code below I am sharing is not an end product and will evolve. The &amp;ldquo;Links&amp;rdquo; section below will have many of the links needed.&lt;/p>
&lt;p>If I do not get any interest in this post, I will not do PT 2 or PT 2 as I try to use Build Measure Learn &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with writing these articles. &lt;strong>¯_(ツ)_/¯&lt;/strong>&lt;/p>
&lt;p>By the end of this post, you will easily be able to add CI to your open-source project, independent private project, team project, or even, dare I say, &amp;ldquo;enterprise&amp;rdquo; project. ( more on that later 🤔)&lt;/p>
&lt;p>I will reference material in numerous books and research papers you can see many of them &lt;a href="https://alfrednutile.info/posts/sod/">here&lt;/a>&lt;/p>
&lt;h3 id="continuous-delivery-book">Continuous Delivery Book&lt;/h3>
&lt;blockquote>
&lt;p>The commit stage begins with a change to the state of the project—that is, a commit to the version control system. It ends with either a report of failure or, if successful, a collection of binary artifacts and deployable assemblies to be used in subsequent test and release stages, as well as reports on the state of the application. Ideally, a commit stage should take less than five minutes to run, and certainly no more than ten. Humble, Jez; Farley, David. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>This book is the &lt;strong>&amp;ldquo;why&amp;rdquo;&lt;/strong> behind this article. You can not deliver quality code without a CI system that embraces automation and tooling to vet code quickly. To that end the company paying for this code can not succeed either with out this level of thinking.&lt;/p>
&lt;blockquote>
&lt;p>Those who excel at delivering profitability, productivity, and customer satisfaction survive. Anything less than excellence leads to failure. pg 32 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Continuous delivery for the sake of continuous delivery is not enough if you want your organization to succeed, however. It must be done with an eye to organizational goals such as profitability, productivity, and customer satisfaction. pg 49 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Our analysis this year shows elite performers are twice as likely to meet or exceed their organizational performance goals. Pg 54 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>These quotes make it clear that a company that says NO proper CI and CD is also saying NO to success. And most companies have to see the sentence &amp;ldquo;We are a company that does x and happens to have a technology team&amp;rdquo; flipped around to say, &amp;ldquo;We are a technology company that happens to focuses on x.&amp;rdquo;&lt;/p>
&lt;h3 id="the-twelve-factor-app">The Twelve-Factor App&lt;/h3>
&lt;img src="images/factor.png" width="800" class="center">
&lt;p>Read more about that &lt;a href="https://12factor.net">here&lt;/a>&lt;/p>
&lt;p>This article is how I started years ago to consider any application I was building. In this post I am writing, CI will include the following principles.&lt;/p>
&lt;ol>
&lt;li>CodeBase&lt;/li>
&lt;li>Dependencies&lt;/li>
&lt;li>Config&lt;/li>
&lt;/ol>
&lt;p>The article will use the repo &lt;a href="https://github.com/alnutile/codenames">https://github.com/alnutile/codenames&lt;/a> as if it is an application. I mean it is, even though a very silly one.&lt;/p>
&lt;p>We will in this case, focus more on the &amp;ldquo;shifting left&amp;rdquo; when it comes to &amp;ldquo;quality and security&amp;rdquo; and other goals like &amp;ldquo;peer review-based approval process.&amp;rdquo;&lt;/p>
&lt;blockquote>
&lt;p>We recommend that organizations move away from external change approval because of the negative effects on performance. Instead, organizations should &amp;ldquo;shift left&amp;rdquo; to peer review-based approval during the development process. &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>I will apply some base GitHub Actions to the codebase to help confidence in quality and security from the start. By then end we will have the start of a CI system to help you and your team achieve &amp;ldquo;Elite&amp;rdquo; levels of performance.&lt;/p>
&lt;img src="images/elite.png" width="1200" class="center">
&lt;h3 id="accelerate">Accelerate&lt;/h3>
&lt;p>The book Accelerate &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> is not just a technology game-changer; it is a culture-changing strategy that can be implemented on any team today.&lt;/p>
&lt;p>Just the habit of working in &amp;ldquo;small batches&amp;rdquo; will change the performance level of any team. This book will impact all parts of these three articles.&lt;/p>
&lt;p>On that note, the only way to get to the &amp;ldquo;Elite&amp;rdquo; levels this book talks about is by putting CI and CD first. You have to believe in it, do it no matter how much time pressure is on your team because it will succeed in the long run. What will not succeed is cutting corners, building technical debt, and having too many non-automated processes between your code and going to production. All of this is proven by the data in this book and the ongoing reports it offers &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;blockquote>
&lt;p>We also see that elite performers automate and integrate tools more frequently into their toolchains on almost all dimensions. Although automation may be seen as too expensive to implement (we often hear, &amp;ldquo;I don&amp;rsquo;t have time or budget to automate— it&amp;rsquo;s not a feature!&amp;quot;), automation is truly a sound investment. Pg 60 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;h2 id="branching">Branching&lt;/h2>
&lt;blockquote>
&lt;p>PR is another way of saying Pull-Request&lt;/p>
&lt;/blockquote>
&lt;p>To begin this CI process and all the GitHub Actions will assume a trunk-based branching process.
Basically, you have &amp;ldquo;mainline&amp;rdquo; and ONE level of branching off of that, e.g. the &amp;ldquo;small batch&amp;rdquo; of the feature you are working on.
This size of this &amp;ldquo;batch&amp;rdquo; should be under four hours of work, ideally, two. Consider a daily goal to merge two pull requests a day of work.
This strategy will make more sense as I cover Feature Flags in part two of the article.&lt;/p>
&lt;blockquote>
&lt;p>Our research shows that effective trunk-based development is characterized by fewer than three active branches and branches and forks having lifetimes of less than a day before being merged to master. Pg 41 &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>All &lt;a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">Pull Request&lt;/a> will trigger these automations leaving only one real manual step that is a peer developer on the project to review the code WHILE you work on the pull request or the next part of the feature.&lt;/p>
&lt;p>Keep in mind, we are working in small batches. Your code is not a
days worth of work thrown to some poor teammate who has barely enough time to get a hot cup of coffee ☕️. No, it is a small batch of code they can quickly review and even suggest an update for the next PR cause they know you will be at it quickly enough.&lt;/p>
&lt;p>Every merged PR is not a final stoke on some great renascence painting but a small step toward building a feature. If you think in line with Build Measure Learn &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, you start realize that the feature might never get used or even eventually removed. Some statistics show this to be about 2/3 of the code pushed!&lt;/p>
&lt;p>This PR process asks a teammate to review the code, and if they are too busy after thirty minutes, go find someone else. Please keep it to ONE person. This is not a time to philosophize around the merits of style and ideals. Those conversations can happen, but a team should have time to do that during the week and build standards together. Maybe, for example, the reviewer thinks you should not do x, then agree to come back to it later, set up a time to talk as the larger team and or in chat, make a decision, document it, or better add it to automation. These pull requests are about the feature and the known best practices the team has agreed to.&lt;/p>
&lt;p>The short of it is, make a branch from trunk, push to your version control system a pull request with the first bit of code-test you write. Get someone&amp;rsquo;s eyes on it sooner than later. When approved, merge that one branch back into trunk (main, master, mainline).&lt;/p>
&lt;p>Lastly, if you find yourself waiting for someone to review the branch, you can branch-off of it since, by the time you are done with your second PR, you should have enough feedback from your teammate to merge and then rebase your current branch from trunk. Leaving you never more than one branch out at most from trunk.&lt;/p>
&lt;p>One good question I had been asked about this was when I presented this workflow to another team was, &amp;ldquo;Won&amp;rsquo;t this distract my team from the work they are doing if all day there are looking at PRs&amp;rdquo; and I asked my team about this, and overall, the answer is no.&lt;/p>
&lt;p>For one, these are small batches of work; the dev does not have to switch their context that significantly unlike if they are handed days of code. Second, the devs do not and should not be coding eight hours a day. There should be other things going on in their day to make sure the health of the project and team are being built and maintained as well. We are preventing debt by doing this. &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="github-actions">GitHub Actions&lt;/h2>
&lt;p>Okay, this is huge; we are going to start talking about &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>. And yes, GitLabs and BitBucket have comparable features, so this article can be considered for all of them. The point is GitHub Actions should be revolutionizing your team&amp;rsquo;s workflows; if it is not, you are missing something important. It empowers DevOps at the developer level in a way that years ago took heavy server administration skills to set up. But now it is like Lego bricks, pre-built automation to truly shift-left in all things.&lt;/p>
&lt;h3 id="step-one-setting-up-the-actions">Step One: Setting up the actions&lt;/h3>
&lt;p>This is easy; I will show you in order every action used to make this all happen.&lt;/p>
&lt;p>First, it happens in one file &lt;a href="https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml">https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml&lt;/a> maybe it can be broken up into more, etc. I am not a GitHub Actions expert, so feel free to Google more about this.&lt;/p>
&lt;p>We start with the &amp;ldquo;when&amp;rdquo; to run the action.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CI-CD&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>: [&lt;span style="color:#ae81ff">push]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &amp;ldquo;when&amp;rdquo; in this case is when code is pushed to any branch we run this.&lt;/p>
&lt;p>Okay, then there is some base setup I will breeze over since the GitHub Action Docs are good and I rather focus on the &amp;ldquo;how&amp;rdquo; and &amp;ldquo;why&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">DB_DATABASE&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;span style="color:#f92672">DB_USERNAME&lt;/span>: &lt;span style="color:#ae81ff">root&lt;/span>
&lt;span style="color:#f92672">DB_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>
&lt;span style="color:#f92672">BROADCAST_DRIVER&lt;/span>: &lt;span style="color:#ae81ff">log&lt;/span>
&lt;span style="color:#f92672">services&lt;/span>:
&lt;span style="color:#f92672">mysql&lt;/span>:
&lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">mysql:5.7&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">MYSQL_ALLOW_EMPTY_PASSWORD&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#f92672">MYSQL_ROOT_PASSWORD&lt;/span>: &lt;span style="color:#ae81ff">password&lt;/span>
&lt;span style="color:#f92672">MYSQL_DATABASE&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span>
&lt;span style="color:#f92672">ports&lt;/span>:
- &lt;span style="color:#ae81ff">3306&lt;/span>&lt;span style="color:#ae81ff">/tcp&lt;/span>
&lt;span style="color:#f92672">options&lt;/span>: --&lt;span style="color:#ae81ff">health-cmd=&amp;#34;mysqladmin ping&amp;#34; --health-interval=10s --health-timeout=5s --health-retries=3&lt;/span>
&lt;span style="color:#f92672">strategy&lt;/span>:
&lt;span style="color:#f92672">fail-fast&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">matrix&lt;/span>:
&lt;span style="color:#f92672">php-versions&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;8.0&amp;#34;&lt;/span>]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So we are going to lean heavily on &lt;a href="https://github.com/shivammathur/setup-php">https://github.com/shivammathur/setup-php&lt;/a> and after we check out our repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once that is done, we can get to work.&lt;/p>
&lt;p>I set up PHP with some extensions I need, especially Xdebug even though it slows things down but it is how we will measure coverage.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup PHP, with composer and extensions&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">shivammathur/setup-php@v2&lt;/span> &lt;span style="color:#75715e">#https://github.com/shivammathur/setup-php&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">php-version&lt;/span>: &lt;span style="color:#ae81ff">${{ matrix.php-versions }}&lt;/span>
&lt;span style="color:#f92672">tools&lt;/span>: &lt;span style="color:#ae81ff">phpmd&lt;/span>
&lt;span style="color:#f92672">extensions&lt;/span>: &lt;span style="color:#ae81ff">mbstring, dom, fileinfo, mysql&lt;/span>
&lt;span style="color:#f92672">coverage&lt;/span>: &lt;span style="color:#ae81ff">xdebug&lt;/span> &lt;span style="color:#75715e">#optional&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I then prepare the application:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Start mysql service&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">sudo /etc/init.d/mysql start&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Get composer cache directory&lt;/span>
&lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">composer-cache&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">echo &amp;#34;::set-output name=dir::$(composer config cache-files-dir)&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Cache composer dependencies&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/cache@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.composer-cache.outputs.dir }}&lt;/span>
&lt;span style="color:#75715e"># Use composer.json for key, if composer.lock is not committed.&lt;/span>
&lt;span style="color:#75715e"># key: ${{ runner.os }}-composer-${{ hashFiles(&amp;#39;**/composer.json&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-composer-${{ hashFiles(&amp;#39;**/composer.lock&amp;#39;) }}&lt;/span>
&lt;span style="color:#f92672">restore-keys&lt;/span>: &lt;span style="color:#ae81ff">${{ runner.os }}-composer-&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Composer dependencies&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">composer install --no-progress --prefer-dist --optimize-autoloader&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Prepare the application&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> php -r &amp;#34;file_exists(&amp;#39;.env&amp;#39;) || copy(&amp;#39;.env.example&amp;#39;, &amp;#39;.env&amp;#39;);&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> php artisan key:generate&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We depend on &lt;code>composer.lock&lt;/code> as being part of this. One key thing here is to never reference &lt;code>dev-master&lt;/code> in your composer.json file. Please make sure you use the MAJOR version that you want and let itself updated at the MINOR version levels &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Okay, now we have the system setup, PHP, MySQL, Composer files installed, and the &lt;code>.env&lt;/code> setup.&lt;/p>
&lt;blockquote>
&lt;p>We&amp;rsquo;re sucking diesel now!&lt;/p>
&lt;/blockquote>
&lt;p>Now let&amp;rsquo;s check our code for &amp;ldquo;quality.&amp;rdquo; Before we do that, let&amp;rsquo;s ask what quality is? Some of it is opinion-based, but as a team, something is better than nothing. A bar, a standard, something you all can agree to. The choices I show here are used in actual day to day work and does not slow down the team. But at the same time, it catches those little things and helps us to have consistent code that we can all share the workload on.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#75715e"># Setup Done now to test and lint the code&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run PHPMD&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">phpmd app GitHub phpmd.ruleset.xml&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To begin with, we use &lt;a href="https://phpmd.org">PHPMD&lt;/a> as a simple way to verify some standards and or quality. There is a ruleset file that the team can
modify as needed.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#75715e"># Run linting to make sure it is worthwhile before NPM&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">phpstan&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">./vendor/bin/phpstan analyse&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://github.com/phpstan/phpstan">PHPStan&lt;/a> is a Static Analysis Tool&lt;/p>
&lt;blockquote>
&lt;p>PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.&lt;/p>
&lt;/blockquote>
&lt;p>It can catch many little things that our Unit tests (more on those in a moment) may not catch. Another option is &lt;a href="https://github.com/nunomaduro/larastan">LaraStan&lt;/a> to help with the more specific Laravel code styles that may throw off PHPStan. Note we are not &amp;ldquo;boiling the ocean&amp;rdquo; here, we are setting things to levels that are &amp;ldquo;good enough&amp;rdquo;. Finding the right balance for your team is key here.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#75715e"># Again another lint before we do the js build&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">PHP Code Style (phpcs)&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">chindit/actions-phpcs@master&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">cli&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;--standard=PSR12&amp;#34;&lt;/span>
&lt;span style="color:#f92672">dir&lt;/span>: &lt;span style="color:#ae81ff">app/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This one will help with linting, and some agreed to standards amongst the team. This makes our PR process not about looking at style but looking at logic.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Test with phpunit&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --coverage-clover clover.xml&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">DB_PORT&lt;/span>: &lt;span style="color:#ae81ff">${{ job.services.mysql.ports[&amp;#39;3306&amp;#39;] }}&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Do we pass the coverage amount&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">vendor/bin/coverage-check clover.xml 60&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Okay, this is the big one-time to PHPUnit test. Sixty percent is a bit low. I think 70% is a better goal. I will quote Kent Beck about 100%. Also note we focus on the &lt;a href="https://martinfowler.com/bliki/UserJourneyTest.html">Happy Paths&lt;/a>&lt;/p>
&lt;img src="images/kent.png" width="800" class="center">
&lt;hr>
&lt;p>No Dusk tests? Right, so I might add Dusk for some End2End. The work I do day to day depends on Python Pytest for End2End testing. Since those projects have an embedded QA person, they tend to know Python. Dusk is fantastic and there are actions running selenium and what not, so it should plug in fine. Maybe I will come back later to this. If this app had a JavaScript framework like VueJS I would not use Dusk I would use Jest or some other well-known testing framework for JavaScript. Since this app is Livewire, I depend on its testing at the PHPUnit level, but I do see the value here of some e2e testing in Dusk.&lt;/p>
&lt;p>Okay, so that is it; you now have these automations running with every PR. Let&amp;rsquo;s see what a PR looks like.&lt;/p>
&lt;h3 id="step-two-using-github-branch-protection">Step Two: Using GitHub Branch Protection&lt;/h3>
&lt;p>First, we have to get GitHub into a place that &amp;ldquo;forces&amp;rdquo; a PR flow. Honestly, a team should have &amp;ldquo;trust&amp;rdquo; enough maybe not to do this but two things here. One it prevents accidents. We have all been on the wrong branch before and pushed up without seeing. Second it can help with management to know there are guardrails.&lt;/p>
&lt;img src="images/branches.png" width="1200" class="center">
&lt;p>We set the rule to match our trunk branch &lt;code>main&lt;/code>
We make sure that all Pull Requests require someone to create a PR beforehand and have one approver. Finally, we add this one Status check to pass before we can merge this into trunk.&lt;/p>
&lt;p>Below is an example.&lt;/p>
&lt;img src="images/pr_ui.png" width="1200" class="center">
&lt;p>What we get here is a Pull Request interface to see the critical aspects of this workflow.
The upper right corner will be a Green &amp;ldquo;Review Pr&amp;rdquo; button if another team member was looking at this PR.&lt;/p>
&lt;p>The middle section shows the running state of the Actions we made above and if they pass or fail. If they fail, then no matter what, we can not merge this easily.&lt;/p>
&lt;p>Lastly is the &amp;ldquo;break glass&amp;rdquo; button to merge the PR if you are an admin. This will be Green if your PR is approved and the Actions are all passing.&lt;/p>
&lt;p>That is it really for the PR. Review, comment, or approve, and your team is ready to have a high-speed flow to ensure quality is in from the start.&lt;/p>
&lt;h2 id="final-thoughts">Final Thoughts&lt;/h2>
&lt;h3 id="tldr">tl;dr&lt;/h3>
&lt;p>Take time to automate and place tools from the start of the chain in place to make sure quality is baked in. As your deploy code to production multiple times a day (coming in part two of this), you will see how important this is to speed and stability. And Actions let you do this easily.&lt;/p>
&lt;h3 id="enterprise">Enterprise&lt;/h3>
&lt;blockquote>
&lt;p>Developers should be empowered to do ops, and this is a great place to start.&lt;/p>
&lt;/blockquote>
&lt;p>I mention this above and just want to take a moment to say that even a solution this simple is better than nothing. Developers should be empowered to do ops, and this is a great place to start. Actions do not require different teams to approve or implement. It can streamline the work it takes to innovate, and innovation at this level will work its way up to the business as the data in Accelerate shows over and over again.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/alnutile/codenames">Example Repo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://alfrednutile.info/posts/sod/">Intro Post to all things State of DevOps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/shivammathur/setup-php">PHP Actions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="follow-up">Follow Up&lt;/h2>
&lt;ul>
&lt;li>I will work on using CodeClimate as a code check action since this works with so many languages and seems to plugin easily using docker&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www.mindtools.com/pages/article/build-measure-learn.htm">https://www.mindtools.com/pages/article/build-measure-learn.htm&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">State of DevOps Report 2019&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339">Accelerate&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>(&lt;a href="https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D">https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D&lt;/a>) &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>&lt;a href="https://semver.org">Semantic Verision&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>laravel</category><category>ci</category><category>cd</category><category>accelerate</category><category>devops</category></item><item><title>Laravel Sail and M1 Mac</title><link>https://alfrednutile.info/posts/sail/</link><pubDate>Sun, 23 May 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/sail/</guid><description>&lt;p>Some notes to self will add more after time if needed.&lt;/p>
&lt;h2 id="mac-m1">Mac M1&lt;/h2>
&lt;p>Had a MySQL error:&lt;/p>
&lt;pre>&lt;code>ERROR: no matching manifest for linux/arm64/v8 in the manifest list entries
&lt;/code>&lt;/pre>&lt;p>All I had to do was update &lt;code>docker-composer.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code>File: docker-compose.yml
24: mysql:
25: image: 'mysql:8.0'
26: ports:
27: - '${FORWARD_DB_PORT:-3306}:3306'
&lt;/code>&lt;/pre>&lt;p>To:&lt;/p>
&lt;pre>&lt;code> mysql:
image: mariadb:10.5.8
ports:
- &amp;quot;${FORWARD_DB_PORT:-3306}:3306&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Then I disabled &lt;code>meilisearch&lt;/code> else everytime I ran &lt;code>sail anything&lt;/code> it would stop the docker container.&lt;/p>
&lt;pre>&lt;code>File: docker-compose.yml
50: # meilisearch:
51: # image: &amp;quot;getmeili/meilisearch:latest&amp;quot;
52: # ports:
53: # - &amp;quot;${FORWARD_MEILISEARCH_PORT:-7700}:7700&amp;quot;
54: # volumes:
55: # - &amp;quot;sailmeilisearch:/data.ms&amp;quot;
56: # networks:
57: # - sail
&lt;/code>&lt;/pre>&lt;p>I will have to come back to this one to fix it some info is &lt;a href="https://github.com/meilisearch/MeiliSearch/issues/1195">here&lt;/a>&lt;/p>
&lt;h2 id="xdebug">Xdebug&lt;/h2>
&lt;p>The article is a great start &lt;a href="https://medium.com/geekculture/debug-your-laravel-sail-applications-with-xdebug-160ad70fcd41">here&lt;/a>&lt;/p>
&lt;p>But a couple of things I think need to be made more clear or might even be an error:&lt;/p>
&lt;p>Set the &lt;code>SAIL_DEBUG=true&lt;/code> not &lt;code>SAILDEBUG=true&lt;/code>&lt;/p>
&lt;p>When running the build do:&lt;/p>
&lt;pre>&lt;code>❯ sail build --no-cache --build-arg XDEBUG=true
&lt;/code>&lt;/pre>&lt;p>To pass the args. And as he notes run &lt;code>sail php -v&lt;/code> after sail is running to make sure you do not see any errors and xdebug is working.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/geekculture/debug-your-laravel-sail-applications-with-xdebug-160ad70fcd41">Xdebug&lt;/a>&lt;/li>
&lt;li>Some overall m1 issues &lt;a href="https://github.com/laravel/sail/issues/104">here&lt;/a>&lt;/li>
&lt;/ul></description><category>laravel</category><category>note</category></item><item><title>Being on Offense When it Comes to Day to Day Scheduling</title><link>https://alfrednutile.info/posts/scheduling/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/scheduling/</guid><description>&lt;img src="images/featured-time.png" width="800" class="center">
&lt;blockquote>
&lt;p>How do we go on the &amp;ldquo;offensive&amp;rdquo; leaving behind what has only become a &amp;ldquo;defensive&amp;rdquo; effort to save our day from becoming unproductive?  Leaving us at the end of the day feeling like we need to make up some time after work or the weekend&lt;/p>
&lt;/blockquote>
&lt;p>This post will be a look at how to manage your time in the midst of what can seem to be endless distractions and too many things needing to be done at once. It may seem mostly from a developer&amp;rsquo;s perspective, but it might help others who feel like they no longer have enough time to focus during the workday to get their actual work done. In the end, I hope to show that part of being a professional developer or many other roles is knowing your limitations of time. Knowing your limits, you can say &amp;ldquo;Yes&amp;rdquo; to requests with confidence and &amp;ldquo;No&amp;rdquo; to requests because you can see the more negative significant impact of saying yes will have on the project and on you as a professional.&lt;/p>
&lt;h2 id="day-to-day-popcorn-interactions">Day to day &amp;ldquo;popcorn&amp;rdquo; interactions&lt;/h2>
&lt;p>Even before all the chat systems we now use, the day could quickly have been filled with numerous interruptions. Working in an office with your teammates knocking on your door for small talk while you are working through complex coding logic only to have it all topple over like a house of cards when that person asks, &amp;ldquo;how was your weekend&amp;rdquo; or &amp;ldquo;have you see the show….&amp;rdquo; Or &amp;ldquo;what are you working on?&amp;rdquo;&lt;/p>
&lt;p>And now, with these chat systems as an integral part of our remote work-life, we further have our time filled with &amp;ldquo;obligations&amp;rdquo; to respond to others. How do we go on the &amp;ldquo;offensive&amp;rdquo; leaving behind what has only become a &amp;ldquo;defensive&amp;rdquo; effort to save our day from becoming unproductive?  Leaving us at the end of the day feeling like we need to make up some time after work or the weekend (btw, I typed workend here by accident, hmm). Or maybe even worse, feeling like you are no longer able to experience those creative flows and those days that leave you with a sense of accomplishment.&lt;/p>
&lt;h2 id="setting-expectations">Setting expectations&lt;/h2>
&lt;p>To begin with, I want to first make clear that this strategy will not try to achieve an eight-hour day of total flow or focus. You will never get there, nor do you need to. Sure, you might have enjoyed that at the start of your career, but looking back, I think many of those hours working had really been learning your skills, so that what took eight hours then takes two hours now. This does not mean you have six hours to do more. But my goal is to help you find those two to four hours a day to once again have that feeling that you created something or completed something that really was the work you knew you had to do.&lt;/p>
&lt;p>With this in mind, part of the work is figuring out how to manage those other hours you have in the day to consistently protect the hours you need to get your job done. One thing I think that has to be realized here is the &amp;ldquo;flow&amp;rdquo; that you might have experienced in the early years; hacking on code for eight hours a day is actually to your detriment today. Anyone working on a feature or project needs time to check out from &amp;ldquo;the flow&amp;rdquo; to make sure they are still on target. This &amp;ldquo;small batch&amp;rdquo; flow is key to pivot and not getting so attached to your work that you avoid change.&lt;/p>
&lt;blockquote>
&lt;p>In software organizations, the capability to work and deliver in small batches is especially important - Forsgren PhD, Nicole; Humble, Jez; Kim, Gene. Accelerate (p. 131)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Lean manufacturers discovered the benefits of small batches decades ago. - Ries, Eric. The Lean Startup: How Today&amp;rsquo;s Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses (p. 186).&lt;/p>
&lt;/blockquote>
&lt;h2 id="scheduling">Scheduling&lt;/h2>
&lt;p>Depending on your situation, there are different options here. Sometimes you are working on a feature with deadlines and have to get a certain amount of work done in a certain amount of time. But even then, you have to communicate with your boss about your progress or lack of it. Doing this in a scheduled manner can help you get lost in work and have one of those &amp;ldquo;wow, what happened to the day&amp;rdquo; moments not checking in with anyone to proactively give them a sense of the status of the work in progress. This puts you in the &amp;ldquo;offensive&amp;rdquo; mode by proactively giving reports about the status of the work being done. A manager should listen to your situation, and with your help, assess if an update should be given to the product owners. Also giving your team time to consider the overall timeline and not end up having to pull all-nighters just to create something that is a fraction of what it should have been.&lt;/p>
&lt;blockquote>
&lt;p>By creating a safer system of work, the value they created included fewer late night cram sessions, with more time to develop new, innovative features. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 137)&lt;/p>
&lt;/blockquote>
&lt;p>To do this, break up your day into chunks ahead of time. For example, Monday, the first thing is to set up your calendar for all the times you need to get the work done for the week. For example, if you work better in the morning, protect that with your life. Need to take a walk in the day to get going again, schedule that in. You need to put this in a system so when you are asked if you can attend meeting x or y you can say &amp;ldquo;No&amp;rdquo; and then suggest options. Either way, part of being a professional is knowing what it takes to produce professional-level work. And staying up late at night when you are tired and worn out from a day of meetings will not produce that level of work ever.&lt;/p>
&lt;blockquote>
&lt;p>part of being a professional is knowing what it takes for you to produce professional-level work&lt;/p>
&lt;/blockquote>
&lt;p>Again you are not blocking out six hours or four hours. Aim for small batches of forty-five-minute chunks. During that time, close all chat rooms, do not multitask (more on that shortly), close email, close Twitter, close all social networks, etc. Turn off phone notifications (you can typically set your phone to allow calls from people in your contact even when silenced). Then after this time is up, open all those up again, work comms especially and see if anything needs your attention. Or walk, stretch, do those other things that make you able to work well. For me, immediately after coming out of a 45-minute flow, I will write in my notepad (Evernote, Bear, Notes, whatever) what I was working on and where I left off; this way I can more easily get back into it after the check-in phase.&lt;/p>
&lt;h2 id="something-came-up-i-must-do-it-now">Something came up I must do it now?&lt;/h2>
&lt;p>Those moments that you do come up for air and look at all the different communication channels and some things need your attention; what do you do? Well, each situation will vary, but here are some ways to assess and manage them.&lt;/p>
&lt;p>First, chat systems like Slack, Teams etc. are good tools, but sometimes you can save time by just taking a moment to do audio and if needed, video with the person making the request. Then you can talk with them about when do they really need this request to be taken care of. Sometimes just by having the moment of more personal communications, everyone can take a breath and truly assess how urgent the situation is.&lt;/p>
&lt;p>Then if it is something that truly needs to be done now, you should take a moment to look at your schedule. If there is something else due this week and you now no longer have time to do that, outside of working the weekend or late at night, and this person is your boss, let them know. Sometimes managers need to hear that cost to what they are asking. &amp;ldquo;If I do this today that that other feature can not get done till next week, and the chain effect goes on from there!&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>Saying &amp;ldquo;Yes&amp;rdquo; to everything is not going to help anyone in the long run.&lt;/p>
&lt;/blockquote>
&lt;p>Saying &amp;ldquo;Yes&amp;rdquo; to everything is not going to help anyone in the long run. As you are starting out, you may feel this is key to getting more work, or getting ahead, and honestly, it might be. Still, at some point, part of being a professional is knowing when the direction of the situation will have a negative impact on the project. This can be from you knowing you have to cut corners in the code or security or what not to get the other work done. Or knowing that you have to work late nights and weekends will lead to less quality work, and eventually, you will be burnt out. Come to think of it, most of my &amp;ldquo;oh carp moments, e.g. a deleted database, deleted application, destroyed server, etc., happened when I was tired and working late or lacked sleep.&lt;/p>
&lt;p>Another thing to consider is that people on the other end of the request, once they understand how busy you are and know that you can give it your full attention at such a time, understand and be ok with you not doing it now. Ironically I was on the other end of this last week, assuming my important task would have been first on a colleague&amp;rsquo;s schedule. One video chat later reminded me he has a few other things on his immediate list to get to first, and I was reminded my request is not the only one on his plate.&lt;/p>
&lt;p>Second, by actually asking when is this needed, you can see how it can fit into the schedule you already made for your week. One good way to do this is to say, &amp;ldquo;What is the latest this can get done&amp;rdquo; and then see how it fits into your schedule. Heck, you might have an opening tomorrow, and they want it next week, but you can just get it done. Because you took time to slot out your schedule, you can be more &amp;ldquo;offensive&amp;rdquo; in your scheduling than defensive and reacting to all the &amp;ldquo;newest&amp;rdquo; things coming in.&lt;/p>
&lt;h2 id="saying-no">Saying No&lt;/h2>
&lt;p>Saying &amp;ldquo;No&amp;rdquo; or &amp;ldquo;Not now&amp;rdquo; for some might be hardest part of all of this, especially when we are coming up in your career. It may be scary since you want to be the go-to person the next time something important comes up. But saying no the right way means saying yes to the overall goal of a project, team, and company culture. You are saying &amp;ldquo;no&amp;rdquo; not because you do not want to do something but because you are actually saying &amp;ldquo;no&amp;rdquo; to some other item on your calendar by saying &amp;ldquo;yes&amp;rdquo; to this request. You are saying &amp;ldquo;no&amp;rdquo; to the quality of another feature down the line. Or you might be saying &amp;ldquo;no&amp;rdquo; to some training you had on your schedule for a month now. Or maybe saying &amp;ldquo;no&amp;rdquo; to technical-debt, or the personal time needed so you can remain healthy.&lt;/p>
&lt;img src="images/saying-no.png" width="600" class="center">
&lt;p>One immediate place to consider saying &amp;ldquo;no&amp;rdquo; to is meetings. Not to all meetings but ones you do not have to be in. I know it can feel nice at first to be asked to meetings, but many of them you really are not needed. Let&amp;rsquo;s say you have a standup every day and retro at the end of two weeks. Then you have a planning meeting as well that can be one to two hours long. Your day and week already have several scheduled meetings breaking it up. And after you put your 45-minute chunks on the calendar, you might not have a ton of other time for these impromptu meetings. So you can say no to those meetings, or if the meeting is needed, try to tie it to the end of another meeting, so you are not having two meetings breaking up your time.&lt;/p>
&lt;p>Or course sometimes the meeting is required and takes hours, again a manager needs to realize the cost of this. This meeting cost of getting a feature X done this week and feature Y next week! Do not assume they know this. And if that manager can not consider that cost or thinks you can just work the weekend, you really need to consider if this is the right team for you.&lt;/p>
&lt;h2 id="walk-away-from-chat">Walk away from chat&lt;/h2>
&lt;p>When will email go away for work communications now that most of it takes place in chat? Most of us are currently on some type of chat system for work, often trying to manage several conversations at once because we do not want to wait for the other person to write back. Sure chat is a very fantastic tool helping us more easily share information when a phone call or email would be too much or too slow, but it has its limits.&lt;/p>
&lt;p>As mentioned above, the key to any of this is turning these things off, including chat when you start your focus time. In forty-five minutes flow, NOTHING is going to happen that you can not miss. Sure, you need to keep up with things but NOT every minute of the day and not five different things at once.&lt;/p>
&lt;p>When you are on your &amp;ldquo;chat&amp;rdquo; time, I would suggest knowing when it is best to turn a chat question into an audio call (video can sometimes depend on the situation). This can save you time waiting in the chat for someone to type back and prevent the complications from trying to explain something complex in chat.&lt;/p>
&lt;img src="images/waiting.png" width="600" class="center">
&lt;p>Even though, for me, there is sometimes a productivity buzz that comes popping around multiple chats &amp;ldquo;helping out.&amp;rdquo; But rarely does that last long or end up going well, from my experience. Either I lose momentum for the work I am supposed to be getting done, or before long, I get wires mixed in one chat vs. another and end up causing more work and confusion than I might have saved.&lt;/p>
&lt;h2 id="too-much-wip">Too much WIP&lt;/h2>
&lt;p>Another common issue with saying &amp;ldquo;yes&amp;rdquo; to all things is you end up having too much work in progress or WIP. I will quote a couple of books about this to show that it is not a good place to be. Hopefully this will help you to see that in saying &amp;ldquo;No&amp;rdquo; you are preventing this condition from happening which is proven to lead to projects and teams failing.&lt;/p>
&lt;blockquote>
&lt;p>To enable fast and predictable lead times in any value stream there is usually a relentless focus on creating a smooth and even flow of work, using techniques such as small batch sizes, reducing work in process (WIP), preventing rework to ensure we don’t pass defects to downstream work centers, and constantly optimizing our system toward our global goals.- Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 53)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Small batch sizes result in less WIP, faster lead times, faster detection of errors, and less rework. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 69)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Almost every Lean Startup technique we’ve discussed so far works its magic in two ways: by converting push methods to pull and reducing batch size. Both have the net effect of reducing WIP. - Ries, Eric. The Lean Startup: How Today&amp;rsquo;s Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses (p. 201)&lt;/p>
&lt;/blockquote>
&lt;h2 id="embrace-interruptions">Embrace interruptions&lt;/h2>
&lt;p>Part of this strategy is something it took me a while to realize, and maybe having a kid helped with this, you will be interrupted, and it will impact your focus; the question is how to minimize the impact. Be rigid enough that you create the space you need to get your work done, but at the same time be flexible enough to respond to these interruptions knowing that since you planned out your schedule, you can shift things around.  And if all the pieces do not fit, you can communicate to your boss what will be impacted, days before it becomes a &amp;ldquo;surprise.&amp;rdquo;&lt;/p>
&lt;blockquote>
&lt;p>Be rigid enough that you create the space you need to get your work done, but at the same time be flexible enough to respond to these interruptions&lt;/p>
&lt;/blockquote>
&lt;p>As I noted above, I have a scratch pad that I jot down notes about &amp;ldquo;Where I left off&amp;rdquo; so I can jump back in after the call or break. Other than that, depending on the size of the interruption, you might need to adjust the rest of your schedule. Trying to make up the time rarely goes well, from my experience. Sure, you can sacrifice that lunch away from the desk or mid-day walk, but you are in a marathon, not a sprint.&lt;/p>
&lt;h2 id="the-illusion-of-multitasking">The illusion of multitasking&lt;/h2>
&lt;p>Ok, this is a tricky subject. So many people swear they can do this. So, for now, I will just talk to those who feel it is not working for them.&lt;/p>
&lt;p>I would point you to these books:&lt;/p>
&lt;blockquote>
&lt;p>Studies have shown that the time to complete even simple tasks, such as sorting geometric shapes, significantly degrades when multitasking. Of course, because our work in the technology value stream is far more cognitively complex than sorting geometric shapes, the effects of multitasking on process time is much worse. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (pp. 65-66)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The truth is wholly the opposite in almost every circumstance, if neuroscience is to be believed. In study after study, we’ve found that we are slower at completing tasks when we switch from one activity to another than we are when we simply repeat the same activity. In other words, if you shut down every tab of your browser, mute your phone, and close your email inbox, you’ll finish the memo you’re writing in significantly less time. - Headlee, Celeste. Do Nothing (p. 95)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The truth is wholly the opposite in almost every circumstance, if neuroscience is to be believed. In study after study, we’ve found that we are slower at completing tasks when we switch from one activity to another than we are when we simply repeat the same activity. In other words, if you shut down every tab of your browser, mute your phone, and close your email inbox, you’ll finish the memo you’re writing in significantly less time. - Headlee, Celeste. Do Nothing (p. 95). Potter/Ten Speed/Harmony/Rodale. Kindle Edition.&lt;/p>
&lt;/blockquote>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>I wrote this because it took me a while to really understand how important managing my schedule is. Hopefully, with the above information, you can start to see your day, week, and weeks adding up to getting &amp;ldquo;more&amp;rdquo; of the right things done both for work and for your career and health.  Feel free to join our Stratus Open Office hours if you have any questions or post on Yammer&amp;rsquo;s comments.&lt;/p></description><category>devops</category><category>day-to-day</category></item><item><title>Ongoing: Links and Notes About DevOps Transformation Using the Accelerate Data and Strategies</title><link>https://alfrednutile.info/posts/sod/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/sod/</guid><description>&lt;p>Next time I needed this info, I just wanted to make sure that I have the links I need concerning the Accelerate book and Software Delivery Performance. So I will use this page to continue to add info about these resources.&lt;/p>
&lt;p>The links below really are all related as the authors work together in the different books, videos and research papers.&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>The most critical link &lt;a href="https://www.devops-research.com/research.html#capabilities">State of DevOps Reports&lt;/a>&lt;/p>
&lt;p>As they go into articles that are key to making a great team, a great culture, and a thriving company&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/solutions/devops/devops-culture-transformational-leadership">DevOps culture: Transformational leadership&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/solutions/devops/devops-culture-job-satisfaction">DevOps culture: Job satisfaction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/solutions/devops/devops-culture-westrum-organizational-culture">DevOps culture: Westrum organizational culture&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>And so much more.&lt;/p>
&lt;h2 id="accelerate-book">Accelerate Book&lt;/h2>
&lt;p>First, the data supporting the following makes it all worth trying since it is not a leap of faith but trust in data. And if this data is correct, then along the way, we can avoid many of the pitfalls I have seen or been a part of in the day-to-day delivery of software. While at the same time creating a culture of learning and growing and inevitable success for the company.&lt;/p>
&lt;img src="images/accelerate_book.png" width="300" float="left">
&lt;p>Purchase &lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339">here&lt;/a>&lt;/p>
&lt;p>This book and it&amp;rsquo;s data lead into or supports a lot of the videos and books below.&lt;/p>
&lt;blockquote>
&lt;p>At the heart of this acceleration is software - Forsgren PhD, Nicole; Humble, Jez; Kim, Gene. Accelerate (p. 36). IT Revolution Press. Kindle Edition.&lt;/p>
&lt;/blockquote>
&lt;h2 id="software-performance-measured">Software Performance Measured&lt;/h2>
&lt;p>With the above, we can measure the results of good habits.
The outcome is not the metrics but just data to show how we are doing and what habits and systems we might need to practice or adjust.&lt;/p>
&lt;ul>
&lt;li>Working in small batches&lt;/li>
&lt;li>Releasing often to production&lt;/li>
&lt;li>Pain-free deployment&lt;/li>
&lt;li>Test coverage&lt;/li>
&lt;li>Automation (a key factor in many of the high and elite performing teams)&lt;/li>
&lt;li>Minimal change approval process&lt;/li>
&lt;li>A culture that learns from mistakes and does not punish&lt;/li>
&lt;li>Shift left on security&lt;/li>
&lt;li>Shift left on quality&lt;/li>
&lt;li>Work in Process Limits&lt;/li>
&lt;li>Customer Feedback&lt;/li>
&lt;/ul>
&lt;p>And more, that the developers can work on in their day to day reducing
the focus on getting a feature done as quickly as possible, knowing that
in the long run, they are building a better product and culture that will lead to their company&amp;rsquo;s long-term success and career.&lt;/p>
&lt;h2 id="yearly-report-accelerate-state-of-devops">Yearly Report Accelerate State of DevOps&lt;/h2>
&lt;p>&lt;img src="images/sodreport.png" alt="">&lt;/p>
&lt;p>The above chart comes from &lt;a href="https://cloud.google.com/devops/">https://cloud.google.com/devops/&lt;/a>, but I have a shortcut to the PDF &lt;a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">here&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Begin by focusing on the capabilities outlined in our research; they provide predictive guidelines to improve your technology delivery and deliver value. Start with foundations: Basic automation (such as version control and automated testing), monitoring, clear change approval processes, and a healthy culture.&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-four-key-metrics-seen-in-the-above-report">The Four Key Metrics (seen in the above report)&lt;/h2>
&lt;p>The above SOD report talks about many different data points to consider; below, I am sharing the below to focus for a moment on these metrics that I think can, right now, help you begin to measure where you are and grow along the way.&lt;/p>
&lt;p>Page 18 of the &lt;a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">report&lt;/a>&lt;/p>
&lt;img src="images/sod_metrics.png">
&lt;p>You can read and try these for your team &lt;a href="https://www.devops-research.com/quickcheck.html">here&lt;/a>&lt;/p>
&lt;p>Or use their opensource system to measure your own &lt;a href="https://github.com/GoogleCloudPlatform/fourkeys">here&lt;/a>&lt;/p>
&lt;h2 id="culture">Culture&lt;/h2>
&lt;p>All these books and papers have a focus on culture, in the end a culture of Trust is the goal and without that none of this will work.&lt;/p>
&lt;p>The chart that caught my attention is this one:&lt;/p>
&lt;img src="images/culture.png" width="800">
&lt;p>The goal is to build the Generative culture. This is the only way to run at the &amp;ldquo;Elite&amp;rdquo; speed since this has a realistic reaction failure which comes from trying new things, experimenting, and taking responsibility.&lt;/p>
&lt;p>Again from what I see most of what is holding teams back is not the technology.&lt;/p>
&lt;h2 id="roi">ROI&lt;/h2>
&lt;img src="images/roi.png" width="500">
&lt;p>&lt;a href="https://cloud.google.com/resources/roi-of-devops-transformation-whitepaper">Sign Up for Whitepaper&lt;/a>&lt;/p>
&lt;p>This one I am still wrapping my head around.&lt;/p>
&lt;blockquote>
&lt;p>Traditionally, IT has been viewed as a cost center and, as such, was expected to justify its costs and return on investment (ROI) upfront. However, IT done right is a value driver and innovation engine. Companies that fail to leverage the transformative, value-generating power of IT risk being disrupted by those who do. What has been missing is an analytical, data-driven framework to forecast the value and justify investment in DevOps transformations. This white paper helps to fill that gap. While the methodology is not exhaustive, it does outline important considerations.&lt;/p>
&lt;/blockquote>
&lt;p>Maybe a few more reads, and I will come back with more quotes and links.&lt;/p>
&lt;h2 id="videos">Videos&lt;/h2>
&lt;p>There are some great videos on YouTube by the authors. They continue to iterate their work and share the results at conferences.&lt;/p>
&lt;p>I am collecting a list &lt;a href="https://www.youtube.com/playlist?list=PLL8JVuiFkO9KNxX1VPT04-rAZqRI_G1j4">here&lt;/a>&lt;/p>
&lt;p>Also, they give you a feel for how authentic these authors are in their efforts.&lt;/p>
&lt;p>They come from the industry, they are not just speaking about theory, but they have seen the good and the bad.&lt;/p>
&lt;h2 id="devops-hanbook">DevOps Hanbook&lt;/h2>
&lt;img src="images/devops_handbook.png" width="400">
&lt;p>This is my current read and it is full of both encouraging and discouraging information. Discouraging in that I wish I read it years ago since it would have been great information to have along the way. And encouraging in seeing how common the struggles are like stressful deployments to production, weekend work hours, focusing on costs over speed, outsourcing the wrong things etc.&lt;/p>
&lt;p>Some quotes I saved so far:&lt;/p>
&lt;blockquote>
&lt;p>“Nordstrom started optimizing for speed instead of merely optimizing for cost.” — The DevOps Handbook:: How to Create World-Class Agility, Reliability, and Security in Technology Organizations by Gene Kim, Jez Humble, et al. https://a.co/aA64V05&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>“10 Deploys per Day” by John Allspaw and Paul Hammond, Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook: (p. 11). IT Revolution Press. Kindle Edition.&lt;/p>
&lt;/blockquote>
&lt;p>Is not just for Flickr, I am part of a team of only 8 developers and we are averaging 4 deployments to production a day. The site has numerous users using it during those hours.&lt;/p>
&lt;p>Lastly as seen in the quote below, allowing developers to perform using these methodologies leads to the success of the company.&lt;/p>
&lt;blockquote>
&lt;p>Furthermore, high performers were twice as likely to exceed profitability, market share, and productivity goals. And, for those organizations that provided a stock ticker symbol, we found that high performers had 50% higher market capitalization growth over three years. Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook: (p. 37). IT Revolution Press. Kindle Edition.&lt;/p>
&lt;/blockquote>
&lt;h2 id="continous-delivery-book">Continous Delivery Book&lt;/h2>
&lt;p>This book is the one that kicked it off for me years ago, thanks to &lt;a href="https://www.linkedin.com/in/robsherali/">Rob Sherali&lt;/a>. This book defines the technical how and why behind automating your delivery pipeline.&lt;/p>
&lt;blockquote>
&lt;p>Continuous Delivery Sounds Great, but Will It Work Here?: It&amp;rsquo;s not magic, it just requires continuous, daily improvement at all levels.&lt;/p>
&lt;/blockquote>
&lt;img src="images/ci_book.png" width="400">
&lt;p>&lt;a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">here&lt;/a>&lt;/p></description><category>devops</category><category>accelerate</category></item><item><title>Mocking, Python, Pytest</title><link>https://alfrednutile.info/posts/268/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/268/</guid><description>&lt;p>Ok this is going to be a collection of notes to self.&lt;/p>
&lt;p>This &lt;a href="https://medium.com/@bfortuner/python-unit-testing-with-pytest-and-mock-197499c4623c">post&lt;/a> does a good job of summing up some mock patterns with PyTest.&lt;/p>
&lt;p>I then had to mock the Snyk client which depended on the Requests library. I chose not to mock the requests library but the methods in the snyk library.&lt;/p>
&lt;p>The thing was the method I mocked returned the &amp;ldquo;Response&amp;rdquo; object and I wanted to use the &lt;code>json()&lt;/code> feature of that object/class to return the results.&lt;/p>
&lt;p>45 minutes later this worked.&lt;/p>
&lt;pre>&lt;code> def test_get_week_of_scans(self, mocker):
mocker.patch.object(SnykClient, 'post')
response = Response()
response.status_code = 200
response.reason = &amp;quot;OK&amp;quot;
response.encoding = &amp;quot;utf-8&amp;quot;
results = json.dumps({
&amp;quot;results&amp;quot;: [
{
&amp;quot;count&amp;quot;: 1989
}
]
}).encode('utf-8')
response._content = results
SnykClient.post.return_value = response
client = SnykReport()
results = client.get_report_for_current_week(
&amp;quot;98873-8ecc-46f0-b077-39322abc4390&amp;quot;)
assert results == 1989
&lt;/code>&lt;/pre>&lt;p>I no longer hit their API and &lt;code>post&lt;/code> returns the response I wanted.&lt;/p></description><category>python</category><category>testing</category><category>mocking</category><category>pytest</category></item><item><title>Windows Dev Box Try 3 2020</title><link>https://alfrednutile.info/posts/267/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/267/</guid><description>&lt;p>Yes this is try number 3. See &lt;a href="https://alfrednutile.info/posts/247">here&lt;/a> for the first 2 goes at it.&lt;/p>
&lt;p>With WSL2 out and a great laptop I wanted to give this another try.&lt;/p>
&lt;h2 id="mariadb">MariaDB&lt;/h2>
&lt;p>Even though the install is super simple see &lt;a href="https://alfrednutile.info/posts/267/">https://alfrednutile.info/posts/267&lt;/a>&lt;/p>
&lt;p>I still end up having to do:&lt;/p>
&lt;pre>&lt;code>$ sudo mysql -u root # I had to use &amp;quot;sudo&amp;quot; since is new installation
mysql&amp;gt; USE mysql;
mysql&amp;gt; UPDATE user SET plugin='mysql_native_password' WHERE User='root';
mysql&amp;gt; FLUSH PRIVILEGES;
mysql&amp;gt; exit;
$ service mysql restart
&lt;/code>&lt;/pre>&lt;p>To allow me to then use this command, for example &lt;code>maraidb -uroot -proot&lt;/code> otherwise I have &amp;ldquo;Error connecting on localhost&amp;rdquo; type errors.&lt;/p>
&lt;p>If using MySQL this worked really well &lt;a href="https://phoenixnap.com/kb/access-denied-for-user-root-localhost">here&lt;/a>&lt;/p>
&lt;h2 id="xdebug">Xdebug&lt;/h2>
&lt;p>Using my previous notes in the above post and &lt;a href="https://gcompagnon.github.io/wsl2/xdebug/vscode/php-fpm/2019/09/17/WSL2_php_VSCode_Xdebug.html">https://gcompagnon.github.io/wsl2/xdebug/vscode/php-fpm/2019/09/17/WSL2_php_VSCode_Xdebug.html&lt;/a>&lt;/p>
&lt;p>I removed the reference to the host:&lt;/p>
&lt;pre>&lt;code>[xdebug]
xdebug.remote_enable=1
xdebug.remote_autostart=1
xdebug.remote_handler=dbgp
xdebug.remote_port=9009
xdebug.remote_log = /var/log/xdebug.log
&lt;/code>&lt;/pre>&lt;p>in Visual Code my launch.json ended up looking like this:&lt;/p>
&lt;pre>&lt;code>{
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [
{
&amp;quot;name&amp;quot;: &amp;quot;Listen for XDebug&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;php&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;hostname&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
&amp;quot;port&amp;quot;: 9009
},
{
&amp;quot;name&amp;quot;: &amp;quot;Launch currently open script&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;php&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;program&amp;quot;: &amp;quot;${file}&amp;quot;,
&amp;quot;hostname&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
&amp;quot;cwd&amp;quot;: &amp;quot;${fileDirname}&amp;quot;,
&amp;quot;port&amp;quot;: 9009
}
]
}
&lt;/code>&lt;/pre></description><category>windows</category><category>linux</category><category>wsl</category><category>php</category></item><item><title>Using Python Lambda behind and ALB</title><link>https://alfrednutile.info/posts/266/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/266/</guid><description>&lt;p>Just a quick note to self about ALB and Lambda. When using Lambda behind and ALB for routing your response has to be formatted properly else you will get a 502.&lt;/p>
&lt;p>&lt;a href="https://pypi.org/project/alb-response">https://pypi.org/project/alb-response/&lt;/a> solved this problem.&lt;/p>
&lt;pre>&lt;code>from alb_response import alb_response
def lambda_handler(event, context):
response_dict = process_the_event(event)
return alb_response(
http_status=200,
json=response_dict,
is_base64_encoded=False,
)
&lt;/code>&lt;/pre>&lt;p>The results are easy enough to do by hand but I had a bit of time really finding out the format to respond with other than JavaScript and that casing there was a bit confusing.&lt;/p></description><category>aws</category><category>serverless</category><category>note2self</category></item><item><title>Suggestions Around Building a Good Development Team in Parallel to Building a Good Product</title><link>https://alfrednutile.info/posts/265/</link><pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/265/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/bi2dv6slg1dkiyo/capheader.png?dl=0" alt="">&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;m not a great programmer; I&amp;rsquo;m just a good programmer with great habits - Kent Beck.&lt;/p>
&lt;/blockquote>
&lt;p>Behind any project there has to be a processes in place to build a culture of good coding habits for developers and a process to help &amp;ldquo;enforce&amp;rdquo; it. Without such a foundation in place the product will never result into a long term sustainable solution. Below are some items I would like to highlight that I believe can help make a solid application and grow a solid team.&lt;/p>
&lt;h2 id="training-and-an-introduction-to-our-coding-culture">Training and an Introduction to Our Coding Culture&lt;/h2>
&lt;p>The first two points are not easily automated. Training is key to a successful application. Developers cannot just jump in and deliver features they first must have time to learn what is expected of them when it comes to the day to day team and culture they are becoming a part of.&lt;/p>
&lt;p>For one, they need time to read the teams documentation so they get a sense of what is expected of them. For example, they are expected to push code often to their branch to have other developers on their teams to review it instead of the more common assumption of pushing days and days of work all at once and hoping it goes to staging moments after that.&lt;/p>
&lt;p>Then they need a few days, at least, to shadow or pair with another developer. This helps to learn a lot about the &amp;ldquo;culture&amp;rdquo; of our process. They get to see how seasoned developers take on a task, set up their work environment, and more. This helps them to build confidence in knowing what the rythym of their day to day should look like.&lt;/p>
&lt;h2 id="github-and-the-pull-request-workflow">GitHub and the Pull Request Workflow&lt;/h2>
&lt;p>All developers, new and seasoned, have to have their code reviewed before it can be merged into the master branch. This process helps the new developer to grow in understanding that can only come from doing. But even seasoned developers learn from this and more importantly have a second set of eyes to catch any issues.&lt;/p>
&lt;blockquote>
&lt;p>When you actually sit down to write some code, you learn things that you didn’t get from thinking about them in modeling terms…there is a feedback process there that you can only really get at from executing some things and seeing what works - Martin Fowl&lt;/p>
&lt;/blockquote>
&lt;p>This is a daily process and we strive to review small batches of code not waiting till the feature is &amp;ldquo;ready&amp;rdquo;.&lt;/p>
&lt;p>Yes, this slows down the process of getting code to staging but it speeds up the long term development, stability and flexibility of any application by making sure the foundation is solid and all of the adjoining features fit well together.&lt;/p>
&lt;h2 id="learning-how-to-quote-features">Learning how to Quote Features&lt;/h2>
&lt;blockquote>
&lt;p>We code in the context of our ability to quote a task - Alfred Nutile&lt;/p>
&lt;/blockquote>
&lt;p>This one means a lot to me and without this skill, all these other goals come under the undue pressure of time.&lt;/p>
&lt;p>There are numerous skills we introduce to help with this task. One of them is keeping in mind that anything quoted is not just a new feature but it is part of a bigger application, and it always takes time to fit that into place.&lt;/p>
&lt;p>Lastly, there is the concept of &amp;ldquo;done done&amp;rdquo; and all the aspects of what that means. A feature has to have tests in place, architectural reference documents, etc. All these things have to be part of the quote.&lt;/p>
&lt;h2 id="travis-ci-and-test-coverage">Travis CI and Test Coverage&lt;/h2>
&lt;blockquote>
&lt;p>First, starting with a test means that we have to describe what we want to achieve before we consider how. - Growing Object Oriented Software&lt;/p>
&lt;/blockquote>
&lt;p>Another key aspect of our workflow is tests come first. We do not do TDD (Test Drive Development) per se, but we do testing that guides our code. It does not happen after the code and TravisCI will fail the build if the coverage drops below 70%.&lt;/p>
&lt;p>We are also not aiming for 100% coverage. We are aiming for enough that we can move forward with confidence with what we are coding but also change with confidence when the business needs change.&lt;/p>
&lt;h2 id="travis-ci-and-our-built-in-quality-checker">Travis CI and our built-in Quality Checker&lt;/h2>
&lt;p>Our Travis build system uses an Open-Source tool called PhpMetrics for measuring the &amp;ldquo;quality&amp;rdquo; of the code. Of course, the definition of quality code can easily be debated but in this case, we need to unify around something so we can make apps that are consistent for many reasons.&lt;/p>
&lt;p>For one, developers from other teams or support can come in and have confidence that the code base is not full of hard to read functions, huge classes or other patterns that make the application harder to support, update or scale.&lt;/p>
&lt;p>We focus on just four of the many metrics and by using data from a number of our previous applications, we found a median that keeps out of the way for the most part. And when it does block a build there are docs to help understand the issue and tidy up the code to pass these metrics.&lt;/p>
&lt;p>The ones we focus on are, you can learn more at their site which I link in the bottom of this:&lt;/p>
&lt;ul>
&lt;li>Bugs&lt;/li>
&lt;li>Difficulty&lt;/li>
&lt;li>Afferent Coupling&lt;/li>
&lt;li>Efferent Coupling&lt;/li>
&lt;/ul>
&lt;h2 id="travis-ci-and-static-analysis">Travis CI and Static Analysis&lt;/h2>
&lt;p>Finally, we run an Open-Source tool call PHPStan.&lt;/p>
&lt;blockquote>
&lt;p>PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code.&lt;/p>
&lt;/blockquote>
&lt;p>This is just one more layer of automation to make sure all our code follows a certain level of coding patterns and standards. On top of that, it catches issues that our tests did not see or cover helping us fix bugs that otherwise would have been found in production.&lt;/p>
&lt;p>So with these processes, and more to come, teams using Cloud Application Platform can build applications that scale without sacrificing security, speed, and quality. Also, do I believe these processes can create better developers.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://phpmetrics.org/">https://phpmetrics.org/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/phpstan/phpstan">https://github.com/phpstan/phpstan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://travis-ci.com/">https://travis-ci.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html">https://datasift.github.io/gitflow/IntroducingGitFlow.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@alnutile/we-code-in-the-context-of-our-quoting-dab391fe0881">https://medium.com/@alnutile/we-code-in-the-context-of-our-quoting-dab391fe0881&lt;/a>&lt;/li>
&lt;/ul></description><category>team</category><category>coding standards</category></item><item><title>Lambda Tips</title><link>https://alfrednutile.info/posts/264/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/264/</guid><description>&lt;p>@WIP&lt;/p>
&lt;h2 id="taking-advantage-of-a-running-lambda-function-and-its-state">Taking advantage of a running Lambda function and it&amp;rsquo;s state&lt;/h2>
&lt;p>&lt;a href="https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/">https://aws.amazon.com/blogs/compute/sharing-secrets-with-aws-lambda-using-aws-systems-manager-parameter-store/&lt;/a> under the section &lt;strong>Lambda function&lt;/strong> has a nice &amp;ldquo;trick&amp;rdquo; of setting above the class &lt;code>app = None&lt;/code>&lt;/p>
&lt;p>then later on it will see if that is set&lt;/p>
&lt;pre>&lt;code>def lambda_handler(event, context):
global app
# Initialize app if it doesn't yet exist
if app is None:
print(&amp;quot;Loading config and creating new MyApp...&amp;quot;)
config = load_config(full_config_path)
app = MyApp(config)
return &amp;quot;MyApp config is &amp;quot; + str(app.get_config()._sections)
&lt;/code>&lt;/pre>&lt;p>If it is set it will not try to set it again but take advantage of the state and use it.&lt;/p>
&lt;h2 id="keep-warm">Keep Warm&lt;/h2>
&lt;p>&lt;a href="https://read.acloud.guru/how-to-keep-your-lambda-functions-warm-9d7e1aa6e2f0">https://read.acloud.guru/how-to-keep-your-lambda-functions-warm-9d7e1aa6e2f0&lt;/a>&lt;/p>
&lt;p>You can set a bunch of schedulers and your Lambda function can check for the context of the request. If it is a scheduler event then just reply OK otherwise it should do what it normally would do.&lt;/p>
&lt;pre>&lt;code>import boto3
from config import Config
class KeepAwake:
def __init__(self):
&amp;quot;&amp;quot;&amp;quot; keey awake &amp;quot;&amp;quot;&amp;quot;
self.config = Config()
self.region = self.config.region
self.app_env = self.config.app_env
self.client = boto3.client('lambda', region_name=self.region)
self.functions = [
&amp;quot;foo&amp;quot;,
&amp;quot;bar&amp;quot;,
]
def run(self):
&amp;quot;&amp;quot;&amp;quot; interate over lambda functions &amp;quot;&amp;quot;&amp;quot;
for lam in self.functions:
print(&amp;quot;Invoking &amp;quot;, lam)
self.client.invoke(
FunctionName=lam,
InvocationType=&amp;quot;Event&amp;quot;
)
print(&amp;quot;Invoked &amp;quot;, lam)
&lt;/code>&lt;/pre>&lt;p>Is another way to look around and call those functions.&lt;/p></description><category>note2self</category><category>aws</category><category>python</category></item><item><title>Mocking in Python</title><link>https://alfrednutile.info/posts/263/</link><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/263/</guid><description>&lt;p>Serious note to self.&lt;/p>
&lt;p>I wanted to mock the Github module for python.&lt;/p>
&lt;p>My simple class will get the ID of the team.&lt;/p>
&lt;pre>&lt;code>from github import Github, Team
from dotenv import load_dotenv
import os
import sys
import json
class GetTeamId:
def __init__(self):
load_dotenv()
self.team_id = 5555
self.token = os.environ.get(&amp;quot;GITHUB_TOKEN&amp;quot;)
self.client = Github(self.token)
self.org = self.client.get_organization('FooBar')
def handle(self, team_name):
teams = self.org.get_teams()
for team in teams:
if team_name == team.name:
print(&amp;quot;Team id&amp;quot;, team.id)
return team.id
if __name__ == &amp;quot;__main__&amp;quot;:
client = GetTeamId()
team = sys.argv[1]
print(&amp;quot;Going to get team&amp;quot;, team)
client.handle(team)
&lt;/code>&lt;/pre>&lt;p>But I need test coverage on this so I made this test.&lt;/p>
&lt;pre>&lt;code>from unittest import TestCase
import unittest
from unittest.mock import patch, Mock
import json
from src.get_team_id import GetTeamId
class Team:
def __init__(self):
self.id = 4444444
self.name = &amp;quot;foo-team&amp;quot;
class TestGetTeamId(TestCase):
@patch(&amp;quot;src.get_team_id.Github.get_organization&amp;quot;)
def test_can_get_id(self, mock_github):
mock_github.return_value.get_teams.return_value = [
Team()
]
client = GetTeamId()
results = client.handle(&amp;quot;foo-team&amp;quot;)
self.assertEqual(4444444, results)
&lt;/code>&lt;/pre>&lt;p>Know how long that took!&lt;/p>
&lt;h2 id="example-two">Example Two&lt;/h2>
&lt;p>Mocking JIRA:&lt;/p>
&lt;pre>&lt;code>from unittest import TestCase
import unittest
from unittest.mock import patch, Mock
import json
from src.jira_ticket import JiraTicket
class TestJiraCreateTicket(TestCase):
@patch(&amp;quot;src.jira_ticket.JIRA.create_issue&amp;quot;)
def test_can_make_ticket(self, mock_jira):
mock_jira.return_value.create_issue.return_value.update.return_value = True
client = JiraTicket()
title = &amp;quot;(RENOVATE PR OPEN) Update dependency @ionic/core to v4.6.0 292416206&amp;quot;
project = &amp;quot;PENG&amp;quot;
message = &amp;quot;\nTitle: Foo Bar\nIssue Url: https://boo.baz\nState: open\n&amp;quot;
label = &amp;quot;renovate&amp;quot;
client.create_ticket(title, message, project, label)
mock_jira.assert_called_once()
&lt;/code>&lt;/pre>&lt;p>and the class:&lt;/p>
&lt;pre>&lt;code>import json
from dotenv import load_dotenv
from collections import Counter
from jira import JIRA
import os
class JiraTicket:
def __init__(self):
self.jira = None
self.auth()
def auth(self):
load_dotenv()
username = os.getenv(&amp;quot;JIRA_USERNAME&amp;quot;)
password = os.getenv(&amp;quot;JIRA_PASSWORD&amp;quot;)
self.jira = JIRA(server=&amp;quot;https://foo.atlassian.net&amp;quot;,
basic_auth=(username, password))
def handle(self, title, message=None, label=None, project=&amp;quot;FOO&amp;quot;):
&amp;quot;&amp;quot;&amp;quot; see if exists if does update &amp;quot;&amp;quot;&amp;quot;
def see_if_exists(self, title, project):
results = self.jira.search_issues(&amp;quot;title ~ \&amp;quot;%s\&amp;quot; and project= \&amp;quot;%s\&amp;quot;&amp;quot; % (title, project))
if len(results) &amp;gt; 0:
for issue in results:
print(issue)
return False
&lt;/code>&lt;/pre>&lt;h2 id="good-reads">Good reads&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/unittest.mock.html">https://docs.python.org/3/library/unittest.mock.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832">https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832&lt;/a>&lt;/li>
&lt;/ul></description><category>python</category><category>mocking</category><category>tdd</category><category>unittest</category></item><item><title>PHP Xdebug Visual Code</title><link>https://alfrednutile.info/posts/262/</link><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/262/</guid><description>&lt;blockquote>
&lt;p>UPDATE: PHP 8 and Xdebug 3 2021.07.18&lt;/p>
&lt;/blockquote>
&lt;p>Ok this took a bit since the Xdebug site talks about &lt;code>arch -x86_64 sudo pecl install xdebug&lt;/code> which did not work.&lt;/p>
&lt;p>I just did the normal&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo pecl install xdebug
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then I edit the addition it made:&lt;/p>
&lt;p>&lt;code>/opt/homebrew/etc/php/8.0/php.ini&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">zend_extension&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xdebug.so&amp;#34;&lt;/span>
xdebug.mode &lt;span style="color:#f92672">=&lt;/span> debug
xdebug.start_with_request &lt;span style="color:#f92672">=&lt;/span> yes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I moved it all to the bottom of the file too. The docs talk about OPCache but not sure this really helped.&lt;/p>
&lt;p>Anyways after this and a PHP restart (see below) it all worked.&lt;/p>
&lt;p>I ran &lt;code>valet restart&lt;/code> since I am using that for PHP.&lt;/p>
&lt;p>Then ran &lt;code>php -v&lt;/code> to see&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">PHP 8.0.8 &lt;span style="color:#f92672">(&lt;/span>cli&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>built: Jul &lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#ae81ff">2021&lt;/span> 02:58:53&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span> NTS &lt;span style="color:#f92672">)&lt;/span>
Copyright &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span> The PHP Group
Zend Engine v4.0.8, Copyright &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span> Zend Technologies
with Xdebug v3.0.4, Copyright &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span> 2002-2021, by Derick Rethans
with Zend OPcache v8.0.8, Copyright &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span>, by Zend Technologies
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And my launch.json for VSCode is&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Use&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">IntelliSense&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">to&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">learn&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">about&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">possible&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">attributes.&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Hover&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">to&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">view&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">descriptions&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">of&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">existing&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">attributes.&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">For&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">more&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">information,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">visit:&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">https://go.microsoft.com/fwlink/?linkid=830387&lt;/span>
&lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.2.0&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;configurations&amp;#34;&lt;/span>: [
{
&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Listen for Xdebug&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;php&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;request&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;launch&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;port&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9003&lt;/span>
},
{
&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Launch currently open script&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;php&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;request&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;launch&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;program&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${file}&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;cwd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${fileDirname}&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;port&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;runtimeArgs&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;-dxdebug.start_with_request=yes&amp;#34;&lt;/span>
],
&lt;span style="color:#f92672">&amp;#34;env&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;XDEBUG_MODE&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;debug,develop&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;XDEBUG_CONFIG&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;client_port=${port}&amp;#34;&lt;/span>
}
},
{
&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Launch Built-in web server&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;php&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;request&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;launch&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;runtimeArgs&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;-dxdebug.mode=debug&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-dxdebug.start_with_request=yes&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;-S&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;localhost:0&amp;#34;&lt;/span>
],
&lt;span style="color:#f92672">&amp;#34;program&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;cwd&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;${workspaceRoot}&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;port&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">9003&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;serverReadyAction&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;pattern&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Development Server \\(http://localhost:([0-9]+)\\) started&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;uriFormat&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http://localhost:%s&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;openExternally&amp;#34;&lt;/span>
}
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>UPDATE: PHP 7.4
Every time I do &lt;code>value use php&lt;/code> I then lose my xdebug setup :( here is me taking a moment to stop having that happen&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>vim /usr/local/etc/php/7.4/php.ini
&lt;/code>&lt;/pre>&lt;p>Then add this&lt;/p>
&lt;pre>&lt;code>[PHP]
zend_extension=&amp;quot;xdebug.so&amp;quot;
xdebug.remote_enable = 1
xdebug.remote_autostart = 1
xdebug.remote_handler = dbgp
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 9000
xdebug.remote_mode = req
&lt;/code>&lt;/pre>&lt;p>And then I am set again! Notice I am using 9000 above my insanity of using 9005 below has passed&lt;/p>
&lt;p>I put two files in my home directory, one starts with the above and one does not. Then I put this alias into my &lt;code>~/.zshrc&lt;/code>&lt;/p>
&lt;pre>&lt;code>alias debug_on=&amp;quot;cp ~/Code/php.ini.debugon /usr/local/etc/php/7.4/php.ini&amp;quot;
alias debug_off=&amp;quot;cp ~/Code/php.ini.debugoff /usr/local/etc/php/7.4/php.ini&amp;quot;
&lt;/code>&lt;/pre>&lt;p>&lt;code>source ~/.zshrc&lt;/code>&lt;/p>
&lt;p>and now I can easily turn this on and off to save TONS of time with any php job (testing, etc)&lt;/p>
&lt;blockquote>
&lt;p>END UPDATE&lt;/p>
&lt;/blockquote>
&lt;p>This article got me going on using Xdebug &lt;a href="https://tighten.co/blog/configure-vscode-to-debug-phpunit-tests-with-xdebug">https://tighten.co/blog/configure-vscode-to-debug-phpunit-tests-with-xdebug&lt;/a>&lt;/p>
&lt;p>But since 7.2 it has been tricky on the Mac.&lt;/p>
&lt;pre>&lt;code>pecl install xdebug
&lt;/code>&lt;/pre>&lt;p>Then &lt;code>vim /usr/local/etc/php/7.2/php.ini&lt;/code>&lt;/p>
&lt;p>And remove from there any reference to &lt;code>xdebug.so&lt;/code>&lt;/p>
&lt;p>Then &lt;code>/usr/local/etc/php/7.2/conf.d/ext-xdebug.ini&lt;/code>&lt;/p>
&lt;pre>&lt;code>[xdebug]
zend_extension=&amp;quot;xdebug.so&amp;quot;
xdebug.remote_autostart=1
xdebug.remote_port=9005
xdebug.remote_enable=1
xdebug.profiler_enable=1
xdebug.profiler_output_dir=&amp;quot;/Users/alfrednutile/xdebugtmp/&amp;quot;
&lt;/code>&lt;/pre>&lt;p>and restart the services&lt;/p>
&lt;pre>&lt;code>brew services restart php72
&lt;/code>&lt;/pre>&lt;p>You should be able to run &lt;code>php --ini&lt;/code> at the command line.&lt;/p>
&lt;pre>&lt;code>&amp;gt;php --ini
Configuration File (php.ini) Path: /usr/local/etc/php/7.2
Loaded Configuration File: /usr/local/etc/php/7.2/php.ini
Scan for additional .ini files in: /usr/local/etc/php/7.2/conf.d
Additional .ini files parsed: /usr/local/etc/php/7.2/conf.d/ext-opcache.ini,
/usr/local/etc/php/7.2/conf.d/ext-xdebug.ini,
/usr/local/etc/php/7.2/conf.d/php-memory-limits.ini
&lt;/code>&lt;/pre>&lt;p>Visual Code&amp;rsquo;s xdebug &lt;code>launch.json&lt;/code> looks like:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [{
&amp;quot;name&amp;quot;: &amp;quot;Listen for XDebug&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;php&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;port&amp;quot;: 9005
},
{
&amp;quot;name&amp;quot;: &amp;quot;Launch currently open script&amp;quot;,
&amp;quot;type&amp;quot;: &amp;quot;php&amp;quot;,
&amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
&amp;quot;program&amp;quot;: &amp;quot;${file}&amp;quot;,
&amp;quot;cwd&amp;quot;: &amp;quot;${fileDirname}&amp;quot;,
&amp;quot;port&amp;quot;: 9005
}
]
}
&lt;/code>&lt;/pre></description><category>php</category><category>xdebug</category></item><item><title>Cognito and OAuth</title><link>https://alfrednutile.info/posts/261/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/261/</guid><description>&lt;p>make your App Client&lt;/p>
&lt;p>Make sure to check&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/b41fgm4avehxkar/cog_app_client.png?dl=0" alt="">&lt;/p>
&lt;p>Make some scopes uner Resource Server&lt;/p>
&lt;p>Then &amp;ldquo;App Client Settings&amp;rdquo;&lt;/p>
&lt;p>Connect it to &amp;ldquo;Cognito User Pool&amp;rdquo;&lt;/p>
&lt;p>And choose &amp;ldquo;Client Credentials&amp;rdquo; from &amp;ldquo;Allowed OAuth Flow&amp;rdquo; choosing some scopes&lt;/p></description><category>aws</category><category>cognito</category><category>laravel</category></item><item><title>PHPUnit CodeCoverage</title><link>https://alfrednutile.info/posts/260/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/260/</guid><description>&lt;h1 id="phpunit-codecoverage">PHPUnit CodeCoverage&lt;/h1>
&lt;p>&lt;a href="https://phpunit.de/manual/6.5/en/code-coverage-analysis.html">PHPUnit CodeCoverage&lt;/a>&lt;/p>
&lt;p>There is a ton of information about your code PHPUNit CodeCoverage can provide. At the root just making sure your coverage is at a certain level and if not where is it lacking.&lt;/p>
&lt;p>With it&amp;rsquo;s xml output I use a script found &lt;a href="https://ocramius.github.io/blog/automated-code-coverage-check-for-github-pull-requests-with-travis/">here&lt;/a> to check during our TravisCI builds if the code is meeting a required level.&lt;/p>
&lt;p>Here is a gist of that script &lt;a href="https://gist.github.com/alnutile/78e11717d91f2dfce970f8f1aec68469">here&lt;/a>
and here is the &lt;code>.travis.yml&lt;/code> section snippet that will run the coverage generating test and then review it for percentage of coverage.&lt;/p>
&lt;pre>&lt;code>script:
- vendor/bin/phpcs --standard=psr2 app/
- set -e
- vendor/bin/phpunit --coverage-clover clover.xml --stop-on-failure --testsuite=Unit,Feature
- php ./coverage-checker.php clover.xml 70
&lt;/code>&lt;/pre>&lt;p>This is what we run in Travis to review the coverage, if it is below &lt;strong>70&lt;/strong>% it will fail.&lt;/p>
&lt;blockquote>
&lt;p>If your unit tests cover 100% of your code, you&amp;rsquo;re doing it wrong.
Just my 2 cts. - Fabien Potencier&lt;/p>
&lt;/blockquote>
&lt;h2 id="setting-up">Setting Up&lt;/h2>
&lt;p>This can be tricky you need Xdebug in place else you might get &amp;ldquo;Coverage driver missing&amp;rdquo; errors.&lt;/p>
&lt;p>Once ready you need to update your &lt;code>phpunit.xml&lt;/code> here is my example:&lt;/p>
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;phpunit
/// left out some area for brevity
&amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Unit&amp;quot;&amp;gt;
&amp;lt;directory suffix=&amp;quot;Test.php&amp;quot;&amp;gt;./tests/Unit&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;testsuite name=&amp;quot;Feature&amp;quot;&amp;gt;
&amp;lt;directory suffix=&amp;quot;Test.php&amp;quot;&amp;gt;./tests/Feature&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&amp;lt;filter&amp;gt;
&amp;lt;whitelist processUncoveredFilesFromWhitelist=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;./app&amp;lt;/directory&amp;gt;
&amp;lt;exclude&amp;gt;
&amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;app/Http/Controllers/Auth&amp;lt;/directory&amp;gt;
&amp;lt;file&amp;gt;app/Console/Commands/SetupDeploymentCommand.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Console/Kernel.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Kernel.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/AppServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/AuthServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/EventServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/BroadcastServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/RouteServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Controllers/Controller.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Exceptions/Handler.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/Authenticate.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/EncryptCookies.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/RedirectIfAuthenticated.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/TrimStrings.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/TrustProxies.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/VerifyCsrfToken.php&amp;lt;/file&amp;gt;
&amp;lt;/exclude&amp;gt;
&amp;lt;/whitelist&amp;gt;
&amp;lt;/filter&amp;gt;
/// left out some area for brevity
&amp;lt;/phpunit&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Above I setup &lt;code>filter&lt;/code> to exclude a bunch of Laravel files I do not want to maintain.&lt;/p>
&lt;h2 id="running-the-command">Running the Command&lt;/h2>
&lt;pre>&lt;code>vendor/bin/phpunit --coverage-clover clover.xml --stop-on-failure --coverage-html=build
&lt;/code>&lt;/pre>&lt;p>This will output the clover.xml and make a folder called &lt;code>build&lt;/code> make sure to include that in your &lt;code>.gitignore&lt;/code>&lt;/p>
&lt;p>On my Mac, when done, I just type &lt;code>open build/index.html&lt;/code> and I go to a page like this&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/vnmt5iy909hycid/Screenshot%202019-01-09%2012.02.29.png?dl=0" alt="">&lt;/p>
&lt;h2 id="exploring">Exploring&lt;/h2>
&lt;p>As seen above I get a list of all my classes and how the coverage is on each them. It gets even better from here.&lt;/p>
&lt;h3 id="class-level">Class Level&lt;/h3>
&lt;p>So you are wondering why a class is missing coverage? Click on the Class folder and start to dig in.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/ii7yqczoviw0vpz/Screenshot%202019-01-09%2012.22.23.png?dl=0" alt="">&lt;/p>
&lt;p>Maybe it finds something you forgot or maybe it is fussing about a bit of code you know you tested?&lt;/p>
&lt;p>In this example it could be either. So I have two main options.&lt;/p>
&lt;h4 id="annotate-the-test">Annotate the test&lt;/h4>
&lt;p>Let&amp;rsquo;s say I have a Controller level test that is testing this:&lt;/p>
&lt;pre>&lt;code> /**
* @covers App\Http\Controllers\AdminController::index
*/
public function testWorksAsAdmin()
{
$user = factory(\App\User::class)-&amp;gt;states('admin')-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(200)-&amp;gt;assertSee(&amp;quot;Show user&amp;quot;);
}
/**
* @covers App\Http\Controllers\AdminController::index
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(302);
}
&lt;/code>&lt;/pre>&lt;p>You can see I specifically tell PHPUnit CodeCoverage that this controller tests are testing this area. But I do not let it know about the MiddleWare so I could do:&lt;/p>
&lt;pre>&lt;code> /**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
*/
public function testWorksAsAdmin()
{
$user = factory(\App\User::class)-&amp;gt;states('admin')-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(200)-&amp;gt;assertSee(&amp;quot;Show user&amp;quot;);
}
/**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(302);
}
&lt;/code>&lt;/pre>&lt;p>Then run the test command again and:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/gl8m3ompd4s8vw5/Screenshot%202019-01-09%2012.26.43.png?dl=0" alt="">&lt;/p>
&lt;h4 id="annotate-the-class">Annotate the Class&lt;/h4>
&lt;p>In the above I could have just done this:&lt;/p>
&lt;pre>&lt;code> /**
* @codeCoverageIgnore
*/
public function __construct()
{
$this-&amp;gt;middleware('admin_only')-&amp;gt;only(&amp;quot;index&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>And that is fine, as long as you know that middleware is tested in it&amp;rsquo;s own area.&lt;/p>
&lt;h4 id="exceptions">Exceptions&lt;/h4>
&lt;p>I tend to do try/catch in my controllers to clearly react to an issue and respond to a user&amp;rsquo;s request but this can show in PHPUnit Coverage as a non tested section of code.&lt;/p>
&lt;p>All I need to do is add a test for that.&lt;/p>
&lt;pre>&lt;code> /**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
* @expectedException \Exception
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(422);
}
&lt;/code>&lt;/pre>&lt;h3 id="dashboard">Dashboard&lt;/h3>
&lt;p>This is where some other nice info is surfaced about your code.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/9cgvtghsc56iqyk/dashboard_link.png?dl=0" alt="">&lt;/p>
&lt;p>Should bring you to this layout&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/04vgti8gogembv8/Screenshot%202019-01-09%2012.31.05.png?dl=0" alt="">&lt;/p>
&lt;p>The &lt;strong>CRAP&lt;/strong> rating is &amp;ldquo;interesting&amp;rdquo; you can read more about it &lt;a href="https://stackoverflow.com/questions/4731774/how-to-read-improve-c-r-a-p-index-calculated-by-php/4731869#4731869">here&lt;/a> since I do not fully understand it myself but imo it comes down not to 100% coverage but:&lt;/p>
&lt;ul>
&lt;li>Keep classes small and focused&lt;/li>
&lt;li>Keep classed down to 1 public method, even Controllers letting other protected/private methods do the work&lt;/li>
&lt;li>Test the class for message in and message out&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&amp;ldquo;You don&amp;rsquo;t send messages because you have objects, you have objects because you send messages - Sandi Metz Poodr Book&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="helpers">Helpers&lt;/h2>
&lt;p>Two other tools to compliment that above&lt;/p>
&lt;h3 id="phpmetrics">PHPMetrics&lt;/h3>
&lt;p>This tool &lt;a href="http://www.phpmetrics.org/">http://www.phpmetrics.org/&lt;/a> can easily be setup and run showing more details about your classes and their state of &amp;ldquo;complexity&amp;rdquo; etc.&lt;/p>
&lt;h3 id="larastan">LaraStan&lt;/h3>
&lt;p>This tool &lt;a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan&lt;/a> when it does not go overboard in it&amp;rsquo;s reading your code (set it to a low level) can do a good job of finding issues in your code that you did not find in your tests. It runs over your code including exceptions you did not cover in your tests etc. Really does find some interesting things.&lt;/p></description><category>laravel</category><category>testing</category><category>phpunit</category></item><item><title>Deploying Fargate</title><link>https://alfrednutile.info/posts/259/</link><pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/259/</guid><description>&lt;p>Just some notes on the process. This will show how to deploy both a Staging build and then Production.&lt;/p>
&lt;h2 id="staging">Staging&lt;/h2>
&lt;p>Staging is done by TravisCI after all tests pass&lt;/p>
&lt;p>Here is the gist of it the deploy step calls to a bash file.&lt;/p>
&lt;pre>&lt;code>deploy:
skip_cleanup: true
provider: script
script: bash deploy/travis_deploy.sh
on:
branch: mainline
&lt;/code>&lt;/pre>&lt;p>Then&lt;/p>
&lt;pre>&lt;code>#!/usr/bin/env bash
# Bail out on first error
set -e
## Get the directory of the build script
DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;
## Get the current git commit sha
HASH=$(git rev-parse HEAD)
## Get any secret files
aws s3 cp s3://foo/environments/$STACK_ENV_FILE $DIR/app/packaged/.env
##we only want non-dev vendors
composer config -g github-oauth.github.com $GITHUB_TOKEN &amp;amp;&amp;amp; composer install --no-dev
echo &amp;quot;Region $STACK_AWS_REGION is the target region&amp;quot;
eval $(aws ecr get-login --no-include-email --region $STACK_AWS_REGION)
echo &amp;quot;Tagging images $STACK_APP_NAME&amp;quot;
docker build --pull -t $STACK_APP_NAME .
docker tag $STACK_APP_NAME:latest 1111111111.dkr.ecr.$STACK_AWS_REGION.amazonaws.com/$STACK_APP_NAME:latest
echo &amp;quot;Pushing up image $STACK_APP_NAME:latest&amp;quot;
docker push 1111111111.dkr.ecr.us-east-1.amazonaws.com/$STACK_APP_NAME:latest
## Now Run again for Production WILL COME BACK TO THIS IN A MOMENT
## if production set???
if [[ &amp;quot;$STACK_ENV_FILE_PRODUCTION&amp;quot; ]]; then
echo &amp;quot;Running Production build&amp;quot;
aws s3 cp s3://foo/environments/$STACK_ENV_FILE_PRODUCTION $DIR/app/packaged/.env
echo &amp;quot;Building Production Image&amp;quot;
docker build --pull -t $STACK_APP_NAME .
docker tag $STACK_APP_NAME:latest 1111111111.dkr.ecr.us-east-1.amazonaws.com/$STACK_APP_NAME:production_$HASH
echo &amp;quot;Pushing up production image using has production_$HASH&amp;quot;
docker push 1111111111.dkr.ecr.us-east-1.amazonaws.com/$STACK_APP_NAME:production_$HASH
fi
&lt;/code>&lt;/pre>&lt;p>So Staging will build and push right to the AWS ECR which means Fargate by default will get the Latest tagged image since the TaskDefinition says so. So staging is done. Next task will run this one.&lt;/p>
&lt;h2 id="production">Production&lt;/h2>
&lt;p>This we want to happen by choice not by Travis. So you can see the step in Travis &lt;code>STACK_ENV_FILE_PRODUCTION&lt;/code> that looks for an environment variable and if true it will push the same working image but with it&amp;rsquo;s own secrets to ECR but with the tag &lt;code>production_GIT_HASH&lt;/code>&lt;/p>
&lt;p>Then we ready we have a UI to push it BUT really it is just CloudFormation that updates the TaskDefinition using the build in Params to make it reference this HASH. This can be done pretty easily with Python, PHP etc and the AWS SDK that allows you to update CloudFormation and the Parameter that then fills in the TaskDefinition Field and updates it, from there the next time the Production Fargate runs it runs that latest version.&lt;/p>
&lt;p>Example Task Definition:&lt;/p>
&lt;pre>&lt;code> &amp;quot;TaskDefinition&amp;quot;: {
&amp;quot;Type&amp;quot;: &amp;quot;AWS::ECS::TaskDefinition&amp;quot;,
&amp;quot;Properties&amp;quot;: {
&amp;quot;ExecutionRoleArn&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;Memory&amp;quot;: 250,
&amp;quot;NetworkMode&amp;quot;: &amp;quot;bridge&amp;quot;,
&amp;quot;TaskRoleArn&amp;quot;: &amp;quot;arn:aws:iam::364215618558:role/foo&amp;quot;,
&amp;quot;ContainerDefinitions&amp;quot;: [{
&amp;quot;Name&amp;quot;: {
&amp;quot;Fn::Sub&amp;quot;: &amp;quot;${AppName}-${AppEnv}&amp;quot;
},
&amp;quot;Image&amp;quot;: {
&amp;quot;Fn::Sub&amp;quot;: &amp;quot;${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AppName}:${ProductionTag}&amp;quot;
},
&amp;quot;PortMappings&amp;quot;: [{
&amp;quot;ContainerPort&amp;quot;: 80,
&amp;quot;HostPort&amp;quot;: {
&amp;quot;Ref&amp;quot;: &amp;quot;AppPort&amp;quot;
}
},
{
&amp;quot;ContainerPort&amp;quot;: 443,
&amp;quot;HostPort&amp;quot;: {
&amp;quot;Ref&amp;quot;: &amp;quot;AppPortSSL&amp;quot;
}
}
],
&amp;quot;Memory&amp;quot;: 250,
&amp;quot;MountPoints&amp;quot;: [{
&amp;quot;SourceVolume&amp;quot;: &amp;quot;shared&amp;quot;,
&amp;quot;ContainerPath&amp;quot;: &amp;quot;/opt/shared&amp;quot;
}]
}],
&amp;quot;Volumes&amp;quot;: [{
&amp;quot;Name&amp;quot;: &amp;quot;shared&amp;quot;,
&amp;quot;Host&amp;quot;: {
&amp;quot;SourcePath&amp;quot;: &amp;quot;/opt/shared&amp;quot;
}
}]
},
&amp;quot;DependsOn&amp;quot;: [
&amp;quot;ECR&amp;quot;
]
},
&lt;/code>&lt;/pre>&lt;p>So when I update this I can just update the &lt;code>ProductionTag&lt;/code> and this will take effect.&lt;/p></description><category>aws</category><category>fargate</category></item><item><title>How to Troubleshoot and Issue</title><link>https://alfrednutile.info/posts/258/</link><pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/258/</guid><description>&lt;p>&amp;hellip;&lt;/p></description><category>101</category></item><item><title>Bitbucket Pipeline</title><link>https://alfrednutile.info/posts/257/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/257/</guid><description>&lt;p>BitBucket has a nice feature call Pipelines &lt;a href="https://bitbucket.org/product/features/pipelines">https://bitbucket.org/product/features/pipelines&lt;/a> for $0 you can, even for private repos have a decent CI flow.&lt;/p>
&lt;blockquote>
&lt;p>Private repos CI Pipeline $0!!&lt;/p>
&lt;/blockquote>
&lt;p>It took a bit to get going though since the docs do not talk about PHP and MySQL in enough details. Here is what I ended up with for a &lt;code>bitbucket-pipelines.yml&lt;/code>&lt;/p>
&lt;pre>&lt;code># This is a sample build configuration for PHP.
# Check our guides at https://confluence.atlassian.com/x/e8YWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: php:7.2
options:
max-time: 120
pipelines:
default:
- step:
caches:
- composer
script:
- apt-get update &amp;amp;&amp;amp; apt-get install -y unzip gnupg
- docker-php-ext-install mysqli pdo pdo_mysql
- curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
- cp .env.bitbucket .env
- curl -sL https://deb.nodesource.com/setup_8.x | bash -
#- apt-get install -y nodejs
# hung on install so will have to come back to this
#- npm install
#- npm test
- composer install
- composer check-style
- vendor/bin/phpunit
services:
- mysql
- step:
name: Deploy to staging
image: aneitayang/aws-cli:1.0
deployment: staging
trigger: automatic
script:
- curl https://forge.laravel.com/servers/baz/sites/bar/deploy/http?token=foo
definitions:
services:
mysql:
image: mysql:5.7
environment:
MYSQL_DATABASE: 'test'
MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
MYSQL_USER: 'test_user'
MYSQL_PASSWORD: 'password'
&lt;/code>&lt;/pre>&lt;p>So basically I install mysql and set it up to use then all just work. NPM just hangs right now so I am not 100% sure what to do there.&lt;/p>
&lt;h2 id="debug">Debug&lt;/h2>
&lt;p>Unlike TravisCI I could not just SSH in to debug I had to run docker.
Here are some links&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/debug-your-pipelines-locally-with-docker-838273569.html">https://confluence.atlassian.com/bitbucket/debug-your-pipelines-locally-with-docker-838273569.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/php-with-bitbucket-pipelines-873907835.html">https://confluence.atlassian.com/bitbucket/php-with-bitbucket-pipelines-873907835.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html">Config Info&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>running locally below worked for me&lt;/p>
&lt;pre>&lt;code>docker run -it --volume=$(pwd):/var/www/html --memory=4g --memory-swap=4g --memory-swappiness=0 --entrypoint=/bin/bash php:7.2-apache
&lt;/code>&lt;/pre>&lt;p>But I would have to install their mysql docker as well they note and map them together. ¯_(ツ)_/¯&lt;/p>
&lt;p>Maybe the price is right for this vs TravisCI&lt;/p></description><category>laravel</category><category>bitbucket</category></item><item><title>JSONEditor, Vue and Vuex</title><link>https://alfrednutile.info/posts/256/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/256/</guid><description>&lt;p>As I post &lt;a href="https://alfrednutile.info/posts/222">here&lt;/a> I wanted to use JSONEditor as a component. But with Vuex I was able to reduce the work quite a ton.
&lt;img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt="">
Here is my store for the json_field:&lt;/p>
&lt;pre>&lt;code>export default {
state: {
json_field: null,
},
getters: {
json_field: state =&amp;gt; {
return state.json_field;
}
},
mutations: {
jsonField(state, json_field) {
state.json_field = json_field;
}
},
};
&lt;/code>&lt;/pre>&lt;p>Then my JSONEditor.vue component:&lt;/p>
&lt;pre>&lt;code>&amp;lt;template&amp;gt;
&amp;lt;div id=&amp;quot;jsoneditor&amp;quot; ref=&amp;quot;editor&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import JSONEditor from 'jsoneditor';
import { mapGetters } from 'vuex'
export default Vue.extend({
computed: {
...mapGetters(
{ json_field: 'json_field' }
),
},
mounted() {
let container = this.$refs.editor;
let options = {
onChange: () =&amp;gt; {
this.$store.commit(&amp;quot;jsonField&amp;quot;, editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) {
editor.set(this.json_field);
}
}
});
&amp;lt;/script&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
#jsoneditor {
width: 1000px;
height: 600px;
}
&amp;lt;/style&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Finally the component that will use it:&lt;/p>
&lt;pre>&lt;code>&amp;lt;template&amp;gt;
    &amp;lt;section&amp;gt;
&amp;lt;b-form-group id=&amp;quot;metrics&amp;quot;
label=&amp;quot;Metrics&amp;quot;
label-for=&amp;quot;metrics&amp;quot;
description=&amp;quot;Paste as it should be&amp;quot;&amp;gt;
&amp;lt;cat-json-editor v-if=&amp;quot;show_editor&amp;quot;&amp;gt;&amp;lt;/cat-json-editor&amp;gt;
&amp;lt;/b-form-group&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import JSONEditor from 'jsoneditor';
export default {
data() {
return {
form: {},
show_editor: false
}
},
created() {
this.getStandardMetrics();
},
methods: {
getStandardMetrics() {
axios.get('/api/standards').then(res =&amp;gt; {
this.$snotify.success(&amp;quot;Loading Standards&amp;quot;, &amp;quot;Success&amp;quot;);
this.$store.commit(&amp;quot;jsonField&amp;quot;, res.data);
this.show_editor = true;
}).catch(err =&amp;gt; {
this.$snotify.warning(&amp;quot;error getting metric standars&amp;quot;, &amp;quot;Error&amp;quot;);
})
}
}
}
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>If do the &lt;code>v-if&lt;/code> to load the editor AFTER I have some state for it. I am sure I could have done some watcher but this worked.&lt;/p></description><category>vuejs</category><category>laravel</category></item><item><title>Laravel Filter Scope on a Model</title><link>https://alfrednutile.info/posts/255/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/255/</guid><description>&lt;p>So I find myself writing searchable pages that, via an API or what not, someone can filter the page by different fields on the model.
&lt;img src="https://dl.dropboxusercontent.com/s/qm3semea1hzutuk/filter_example.png?dl=0" alt="">&lt;/p>
&lt;p>This can end up being a Controller class that does a lot of filters off the Request. Or it can be a Repository class that abstracts the business logic into one place for several related models.&lt;/p>
&lt;p>But in many cases it really is just one Model being filtered. And if I add a Scope &lt;code>scopeFilter&lt;/code> and pass in the Request as an array I can iterate over that array and call to other existing scopes on the model.&lt;/p>
&lt;pre>&lt;code> /**
* Return only active models
*
* @param object $query
* @param array $filters
* @return Builder
*/
public function scopeFilters($query, $filters)
{
unset($filters['page']);
foreach ($filters as $scope =&amp;gt; $value) {
$scope = camel_case($scope);
$query = $this-&amp;gt;{$scope}($value);
}
return $query;
}
&lt;/code>&lt;/pre>&lt;p>This allows me to use those scopes in other places as well.&lt;/p>
&lt;p>For example a request to active policies for repo_name &amp;ldquo;foo&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>curl https://foo.test/api/policies?active=1&amp;amp;repo_name=foo
&lt;/code>&lt;/pre>&lt;p>The Controller can do something simple like this:&lt;/p>
&lt;pre>&lt;code> public function __invoke(Request $request)
{
try {
$results = Subscriber::filters($request-&amp;gt;all())-&amp;gt;orderBy(&amp;quot;repo_name&amp;quot;)-&amp;gt;paginate(20);
return response()-&amp;gt;json($results, 200);
} catch (\Exception $e) {
\Log::error($e);
return response()-&amp;gt;json(null, 400);
}
}
&lt;/code>&lt;/pre>&lt;p>And the model can handle it with these other scopes, that can be used by themselves as well:&lt;/p>
&lt;pre>&lt;code> /**
* Scope to get by repo_name
*
* @param object $query
* @param string $repo_name
* @return Builder
*/
public function scopeRepoName($query, $repo_name)
{
return $query-&amp;gt;where(&amp;quot;repo_name&amp;quot;, $repo_name);
}
/**
* Return only active models
*
* @param object $query
* @return Builder
*/
public function scopeActive($query, $state = 1)
{
if ($state == 'all') {
$state = [0,1];
}
$state = array_wrap($state);
return $query-&amp;gt;whereIn(&amp;quot;active&amp;quot;, $state);
}
&lt;/code>&lt;/pre>&lt;p>For some time I kept this logic out of models but recently I been trying to use models as more of a place to store this sort of model related logic.&lt;/p>
&lt;p>If two models need to work together then maybe a Business class could help out to glue them together but still something to consider.&lt;/p>
&lt;p>I will show in the next post one model subscribing another model.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Query Strings, Vue and Bootstrap Active Tab</title><link>https://alfrednutile.info/posts/254/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/254/</guid><description>&lt;p>In order to have the tabs and URL change as needed when the user lands on the page or clicks the tab I had to setup a few things.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/bdawx8hl7gisijs/tabs.gif?dl=0" alt="">&lt;/p>
&lt;p>First I setup the Vue.js router as seen &lt;a href="https://alfrednutile.info/posts/244">here&lt;/a>&lt;/p>
&lt;p>Then my component will work out the rest.&lt;/p>
&lt;p>Using &lt;a href="https://bootstrap-vue.js.org/docs/components/tabs">BV&lt;/a>&lt;/p>
&lt;p>I have tabs and then I set those tabs as needed.&lt;/p>
&lt;pre>&lt;code> &amp;lt;b-tabs v-model=&amp;quot;activeTab&amp;quot;&amp;gt;
&amp;lt;b-tab title=&amp;quot;Settings&amp;quot; active &amp;gt;
&amp;lt;div class=&amp;quot;mt-4 alert alert-info&amp;quot;&amp;gt;
Manage related policies by clicking on the Tabs.
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;See Results&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Add Policies&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Update Policies&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Quality Metrics&amp;quot;&amp;gt;
&amp;lt;quality-metrics-report class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 1&amp;quot;&amp;gt;&amp;lt;/quality-metrics-report&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Travis File Report&amp;quot;&amp;gt;
&amp;lt;travis-subscription-root class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 2&amp;quot;&amp;gt;&amp;lt;/travis-subscription-root&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;/b-tabs&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When I user clicks on the tabs the state changes since the &lt;code>activeTab&lt;/code> is a computed property.&lt;/p>
&lt;pre>&lt;code> computed: {
activeTab: {
get: function() {
return this.$store.state.tabIndex;
},
set: function(newTab) {
let tabs = {
tab: _.findKey(this.tabs, function(o) {return o == newTab;})
}
this.$router.push({
query: tabs
});
console.log(this.$router.history.current);
this.$store.commit('tabIndex', newTab);
},
},
&lt;/code>&lt;/pre>&lt;p>Using lodash I can easily find my tab name from the value of the tabe we are looking at.&lt;/p>
&lt;pre>&lt;code> data() {
return {
tabs: { travis_policy_results: 2, quality_metrics_report: 1 }
}
},
&lt;/code>&lt;/pre>&lt;p>That takes care of the user clicking. I could store the state right in the component but I am doing this in vuex which should not matter here really.&lt;/p>
&lt;p>Now when the user lands on the page my &lt;code>mounted&lt;/code> method acts on the url:&lt;/p>
&lt;pre>&lt;code> mounted() {
if(this.$router.history.current['query']['tab']) {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},
&lt;/code>&lt;/pre>&lt;p>That is it now the state changes on page land and on click.&lt;/p>
&lt;p>I can also have it change as the user clicks on their Back button.&lt;/p>
&lt;pre>&lt;code> methods: {
changeTab() {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},
mounted() {
if(this.$router.history.current['query']['tab']) {
this.changeTab();
}
},
watch: {
$route(to, from) {
if (to.fullPath != from.fullPath) {
this.changeTab();
}
}
},
&lt;/code>&lt;/pre></description><category>vuejs</category><category>laravel</category></item><item><title>Valet Laravel 7.1 and 7.2</title><link>https://alfrednutile.info/posts/253/</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/253/</guid><description>&lt;p>..&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Python3 Fixtures</title><link>https://alfrednutile.info/posts/252/</link><pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/252/</guid><description>&lt;p>Just a reminder using pickle I can easily make fixtures for testing.&lt;/p>
&lt;p>When I get results from AWS SDK for example I can just&lt;/p>
&lt;pre>&lt;code>import pickle
with open(&amp;quot;fixtures/describe_task_defination.pickle&amp;quot;, 'wb') as fixture:
pickle.dump(self.stored_state_to_save, fixture)
&lt;/code>&lt;/pre>&lt;p>Then when I want to feed it back in my test&lt;/p>
&lt;pre>&lt;code>import pickle
from unittest import TestCase
from unittest.mock import patch
from unittest import mock
import pickle
from task_image import TaskImage
def getFixture(name):
with open(&amp;quot;fixtures/&amp;quot; + name, 'rb') as fixture:
return pickle.load(fixture)
class TestTaskImage(TestCase)
def setUp(self):
self.task_image = TaskImage()
@patch('task_image.TaskImage._getTaskDefinition', return_value=getFixture('describe_task_defination.pickle'))
@patch('task_image.TaskImage._getService', return_value=getFixture('describe_services.pickle'))
def test_gets_service(self, _getService, _getTaskDefinition):
self.results = self.task_image.handle('default', 'cat-teamdocs-production-122')
self.assertEqual('cat-teamdocs:latest', self.results)
&lt;/code>&lt;/pre>&lt;p>Pretty easy and then I am not hitting the service&lt;/p></description><category>note2self</category><category>python3</category><category>testing</category></item><item><title>PHPStan Setup</title><link>https://alfrednutile.info/posts/251/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/251/</guid><description>&lt;p>There is a good episode here &lt;a href="https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases">https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases&lt;/a> that talks about this.&lt;/p>
&lt;p>The short of it is that it can easily catch some issues that your tests or IDE did not. For example I had a class name overlap due to a typo and it found it. From there it will output tons of other info that may just help guide you in your work.&lt;/p>
&lt;p>The install is super easy as seen in the docs &lt;a href="https://github.com/phpstan/phpstan">https://github.com/phpstan/phpstan&lt;/a>&lt;/p>
&lt;p>For me I did&lt;/p>
&lt;pre>&lt;code>composer global require phpstan/phpstan
&lt;/code>&lt;/pre>&lt;p>then in my &lt;code>composer.json&lt;/code> I added&lt;/p>
&lt;pre>&lt;code>&amp;quot;scripts&amp;quot;: {
//see last row but here are some other nice quick shortcuts
&amp;quot;check-style&amp;quot;: &amp;quot;phpcs -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app&amp;quot;,
&amp;quot;fix-style&amp;quot;: &amp;quot;phpcbf -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app&amp;quot;,
&amp;quot;check-metrics&amp;quot;: &amp;quot;phpmetrics --report-json=report.json app &amp;amp;&amp;amp; vendor/bin/quality_run_check.py report.json&amp;quot;,
&amp;quot;check-metrics-html&amp;quot;: &amp;quot;phpmetrics --report-json=report.json --report-html=report app &amp;amp;&amp;amp; open report/index.html&amp;quot;,
&amp;quot;phpstan&amp;quot;: &amp;quot;phpstan analyse app&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>The initial run found this&lt;/p>
&lt;pre>&lt;code>Cannot declare class App\Observers\QualityReport because the name is already in use in /Users/alfrednutile/Code/cat-quality-service/app/Observers/QualityReport.php on line 7
&lt;/code>&lt;/pre>&lt;p>which was great since I did not catch that in my tests. Another run found a missing variable for my printf which was in an exception area I did not test.&lt;/p>
&lt;p>This may help as well &lt;a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan&lt;/a> for Laravel&lt;/p>
&lt;p>This will avoid some Facade and other issues. Even just trying&lt;/p>
&lt;pre>&lt;code>php artisan code:analyse --paths=app --level=0
&lt;/code>&lt;/pre>&lt;p>Found some issues I did not see, for example object properties I did not define at the top of the Class.&lt;/p></description><category>static analysis</category><category>laravel</category></item><item><title>Vuex External File</title><link>https://alfrednutile.info/posts/250/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/250/</guid><description>&lt;p>Setup Vuex with external file &lt;a href="https://vuex.vuejs.org/installation.html">https://vuex.vuejs.org/installation.html&lt;/a>&lt;/p>
&lt;p>But after this make a file in the &lt;code>resources/assets/js&lt;/code> called &lt;code>store.js&lt;/code> then set it up as needed
Here I will have one loading state&lt;/p>
&lt;pre>&lt;code>export default {
state: {
loading: true,
},
getters: {
loading: state =&amp;gt; {
return state.loading;
},
},
mutations: {
loading(state, loading) {
state.loading = loading;
}
}
};
&lt;/code>&lt;/pre>&lt;p>now import it into your app.js&lt;/p>
&lt;p>&lt;code>import store from './store';&lt;/code>&lt;/p>
&lt;p>and&lt;/p>
&lt;pre>&lt;code>var app = new Vue({
mixins: [require('spark')],
store: new Vuex.Store(store),
router
});
&lt;/code>&lt;/pre>&lt;p>That should do it. I do load some state in my &lt;code>resources/views/layouts/app.blade.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> &amp;lt;script&amp;gt;
window.Laravel = {!! json_encode([
&amp;quot;apiToken&amp;quot; =&amp;gt; auth()-&amp;gt;user()-&amp;gt;api_token ?? null
]) !!};
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Just to help with some basic stuff&lt;/p></description><category>note2self</category><category>vuejs</category><category>laravel</category></item><item><title>Simple API_Token Auth for VueJS Components and Laravel</title><link>https://alfrednutile.info/posts/249/</link><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/249/</guid><description>&lt;p>For those non Passport moments just a simple site that has VueJS Components that need to access routes with authentication in place.&lt;/p>
&lt;p>Thanks to&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://pineco.de/vue-components-laravel-based-apis/">https://pineco.de/vue-components-laravel-based-apis/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2">https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="route-file">Route File&lt;/h2>
&lt;p>&lt;code>routes/api.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>Route::get('/trigger_contacts', function (Request $request) {
\Log::info(&amp;quot;Triggering Contacts&amp;quot;);
return response()-&amp;gt;json(null, 200);
})-&amp;gt;middleware('auth:api');
&lt;/code>&lt;/pre>&lt;p>This will not work out of the box, you will get a 401. Let&amp;rsquo;s plug some things in.&lt;/p>
&lt;h2 id="blade">Blade&lt;/h2>
&lt;p>My main &lt;code>resources/views/layouts/app.blade.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> &amp;lt;script&amp;gt;
window.Laravel = {!! json_encode([
&amp;quot;apiToken&amp;quot; =&amp;gt; auth()-&amp;gt;user()-&amp;gt;api_token ?? null
]) !!};
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="okay-now-for-vuejs">Okay now for VueJS&lt;/h2>
&lt;p>&lt;code>resources/assets/js/bootstrap.js&lt;/code>&lt;/p>
&lt;pre>&lt;code>window.axios = require('axios');
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
window.axios.defaults.headers.common['Authorization'] = 'Bearer ' + Laravel.apiToken;
&lt;/code>&lt;/pre>&lt;h2 id="now-the-migration-and-model">Now the migration and model&lt;/h2>
&lt;pre>&lt;code>php artisan make:migration alter_users_add_api_token --table=users
&lt;/code>&lt;/pre>&lt;p>Then the migration file:&lt;/p>
&lt;pre>&lt;code> Schema::table('users', function (Blueprint $table) {
$table-&amp;gt;char('api_token', 60)-&amp;gt;nullable()-&amp;gt;after('remember_token');
});
&lt;/code>&lt;/pre>&lt;p>And the User.php model (which is not in the App\Model folder :) ):&lt;/p>
&lt;pre>&lt;code> protected $hidden = [
'password', 'remember_token', &amp;quot;api_token&amp;quot;
];
public function getApiTokenAttribute($value)
{
if (!$value) {
$value = str_random(60);
$this-&amp;gt;api_token = $value;
$this-&amp;gt;save();
}
return $value;
}
&lt;/code>&lt;/pre>&lt;h2 id="component">Component&lt;/h2>
&lt;p>This is nothing out of the ordinary:&lt;/p>
&lt;pre>&lt;code> triggerContacts() {
this.loading = true;
axios
.get('/api/trigger_contacts')
.then(results =&amp;gt; {
console.log(results);
this.status_message = 'Triggered Contacts';
setTimeout(() =&amp;gt; {
this.loading = false;
this.status_message = null;
}, 3000);
})
.catch(err =&amp;gt; {
console.log('issue with trigger');
});
}
&lt;/code>&lt;/pre>&lt;p>That is it now your component will work with the route.&lt;/p></description><category>vuejs</category><category>laravel</category></item><item><title>Dusk Screenshots to S3 of Failing tests</title><link>https://alfrednutile.info/posts/248/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/248/</guid><description>&lt;p>I can be really annoying to troubleshoot a failed test in Dusk when using CI systems. What I ended up doing was setting up my project to send these files to S3 on fail.&lt;/p>
&lt;p>Here are the steps&lt;/p>
&lt;h2 id="setup-you-app">Setup You App&lt;/h2>
&lt;p>This is just S3 storage so make sure you have a bucket and a folder in the bucket to write to. Basically for AWS you make an IAM with a key and secret and let it read/write to this folder. Might look like this policy&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
&amp;quot;Statement&amp;quot;: [
{
&amp;quot;Action&amp;quot;: [
&amp;quot;s3:ListBucket&amp;quot;
],
&amp;quot;Resource&amp;quot;: [
&amp;quot;arn:aws:s3:::your-bucket&amp;quot;
],
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;
},
{
&amp;quot;Action&amp;quot;: [
&amp;quot;*&amp;quot;
],
&amp;quot;Resource&amp;quot;: [
&amp;quot;arn:aws:s3:::your-bucket/*&amp;quot;
],
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;
}
]
}
&lt;/code>&lt;/pre>&lt;p>or limited it just to the folder &lt;code>screenshots&lt;/code>&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
&amp;quot;Statement&amp;quot;: [
{
&amp;quot;Action&amp;quot;: [
&amp;quot;s3:ListAllMyBuckets&amp;quot;,
&amp;quot;s3:HeadBucket&amp;quot;
],
&amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot;,
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&amp;quot;Sid&amp;quot;: &amp;quot;VisualEditor1&amp;quot;
},
{
&amp;quot;Action&amp;quot;: [
&amp;quot;s3:ListBucket&amp;quot;,
&amp;quot;s3:GetBucketLocation&amp;quot;
],
&amp;quot;Resource&amp;quot;: [
&amp;quot;arn:aws:s3:::your-bucket&amp;quot;,
&amp;quot;arn:aws:s3:::your-bucket/*&amp;quot;
],
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&amp;quot;Sid&amp;quot;: &amp;quot;VisualEditor0&amp;quot;
},
{
&amp;quot;Action&amp;quot;: [
&amp;quot;s3:GetObject&amp;quot;
],
&amp;quot;Resource&amp;quot;: [
&amp;quot;arn:aws:s3:::your-bucket/screenshots&amp;quot;,
&amp;quot;arn:aws:s3:::your-bucket/screenshots/*&amp;quot;
],
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&amp;quot;Sid&amp;quot;: &amp;quot;VisualEditor2&amp;quot;
}
]
}
&lt;/code>&lt;/pre>&lt;p>Now in your &lt;code>tests/DuskTestCase.php&lt;/code> file add this:&lt;/p>
&lt;pre>&lt;code> public function tearDown()
{
if (env(&amp;quot;TRAVIS&amp;quot;)) {
$files = \File::files(base_path(&amp;quot;tests/Browser/screenshots&amp;quot;));
if ($files) {
foreach ($files as $file) {
Storage::disk('travis_fails')
-&amp;gt;put($file-&amp;gt;getFileName(), $file-&amp;gt;getContents());
}
}
}
parent::tearDown();
}
&lt;/code>&lt;/pre>&lt;p>This will run on Travis based tests saving files to the bucket.&lt;/p>
&lt;p>I added to my &lt;code>config/filesystems.php&lt;/code> file this:&lt;/p>
&lt;pre>&lt;code> 'disks' =&amp;gt; [
'travis_fails' =&amp;gt; [
'driver' =&amp;gt; 's3',
'key' =&amp;gt; env('AWS_ACCESS_KEY_ID'),
'secret' =&amp;gt; env('AWS_SECRET_ACCESS_KEY'),
'region' =&amp;gt; &amp;quot;eu-west-1&amp;quot;,
'root' =&amp;gt; &amp;quot;screenshots&amp;quot;,
'bucket' =&amp;gt; 'foo-bucket',
'url' =&amp;gt; env('AWS_URL'),
],
///
&lt;/code>&lt;/pre>&lt;p>Now for TravisCI&lt;/p>
&lt;h2 id="setup-travisci">Setup TravisCI&lt;/h2>
&lt;p>Then in Travis under Settings -&amp;gt; Environment Variables we make sure to add our key and secret with the proper key format:&lt;/p>
&lt;pre>&lt;code>AWS_SECRET_ACCESS_KEY=foo
AWS_ACCESS_KEY_ID=bar
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/nez8f4hz4anmghl/Screenshot%202018-06-26%2009.36.26.png?dl=0" alt="">&lt;/p>
&lt;h2 id="now-you-are-ready-to-fail">Now You are Ready to Fail!&lt;/h2>
&lt;p>Ok so on your next fail you will see in your s3 bucket some of those super handy screenshots.&lt;/p></description><category>dusk</category><category>laravel</category><category>testing</category><category>aws</category></item><item><title>Windows Dev Box Try 2 2018</title><link>https://alfrednutile.info/posts/247/</link><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/247/</guid><description>&lt;p>Going to list somethings as I go.&lt;/p>
&lt;p>The Mac, in spite of Apple, is a great developer experience, here is to hoping the Windows, with the help of Microsoft, grows to be better and better as the improve it via user feedback to make it a great development box.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;p>This started it all &lt;a href="https://char.gd/blog/2017/how-to-set-up-the-perfect-modern-dev-environment-on-windows">https://char.gd/blog/2017/how-to-set-up-the-perfect-modern-dev-environment-on-windows&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://daverupert.com/2018/04/developing-on-windows-with-wsl-and-visual-studio-code/">Webdev on Windows with WSL and VS Code&lt;/a>&lt;/p>
&lt;h2 id="npm-and-composer-install-take-a-long-time">NPM and Composer install take a long time&lt;/h2>
&lt;p>Some of this is the Windowsantimalware running. If you go to Windows Security -&amp;gt; Exclusion you can have it not search this folder.
More info &lt;a href="https://blog.emsisoft.com/en/28620/antimalware-service-executable/">https://blog.emsisoft.com/en/28620/antimalware-service-executable/&lt;/a>&lt;/p>
&lt;h2 id="local-php">Local PHP&lt;/h2>
&lt;p>This one works best for me. I tried Valet etc just go lucky with this one &lt;a href="https://medium.freecodecamp.org/setup-a-php-development-environment-on-windows-subsystem-for-linux-wsl-9193ff28ae83">https://medium.freecodecamp.org/setup-a-php-development-environment-on-windows-subsystem-for-linux-wsl-9193ff28ae83&lt;/a>&lt;/p>
&lt;p>Simple vhost file:&lt;/p>
&lt;pre>&lt;code>&amp;lt;VirtualHost *:80&amp;gt;
ServerName APP_NAME.test
ServerAdmin foo@foo.com
DocumentRoot /var/www/devroot/APP_NAME/public
Redirect permanent / https://APP_NAME.test/
&amp;lt;Directory /var/www/&amp;gt;
Options Indexes FollowSymLinks
AllowOverride All
Require all granted
&amp;lt;/Directory&amp;gt;
ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName APP_NAME.test
ServerAdmin foo@foo.com
DocumentRoot /var/www/devroot/APP_NAME/public
SSLEngine on
SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem
SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
&amp;lt;Directory /var/www/&amp;gt;
Options Indexes FollowSymLinks
AllowOverride All
Require all granted
&amp;lt;/Directory&amp;gt;
ErrorLog ${APACHE_LOG_DIR}/error.log
CustomLog ${APACHE_LOG_DIR}/access.log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Make sure to run:&lt;/p>
&lt;pre>&lt;code>sudo a2enmod ssl
sudo a2enmod rewrite
service apache2 restart
&lt;/code>&lt;/pre>&lt;h2 id="mariadb">MariaDB&lt;/h2>
&lt;p>Get the latest one installed so you have JSON fields etc &lt;a href="https://websiteforstudents.com/upgrading-mariadb-from-10-0-to-10-1-to-10-2-on-ubuntu-16-04-17-10/">here&lt;/a>&lt;/p>
&lt;p>But see bug in section &lt;code>apt-key&lt;/code>&lt;/p>
&lt;p>If you get this Linux error &lt;code>INSTALL PLUGIN unix_socket SONAME 'auth_socket';&lt;/code> checkout &lt;a href="https://mariadb.com/kb/en/library/authentication-plugin-unix-socket/">https://mariadb.com/kb/en/library/authentication-plugin-unix-socket/&lt;/a>&lt;/p>
&lt;p>Trouble with root connecting to 127.0.0.1&lt;/p>
&lt;p>Connect to mysql on localhost and run&lt;/p>
&lt;pre>&lt;code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'127.0.0.1';
FLUSH PRIVILEGES;
&lt;/code>&lt;/pre>&lt;p>Then set /etc/mysql/my.cnf to&lt;/p>
&lt;pre>&lt;code>skip-name-resolve = 1
bind-address = 0.0.0.0
&lt;/code>&lt;/pre>&lt;p>service mysql restart&lt;/p>
&lt;h2 id="apt-key">APT-KEY&lt;/h2>
&lt;p>This will not work&lt;/p>
&lt;pre>&lt;code>connecting dirmngr at '/tmp/apt-key-gpghome.L0JTeGaLOf/S.dirmngr' failed: IPC connect call failed
&lt;/code>&lt;/pre>&lt;p>So run this instead&lt;/p>
&lt;pre>&lt;code>curl -sL &amp;quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;amp;search=0xF1656F24C74CD1D8&amp;quot; | sudo apt-key add
&lt;/code>&lt;/pre>&lt;p>Putting the key in the search area. [https://github.com/Microsoft/WSL/issues/3286#issuecomment-395980628](Putting the key in the search area. &lt;a href="">https://github.com/Microsoft/WSL/issues/3286#issuecomment-395980628&lt;/a>&lt;/p>
&lt;h2 id="npm-errors">NPM Errors&lt;/h2>
&lt;h4 id="linux-error-pngquant-failed-to-build-make-sure-that-libpng-dev-is-installed">linux Error: pngquant failed to build, make sure that libpng-dev is installed&lt;/h4>
&lt;p>Fix is &lt;a href="https://github.com/imagemin/pngquant-bin/issues/78">https://github.com/imagemin/pngquant-bin/issues/78&lt;/a>&lt;/p>
&lt;h2 id="exclude-wsl-folders-from-virus-scans">Exclude WSL folders from virus scans&lt;/h2>
&lt;p>&lt;a href="https://www.howtogeek.com/261383/how-to-access-your-ubuntu-bash-files-in-windows-and-your-windows-system-drive-in-bash/">https://www.howtogeek.com/261383/how-to-access-your-ubuntu-bash-files-in-windows-and-your-windows-system-drive-in-bash/&lt;/a>&lt;/p>
&lt;p>For me this was more about my code folder&lt;/p>
&lt;h2 id="apps">Apps&lt;/h2>
&lt;h3 id="textexpanderhttpstextexpandercomprivacy-consenturldownload">&lt;a href="https://textexpander.com/privacy-consent?url=https://alfrednutile.info/download/">TextExpander&lt;/a>&lt;/h3>
&lt;h3 id="1password">1Password&lt;/h3>
&lt;p>Get this in the store to start&lt;/p>
&lt;h3 id="windows-clipboard-historyhttpwwwwoxoneplugin">&lt;a href="http://www.wox.one/plugin">Windows ClipBoard History&lt;/a>&lt;/h3>
&lt;p>And &lt;strong>Alfred&lt;/strong> replacement! The plugin section has the history one&lt;/p>
&lt;h3 id="vpn">VPN&lt;/h3>
&lt;h3 id="screenshots">ScreenShots&lt;/h3>
&lt;p>This is built into Windows and works really well. Using the Pen I can also just make the back button do it on the fly.&lt;/p>
&lt;p>&lt;img src="https://previews.dropbox.com/p/thumb/AAYQD1rU0bAoJwCbA0YztAqgxlXYd53Eq9Uj-ipujds86cFrqR0ouT5U41L2B2OIwu6hpbsalFFuy0s5sqDSWtli6gBLpt-EdxeJdquRTrxAvrchaPDiDfXy3DCfe0N9k0-YZGw3HstQW7MtfHgCd7FvREqGF9x8X-VI68qWul32L-lrvAHBwh8qdGKaiSd4r22L6IPi1tEC5NsmOzsomtEqGdet5tqCTsRbKMo-BDBkQE6evcSUfhnJQTd2_OAfQzWFE3GOsgrM1NQGfTSDuBLQFe1dbhskhPQMkvFWIoEWCp4vmf0I9PvtB9IRNH0OqO6oa9PzetGPoXPRRsARpX2T/p.png?size_mode=5" alt="">&lt;/p>
&lt;h3 id="record-desktop">Record Desktop&lt;/h3>
&lt;p>???&lt;/p>
&lt;h3 id="mysqlworkbenchhttpsdevmysqlcomgetdownloadsmysqlguitoolsmysql-workbench-community-6310-winx64msi">&lt;a href="https://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-workbench-community-6.3.10-winx64.msi">MySQLWorkbench&lt;/a>&lt;/h3>
&lt;p>not pretty but does handle things well&lt;/p>
&lt;h3 id="add-wsl-file-path-to-be-ignored-in-the-windows-defender-scanner">Add WSL File path to be ignored in the Windows defender scanner&lt;/h3>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/5k1xpc2q7szahtr/exclude.png?dl=0" alt="">&lt;/p></description><category>windows</category><category>note2self</category></item><item><title>Laravel Queue Restart and 'Why are my changes not showing up'</title><link>https://alfrednutile.info/posts/246/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/246/</guid><description>&lt;p>Just a note to self and others who have suffered this. If you are running queues locally, for what ever reason, then any changes you make in code you need to restart your queue daemon.&lt;/p>
&lt;pre>&lt;code>php artisan queue:restart
&lt;/code>&lt;/pre>&lt;p>This will cause the daemon to look at a timestamp and restart if that is newer than before &amp;ldquo;e.g. you ran the above. And this will force the in memory process to update itself from the latest code base.&lt;/p>
&lt;p>Good luck!&lt;/p></description><category>laravel</category><category>queues</category><category>note2self</category></item><item><title>Lambda and Github Webhooks</title><link>https://alfrednutile.info/posts/245/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/245/</guid><description>&lt;p>Related to &lt;a href="https://developer.github.com/webhooks/">https://developer.github.com/webhooks/&lt;/a> and pushing data to Lambda AWS.&lt;/p>
&lt;p>I can check the token by just having this check in my handler.&lt;/p>
&lt;pre>&lt;code>const crypto = require('crypto');
exports.handler = (event, context, callback) =&amp;gt; {
let headers = event.headers;
let body = event.body;
if (typeof body === 'object') {
body = JSON.stringify(event.body);
}
let github_event = headers['X-GitHub-Event'];
if (
github_event === undefined ||
typeof github_event !== 'string' ||
github_event.length &amp;lt; 1
) {
callback(null, {
statusCode: 400,
body: 'Missing X-GitHub-Event'
});
return;
}
let github_signature = headers['X-Hub-Signature'];
if (
github_signature === undefined ||
typeof github_signature !== 'string' ||
!github_signature.match(/sha1=\S+/)
) {
callback(null, {
statusCode: 400,
body: 'Missing X-Hub-Signature'
});
}
let secret = process.env.SECRET;
if (secret === undefined || secret.length &amp;lt; 1) {
callback(null, {
statusCode: 500,
body: 'We are missing the secret in our server sorry'
});
return;
}
let signature = headers['X-Hub-Signature'];
let computed_signature = crypto
.createHmac('sha1', secret)
.update(body)
.digest('hex');
if (`sha1=${computed_signature}` !== signature) {
callback(null, {
statusCode: 403,
body: 'HMAC Output not Correct'
});
return;
}
//ready to process token
callback(null, {
statusCode: 204,
body: 'OK'
});
};
&lt;/code>&lt;/pre>&lt;p>With the serverless library from AWS &lt;a href="https://github.com/awslabs/serverless-application-model">https://github.com/awslabs/serverless-application-model&lt;/a> I can build a template to include this in the Resource&lt;/p>
&lt;pre>&lt;code>Resources:
GithubSecurityWebhook:
Type: AWS::Serverless::Function
DependsOn:
- Stream
Properties:
Runtime: nodejs8.10
Description: &amp;gt;-
This will verify that the incoming data is from Github and hashed with the key
we are using for this environment
Environment:
Variables:
SECRET: !Sub ${Secret}
APP_ENV: !Sub ${AppEnv}
APP_REGION: &amp;quot;eu-west-1&amp;quot;
&lt;/code>&lt;/pre>&lt;p>then during the update command I can pass&lt;/p>
&lt;pre>&lt;code>SECRET=FOO
&lt;/code>&lt;/pre>&lt;p>or put a .env file on the system and use the &lt;code>dotenv&lt;/code> library&lt;/p></description><category>serverless</category><category>lambda</category><category>aws</category></item><item><title>Query Strings and VueJS</title><link>https://alfrednutile.info/posts/244/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/244/</guid><description>&lt;p>Quick way to make the url reflect the query string so the user can share the url and filters.&lt;/p>
&lt;p>This is component based VueJS building so not an SPA
But I still install &lt;code>&amp;quot;vue-router&amp;quot;: &amp;quot;^3.0.1&amp;quot;&lt;/code>&lt;/p>
&lt;p>And load it&lt;/p>
&lt;pre>&lt;code>import VueRouter from 'vue-router';
Vue.use(VueRouter);
&lt;/code>&lt;/pre>&lt;p>The on the component I set a watch on the router.&lt;/p>
&lt;pre>&lt;code> watch: {
$route(to, from) {
this.setModelFromQueryString();
this.search();
}
},
&lt;/code>&lt;/pre>&lt;p>In this case it will set the query strings then trigger the &amp;ldquo;search&amp;rdquo; to load the data into the page. This search becomes the go to to get state
when the page is loaded (as seen below) or when the users clicks &amp;ldquo;search&amp;rdquo;&lt;/p>
&lt;p>Created kicks this off the state:&lt;/p>
&lt;pre>&lt;code> created: function() {
this.setModelFromQueryString();
this.search();
},
&lt;/code>&lt;/pre>&lt;p>Here is &lt;code>setModelFromQueryString&lt;/code>:&lt;/p>
&lt;pre>&lt;code> setModelFromQueryString() {
this.params.forEach(param =&amp;gt; {
this[param.model] = this.getParam(param.display_name);
});
},
&lt;/code>&lt;/pre>&lt;p>Make sure the model matches the state the user wants. The states or filters that I am trying to set are stored in data.&lt;/p>
&lt;p>The data model stores theys keys and related model values that I want to focus on keeping and restoring:&lt;/p>
&lt;pre>&lt;code> data() {
return {
params: [
{
model: 'stack_name',
display_name: 'stack_name'
},
{
model: 'project_name',
display_name: 'project_name'
},
{
model: 'current_page',
display_name: 'page'
},
{
model: 'language',
display_name: 'language'
},
{
model: 'search_name',
display_name: 'name'
}
],
&lt;/code>&lt;/pre>&lt;p>Now that the model is there I can iterate over these in a few other areas I will show below.&lt;/p>
&lt;p>Page load, and search call the method &lt;code>search&lt;/code> and this takes care of a few things&lt;/p>
&lt;ul>
&lt;li>make sure the the query string reflects the latest model, e.g. what the user set on the page form&lt;/li>
&lt;li>updates the api url to have these params &lt;code>this.getParams('/api/libraries')&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Here is search plus those methods:&lt;/p>
&lt;pre>&lt;code>search() {
this.setQueryString();
this.loading = true;
axios
.get(this.getParams('/api/libraries'))
.then(results =&amp;gt; {
this.libraries = results.data;
this.loading = false;
})
.catch(error =&amp;gt; {
console.log(error);
$alerts.send('Error', 'Could not get next page', true);
});
},
getParams(prefix) {
let url_string = prefix + '?';
let query = [];
this.params.forEach(param =&amp;gt; {
if (this[param.model]) {
let value = this[param.model];
let name = param.display_name;
query.push(`${name}=${value}`);
}
});
query = query.join('&amp;amp;');
return `${url_string}${query}`;
},
getParam(param) {
return this.$router.history.current.query[param];
},
paginateFunction(page) {
this.current_page = page;
this.search();
},
setQueryString() { //This method builds up the url so the user will see the filter on page load based on their search
let items = {};
this.params.forEach(param =&amp;gt; {
if (this[param.model] != undefined) {
items[param.display_name] = this[param.model];
}
});
this.$router.push({
query: items
});
},
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/lmnyjw7aub0ggb2/filters.gif?dl=0" alt="">&lt;/p></description><category>vuejs</category><category>note2self</category><category>laravel</category></item><item><title>Debugging AWS SAM</title><link>https://alfrednutile.info/posts/243/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/243/</guid><description>&lt;p>This took a few to get just right, for one the command needs to be in the correct order&lt;/p>
&lt;pre>&lt;code>sam local invoke --event fixtures/latest_not_working.json -d 5858 GithubPushes
&lt;/code>&lt;/pre>&lt;p>From here it gave me the output I was looking for:&lt;/p>
&lt;pre>&lt;code>sam local invoke --event fixtures/latest_not_working.json -d 5858 GithubPushes
2018/05/07 06:49:46 Successfully parsed template.yaml
2018/05/07 06:49:46 Connected to Docker 1.37
2018/05/07 06:49:46 Fetching lambci/lambda:nodejs8.10 image for nodejs8.10 runtime...
nodejs8.10: Pulling from lambci/lambda
Digest: sha256:a53fceb64e2339332dbc4117be8ec270f46fbe28d564499f1cf73035a1c5854e
Status: Image is up to date for lambci/lambda:nodejs8.10
2018/05/07 06:49:47 Invoking index.push (nodejs8.10)
2018/05/07 06:49:47 Mounting /Users/alfrednutile/Code/foo as /var/task:ro inside runtime container
Debugger listening on ws://0.0.0.0:5858/ed41670e-8cdf-4f32-95d1-1be539fce269
For help see https://nodejs.org/en/docs/inspector
Debugger attached.
&lt;/code>&lt;/pre>&lt;p>So now I could open up Google Inspector &lt;a href="chrome://inspect/#devices">here&lt;/a>&lt;/p>
&lt;p>And I could add to it &lt;code>0.0.0.0:5858&lt;/code>&lt;/p>
&lt;p>Then the debugger would open as needed after I first click
&lt;img src="https://dl.dropboxusercontent.com/s/rq6dbieelatdgc5/sam_debug.png?dl=0" alt="">&lt;/p></description></item><item><title>wip Fargate and Laravel</title><link>https://alfrednutile.info/posts/242/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/242/</guid><description>&lt;p>&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>Getting Started with Orchestra Testbench for Laravel Package Development</title><link>https://alfrednutile.info/posts/241/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/241/</guid><description>&lt;p>The goal of this article will allow one to setup a stand alone package working with it&amp;rsquo;s own tests and has access to all of the normal Laravel workflows outside of Laravel. So you can build it using the easier conventions and helpers Laravel offers.&lt;/p>
&lt;p>Since my work will include database usage I will grab both packages:&lt;/p>
&lt;pre>&lt;code>composer require --dev &amp;quot;orchestra/testbench:&amp;lt;=3.5&amp;quot; &amp;quot;orchestra/database:v3.5.0&amp;quot;
&lt;/code>&lt;/pre>&lt;p>I will setup my &lt;code>composer.json&lt;/code> after this as such:&lt;/p>
&lt;pre>&lt;code> &amp;quot;autoload-dev&amp;quot;: {
&amp;quot;psr-4&amp;quot;: {
&amp;quot;Tests\\&amp;quot;: &amp;quot;tests/&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>This way my classes will just have the Tests namespace.&lt;/p>
&lt;p>And then add &lt;code>tests/TestCase.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace Tests;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Mockery;
use AlfredNutileInc\HPClient\HubPlannerProvider;
class TestCase extends \Orchestra\Testbench\TestCase
{
/**
* Load any providers I am offering
*/
protected function getPackageProviders($app)
{
return
[
HubPlannerProvider::class,
];
}
public function setUp()
{
parent::setUp();
//I can load any local factories if I want to
//$this-&amp;gt;withFactories(__DIR__ . '/../database/factories');
//make the bast path under tests folder
$this-&amp;gt;app-&amp;gt;setBasePath(__DIR__ . '/../');
//Because I use dynamic facades
\File::makeDirectory(base_path(&amp;quot;storage/framework/cache&amp;quot;), 0755, true, true);
//I can deliver routes for testing
//$this-&amp;gt;app['router']-&amp;gt;get('example', function () {
// return view(&amp;quot;testing&amp;quot;);
//})-&amp;gt;name('featured');
//Load a view for testing
//\View::addLocation(__DIR__ . '/../views');
//$this-&amp;gt;loadLaravelMigrations(['--database' =&amp;gt; 'testing']);
//Any migrations I need to bring in
$this-&amp;gt;loadMigrationsFrom([
'--database' =&amp;gt; 'testing',
'--path' =&amp;gt; realpath(__DIR__ . '/migrations')
]);
//$output = $this-&amp;gt;artisan('migrate', ['--database' =&amp;gt; 'testing']);
}
/**
* Setup logging
*/
protected function getEnvironmentSetUp($app)
{
$app-&amp;gt;configureMonologUsing(function ($monolog) {
$path = __DIR__ . &amp;quot;/logs/laravel.log&amp;quot;;
$handler = $handler = new StreamHandler($path, 'debug');
$handler-&amp;gt;setFormatter(tap(new LineFormatter(null, null, true, true), function ($formatter) {
/** @var LineFormatter $formatter */
$formatter-&amp;gt;includeStacktraces();
}));
/** @var \Monolog\Logger $monolog */
$monolog-&amp;gt;pushHandler($handler);
});
//setup db config if needed
//$app['config']-&amp;gt;set('database.default', 'testbench');
//$app['config']-&amp;gt;set('database.connections.testbench', [
// 'driver' =&amp;gt; 'sqlite',
// 'database' =&amp;gt; ':memory:',
// 'prefix' =&amp;gt; '',
//]);
$app['config']-&amp;gt;set('app.debug', env('APP_DEBUG', true));
//Does my pacakge had any default configurations I want to set
//$app['config']-&amp;gt;set('laravel-feature-flag.logging', true);
}
}
&lt;/code>&lt;/pre>&lt;p>Also:&lt;/p>
&lt;pre>&lt;code>composer require --dev &amp;quot;mockery/mockery:0.9.*&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Since I use this a lot to mock and it does not come with &amp;ldquo;orchestra/testbench&amp;rdquo;&lt;/p>
&lt;p>Now I am ready to run tests.&lt;/p>
&lt;p>Here is a sample on&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace Tests\Feature;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use AlfredNutileInc\HPClient\UserFromResource;
use function GuzzleHttp\json_decode;
class UserFromResourceTest extends TestCase
{
use UserFromResource;
public function testResultsFromPayload()
{
$users = \File::get(base_path(&amp;quot;tests/fixtures/resources.json&amp;quot;));
$payload = \File::get(base_path(&amp;quot;tests/fixtures/comments_report_limited.json&amp;quot;));
$results = $this-&amp;gt;transformResouceToResourceName(json_decode($payload, true), json_decode($users, true));
$result = array_first($results);
$this-&amp;gt;assertArrayHasKey('user_name', $result);
$this-&amp;gt;assertEquals('Rob Sherali', $result['user_name']);
}
}
&lt;/code>&lt;/pre>&lt;p>I can easily use Facades, helpers etc that I am use to from Laravel.
And I can see logs in &lt;code>logs/laravel.log&lt;/code>&lt;/p>
&lt;p>Also I add&lt;/p>
&lt;pre>&lt;code> &amp;lt;php&amp;gt;
&amp;lt;env name=&amp;quot;APP_ENV&amp;quot; value=&amp;quot;testing&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;CACHE_DRIVER&amp;quot; value=&amp;quot;array&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;SESSION_DRIVER&amp;quot; value=&amp;quot;array&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;QUEUE_DRIVER&amp;quot; value=&amp;quot;sync&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;MAIL_DRIVER&amp;quot; value=&amp;quot;array&amp;quot;/&amp;gt;
&amp;lt;/php&amp;gt;
&lt;/code>&lt;/pre>&lt;p>To my &lt;code>phpunit.xml.dist&lt;/code> so it can set defaults as Laravel does.&lt;/p></description><category>laravel</category><category>testing</category><category>orchestra</category></item><item><title>BrowserSync and Laravel</title><link>https://alfrednutile.info/posts/239/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/239/</guid><description>&lt;p>Quick reminder to take advantage of this amazing feature &lt;a href="https://laravel.com/docs/5.6/mix#browsersync-reloading">https://laravel.com/docs/5.6/mix#browsersync-reloading&lt;/a>&lt;/p>
&lt;p>No more reloading your browser.&lt;/p>
&lt;pre>&lt;code>yarn add browser-sync --dev
&lt;/code>&lt;/pre>&lt;p>then to your &lt;code>webpack.mix.js&lt;/code> e.g. the domain of the site you are working on.&lt;/p>
&lt;pre>&lt;code> mix.browserSync('foo.test');
&lt;/code>&lt;/pre>&lt;p>finally&lt;/p>
&lt;pre>&lt;code>yarn run watch
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note turn off sourceMaps when running this else it can be kinda slow&lt;/p>
&lt;/blockquote></description><category>laravel</category><category>note2self</category><category>vuejs</category></item><item><title>GroupBy not Sorting by latest</title><link>https://alfrednutile.info/posts/240/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/240/</guid><description>&lt;p>Just to make this easy to find. I had a report to write which had numerous daily rows of the same related model data.
So in this cause I was tracking servers and security reports.&lt;/p>
&lt;p>My reports where daily like this&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th style="text-align:center">server_id&lt;/th>
&lt;th style="text-align:right">failed&lt;/th>
&lt;th>type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;td>security&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;td>testing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:right">0&lt;/td>
&lt;td>testing&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>But a groupBy here on server_id would return ID 1 so it would appear as if it was still failing.&lt;/p>
&lt;p>Adding&lt;/p>
&lt;pre>&lt;code>$results = $results-&amp;gt;whereRaw('ID IN ( select MAX(id) from reports GROUP BY server_id)');
&lt;/code>&lt;/pre>&lt;p>or double group by:&lt;/p>
&lt;pre>&lt;code>$results = $results-&amp;gt;whereRaw('ID IN ( select MAX(id) from reports GROUP BY server_id, type)');
&lt;/code>&lt;/pre>&lt;p>Did the trick to sort and group by that latest record, which &lt;code>latest&lt;/code> did not do for me.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Troubleshoot Laravel Socialite and Github login</title><link>https://alfrednutile.info/posts/238/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/238/</guid><description>&lt;p>This has driven me mad too many times. Basically you will get very little feedback if there is any issue getting the token from Github.&lt;/p>
&lt;p>The problem is in this method.&lt;/p>
&lt;pre>&lt;code> public function user()
{
if ($this-&amp;gt;hasInvalidState()) {
throw new InvalidStateException;
}
$response = $this-&amp;gt;getAccessTokenResponse($this-&amp;gt;getCode());
$user = $this-&amp;gt;mapUserToObject($this-&amp;gt;getUserByToken(
$token = Arr::get($response, 'access_token')
));
return $user-&amp;gt;setToken($token)
-&amp;gt;setRefreshToken(Arr::get($response, 'refresh_token'))
-&amp;gt;setExpiresIn(Arr::get($response, 'expires_in'));
}
&lt;/code>&lt;/pre>&lt;p>This is in the &lt;code>vendor/laravel/socialite/src/Two/AbstractProvider.php&lt;/code>&lt;/p>
&lt;p>So for example my real error was:&lt;/p>
&lt;pre>&lt;code>array:3 [
&amp;quot;error&amp;quot; =&amp;gt; &amp;quot;redirect_uri_mismatch&amp;quot;
&amp;quot;error_description&amp;quot; =&amp;gt; &amp;quot;The redirect_uri MUST match the registered callback URL for this application.&amp;quot;
&amp;quot;error_uri&amp;quot; =&amp;gt; &amp;quot;https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch2&amp;quot;
]
&lt;/code>&lt;/pre>&lt;p>But this shows up overall as a token issue or as &lt;code>GuzzleHttp\Exception\ClientException: Client error: &lt;/code>GET &lt;a href="https://api.github.com/user?access_token=%60">https://api.github.com/user?access_token=`&lt;/a> resulted in a &lt;code>401 Unauthorized&lt;/code> response:` so it is really hard to debug.&lt;/p>
&lt;p>Here is to the next time I get this error to remind me where to &lt;code>dd&lt;/code>&lt;/p>
&lt;p>Also the url gave it away too but by then it was gone:&lt;/p>
&lt;pre>&lt;code>https://foo.te\st/login/github/callback?error=redirect_uri_mismatch&amp;amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch&amp;amp;state=foo
&lt;/code>&lt;/pre></description><category>note2self</category><category>laravel</category></item><item><title>Wrapping Libraries in Services JS</title><link>https://alfrednutile.info/posts/237/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/237/</guid><description>&lt;p>Just a note to self that when using libraries like &lt;code>sweetalert&lt;/code> for example and then I want to convert to &lt;code>sweetalert2&lt;/code>, it would have saved a lot of time to wrap it into a &amp;ldquo;service&amp;rdquo; and import that.&lt;/p>
&lt;p>For example I made this js file&lt;/p>
&lt;p>&lt;code>services/Alerts.js&lt;/code>:&lt;/p>
&lt;pre>&lt;code>import swal from 'sweetalert2';
export default {
send(title, message, error = false) {
swal(
{
type: error ? &amp;quot;error&amp;quot; : &amp;quot;success&amp;quot;,
title: title,
text: message
}
);
}
}
&lt;/code>&lt;/pre>&lt;p>Then import it into the app or into the component that needs it.&lt;/p>
&lt;pre>&lt;code>import Alerts from &amp;quot;./services/alerts.js&amp;quot;;
window.$alerts = Alerts;
&lt;/code>&lt;/pre>&lt;p>And later on in that file&lt;/p>
&lt;pre>&lt;code>let message = &amp;quot;Something went wrong with your token, please update it or email for support&amp;quot;;
$alerts.alert(&amp;quot;Error&amp;quot;, message, true);
&lt;/code>&lt;/pre></description><category>note2self</category></item><item><title>Passing from Blade to VueJs</title><link>https://alfrednutile.info/posts/236/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/236/</guid><description>&lt;p>A lot of posts had &lt;a href="https://medium.com/@m_ramsden/passing-data-from-laravel-to-vue-98b9d2a4bd23">this&lt;/a> style.&lt;/p>
&lt;p>I ended up just needing this:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/huucm3vx4uyklq7/Screenshot%202018-02-23%2020.29.22.png?dl=0" alt="">&lt;/p>
&lt;p>The controller simply does this:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/qw7x7u7ayr7j441/Screenshot%202018-02-23%2020.29.52.png?dl=0" alt="">&lt;/p></description><category>laravel</category><category>note2self</category><category>vuejs</category></item><item><title>Docker Laravel and Cron</title><link>https://alfrednutile.info/posts/234/</link><pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/234/</guid><description>&lt;p>This to this post &lt;a href="https://laracasts.com/discuss/channels/servers/run-the-scheduler-in-a-docker-image/replies/325422">here&lt;/a>&lt;/p>
&lt;p>for the idea.&lt;/p>
&lt;p>Basically running cron in Docker is easy BUT once the Host had more than one Docker client cron stopped working. No clue why but to solve this I did two things&lt;/p>
&lt;p>One made a script that was on the Docker Client&lt;/p>
&lt;p>&lt;code>/scheduler.sh&lt;/code>&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
php /app/artisan schedule:run --verbose --no-interaction &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sleep 60
&lt;/code>&lt;/pre>&lt;p>Then I did this in the &lt;code>Dockerfile&lt;/code>&lt;/p>
&lt;pre>&lt;code>COPY scheduler.sh /
RUN chmod 755 /scheduler.sh
&lt;/code>&lt;/pre>&lt;p>Finally &lt;code>supervisord&lt;/code> manages it:&lt;/p>
&lt;pre>&lt;code>[supervisord]
nodaemon=true
[program:scheduler]
command=/scheduler.sh
autostart=true
autorestart=true
user=root
startsecs = 0
numprocs=1
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
&lt;/code>&lt;/pre>&lt;p>the &lt;code>startsecs&lt;/code> allows it not to be seen as a failing script&lt;/p>
&lt;h3 id="full-dockerfile">Full Dockerfile&lt;/h3>
&lt;pre>&lt;code>FROM ubuntu:16.04
#https://github.com/shipping-docker/dockerized-app/blob/master/docker/app/Dockerfile
MAINTAINER Alfred Nutile
RUN apt-get update \
&amp;amp;&amp;amp; apt-get install -y locales \
&amp;amp;&amp;amp; locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
## had to leave both update requests
RUN apt-get update \
&amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -y cron anacron nginx curl zip unzip git software-properties-common supervisor sqlite3 \
&amp;amp;&amp;amp; add-apt-repository -y ppa:ondrej/php \
&amp;amp;&amp;amp; apt-get update \
&amp;amp;&amp;amp; apt-get install -y screen vim php7.1-fpm php7.1-cli php7.1-mcrypt php7.1-gd php7.1-mysql \
php7.1-pgsql php7.1-imap php-memcached php7.1-mbstring php7.1-xml php7.1-curl \
php7.1-sqlite3 php7.1-xdebug imagemagick php7.1-intl php7.1-zip \
&amp;amp;&amp;amp; php -r &amp;quot;readfile('http://getcomposer.org/installer');&amp;quot; | php -- --install-dir=/usr/bin/ --filename=composer \
&amp;amp;&amp;amp; mkdir /run/php \
&amp;amp;&amp;amp; apt-get remove -y --purge software-properties-common \
&amp;amp;&amp;amp; apt-get -y autoremove \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN mkdir /etc/nginx/ssl
COPY nginx.crt /etc/nginx/ssl/nginx.crt
COPY nginx.key /etc/nginx/ssl/nginx.key
COPY default /etc/nginx/sites-available/default
COPY php-fpm.conf /etc/php/7.1/fpm/php-fpm.conf
COPY xdebug.ini /etc/php/7.1/mods-available/xdebug.ini
# 2018 02 16 09 13 39
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY start-container /usr/local/bin/start-container
RUN chmod +x /usr/local/bin/start-container
## Deal with cron issues
COPY scheduler.sh /
RUN chmod 755 /scheduler.sh
CMD [ &amp;quot;start-container&amp;quot; ]
&lt;/code>&lt;/pre></description><category>laravel</category><category>note2self</category><category>docker</category></item><item><title>Laravel and AWS Rekognition</title><link>https://alfrednutile.info/posts/235/</link><pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/235/</guid><description>&lt;p>&amp;hellip;.&lt;/p></description><category>laravel</category><category>rekognition</category></item><item><title>Pusher and Laravel Updates</title><link>https://alfrednutile.info/posts/233/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/233/</guid><description>&lt;p>Getting error &amp;ldquo;Did you forget to specify the cluster when creating the Pusher instance&amp;rdquo;&lt;/p>
&lt;p>Then need to set &lt;code>config/broadcasting.php&lt;/code>:&lt;/p>
&lt;pre>&lt;code> 'pusher' =&amp;gt; [
'driver' =&amp;gt; 'pusher',
'key' =&amp;gt; env('PUSHER_KEY'),
'secret' =&amp;gt; env('PUSHER_SECRET'),
'app_id' =&amp;gt; env('PUSHER_APP_ID'),
'options' =&amp;gt; [
//
],
],
&lt;/code>&lt;/pre>&lt;p>to&lt;/p>
&lt;pre>&lt;code> 'pusher' =&amp;gt; [
'driver' =&amp;gt; 'pusher',
'key' =&amp;gt; env('PUSHER_KEY'),
'secret' =&amp;gt; env('PUSHER_SECRET'),
'app_id' =&amp;gt; env('PUSHER_APP_ID'),
'options' =&amp;gt; [
&amp;quot;cluster&amp;quot; =&amp;gt; 'us2',
&amp;quot;encrypted&amp;quot; =&amp;gt; true
],
],
&lt;/code>&lt;/pre>&lt;p>And if still calling pusher manually in your js update to be:&lt;/p>
&lt;pre>&lt;code> $window.client = new Pusher($window.pusher_key, {
cluster: 'us2',
encrypted: true
});
var pusher = $pusher($window.client);
&lt;/code>&lt;/pre>&lt;p>the above depends on how are you putting the pusher info into $window but make sure to add the cluster and encryption&lt;/p>
&lt;blockquote>
&lt;p>NOTE yours may not be &lt;strong>us2&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/eu96h23ko3034q2/pusher_cluster.png?dl=0" alt="">&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Dusk and Production (with Dusk disabled)</title><link>https://alfrednutile.info/posts/232/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/232/</guid><description>&lt;pre>&lt;code>In DatabaseServiceProvider.php line 78:
Class 'Faker\Factory' not found
&lt;/code>&lt;/pre>&lt;p>I had a ton if issues getting dusk on production, especially since production would run&lt;/p>
&lt;pre>&lt;code>composer install --no-dev --prefer-dist --no-interaction
&lt;/code>&lt;/pre>&lt;p>To get around this issue I had to do a few things&lt;/p>
&lt;p>One, if you are stuck and can not even run php artisan on the server:&lt;/p>
&lt;pre>&lt;code>rm bootstrap/cache/services.php
rm bootstrap/cache/packages.php
&lt;/code>&lt;/pre>&lt;p>Two, turn off auto discovery for Dusk and just add it to the app/Providers/AppServiceProvider.php&lt;/p>
&lt;pre>&lt;code> public function register()
{
if ($this-&amp;gt;app-&amp;gt;environment('local', 'testing')) {
$this-&amp;gt;app-&amp;gt;register(DuskServiceProvider::class);
}
}
&lt;/code>&lt;/pre>&lt;p>and in &lt;code>composer.json&lt;/code>&lt;/p>
&lt;pre>&lt;code> &amp;quot;extra&amp;quot;: {
&amp;quot;laravel&amp;quot;: {
&amp;quot;dont-discover&amp;quot;: [
&amp;quot;laravel/dusk&amp;quot;
]
}
},
&lt;/code>&lt;/pre>&lt;p>Now if you still get a Faker error as I was let&amp;rsquo;s move that up in our composer file:&lt;/p>
&lt;pre>&lt;code> &amp;quot;fzaninotto/faker&amp;quot;: &amp;quot;^1.7&amp;quot;
},
&amp;quot;require-dev&amp;quot;: {
&amp;quot;mockery/mockery&amp;quot;: &amp;quot;0.9.*&amp;quot;,
&lt;/code>&lt;/pre>&lt;p>Okay so now you are ready.&lt;/p>
&lt;p>As far as Travis goes I run this on the before_deploy&lt;/p>
&lt;pre>&lt;code>before_deploy:
- rm .env
- export APP_ENV=production
- php artisan clear-compiled
- composer install --no-dev --prefer-dist --no-interaction
&lt;/code>&lt;/pre>&lt;p>And prevents the error while at the same time cleanup up my code before CodeDeploy bundles it up for deployment.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Testing Laravel API, Spark with Authentication</title><link>https://alfrednutile.info/posts/231/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/231/</guid><description>&lt;p>Just a reminder to self, if I want to test an API I made and need to pass and &lt;code>api_token&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace Tests\Feature;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Quote;
use Laravel\Spark\Repositories\TokenRepository;
class QuoteControllerTest extends TestCase
{
use RefreshDatabase;
public function testGettingAQuoteUsingToken()
{
$user = factory(\App\User::class)-&amp;gt;create();
$team = factory(\App\Team::class)-&amp;gt;create();
$team-&amp;gt;users()-&amp;gt;attach($user-&amp;gt;id, ['role' =&amp;gt; &amp;quot;member&amp;quot;]);
$quote = factory(\App\Quote::class)-&amp;gt;create([
'team_id' =&amp;gt; $team-&amp;gt;id,
'posted_by' =&amp;gt; $user-&amp;gt;id
]);
$token = new TokenRepository();
$token = $token-&amp;gt;createToken(
$user,
'get_quote',
[]
)-&amp;gt;token;
$this-&amp;gt;json('GET', &amp;quot;/api/teams/{$team-&amp;gt;id}/quotes/random?api_token={$token}&amp;quot;)
-&amp;gt;assertStatus(200)-&amp;gt;assertJson([
'quote' =&amp;gt; $quote-&amp;gt;quote,
'by' =&amp;gt; $quote-&amp;gt;by,
'posted_by' =&amp;gt; [
'email' =&amp;gt; $user-&amp;gt;email,
'name' =&amp;gt; $user-&amp;gt;name,
'avatar' =&amp;gt; $user-&amp;gt;photo_url
]
]);
}
&lt;/code>&lt;/pre>&lt;p>Also I made a &lt;code>database/factories/TeamFactory.php&lt;/code> file:&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Faker\Generator as Faker;
use App\User;
use App\Team;
$factory-&amp;gt;define(Team::class, function (Faker $faker) {
return [
&amp;quot;name&amp;quot; =&amp;gt; $faker-&amp;gt;word,
&amp;quot;owner_id&amp;quot; =&amp;gt; function() {
return factory(User::class)-&amp;gt;create()-&amp;gt;id;
}
];
});
&lt;/code>&lt;/pre></description><category>laravel</category><category>note2self</category><category>testing</category></item><item><title>Example of Making Documentation in Markdown with PDF Output</title><link>https://alfrednutile.info/posts/230/</link><pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/230/</guid><description>&lt;p>Many of the sites I make have a need for a Support page for staff to know how to do things like add content, manage users etc. This article will cover how I go about writing my help docs in Markdown and then displaying it on the website with an option to print as PDF.&lt;/p>
&lt;h2 id="writing-markdown">Writing MarkDown&lt;/h2>
&lt;p>To begin with, I made the help doc in mine. I made a sample one &lt;a href="https://raw.githubusercontent.com/alnutile/alsblog5/master/docs/help.md">here&lt;/a>&lt;/p>
&lt;p>I save this to the root of the application &lt;code>docs/help.md&lt;/code>&lt;/p>
&lt;h2 id="output-the-help-page-markdown-to-html">Output the Help Page Markdown to HTML&lt;/h2>
&lt;p>So there are two things I want out of this, a TOC and the Markdown.&lt;/p>
&lt;p>First I will install the needed libraries.&lt;/p>
&lt;pre>&lt;code>composer require cebe/markdown:~1.1.1 laravelista/sherlock
&lt;/code>&lt;/pre>&lt;p>Then I make a controller &lt;code>php artisan make:controller HelpController&lt;/code> and add a method &lt;code>show&lt;/code>:&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use cebe\markdown\GithubMarkdown;
use Laravelista\Sherlock\Sherlock;
class HelpController extends Controller
{
public function show(GithubMarkdown $markdown_writer, Sherlock $sherlock)
{
$path = base_path(&amp;quot;docs/help.md&amp;quot;);
$help = \File::get($path);
$toc = $sherlock-&amp;gt;deduct($help)-&amp;gt;getToc();
$help = $markdown_writer-&amp;gt;parse($help);
$help = $toc . '&amp;lt;hr&amp;gt;' . $help;
return view('help', compact(&amp;quot;help&amp;quot;));
}
}
&lt;/code>&lt;/pre>&lt;pre>&lt;code>Route::get(&amp;quot;help&amp;quot;, &amp;quot;HelpController@show&amp;quot;)-&amp;gt;name(&amp;quot;help&amp;quot;);
&lt;/code>&lt;/pre>&lt;p>adding to my &lt;code>web.php&lt;/code> file:
And a simple blade template to show the content:&lt;/p>
&lt;pre>&lt;code>@extends('layouts.app')
&amp;lt;!-- --&amp;gt;
@section('content')
&amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
@section('title', 'Example Help')
&amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;Example Help Output&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
{!! $help !!}
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection
&lt;/code>&lt;/pre>&lt;p>You can see the output &lt;a href="https://alfrednutile.info/help">here&lt;/a>&lt;/p>
&lt;p>The author of the Sherlock library suggests a different way to inject the info but I opted for this. It will make more sense when I do the PDF output.&lt;/p>
&lt;p>On the top of that page is a PDF link here is how I can provide that as well.&lt;/p>
&lt;h2 id="output-to-pdf">Output to PDF&lt;/h2>
&lt;p>Install the needed library.&lt;/p>
&lt;pre>&lt;code>composer require barryvdh/laravel-dompdf
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>note I did have to install php7.1-gd and php7.1-dom php7.1-opcache&lt;/p>
&lt;/blockquote>
&lt;p>adding to my &lt;code>web.php&lt;/code> file:&lt;/p>
&lt;pre>&lt;code>Route::get(&amp;quot;pdf&amp;quot;, &amp;quot;HelpController@pdf&amp;quot;)-&amp;gt;name(&amp;quot;pdf&amp;quot;);
&lt;/code>&lt;/pre>&lt;p>And update the controller to have a pdf method:&lt;/p>
&lt;pre>&lt;code> public function pdf(GithubMarkdown $markdown_writer, Sherlock $sherlock)
{
$path = base_path(&amp;quot;docs/help.md&amp;quot;);
$help = \File::get($path);
$toc = $sherlock-&amp;gt;deduct($help)-&amp;gt;getToc();
$help = $markdown_writer-&amp;gt;parse($help);
$help = $toc . '&amp;lt;hr&amp;gt;' . $help;
return \PDF::loadHTML($help)-&amp;gt;stream();
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note: this is a good time to move the injected Classes into a &lt;code>__costructor&lt;/code> since they are using in two methods in the same class&lt;/p>
&lt;/blockquote>
&lt;p>Alright, now when you click the link o the help page it will output an inline PDF.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Serverless Python and Example App WIP</title><link>https://alfrednutile.info/posts/229/</link><pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/229/</guid><description>&lt;p>There are good docs on this &lt;a href="http://serverless.com">http://serverless.com&lt;/a> platform.
For Python&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://serverless.com/framework/docs/providers/aws/examples/hello-world/python/#hello-world-python-example">https://serverless.com/framework/docs/providers/aws/examples/hello-world/python/#hello-world-python-example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/serverless/examples">https://github.com/serverless/examples&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I will cover some items here I need to do time after time.&lt;/p>
&lt;ul>
&lt;li>Tagging&lt;/li>
&lt;li>ENV settings&lt;/li>
&lt;li>Testing&lt;/li>
&lt;/ul>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>Example file &lt;code>test_cf_backuper.py&lt;/code>:&lt;/p>
&lt;pre>&lt;code>import unittest
import mock
from mock import MagicMock
from get_buckets import GetBuckets
import boto3
real_client = boto3.client('cloudformation')
import logging
import json
from CFBackuper import CFBackuper
logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.DEBUG)
class TestHandler(unittest.TestCase):
def test_get_one_template(self):
client = CFBackuper()
results = client.handle()
self.assertTrue(results)
&lt;/code>&lt;/pre>&lt;p>This allows me to mock the client for example of boto, more on that later.&lt;/p>
&lt;pre>&lt;code>python -m unittest test_cf_backuper.TestHandler.test_get_one_template
&lt;/code>&lt;/pre>&lt;h2 id="pip-install">Pip Install&lt;/h2>
&lt;p>Along the way I make a &lt;code>requirments.txt&lt;/code>
for example&lt;/p>
&lt;pre>&lt;code>requests
boto3
mock
logging
python-dotenv
&lt;/code>&lt;/pre>&lt;p>then&lt;/p>
&lt;pre>&lt;code>pip install -r requirements.txt
&lt;/code>&lt;/pre>&lt;p>gets me setup locally&lt;/p>
&lt;h2 id="aws-cli">AWS Cli&lt;/h2>
&lt;p>It is key to have your profile setup per their docs &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html">here&lt;/a>&lt;/p>
&lt;p>Then shift the default as needed:&lt;/p>
&lt;pre>&lt;code>export AWS_DEFAULT_PROFILE=profile_name_here
&lt;/code>&lt;/pre>&lt;p>Or in the &lt;code>servless.yml&lt;/code> file:&lt;/p>
&lt;pre>&lt;code>provider:
name: aws
runtime: python2.7
profile: profile_name_here
&lt;/code>&lt;/pre>&lt;p>More info &lt;a href="https://serverless.com/framework/docs/providers/aws/guide/credentials/#using-aws-profiles">here&lt;/a>&lt;/p></description><category>serverless</category><category>python</category><category>wip</category></item><item><title>VueJS Transition Helper</title><link>https://alfrednutile.info/posts/228/</link><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/228/</guid><description>&lt;p>There are docs on how to get a Transition to take effect when an item loads &lt;a href="https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components">https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components&lt;/a>&lt;/p>
&lt;p>But I was not having much luck with this using &lt;a href="https://uiv.wxsm.space/carousel">https://uiv.wxsm.space/carousel&lt;/a>.&lt;/p>
&lt;p>I ended up making a quick helper function to keep it from looking like exploded elements.&lt;/p>
&lt;p>You can see the results of this change here&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/osmd4p5zor2jgah/featured_blog.gif?dl=0" alt="">&lt;/p>
&lt;p>So the steps followed per the docs above for the most part.&lt;/p>
&lt;p>Add to my scss file:&lt;/p>
&lt;pre>&lt;code>
.ibox-content.text-center.carousel {
min-height: 400px;
}
.fade-enter-active, .fade-leave-active {
transition: opacity .5s;
}
.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
opacity: 0;
}
&lt;/code>&lt;/pre>&lt;p>Make a &lt;code>TransitionHelper.vue&lt;/code> componenent:&lt;/p>
&lt;pre>&lt;code>&amp;lt;template&amp;gt;
&amp;lt;transition name=&amp;quot;fade&amp;quot;&amp;gt;
&amp;lt;div v-show=&amp;quot;show&amp;quot; &amp;gt;
&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/transition&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
data() {
return {
show: false
};
},
mounted() {
this.show = true;
}
};
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Then added to my &lt;code>app.js&lt;/code>&lt;/p>
&lt;pre>&lt;code>Vue.component('transition-helper', require('./components/TransitionHelper.vue'));
&lt;/code>&lt;/pre>&lt;p>Finally wrapped my blade file output in this helper.&lt;/p>
&lt;pre>&lt;code> &amp;lt;transition-helper style=&amp;quot;display: none;&amp;quot;&amp;gt;
&amp;lt;carousel class=&amp;quot;homepage-featured-carousel&amp;quot; :indicators=&amp;quot;false&amp;quot; :controls=&amp;quot;true&amp;quot; :interval=&amp;quot;0&amp;quot;&amp;gt;
@foreach($featured_documents-&amp;gt;chunk(6) as $chunk)
&amp;lt;slide&amp;gt;
&amp;lt;div class=&amp;quot;row-fluid&amp;quot;&amp;gt;
@foreach($chunk as $item)
&amp;lt;div class=&amp;quot;col-xs-2&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;ibox float-e-margins homepage-featured-item&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;ibox-title&amp;quot;&amp;gt;
&amp;lt;img class=&amp;quot;img-responsive&amp;quot; src=&amp;quot;images/ces/image_placeholder.svg&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;ibox-content&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You can see the &lt;code>display:none&lt;/code> kicking in before the page loads &lt;code>js&lt;/code> etc keeping it well hidden.
Then once it is all loaded and we are ready I show it and transition it in.&lt;/p></description><category>vuejs</category><category>note2self</category></item><item><title>Laravel Asset Notes WIP</title><link>https://alfrednutile.info/posts/227/</link><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/227/</guid><description>&lt;p>This is just a reminder area of all the minor details as I find them that I need to remember&lt;/p>
&lt;h2 id="fontawesome">FontAwesome&lt;/h2>
&lt;pre>&lt;code>yarn add font-awesome
&lt;/code>&lt;/pre>&lt;p>Then in my &lt;code>resources/assets/sass/app.scss&lt;/code>&lt;/p>
&lt;pre>&lt;code>// Fonts
@import url(&amp;quot;https://fonts.googleapis.com/css?family=Raleway:300,400,600&amp;quot;);
// Variables
@import &amp;quot;variables&amp;quot;;
// Bootstrap
@import &amp;quot;~bootstrap-sass/assets/stylesheets/bootstrap&amp;quot;;
@import &amp;quot;~font-awesome/css/font-awesome&amp;quot;;
&lt;/code>&lt;/pre>&lt;p>My webpack is the default&lt;/p>
&lt;pre>&lt;code>mix.js('resources/assets/js/app.js', 'public/js')
.sass('resources/assets/sass/app.scss', 'public/css');
&lt;/code>&lt;/pre>&lt;p>set to go!&lt;/p>
&lt;p>If using Less&lt;/p>
&lt;pre>&lt;code>#resources/assets/less/app.less
@import &amp;quot;./../../../node_modules/font-awesome/less/font-awesome&amp;quot;;
&lt;/code>&lt;/pre></description><category>note2self</category><category>laravel</category><category>assets</category><category>wip</category></item><item><title>PostMark SMTP for sending Notifications and Password Resets</title><link>https://alfrednutile.info/posts/226/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/226/</guid><description>&lt;p>I have been using PostMark for years &lt;a href="https://postmarkapp.com">https://postmarkapp.com&lt;/a>
for sending emails, e.g. password reset and more.&lt;/p>
&lt;p>They have an API but to get going with SMTP all the info is &lt;a href="https://postmarkapp.com/developer/user-guide/sending-email/sending-with-smtp">here&lt;/a>&lt;/p>
&lt;p>Basically get your KEY and use it in your .env like this:&lt;/p>
&lt;pre>&lt;code>MAIL_DRIVER=smtp
MAIL_HOST=smtp.postmarkapp.com
MAIL_PORT=587
MAIL_USERNAME=foo
MAIL_PASSWORD=foo
MAIL_ENCRYPTION=tls
&lt;/code>&lt;/pre>&lt;p>And all should work. Just make sure to&lt;/p>
&lt;ul>
&lt;li>Register the domain in their domain ui&lt;/li>
&lt;li>Set the from info in Laravel&lt;/li>
&lt;/ul></description><category>laravel</category><category>note2self</category></item><item><title>Dusk Notes</title><link>https://alfrednutile.info/posts/225/</link><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/225/</guid><description>&lt;p>Just keeping a list of gotchas around dusk.&lt;/p>
&lt;h2 id="use-refreshdatabase-not-working">use RefreshDatabase not working&lt;/h2>
&lt;p>Cost: 1 hour lost&lt;/p>
&lt;p>Basically I had to go back to the slower &amp;ldquo;use DatabaseMigrations;&amp;rdquo; otherwise it would not work. The user was null.&lt;/p>
&lt;p>Links:
&lt;a href="https://laracasts.com/discuss/channels/testing/dusk-problem-databasetransactions">This thread helped&lt;/a>&lt;/p>
&lt;h2 id="headless-or-not">Headless or not&lt;/h2>
&lt;p>Cost: 1 hour lost or less&lt;/p>
&lt;p>For some odd reasons my tests started coming up blank.&lt;/p>
&lt;p>I turned off headless in this class &lt;code>DuskTestCase&lt;/code>&lt;/p>
&lt;pre>&lt;code> protected function driver()
{
$args = [
'--disable-gpu',
'--headless'
];
if (env(&amp;quot;HEADLESS_OFF&amp;quot;)) {
$args = [
'--disable-gpu'
];
}
$options = (new ChromeOptions)-&amp;gt;addArguments($args);
return RemoteWebDriver::create(
'http://localhost:9515',
DesiredCapabilities::chrome()-&amp;gt;setCapability(
ChromeOptions::CAPABILITY,
$options
)
);
}
&lt;/code>&lt;/pre>&lt;p>And this way it still works on travis.&lt;/p></description><category>note2self</category><category>laravel</category><category>dusk</category></item><item><title>Continuous Delivery in a NutShell</title><link>https://alfrednutile.info/posts/224/</link><pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/224/</guid><description>&lt;h1 id="mainline-workflow">Mainline Workflow&lt;/h1>
&lt;blockquote>
&lt;p>&amp;ldquo;Once you achieve a certain frequency of releases, around once a week or so, it no longer makes sense to branch for release.&amp;rdquo; - Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/p>
&lt;/blockquote>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;p>I want to do a &lt;code>tl;dr&lt;/code> of a workflow, that two years ago seemed insane, but now would seem impossible for me to work without and still feel efficient.
The topic of Continuous Delivery and Mainline workflow.&lt;/p>
&lt;p>To sum it up:&lt;/p>
&lt;p>“Developers that practice working in small blocks of code, writing tests and committing often. Your app has the right amount of tests in place, a CI that runs with each commit, building and testing for every push. Reviewing each others code daily, and the ability to Feature Flag items that are not ready yet that with each push to the only branch, Mainline, the code then goes to production. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>”
Insane right?&lt;/p>
&lt;p>But then when your hear of the many companies following this pattern:&lt;/p>
&lt;ul>
&lt;li>Google&lt;/li>
&lt;li>Facebook&lt;/li>
&lt;li>Amazon&lt;/li>
&lt;li>&lt;a href="https://www.atlassian.com/blog/continuous-delivery/practical-continuous-deployment">Atlassian&lt;/a>&lt;/li>
&lt;li>WordPress&lt;/li>
&lt;li>Intercom&lt;/li>
&lt;li>IMVU, since 2009 (50 deployments/day)&lt;/li>
&lt;li>Wealthfront, since 2010&lt;/li>
&lt;li>Etsy, since 2010&lt;/li>
&lt;li>DISQUS, since 2011&lt;/li>
&lt;li>Box, since 2013&lt;/li>
&lt;li>Hubspot, since 2013 (300 deployments/day)&lt;/li>
&lt;li>Tesla and Adobe&lt;/li>
&lt;/ul>
&lt;p>[^2]&lt;/p>
&lt;p>And watch &lt;a href="https://youtu.be/SjVV3xuYKJs">videos&lt;/a> by Jez Humble and read the book Continuous Delivery, you start to see how you can leave behind a Feature Branch/PR workflow for this much more efficient and still stable workflow.&lt;/p>
&lt;p>That about sums it up but now a bit more details.&lt;/p>
&lt;h2 id="day-to-day-responsibilities-of-the-developers">Day to day responsibilities of the developers&lt;/h2>
&lt;blockquote>
&lt;p>Your team prioritizes keeping the software deployable over working on new features - Martin Fowler &lt;a href="https://martinfowler.com/bliki/ContinuousDelivery.html">ContinuousDelivery&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>First of all this workflow really asks for developers to break down their work to small small steps/blocks. Almost going hand in hand with TDD minus.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/p6amd7n63yqn32g/4_pane_guy_and_getting_started.png?dl=0" alt="">&lt;/p>
&lt;p>With this, and some items I list below, the developer can move forward with confidence that the app is not going to break with the feature they are working on being not 100% done.&lt;/p>
&lt;p>And the developer is working knowing that each block of code has to be production ready so there has to be trust here that they will code at this level. But all of this will surface in the code review that I will talk about below.&lt;/p>
&lt;p>And to top it off they are pushing to the repo and therefore a Continuous Integration system like TravisCI, 3-4 times at least a day.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;blockquote>
&lt;p>Being proud of 100% test coverage is like being proud of reading every word in the newspaper. Some are more important than others. - Kent beck&lt;/p>
&lt;/blockquote>
&lt;p>As noted above coverage and testing is key. This does not mean 100% coverage but as a team you have an agreement to the right amount and your CI system should fail when the code falls below this amount.&lt;/p>
&lt;p>These test should be part of all our blocks of code you are committing and not be an after thought.&lt;/p>
&lt;p>And lastly these tests are what give you all the confidence to have this workflow where you are pushing to a server numerous times a day.&lt;/p>
&lt;h2 id="code-review">Code Review&lt;/h2>
&lt;blockquote>
&lt;p>10 lines of code = 10 issues.
500 lines of code = &amp;ldquo;looks fine.&amp;rdquo;
Code reviews - @iamdevloper&lt;/p>
&lt;/blockquote>
&lt;p>Code Review is key, and this is were many from a PR (Pull Request) work flow would argue is missing. Code is getting into &amp;ldquo;master&amp;rdquo; before being reviewed.&lt;/p>
&lt;p>I get it, but if we are committing often, reviewing often and have good test coverage, then you will see areas of the code where patterns can be optimized or direction changed as you take a couple of times a day to do the code review.&lt;/p>
&lt;p>And this is an pattern that will ideally help every one on the team to grow to the level expected. If some developers are truly too junior to code at this level then maybe there are more root level efforts to be had to help them, e.g. pair coding etc.&lt;/p>
&lt;p>And the Code Review goes both ways not just lead reviewing others but reviewing each others code.&lt;/p>
&lt;h2 id="feature-flags">Feature Flags&lt;/h2>
&lt;blockquote>
&lt;p>Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. - Martin Fowler&lt;/p>
&lt;/blockquote>
&lt;p>This is another key pattern to make this possible. Let&amp;rsquo;s say feature Foo is ready for production but feature Bar is not. Both are on mainline and both are pushed to production! But Bar is behind a feature flag/toggle. This means that unless an admin goes in and turns it on in the UI or a setting changed in the ENVIRONMENT is set to on then it will not appear, e.g. the load balancer sends traffic from us-east to server 1 where this feature is on.&lt;/p>
&lt;p>As noted above the developer is working in small blocks that will not impact the application as a whole. Even migrations can be done this way. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>This also leaves us open to do A B testing too if we want. Or better yet remove a feature that we find out was not being used! Nothing beats being able to remove code that is not needed.&lt;/p>
&lt;h2 id="ci">CI&lt;/h2>
&lt;blockquote>
&lt;p>From now on, our code in revision control will always build successfully and pass its tests - &lt;a href="http://www.jamesshore.com/Blog/Continuous-Integration-on-a-Dollar-a-Day.html">James Shore: Continuous Integration on a Dollar a Day&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This is the gateway from Developer to Deployment. This is the guard that keeps those accidental typos, missing libraries etc from making it to the server.&lt;/p>
&lt;p>Just one &lt;code>.yml&lt;/code> file later, good example &lt;a href="https://github.com/thephpleague/skeleton/blob/master/.travis.yml">here&lt;/a> for php, and you are ready to use a system like TravisCI.&lt;/p>
&lt;p>And this one step will be a world of difference even if you are working alone.&lt;/p>
&lt;p>This is key in CD is that no code will be deployed till it passes CI. This means:&lt;/p>
&lt;ul>
&lt;li>The code will be built on the server catching &amp;ldquo;it works on my machine issues&amp;rdquo;&lt;/li>
&lt;li>The tests has to pass.&lt;/li>
&lt;li>The style rules have to pass&lt;/li>
&lt;/ul>
&lt;p>And once all this passes then you can have it do the deployment for you!&lt;/p>
&lt;p>Even with tools like &lt;a href="https://laravel.com/docs/5.5/dusk">Dusk&lt;/a> or &lt;a href="http://behat.org/en/latest/">Behat&lt;/a> you can be testing your UI as well.&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;blockquote>
&lt;p>Over time, deployments should tend towards being fully automated. There should be two tasks for a human being to perform to deploy software into a development, test, or production environment: to pick the version and environment and to press the “deploy” button - Humble, Jez. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/p>
&lt;/blockquote>
&lt;p>There are many ways to deploy of course. The CD goal is that you are deploy an &amp;ldquo;Artifact&amp;rdquo;. The reason is that this build and all the steps to make it so, that passed on your CI system should not be run again when deployed.&lt;/p>
&lt;p>A good example of this is say you have 3 servers behind a load balancer and you want to deploy to all of them, one at a time. You then have to hope, if you are not deploying an artifact, that your steps will work on all them as they did on the CI. For me this would mean.&lt;/p>
&lt;ul>
&lt;li>composer install - which can have moments where Github fails or http issue&lt;/li>
&lt;li>yarn install - still some risk here of server issues&lt;/li>
&lt;/ul>
&lt;p>What, for me, has been working well is &lt;a href="https://aws.amazon.com/codedeploy/">CodeDeploy&lt;/a>. This integrates with TravisCI so it fits right into the &lt;code>.yml&lt;/code> file. And during deployment of this artifact its is smart enough to do it one server at a time, removing it from the ELB (Elastic Load Balancer) while this is happening, and then putting it back when done if it passes. Stopping along the way and rolling back if there is a fail.&lt;/p>
&lt;h2 id="long-qa-branches">Long QA Branches&lt;/h2>
&lt;p>There are those moments when QA and regulations are blocking you. But this then turns into a &amp;ldquo;release branch&amp;rdquo; and not a tag.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/blvz1t41eejrwzs/release_branch.jpg?dl=0" alt="">&lt;/p>
&lt;p>Here are some quotes from the book Continuous Delivery.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A more manageable branching strategy (when you can not release as often) —our strong recommendation, and arguably the industry standard—is to create long-lived branches only on release, as shown in the image above&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>And&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Branch for Release The one situation when it’s always acceptable to create a branch is shortly before a release. Once the branch is created, testing and validation of the release is done from code on the branch, while new development is performed on mainline.&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>Finally&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;It is important, when branching for release, not to create further branches off the release branch.&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>Again this if for those times when there are systems / departments and regulations in place that leave you no real option.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;p>Jez Humble and Continuous Deliver 20017 &lt;a href="https://www.youtube.com/watch?v=SjVV3xuYKJs&amp;amp;t=458s">Keynote: Continous Delivery Sounds Great By Jez Humble @ Agile India 2017 - YouTube&lt;/a>&lt;/p>
&lt;p>The Book &lt;a href="https://www.amazon.com/dp/B003YMNVC0?ref_=k4w_ss_details_rh">here&lt;/a>&lt;/p>
&lt;p>Martin Fowler Continuous Delivery &lt;a href="https://martinfowler.com/bliki/ContinuousDelivery.html">ContinuousDelivery&lt;/a>&lt;/p>
&lt;p>Feature Toggles - &lt;a href="https://martinfowler.com/articles/feature-toggles.html">Feature Toggles (aka Feature Flags)&lt;/a>&lt;/p>
&lt;h2 id="footnotes">Footnotes&lt;/h2>
&lt;p>[^2] Credit to: &lt;a href="https://www.quora.com/What-companies-best-exemplify-IMVU-style-continuous-deployment">What companies best exemplify IMVU-style continuous deployment? - Quora&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Or even going to staging with an &amp;ldquo;artifact&amp;rdquo; will be good enough since that will be sent as a whole to production. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>For us we keep logic in the code and not so much in the database, so when a field is created we tend to allow it to be null since this means we can manage that impact it has on the rest of the application if our code is not ready yet to manage the field. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>continuous delivery</category></item><item><title>Laravel Shift and Your Day Job</title><link>https://alfrednutile.info/posts/223/</link><pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/223/</guid><description>&lt;p>** UPDATED November 22 2017 **&lt;/p>
&lt;p>The service &lt;a href="https://laravelshift.com/shifts">Laravel Shift&lt;/a> is a great way to save a ton of time and keep your Laravel application up to date.&lt;/p>
&lt;p>But sometimes you may not be allowed to share access to your company Github account for this process since it is hard to limit access at the repo level.&lt;/p>
&lt;p>In this case I have a quick way to get your work done and back into the company repo IF that is okay with your boss.&lt;/p>
&lt;p>Here are the steps:&lt;/p>
&lt;p>Make a new branch since this is a huge update&lt;/p>
&lt;p>Then make a repo on your account the is PRIVATE&lt;/p>
&lt;p>Then in the same folder of the exiting repository type :&lt;/p>
&lt;pre>&lt;code>git remote add shift git@github.com:alnutile/planner.git
&lt;/code>&lt;/pre>&lt;p>The tricky part here is that if there are private dependencies.&lt;/p>
&lt;p>There is no easy answer, yes since this is a branch you could:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>remove those dependencies from composer and &lt;code>config/app.php&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>then run &lt;code>composer install&lt;/code> again to clean out the lock file (UPDATE: just delete the composer.lock file once you know the install is working)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Then push to your repo:&lt;/p>
&lt;pre>&lt;code>git push shift 5.5
&lt;/code>&lt;/pre>&lt;p>Now go to the Shift website and start the process pointing to the repo you just made. Once paid then in moments you will get a PR.
Merge that in and start the process of fixing any files it noted as missing.
I typically will pull this work down locally.&lt;/p>
&lt;pre>&lt;code>git pull --rebase shift 5.5
&lt;/code>&lt;/pre>&lt;p>Then run your tests to make sure all is well&lt;/p>
&lt;p>When done with any manual fixes and if you need to run Shift again:&lt;/p>
&lt;pre>&lt;code>git push shift 5.5
&lt;/code>&lt;/pre>&lt;p>Now rinse and repeat till you are 5.5&lt;/p>
&lt;blockquote>
&lt;p>NOTE: After each merge I tend to clean out vendor and composer.lock:&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>rm -rf composer.lock vendor
&lt;/code>&lt;/pre>&lt;p>This just seems to be a lot faster of a process.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Wrapping JSONEditor in Vue as Well as Laravel Blade</title><link>https://alfrednutile.info/posts/222/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/222/</guid><description>&lt;p>&lt;strong>UPDATED November 05 2017&lt;/strong>&lt;/p>
&lt;p>This will cover how to make a &lt;a href="https://github.com/josdejong/jsoneditor">JSONEditor&lt;/a> component that I can then use in a Blade template and listen to events.&lt;/p>
&lt;p>You will end up with this:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt="">&lt;/p>
&lt;p>First making sure I have all the packages I need:&lt;/p>
&lt;pre>&lt;code> //package.json
&amp;quot;devDependencies&amp;quot;: {
&amp;quot;axios&amp;quot;: &amp;quot;^0.17&amp;quot;,
&amp;quot;bootstrap-sass&amp;quot;: &amp;quot;^3.3.7&amp;quot;,
&amp;quot;cross-env&amp;quot;: &amp;quot;^5.0.1&amp;quot;,
&amp;quot;jquery&amp;quot;: &amp;quot;^3.2&amp;quot;,
&amp;quot;laravel-mix&amp;quot;: &amp;quot;^1.0&amp;quot;,
&amp;quot;lodash&amp;quot;: &amp;quot;^4.17.4&amp;quot;,
&amp;quot;vue&amp;quot;: &amp;quot;^2.1.10&amp;quot;
},
&amp;quot;dependencies&amp;quot;: {
&amp;quot;select2&amp;quot;: &amp;quot;^4.0.5&amp;quot;,
&amp;quot;jsoneditor&amp;quot;: &amp;quot;^5.9.6&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>And to load it into my bootstrap file:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/bootstrap.js
try {
window.$ = window.jQuery = require('jquery');
require('bootstrap-sass');
require(&amp;quot;select2&amp;quot;);
require(&amp;quot;jsoneditor&amp;quot;);
} catch (e) {
console.log(&amp;quot;Error loading jquery&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>Which gets pulled in by my app.js which I also register the global component:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/app.js
require('./bootstrap');
window.Vue = require('vue');
/**
* Using this as a globle event emmitter for components to easily talk to other components
*/
window.EventBus = new Vue();
Vue.component('cat-json-editor', require('./components/JSONEditor'));
Vue.component('cat-config-field', require('./components/ConfigField'));
//end of file
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The app.js and bootstrap.js are default workflows of Laravel&lt;/p>
&lt;/blockquote>
&lt;p>Then I will make the component:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/components/JSONEditor.vue
&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;div id=&amp;quot;jsoneditor&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import JSONEditor from 'jsoneditor';
export default Vue.extend({
props: ['config'],
mounted: function () {
let self = this;
let container = document.getElementById('jsoneditor');
let options = {
onChange: function() {
EventBus.$emit('config-updated', editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) { editor.set(window.config); }
}
});
&amp;lt;/script&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
#jsoneditor {
width: 800px;
height: 600px;
}
&amp;lt;/style&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Here I register the props and I setup some config using code I placed into window from my controller. You can use &lt;a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">this tool&lt;/a> for this process.
I could have passed it into the component but chose not to.&lt;/p>
&lt;p>So now when there is a change it will emit the change to the global &lt;code>EventBus&lt;/code>&lt;/p>
&lt;p>Now for the &lt;code>ConfigField&lt;/code> component:&lt;/p>
&lt;pre>&lt;code>&amp;lt;&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;config&amp;quot; name=&amp;quot;config&amp;quot; class=&amp;quot;form-control&amp;quot; rows=&amp;quot;30&amp;quot; v-model=&amp;quot;config&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default Vue.extend({
data() {
return {
'config': JSON.stringify(window.config)
}
},
methods: {
configUpdated: function(json) {
this.config = JSON.stringify(json);
}
},
created() {
EventBus.$on(&amp;quot;config-updated&amp;quot;, this.configUpdated);
}
});
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>With these two components in place I now need to add the components to the HTML template.&lt;/p>
&lt;p>After this is setup my Blade file has the needed Vue listener etc to update the form (non-ajax) as needed:&lt;/p>
&lt;pre>&lt;code>@push('scripts')
&amp;lt;script&amp;gt;
new Vue({
el: '#config_form',
})
&amp;lt;/script&amp;gt;
@endpush
&amp;lt;!-- Form above this that is doing all the form submission work --&amp;gt;
&amp;lt;div id=&amp;quot;config_form&amp;quot;&amp;gt;
&amp;lt;label for=&amp;quot;config&amp;quot;&amp;gt;Config&amp;lt;/label&amp;gt;
&amp;lt;cat-json-editor&amp;gt;&amp;lt;/cat-json-editor&amp;gt;
&amp;lt;cat-config-field&amp;gt;&amp;lt;/at-config-field&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>In this case I am taking advantage of Blades &lt;a href="https://laravel.com/docs/5.5/blade#stacks">stack feature&lt;/a>&lt;/p>
&lt;p>And the minor amount of work here just mounts Vue onto the &lt;code>#config_form&lt;/code>&lt;/p>
&lt;p>Then I use Vue to listen to the event &amp;ldquo;config-updated&amp;rdquo;. From there, since this is not about Ajax requests, I update the hidden field on the form.
I could have done this with JQuery but just wanted to get use to this Vue workflow. Also I could see sending this over Ajax sooner than later even if just for validation notices etc.&lt;/p>
&lt;p>Here is a quick look at the Scope of the objects:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/nc1yn0hci05mtq4/events.png?dl=0" alt="">&lt;/p></description><category>vue</category><category>vue2</category><category>laravel</category><category>blade</category><category>note2self</category></item><item><title>Laravel, Dusk and Valet</title><link>https://alfrednutile.info/posts/221/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/221/</guid><description>&lt;p>By default I set my &lt;code>phpunit.xml&lt;/code> to use &lt;code>test&lt;/code> as my database:&lt;/p>
&lt;pre>&lt;code> &amp;lt;php&amp;gt;
&amp;lt;env name=&amp;quot;APP_ENV&amp;quot; value=&amp;quot;testing&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;CACHE_DRIVER&amp;quot; value=&amp;quot;array&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;SESSION_DRIVER&amp;quot; value=&amp;quot;array&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;MAIL_DRIVER&amp;quot; value=&amp;quot;log&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;QUEUE_DRIVER&amp;quot; value=&amp;quot;sync&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;DB_DATABASE&amp;quot; value=&amp;quot;test&amp;quot;/&amp;gt; &amp;lt;-- this line here
&amp;lt;/php&amp;gt;
&lt;/code>&lt;/pre>&lt;p>But with &lt;a href="https://laravel.com/docs/5.5/valet">Valet&lt;/a> and &lt;a href="https://laravel.com/docs/5.5/dusk">Dusk&lt;/a> this led to the browser using my default database and not &lt;code>test&lt;/code>
but the PHPUnit test itself was using &lt;code>test&lt;/code> so the user I created and logged in as was not available in the browser.&lt;/p>
&lt;p>I tried to set &lt;code>.env.dusk.local&lt;/code> and I tried &lt;code>phpuni.dusk.xml&lt;/code> none of it worked so I had to remove &lt;code>&amp;lt;env name=&amp;quot;DB_DATABASE&amp;quot; value=&amp;quot;test&amp;quot;/&amp;gt;&lt;/code>&lt;/p>
&lt;p>This is a bummer and I am sure I am missing something. What this means and my tests reset my database for my local app which ideally it would not since it is really nice to keep state.&lt;/p></description><category>note2self</category><category>laravel</category><category>testing</category></item><item><title>WIP AWS Batch and Workers with Laravel</title><link>https://alfrednutile.info/posts/220/</link><pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/220/</guid><description>&lt;h1 id="sending-docker-commands-to-get-a-task-done">Sending Docker Commands to Get A Task Done&lt;/h1>
&lt;p>This article will show how to get started with AWS Batch and Docker to spin up a &amp;ldquo;worker&amp;rdquo;&lt;/p>
&lt;p>By the time you are done reading it you will:&lt;/p>
&lt;ol>
&lt;li>Have a Docker image to run your command in.&lt;/li>
&lt;li>Deploy the Docker image to AWS ECR&lt;/li>
&lt;li>And Run a Task on the AWS Batch system, or a 100 tasks, does not matter.&lt;/li>
&lt;li>Finally you will have the scripts needed to fully build AWS Batch with CloudFormation, e.g. super simple&lt;/li>
&lt;/ol>
&lt;h2 id="building-the-laravel-worker">Building the Laravel Worker&lt;/h2>
&lt;p>This can be any language you want, any framework or none! I will focus on Laravel.&lt;/p>
&lt;p>Either way we need a git repo, so later we can push this and do a Docker build on the CI via the deploy scripts.&lt;/p>
&lt;p>Note the 2 Commands&lt;/p>
&lt;ul>
&lt;li>One to manage all the Tasks and then stitch the results together&lt;/li>
&lt;li>One to just covert the image to PDF
&amp;ndash; depend on?&lt;/li>
&lt;/ul>
&lt;p>Install SDK&lt;/p>
&lt;h3 id="the-command">The Command&lt;/h3>
&lt;p>Before you get going install &lt;a href="https://aws.amazon.com/cli/">AWS CLI&lt;/a> on your machine.&lt;/p>
&lt;p>Make sure you have your credentials and profiles setup per the docs &lt;a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">here&lt;/a>&lt;/p>
&lt;p>Then the rest will work off those credentials as we make new ones per application and you just place them into your profile via &lt;code>~/.aws/credentials&lt;/code> and &lt;code>~/.aws/config&lt;/code>&lt;/p>
&lt;h3 id="installing-incomings">Installing Incomings&lt;/h3>
&lt;h2 id="building-the-docker-container-to-run-this-work">Building the Docker container to run this work&lt;/h2>
&lt;pre>&lt;code>docker-compose build //this will be needed locally
docker-compose run --rm -w /app app php artisan
docker-compose run app php artisan security:scan --git-repo=https://github.com/alnutile/security-scanner-show-error-poc
docker-compose run -w /app app php artisan batch:convert_image_to_pdf --image-url=https://dl.dropboxusercontent.com/s/d2sx0wjheb7dk0p/example_batch.jpg --destination=batch-example/foo
&lt;/code>&lt;/pre>&lt;h2 id="setting-up-aws-to-run-the-work-on">Setting up AWS to run the work on.&lt;/h2>
&lt;h3 id="compute-environment">Compute Environment&lt;/h3>
&lt;p>For starters there is the Compute Environment (CE). This is what manages the scaling of the EC2 instances.&lt;/p>
&lt;p>The script is HERE. But this is only needed once. I will Explain in a moment.&lt;/p>
&lt;h3 id="job-definition">Job Definition&lt;/h3>
&lt;p>Then there is the JobDefinitions. This is where we can define the Job we want to run and the Compute Environment to run it on. Let the CE figure out the scaling, and hence we can just build one and share it with every one.
So if you have a CE already build try putting your JobDefinition on that before making another one for your Worker.&lt;/p>
&lt;p>The script is HERE.&lt;/p>
&lt;p>Open the scripts, they are just JSON. Good docs are &lt;strong>HERE&lt;/strong> on how to make, or read these scripts.&lt;/p>
&lt;p>Once those are all setup take the AWS KEY and Secret it gave you and use it to setup you local AWS CLI.&lt;/p>
&lt;p>This is key for a sane workflow. Here is a link [&lt;strong>HERE&lt;/strong>] get your profile right.&lt;/p>
&lt;p>Once you have this setup all the rest will fall into place.&lt;/p>
&lt;h2 id="deploying-to-ci">Deploying to CI&lt;/h2>
&lt;p>Before we push let&amp;rsquo;s make sure that &lt;code>.gitignore&lt;/code> has:&lt;/p>
&lt;pre>&lt;code>docker/app/packaged/*
!docker/app/packaged/.gitkeep
&lt;/code>&lt;/pre>&lt;p>Plus all the default Laravel ignores including &lt;code>.env&lt;/code>&lt;/p>
&lt;p>Deploy Script
Now we need to get this work to CI&lt;/p>
&lt;h2 id="going-to-aws-ui-to-run">Going to AWS UI to run&lt;/h2>
&lt;p>This is annoying lets make a command for this&amp;hellip;&lt;/p>
&lt;h3 id="the-testing-command">The Testing Command&lt;/h3>
&lt;p>More import that is how a &amp;ldquo;requesting&amp;rdquo; app will call this.&lt;/p>
&lt;p>&lt;strong>DIAGRAM HERE&lt;/strong>&lt;/p>
&lt;h2 id="putting-it-all-together">Putting it all together&lt;/h2>
&lt;p>Show running 10 jobs via the command&lt;/p>
&lt;h2 id="now-taking-it-a-bit-further">Now Taking it a bit further&lt;/h2>
&lt;p>The command did a lot&lt;/p>
&lt;ul>
&lt;li>Got Image&lt;/li>
&lt;li>Made into PDF&lt;/li>
&lt;li>Stitched them all together&lt;/li>
&lt;/ul>
&lt;p>But now let&amp;rsquo;s take this a bit further. I am going to make 2 JobDefinitions.&lt;/p>
&lt;p>One will kick off an orchestrate the work by creating a job per image, tracking the progress of those jobs, and
When all those jobs are done knit them together!&lt;/p>
&lt;p>Here is how it will look.&lt;/p>
&lt;h2 id="summary-of-install">Summary of Install&lt;/h2>
&lt;p>Get Docker file in place docker/app/DockerFile
Get Packaged file in place
Setup Core CloudFormation&lt;/p>
&lt;ul>
&lt;li>ECR&lt;/li>
&lt;li>JobDefinition&lt;/li>
&lt;li>User Key/Secret
Get docker-compose inlace
Get Travis.yml in place and docker/deploy.bash
See diagram on how this all comes together&lt;/li>
&lt;/ul></description><category>laravel</category><category>note2self</category><category>aws</category><category>wip</category></item><item><title>Mocking Models OutSide of Laravel</title><link>https://alfrednutile.info/posts/219/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/219/</guid><description>&lt;p>This all comes down to me using &lt;a href="https://github.com/orchestral/testbench">https://github.com/orchestral/testbench&lt;/a>&lt;/p>
&lt;p>With this in place I can work on an external library as if it is in Laravel.&lt;/p>
&lt;p>The one place I ran into trouble on though was mocking model related methods like &lt;code>all&lt;/code> for example a model &lt;code>Foo&lt;/code> being called as &lt;code>\App\Foo::all()&lt;/code> was hard to mock cause all is stacic:&lt;/p>
&lt;pre>&lt;code>//\Illuminate\Database\Eloquent\Model::all
public static function all($columns = ['*'])
{
return (new static)-&amp;gt;newQuery()-&amp;gt;get(
is_array($columns) ? $columns : func_get_args()
);
}
&lt;/code>&lt;/pre>&lt;p>But once I did this to my test:&lt;/p>
&lt;pre>&lt;code> public function testGetWithNoResults()
{
$mock = \Mockery::mock(&amp;quot;alias:AlfredNutileInc\LaravelFeatureFlags\FeatureFlag&amp;quot;);
$mock-&amp;gt;shouldReceive('all')-&amp;gt;once()-&amp;gt;andReturn([]);
App::instance(FeatureFlag::class, $mock);
$fjs = new FeatureFlagsForJavascript();
$this-&amp;gt;assertEmpty($fjs-&amp;gt;get());
}
&lt;/code>&lt;/pre>&lt;p>It was mocked!&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Serverless and Custom Tags for Resources</title><link>https://alfrednutile.info/posts/217/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/217/</guid><description>&lt;p>Because much of serveless.com is CloudFormation based, you can easily update existing resources. They talk about this feature &lt;a href="https://serverless.com/framework/docs/providers/aws/guide/resources/#override-aws-cloudformation-resource">here&lt;/a>&lt;/p>
&lt;p>For me this was required for adding tags&lt;/p>
&lt;pre>&lt;code># you can add CloudFormation resource templates here
resources:
Resources:
ServerlessDeploymentBucket:
Properties:
Tags:
- { Key: &amp;quot;project&amp;quot;, Value: &amp;quot;${self:provider.project}&amp;quot; }
- { Key: &amp;quot;environment&amp;quot;, Value: &amp;quot;${opt:stage, self:provider.stage}&amp;quot; }
- { Key: &amp;quot;parent_project&amp;quot;, Value: &amp;quot;${self:custom.parent}&amp;quot; }
- { Key: &amp;quot;key_contact&amp;quot;, Value: &amp;quot;${self:custom.contact}&amp;quot; }
- { Key: &amp;quot;billing_ref&amp;quot;, Value: &amp;quot;${self:custom.billing_ref}&amp;quot; }
&lt;/code>&lt;/pre>&lt;p>now that bucket, that Severless makes by default, will have tags.&lt;/p>
&lt;p>Also I need to tag Lambda functions too for billing:&lt;/p>
&lt;pre>&lt;code>functions:
check_queue:
handler: handler.check_queue
tags:
project: ${self:provider.project}
environment: ${opt:stage, self:provider.stage}
parent_project: ${self:custom.parent}
key_contact: ${self:custom.contact}
billing_ref: ${self:custom.billing_ref}
events:
&lt;/code>&lt;/pre>&lt;p>Some of this info I centralize in this area here&lt;/p>
&lt;pre>&lt;code>custom:
secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}
contact: AlfredNutile
billing_ref: foo_app
parent: foo_app
&lt;/code>&lt;/pre>&lt;p>Some of this I can drive using this plugin &lt;code>serverless-secrets-plugin&lt;/code> &lt;a href="https://www.npmjs.com/package/serverless-secrets-plugin">here&lt;/a>&lt;/p>
&lt;p>So I then pull in the secrets file and use it as needed.&lt;/p>
&lt;pre>&lt;code>provider:
name: aws
stage: dev
runtime: nodejs6.10
environment:
APP_ENV: ${self:custom.secrets.APP_ENV}
REGION: ${self:custom.secrets.REGION}
ACCOUNT_ID: 555555555
&lt;/code>&lt;/pre></description><category>serverless</category><category>aws</category></item><item><title>Versions and Branching a Library</title><link>https://alfrednutile.info/posts/218/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/218/</guid><description>&lt;p>At work &lt;a href="https://twitter.com/cavanaghacea">Andrew Cavanagh&lt;/a> and I had to, using many examples on of libraries we use, to finalize how to branch and version our libraries.&lt;/p>
&lt;p>There should be one branch for each major version (&lt;code>1.0&lt;/code>, &lt;code>2.0&lt;/code>, etc).&lt;/p>
&lt;p>These should be the only branches besides &lt;code>master&lt;/code>.&lt;/p>
&lt;p>Releases within these versions should be tagged following semantic &lt;a href="http://semver.org/">versioning guidlines&lt;/a> (&lt;code>v1.2.3&lt;/code> for example).&lt;/p>
&lt;p>In general, all work should be done via pr from the &lt;code>master&lt;/code> branch and then merged into whatever the current branch is.&lt;/p>
&lt;p>The only exception is when you are making minor or patch version changes to a previous version.&lt;/p>
&lt;p>For example, if the most current version is &lt;code>2.0&lt;/code>, then any changes to master via pr and then merged in to the &lt;code>2.0&lt;/code> branch. However, at that point any changes required by the &lt;code>1.0&lt;/code> branch would be made via pr off of the &lt;code>1.0&lt;/code> branch. See fig.1 for an example.&lt;/p>
&lt;p>&lt;img src="https://www.dropbox.com/s/wzn4loxi3u7vzck/Branching%20Libraries%20and%20Packages.png?raw=1" alt="">
figure 1&lt;/p>
&lt;p>When creating a new version, the package&amp;rsquo;s &lt;code>composer.json&lt;/code> should alias &lt;code>dev-master&lt;/code> to the latest version:&lt;/p>
&lt;pre>&lt;code>&amp;quot;extra&amp;quot;: {
&amp;quot;branch-alias&amp;quot;: {
&amp;quot;dev-master&amp;quot;: &amp;quot;3.0-dev&amp;quot;
}
},
&lt;/code>&lt;/pre></description><category>laravel</category><category>versioning</category><category>note2self</category></item><item><title>Setting Up My Mac</title><link>https://alfrednutile.info/posts/215/</link><pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/215/</guid><description>&lt;p>Great videos here:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://laracasts.com/lessons/dev-machine-setup">https://laracasts.com/lessons/dev-machine-setup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://laracasts.com/lessons/dev-machine-setup-phpstorm">https://laracasts.com/lessons/dev-machine-setup-phpstorm&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="items">Items&lt;/h2>
&lt;ul>
&lt;li>MindNode&lt;/li>
&lt;li>EverNote&lt;/li>
&lt;li>TextExpander&lt;/li>
&lt;li>Dropbox&lt;/li>
&lt;li>1Password&lt;/li>
&lt;li>Alfred
&lt;ul>
&lt;li>Extensions
&lt;ul>
&lt;li>DND &lt;a href="https://github.com/mlantz/DND-Alfred-Workflow">https://github.com/mlantz/DND-Alfred-Workflow&lt;/a>
&lt;ul>
&lt;li>Clipboard History which seems to be part of it but needs to be put on&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Misc&lt;/li>
&lt;li>Napkin&lt;/li>
&lt;li>Scanner&lt;/li>
&lt;li>Moom&lt;/li>
&lt;li>SequelPro&lt;/li>
&lt;li>iTerm&lt;/li>
&lt;li>SSH Keys&lt;/li>
&lt;li>Bartender&lt;/li>
&lt;li>Brew&lt;/li>
&lt;li>PHP7 (using brew &lt;a href="https://developerjack.com/blog/2016/installing-php71-with-homebrew/">https://developerjack.com/blog/2016/installing-php71-with-homebrew/&lt;/a>)&lt;/li>
&lt;li>Composer&lt;/li>
&lt;li>Python&lt;/li>
&lt;/ul>
&lt;h2 id="setup-composer-global-path">Setup Composer Global path&lt;/h2>
&lt;p>&lt;code>touch ~/.bashrc&lt;/code>&lt;/p>
&lt;p>Then&lt;/p>
&lt;pre>&lt;code>export PATH=~/.composer/vendor/bin:$PATH
&lt;/code>&lt;/pre>&lt;p>then &lt;code>source ~/.bashrc&lt;/code>&lt;/p>
&lt;h2 id="zshell">Zshell&lt;/h2>
&lt;pre>&lt;code>chsh -s /bin/zsh
&lt;/code>&lt;/pre>&lt;p>Make sure to add alias to it:&lt;/p>
&lt;pre>&lt;code>vim ~/.zshrc
&lt;/code>&lt;/pre>&lt;p>Add&lt;/p>
&lt;pre>&lt;code>. ~/.aliases
&lt;/code>&lt;/pre>&lt;p>then&lt;/p>
&lt;pre>&lt;code>touch ~/.aliases
&lt;/code>&lt;/pre>&lt;p>That file right now looks like this for me&lt;/p>
&lt;pre>&lt;code>alias pickle=&amp;quot;~/Code/gherkin5.4/workbench/alfred-nutile-inc/gd/pickle&amp;quot;
alias vssh=&amp;quot;cd ~/Homestead &amp;amp;&amp;amp; vagrant ssh&amp;quot;
alias vp=&amp;quot;cd ~/Homestead &amp;amp;&amp;amp; vagrant provision&amp;quot;
alias vhalt=&amp;quot;cd ~/Homestead &amp;amp;&amp;amp; vagrant halt&amp;quot;
alias hedit=&amp;quot;subl ~/.homestead/Homestead.yaml&amp;quot;
alias vup=&amp;quot;cd ~/Homestead &amp;amp;&amp;amp; vagrant up&amp;quot;
alias docker-composer=&amp;quot;docker-compose&amp;quot;
&lt;/code>&lt;/pre>&lt;p>then&lt;/p>
&lt;pre>&lt;code>source ~/.zshrc
&lt;/code>&lt;/pre>&lt;h2 id="sublime-shortcut">Sublime shortcut&lt;/h2>
&lt;pre>&lt;code>cd /usr/local/bin
ln -s &amp;quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&amp;quot; subl
&lt;/code>&lt;/pre></description><category>note2self</category></item><item><title>Serverless, AWS API Gateway and Authentication</title><link>https://alfrednutile.info/posts/214/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/214/</guid><description>&lt;p>Just a note2self really.&lt;/p>
&lt;p>Setting up Auth was super easy&lt;/p>
&lt;p>As seen below I had to add to my serverless.yml &lt;code>authorizer&lt;/code>&lt;/p>
&lt;pre>&lt;code> addQuote:
handler: quote/handler.add
events:
- http:
path: quote
method: post
cors: true
authorizer: aws_iam
&lt;/code>&lt;/pre>&lt;p>&lt;strong>authorizer: aws_iam&lt;/strong>&lt;/p>
&lt;p>From here I then needed, in this case Postman, to pass an AWS KEY and SECRET made for this app.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/54mz7mxo0x7ei25/auth_aws.jpg?dl=0" alt="">&lt;/p>
&lt;p>When making the user I attached this Policy to the user&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
&amp;quot;Statement&amp;quot;: [
{
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&amp;quot;Action&amp;quot;: [
&amp;quot;execute-api:Invoke&amp;quot;
],
&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:execute-api:us-east-1:AWS_ID:*/dev/POST/quote&amp;quot;
}
]
}
&lt;/code>&lt;/pre>&lt;p>I an easily make this in the &lt;code>serverless.yml&lt;/code> file by adding the following:&lt;/p>
&lt;pre>&lt;code>
resources:
Resources:
s3Data:
Type: AWS::S3::Bucket
Properties:
BucketName: &amp;quot;${self:custom.bucket}&amp;quot;
VersioningConfiguration:
Status: Enabled
quotePolicy:
Type: AWS::IAM::Policy
Properties:
PolicyName: &amp;quot;serverless-quotes-policy-${opt:stage, self:provider.stage}&amp;quot;
PolicyDocument:
Version: &amp;quot;2012-10-17&amp;quot;
Statement:
-
Effect: &amp;quot;Allow&amp;quot;
Action:
- &amp;quot;execute-api:Invoke&amp;quot;
Resource: &amp;quot;arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/${opt:stage, self:provider.stage}/POST/quote&amp;quot;
Users:
- &amp;quot;serverless-quotes-${opt:stage, self:provider.stage}&amp;quot;
DependsOn:
- authUser
userKey:
Type: AWS::IAM::AccessKey
Properties:
UserName: &amp;quot;serverless-quotes-${opt:stage, self:provider.stage}&amp;quot;
DependsOn:
- authUser
authUser:
Type: AWS::IAM::User
Properties:
UserName: &amp;quot;serverless-quotes-${opt:stage, self:provider.stage}&amp;quot;
Outputs:
UserSecret:
Description: The user secret
Value:
&amp;quot;Fn::GetAtt&amp;quot;: [ userKey, SecretAccessKey ]
UserKey:
Description: The user key
Value:
&amp;quot;Ref&amp;quot;: userKey
&lt;/code>&lt;/pre>&lt;p>This is after adding &lt;code>serverless-pseudo-parameters&lt;/code> plugin, see link below.&lt;/p>
&lt;p>Now when I run &lt;code>sls deploy --stage dev&lt;/code> I get the User, IAM, Key and Secret (via the webui output), then I need to access this url.&lt;/p>
&lt;p>That was it. With serverless.com I could have limited stage, production builds to the unique user per stack as well.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;p>&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/iam-authentication-api-gateway/">https://aws.amazon.com/premiumsupport/knowledge-center/iam-authentication-api-gateway/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/#serverlessyml-reference">https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/#serverlessyml-reference&lt;/a>&lt;/p></description><category>serverless.com</category><category>aws</category><category>serverless</category></item><item><title>IronFunctions and PHP</title><link>https://alfrednutile.info/posts/213/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/213/</guid><description>&lt;p>A colleague of mine &lt;a href="https://twitter.com/skwashd">Dave Hall&lt;/a> poing out &lt;a href="https://github.com/iron-io/functions">IronFunctions&lt;/a>. And being in the pursuit of serverless options especially ones that even have examples of PHP I had to give it a try. This post is a note2self in that the intro &lt;a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">here&lt;/a> has some bits that need fixing BUT I think it is close and I hope to add more updates here about the tool.&lt;/p>
&lt;p>All the steps below will only work once you take on the initial hello world &lt;a href="https://github.com/iron-io/functions/blob/master/README.md">here&lt;/a>. After that you have the &lt;code>fn&lt;/code> cli tool installed and a running local iron-functions server.&lt;/p>
&lt;p>For one I needed to apply each patch seen &lt;a href="https://github.com/iron-io/functions/pull/444/files">here&lt;/a>&lt;/p>
&lt;p>Once I had all that in place I re-reran the &lt;code>fn&lt;/code> install command from the folder where I download the &lt;code>iron-io/functions&lt;/code> repo into&lt;/p>
&lt;pre>&lt;code>cd ../functions
curl -LSs https://goo.gl/VZrL8t | sh
&lt;/code>&lt;/pre>&lt;p>Then I restarted the service&lt;/p>
&lt;pre>&lt;code>docker run --rm -it --name functions -v ${PWD}/data:/app/data -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 iron/functions
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>btw you need to have Docker working on your machine. This is so easy now that, for example &lt;a href="https://docs.docker.com/docker-for-mac/install/">mac&lt;/a>, it should be a gui install.&lt;/p>
&lt;/blockquote>
&lt;p>Ok now back to my example project&lt;/p>
&lt;pre>&lt;code>cd ../example_php
&lt;/code>&lt;/pre>&lt;p>In here I have several files since the above fix&lt;/p>
&lt;pre>&lt;code>worker.php
func.yml
Dockerfile
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>the cat hello.payload.php in the example docs did not work so I used curl and POST instead but this is not what I want to do
I want to test this from the CLI first so will come back to that later&lt;/p>
&lt;/blockquote>
&lt;p>This folder has a &lt;code>composer.json&lt;/code> file. Just run &lt;code>composer init&lt;/code> since it just needs to be a basic install of PHP.&lt;/p>
&lt;p>&lt;strong>worker.php&lt;/strong>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
require 'vendor/autoload.php';
stream_set_blocking(STDIN, 0);
$payload = json_decode(file_get_contents(&amp;quot;php://stdin&amp;quot;), true);
if (isset($payload['name'])) {
var_dump($payload);
echo &amp;quot;Hello 2 &amp;quot;, $payload['name'],&amp;quot;!\n\n&amp;quot;;
} else {
var_dump($payload);
echo &amp;quot;Hello World 2!\n\n&amp;quot;;
}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>func.yml&lt;/strong>&lt;/p>
&lt;pre>&lt;code>name: alnutile/hello
version: 0.0.7
runtime: php
entrypoint: ./func
build:
- docker run --rm -v &amp;quot;$PWD&amp;quot;:/worker -w /worker iron/php:dev composer install
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Dockerfile&lt;/strong>&lt;/p>
&lt;pre>&lt;code>FROM iron/php
WORKDIR /app
ADD . /app
ENTRYPOINT [&amp;quot;php&amp;quot;, &amp;quot;worker.php&amp;quot;]
&lt;/code>&lt;/pre>&lt;p>Then as the docs note &lt;a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">https://github.com/iron-io/functions/tree/master/examples/hello/php&lt;/a> I do all the install steps.&lt;/p>
&lt;p>Once those are done ran &lt;code>curl&lt;/code> to see it work:&lt;/p>
&lt;pre>&lt;code>&amp;gt;curl -X POST http://localhost:8080/r/phpapp1/hello -d '{ &amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot; }'
&lt;/code>&lt;/pre>
&lt;p>Which results in:&lt;/p>
&lt;pre>&lt;code>array(1) {
[&amp;quot;name&amp;quot;]=&amp;gt;
string(3) &amp;quot;bar&amp;quot;
}
Hello 2 bar!
&lt;/code>&lt;/pre>&lt;p>For updates I added one more file &lt;code>update.sh&lt;/code>&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
# update a function with a new version and push it
fn bump &amp;amp;&amp;amp; fn build &amp;amp;&amp;amp; fn push
# then update the route
fn routes update phpapp1 /hello
&lt;/code>&lt;/pre>&lt;p>just to save some time there.&lt;/p>
&lt;p>More soon on using this with Lumen and other options. I tried this but some PHP items are missing on the Alpine docker image to make this work.&lt;/p></description><category>php</category><category>ironfunctions</category><category>note2self</category></item><item><title>Testing a trait with PHPUnit</title><link>https://alfrednutile.info/posts/212/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/212/</guid><description>&lt;p>In an effort to start recording test coverage using &lt;code>vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover&lt;/code> I had some issues with traits being seen.&lt;/p>
&lt;p>I tried numerous approaches my default being just to &lt;code>Use&lt;/code> the trait in the test class. I ended up with this as I found some online info about trait testing &lt;a href="http://blog.florianwolters.de/educational/2012/09/20/Testing-Traits-with-PHPUnit/">here&lt;/a> that references a now missing post by Sebastian Bergman the maker of PHPUnit&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Symfony\Component\Yaml\Yaml;
/**
* Test class for {@see PfawsYaml}.
*
* @covers \PfAws\Traits\PfawsYaml
*/
class PfawsYamlTest extends TestCase
{
/**
* The object under test.
*
* @var object
*/
protected $traitObject;
public function setUp()
{
parent::setUp(); // TODO: Change the autogenerated stub
$this-&amp;gt;traitObject = $this-&amp;gt;createObjectForTrait();
}
/**
* *Creation Method* to create an object for the trait under test.
*
* @return object The newly created object.
*/
private function createObjectForTrait()
{
$traitName = '\PfAws\Traits\PfawsYaml';
return $this-&amp;gt;getObjectForTrait($traitName);
}
/**
* coversDefaultClass loadPfawsYaml
*/
public function testLoadPfawsYaml()
{
$path = __DIR__ . '/fixtures/pfaws.yaml';
$results = $this-&amp;gt;traitObject-&amp;gt;loadPfawsYaml('staging', $path);
$this-&amp;gt;assertEquals(&amp;quot;bar2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_key'));
$this-&amp;gt;assertEquals(&amp;quot;foo2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_secret'));
$this-&amp;gt;assertNotNull($this-&amp;gt;traitObject-&amp;gt;getPfawsyaml());
}
/**
* @coversDefaultClass getPfawsYamlEnv
*/
public function testGetPfawsYamlEnv()
{
$path = __DIR__ . '/fixtures/pfaws.yaml';
$results = $this-&amp;gt;traitObject-&amp;gt;loadPfawsYaml('staging', $path);
$this-&amp;gt;assertEquals(&amp;quot;bar2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_key'));
$this-&amp;gt;assertEquals(&amp;quot;foo2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_secret'));
}
/**
* @coversDefaultClass getPfawsyaml
*/
public function testGetPfawsyaml()
{
$path = __DIR__ . '/fixtures/pfaws.yaml';
$results = $this-&amp;gt;traitObject-&amp;gt;loadPfawsYaml('staging', $path);
$this-&amp;gt;assertNotNull($results-&amp;gt;getPfawsyaml());
$this-&amp;gt;assertNotNull($results);
$this-&amp;gt;assertEquals(&amp;quot;bar2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_key'));
$this-&amp;gt;assertEquals(&amp;quot;foo2&amp;quot;, $results-&amp;gt;getPfawsYamlEnv('aws_secret'));
}
/**
* @coversDefaultClass setS3
*/
public function testSetS3() {
$path = __DIR__ . '/fixtures/pfaws.yaml';
$this-&amp;gt;traitObject-&amp;gt;loadPfawsYaml('staging', $path);
$this-&amp;gt;traitObject-&amp;gt;setS3();
$filesystem = \League\Flysystem\AwsS3v3\AwsS3Adapter::class;
$this-&amp;gt;assertInstanceOf($filesystem, $this-&amp;gt;traitObject-&amp;gt;getS3());
}
/**
* @coversDefaultClass getPfawsYamlKeyValue
*/
public function testGetPfawsYamlKeyValue() {
$path = __DIR__ . '/fixtures/pfaws.yaml';
$this-&amp;gt;traitObject-&amp;gt;loadPfawsYaml('staging', $path)-&amp;gt;setS3();
$app_name = $this-&amp;gt;traitObject-&amp;gt;getPfawsYamlKeyValue('app_name');
$this-&amp;gt;assertEquals('foo', $app_name);
}
}
&lt;/code>&lt;/pre>&lt;p>The annotations are for the coverage to know what I am testing.&lt;/p>
&lt;p>This area puts the Trait in to an object using a method provided by PHPUnit:&lt;/p>
&lt;pre>&lt;code>/**
* *Creation Method* to create an object for the trait under test.
*
* @return object The newly created object.
*/
private function createObjectForTrait()
{
$traitName = '\PfAws\Traits\PfawsYaml';
return $this-&amp;gt;getObjectForTrait($traitName);
}
&lt;/code>&lt;/pre>
&lt;p>And then I run &lt;code>vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover&lt;/code> and the coverage was boosted / recognized.&lt;/p>
&lt;p>On a side note adding to my &lt;code>phpunit.xml&lt;/code>&lt;/p>
&lt;pre>&lt;code> &amp;lt;logging&amp;gt;
&amp;lt;log
type=&amp;quot;coverage-html&amp;quot;
target=&amp;quot;./docs/coverage&amp;quot;
charset=&amp;quot;UTF-8&amp;quot;
yui=&amp;quot;true&amp;quot;
lowUpperBound=&amp;quot;35&amp;quot;
highLowerBound=&amp;quot;70&amp;quot;
showUncoveredFiles=&amp;quot;true&amp;quot;
/&amp;gt;
&amp;lt;log
type=&amp;quot;coverage-text&amp;quot;
target=&amp;quot;php://stdout&amp;quot;
lowUpperBound=&amp;quot;35&amp;quot;
highLowerBound=&amp;quot;70&amp;quot;
/&amp;gt;
&amp;lt;/logging&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Gave me some really nice code coverage information&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2hbocuv8qfyv2u9/code_coverage.png?dl=0" alt="">&lt;/p></description><category>php</category><category>testing</category><category>phpunit</category></item><item><title>Machine to Machine Laravel Passport</title><link>https://alfrednutile.info/posts/211/</link><pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/211/</guid><description>&lt;p>Recently I needed to create an OAuth around Machine to Machine authentication &lt;a href="https://laravel.com/docs/master/passport#client-credentials-grant-tokens">here&lt;/a>&lt;/p>
&lt;p>The docs are good but I must have missed something obvious or maybe I just well missed something obvious.&lt;/p>
&lt;p>Basically I just kept getting &lt;code>Unauthenticated.&lt;/code> and this makes sense since I received the token using&lt;/p>
&lt;pre>&lt;code>grant_type:client_credentials
client_id:1
client_secret:foobar
&lt;/code>&lt;/pre>&lt;p>So after following the docs I had to then to the following&lt;/p>
&lt;pre>&lt;code>Route::middleware('auth:api')-&amp;gt;get('/user', function (Request $request) {
return $request;
});
&lt;/code>&lt;/pre>&lt;p>with&lt;/p>
&lt;pre>&lt;code>Route::middleware('auth.client')-&amp;gt;get('/user', function (Request $request) {
return &amp;quot;FOO&amp;quot;;
});
&lt;/code>&lt;/pre>&lt;p>&lt;strong>&amp;lsquo;auth.client&amp;rsquo;&lt;/strong> being key!&lt;/p>
&lt;p>And updated &lt;code>app/Http/Kernel.php&lt;/code>:&lt;/p>
&lt;pre>&lt;code> protected $routeMiddleware = [
'auth' =&amp;gt; \Illuminate\Auth\Middleware\Authenticate::class,
'auth.basic' =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'bindings' =&amp;gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,
'can' =&amp;gt; \Illuminate\Auth\Middleware\Authorize::class,
'guest' =&amp;gt; \App\Http\Middleware\RedirectIfAuthenticated::class,
'throttle' =&amp;gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
'auth.client' =&amp;gt; \Laravel\Passport\Http\Middleware\CheckClientCredentials::class,
];
&lt;/code>&lt;/pre>&lt;p>Adding &lt;code>auth.client&lt;/code> then I was back in business.&lt;/p></description><category>laravel</category><category>passport</category></item><item><title>Meetings and Cross TimeZone Teams</title><link>https://alfrednutile.info/posts/210/</link><pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/210/</guid><description>&lt;p>Wrote and article &lt;a href="https://medium.com/@alnutile/meetings-and-cross-timezone-teams-c9b833c43bfb">https://medium.com/@alnutile/meetings-and-cross-timezone-teams-c9b833c43bfb&lt;/a> on trying to find the blanance of meetings and focus time.&lt;/p>
&lt;p>Saved here as well for when they go out of business :)&lt;/p>
&lt;h2 id="meetings-and-cross-timezone-teams">Meetings and Cross TimeZone Teams&lt;/h2>
&lt;p>Meetings are needed, most of them at least, and when I worked with a team that was all in the same timezone I was easily able to say, “Between 1–4 I am coding/focusing” or “Between 6am and 9am” I am coding. Then the rest of the day was for meetings, interruptions and just helping out on things.&lt;/p>
&lt;blockquote>
&lt;p>Blocking out time to Code/Focus and get the work done is key and without that it is hard to not find yourself working after hours when it is “quiet”&lt;/p>
&lt;/blockquote>
&lt;p>One book that pointed this out to me was REWORK by the people at 37 Signals.&lt;/p>
&lt;p>But now being in different timezones things get much harder. My “coding time” now does not overlap with someone else who is leaving soon since they are UTC+1 for example. And to top it off there is Slack :( Slack.&lt;/p>
&lt;blockquote>
&lt;p>Group chat is like being in an all-day meeting with random participants and no agenda. — Jason Fried Is group chat making you sweat?
Al: Okay so I do not agree with this 100% :)&lt;/p>
&lt;/blockquote>
&lt;p>Overall when I start having to work at night to get my coding work done, that is when I know I have not managed my work day well with meetings and distractions. Yes for some their job is meetings. And for some Lead Developers meeting times increase but there still needs to be time to code/focus.&lt;/p>
&lt;blockquote>
&lt;p>If you’re a technical lead, you need to be coding. — Martin Fowler&lt;/p>
&lt;/blockquote>
&lt;h2 id="slack">Slack&lt;/h2>
&lt;p>First Slack. Well this is just hard. New rooms showing up every day, new ideas going into “action” every moment, it truly becomes FOMO. But not so much a social FOMO as much as just falling behind in all that is going on etc. Just when I feel like I have a handle on Email, e.g I read it in the morning, lunch and end of work day and the expectations are different, then comes Slack and Chat in general. This form of communication is really all about right now or asap. Or at least I feel it is.&lt;/p>
&lt;p>So during the day I started using &lt;a href="https://github.com/mlantz/DND-Alfred-Workflow">https://github.com/mlantz/DND-Alfred-Workflow&lt;/a> as a Pomodoro like tool to close down notifications. If I close them down manually I too often find myself forgetting to turn it on again.&lt;/p>
&lt;p>This allows me to focus on what I am doing for nth minutes and coming out again to see if there are any actions or threads to take on.&lt;/p>
&lt;p>So during the part of the day I am open for interruptions I can set it to “dnd 25” for 25 minutes of focus etc.&lt;/p>
&lt;p>I can do this through out the day, but during the “coding time” or “focus time” I might just set “dnd 180” so 3 hours for example.&lt;/p>
&lt;blockquote>
&lt;p>Giving you self enough time to get into the zone but not in too deep that you lose focus of the bigger picture is a good balance.&lt;/p>
&lt;/blockquote>
&lt;h2 id="coding-or-focus-time">Coding or Focus Time&lt;/h2>
&lt;p>Since I can not section off a day for 3–4 hours since someone in UTC higher or lower than mine may need to meet with me I set aside days and expectations for the day.&lt;/p>
&lt;blockquote>
&lt;p>Setting expectations for a day no longer leaves me feeling like I got nothing (coding) done. For example at the end of Monday I feel like I got a lot done if the meetings went well and planning for the week went well.&lt;/p>
&lt;/blockquote>
&lt;h3 id="monday-tuesday">Monday, Tuesday&lt;/h3>
&lt;p>Are meetings days, free to be chopped up, free to NOT get large tasks done that need focus time.
These two are great days to work on organizing the week, getting all your tickets in place, pinging people in Slack about meetings and what not.&lt;/p>
&lt;h3 id="wednesday">Wednesday&lt;/h3>
&lt;p>I start protecting my day after 11am. That is when I start to take on a large task. Before that time I have time for meetings and interruptions. The last of my planning should be done by now.&lt;/p>
&lt;h3 id="thursday-and-friday">Thursday and Friday&lt;/h3>
&lt;p>These are the days for getting the work done that is on the list of items to get done. Make a realistic list for yourself. Track them using ideas like this one. And go at it.
But with that said I still need to keep an eye on Slack. But as noted above how often? And let people know your cycle of focus and reply, set your status so people know you are in a Pomodoro (tomato icon?) or just tell your team when they see that you may not get back to them asap.
But these two days should be not chopped into bits by meetings, slack and other context changes. StandUp? Fine maybe one quick one that is focused, but StandUps? That brings you out. So maybe limit to a Slack Standup.
For these StandUps stick to the guidelines&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>What did you do yesterday&lt;/li>
&lt;li>What is your task(s) for today&lt;/li>
&lt;li>Any blockers&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Point being the doing of the work needs to get done and the planning time if done properly has had it’s chance to be laid down and hopefully done well. In this case giving it almost 50% of a chance to create a work load and expectations. (for me this is okay but for a developer maybe meetings should be 20% of your week)&lt;/p>
&lt;p>And with these patterns in place, then ideally I find myself less feeling like I did not get enough done at the end of the day, or trying to do the “real work” after hours.&lt;/p></description><category>developers</category><category>note2self</category></item><item><title>Dusk and Homestead</title><link>https://alfrednutile.info/posts/209/</link><pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/209/</guid><description>&lt;p>Working on learning &lt;a href="https://laravel.com/docs/5.4/dusk#introduction">Dusk&lt;/a> and really excited to get going with it.&lt;/p>
&lt;p>But running it in homestead proved to be a bit tricky.&lt;/p>
&lt;p>After following the docs and running &lt;code>php artisan dusk&lt;/code> not much happened. Sure if I ran it on my Mac and it just worked but my tests needed to do migrations and what not and I want to keep my work in Homestead.&lt;/p>
&lt;p>So a few steps later and it worked thanks to this post &lt;a href="https://github.com/laravel/dusk/issues/50#issuecomment-275155974">https://github.com/laravel/dusk/issues/50#issuecomment-275155974&lt;/a>&lt;/p>
&lt;h2 id="local-host-file">Local host file&lt;/h2>
&lt;p>Make sure to edit &lt;code>sudo vim /etc/hosts&lt;/code> and add the APP_URL there as well&lt;/p>
&lt;pre>&lt;code>127.0.0.1 webforms.dev
&lt;/code>&lt;/pre>&lt;p>Then make sure you can hit it from inside homestead as well.&lt;/p>
&lt;p>&lt;code>curl -X GET http://webforms.dev&lt;/code>&lt;/p>
&lt;p>All set?&lt;/p>
&lt;h2 id="then-run-xvfb">Then run xvfb&lt;/h2>
&lt;p>This is a virtual frame buffer that Chrome runs in. Pretty cool really &lt;a href="https://en.wikipedia.org/wiki/Xvfb">https://en.wikipedia.org/wiki/Xvfb&lt;/a>&lt;/p>
&lt;p>So I like to use screen to start a new session&lt;/p>
&lt;p>&lt;code>screen -S running_xvfb&lt;/code>&lt;/p>
&lt;p>and then in there run&lt;/p>
&lt;p>&lt;code>Xvfb :0 -screen 0 1280x8000x24 &amp;amp;&lt;/code>&lt;/p>
&lt;p>Now we want to swap back to our default session &lt;code>CTRL+A&lt;/code> then still holding CTRL let go of A and press D.&lt;/p>
&lt;p>You are back at your default terminal&lt;/p>
&lt;p>Type:&lt;/p>
&lt;pre>&lt;code>vagrant@homestead:~/Code/webforms$ screen -ls
There is a screen on:
16315.running_xvfb (04/24/2017 12:34:09 AM) (Detached)
1 Socket in /var/run/screen/S-vagrant.
&lt;/code>&lt;/pre>&lt;p>Now it all just worked!&lt;/p></description><category>note2self</category><category>laravel</category></item><item><title>Simple Slack Trait Get Request and return Response</title><link>https://alfrednutile.info/posts/208/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/208/</guid><description>&lt;p>In this example I get a message from Slack (but this can be any message) and then send results back to Slack.&lt;/p>
&lt;p>One thing to keep in mind you really want to get your code working out side of Slack since you cannot easily do a push, test, fix, push, test as we normally do when working locally with a browser.&lt;/p>
&lt;p>Get your PHPUnit working for a class that will handle the payload, then you know when you plug it in to the Slack Route it will &amp;ldquo;just work&amp;rdquo;.&lt;/p>
&lt;p>More on that shortly&amp;hellip;&lt;/p>
&lt;p>&lt;a name="receive">&lt;/a>&lt;/p>
&lt;h3 id="getting-a-message">Getting a message&lt;/h3>
&lt;p>Going with the POST settings we will setup Slack to send a POST request to a URL we are building.&lt;/p>
&lt;p>So I will show some tests first &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php">here&lt;/a> and then trait &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slacktrait-php">here&lt;/a>&lt;/p>
&lt;p>We have a few features going on to consider&lt;/p>
&lt;p>All of which I use this fixture to replicate the incoming Slack Message&lt;/p>
&lt;pre>&lt;code>[
{&amp;quot;token&amp;quot;: &amp;quot;foo&amp;quot;},
{&amp;quot;team_id&amp;quot;: &amp;quot;bar&amp;quot;},
{&amp;quot;team_domain&amp;quot;: &amp;quot;baz&amp;quot;},
{&amp;quot;channel_id&amp;quot;: &amp;quot;C0JKRSDEV&amp;quot;},
{&amp;quot;channel_name&amp;quot;: &amp;quot;test&amp;quot;},
{&amp;quot;user_id&amp;quot;: &amp;quot;U02NC4UL2&amp;quot;},
{&amp;quot;user_name&amp;quot;: &amp;quot;alfrednutile&amp;quot;},
{&amp;quot;command&amp;quot;: &amp;quot;/hp:report&amp;quot;},
{&amp;quot;text&amp;quot;: &amp;quot;not really needed yet&amp;quot;},
{&amp;quot;response_url&amp;quot;: &amp;quot;https://hooks.slack.com/commands/foo/bar/baz&amp;quot;}
]
&lt;/code>&lt;/pre>&lt;p>see &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slack_incoming_run_report-json">here&lt;/a> too.&lt;/p>
&lt;h4 id="is-this-coming-from-the-right-token">Is this coming from the right token?&lt;/h4>
&lt;p>&lt;code>testSuccessVerifiesToken&lt;/code> and bad &lt;code>testVerifiesToken&lt;/code>&lt;/p>
&lt;p>see example &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L34">here&lt;/a>&lt;/p>
&lt;h3 id="is-this-even-coming-from-slack">Is this even coming from Slack?&lt;/h3>
&lt;p>&lt;code>testSuccessSlackURL&lt;/code> and &lt;code>testFailWrongURL&lt;/code>&lt;/p>
&lt;p>see example &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L61">here&lt;/a>&lt;/p>
&lt;h3 id="is-this-person-even-allowed-to-do-this">Is this person even allowed to do this?&lt;/h3>
&lt;p>&lt;code>testSuccessVerifiesPerson&lt;/code>
see example &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L49">here&lt;/a>&lt;/p>
&lt;h3 id="is-there-infotext-in-the-incoming-message-for-me-to-consider">Is there info/text in the incoming message for me to consider&lt;/h3>
&lt;p>&lt;code>testKeepSheetsAsTrue&lt;/code> shows me looking for text.&lt;/p>
&lt;p>Again easy stuff to test outside of Slack. &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L95">here&lt;/a>&lt;/p>
&lt;p>&lt;a name="send">&lt;/a>&lt;/p>
&lt;h2 id="okay-now-the-message-is-good-how-to-send-one-back">Okay Now the message is good how to send one back?&lt;/h2>
&lt;p>The route has to becomes a non-auth and non-basic auth protected route so Slack can POST to it&lt;/p>
&lt;p>Here is my &lt;code>nginx&lt;/code> &lt;code>default.conf&lt;/code>config (see docs on how to update this using CloudFormation)&lt;/p>
&lt;pre>&lt;code>location /api/v1/slack/ { auth_basic &amp;quot;off&amp;quot;; allow all; satisfy any; try_files $uri $uri/ /index.php?$query_string; }
&lt;/code>&lt;/pre>&lt;p>To allow this to happen see the full file here LINK.&lt;/p>
&lt;p>Then the route is simple &lt;code>routes/api.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>Route::group(['prefix' =&amp;gt; 'v1'], function(){
Route::post('slack/hp_reports', 'RunReportSlackController@handle');
Route::post('slack/hp_user_reports', 'RunUserLevelReportSlackController@handle');
});
&lt;/code>&lt;/pre>&lt;p>The Controller &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runuserlevelreportslackcontroller-php-L21">here&lt;/a> does as little work as possible.&lt;/p>
&lt;p>Though I would like to move these into a Validation&lt;/p>
&lt;pre>&lt;code> if(!$this-&amp;gt;token) {
$this-&amp;gt;setToken(env('SLACK_TOKEN_REPORT_REQUEST'));
}
if($this-&amp;gt;notASlackUrl($request)) {
$message = sprintf(&amp;quot;Not a Slack URL&amp;quot;);
throw new NotSlackUrlException($message);
}
&lt;/code>&lt;/pre>&lt;p>Again the Controller should not have to do too much.&lt;/p>
&lt;p>But the logic is outside the controller and which now is outside the scope of the example since at this point we just have, as seen in the fixture above so do what you want with the incoming JSON.&lt;/p>
&lt;p>Once done it sends it back to the Controller &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runuserlevelreportslackcontroller-php-L43">here&lt;/a> to respond back to Slack using &lt;code>respondToSlack&lt;/code> seen in &lt;code>SlackTrait.php&lt;/code> &lt;a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slacktrait-php-L89">here&lt;/a>&lt;/p>
&lt;p>Which simple breaks it up into an array&lt;/p>
&lt;pre>&lt;code> public function respondToSlack($message, $attachment, $type = 'in_channel')
{
return ['response_type' =&amp;gt; $type, 'text' =&amp;gt; $message, 'attachments' =&amp;gt; [ ['text' =&amp;gt; $attachment ] ] ];
}
&lt;/code>&lt;/pre>&lt;p>Attachments in this case just being more text. For our team you can see it when you type &lt;code>/sd behat&lt;/code> in Slack. This request goes to our app, looks for the word(s) behat in the docs and replies back to Slack as such&lt;/p>
&lt;pre>&lt;code>slash-command APP [11:43 AM]
Your original search slack total found 3
Title: Holiday and other Team Processes URL: https://foo.com/team-managment
Title: Getting Started New to the Team URL: https://foo.com/new-to-the-team
Title: Onboarding Links URL: https://foo.com/onboarding-links
&lt;/code>&lt;/pre>&lt;p>&amp;ldquo;Your original search slack total found 3&amp;rdquo; in the text and the rest the &amp;ldquo;attachments&amp;rdquo; is the results we get from Slack&lt;/p>
&lt;h2 id="env">ENV&lt;/h2>
&lt;p>One tricky part here is the &lt;code>.env&lt;/code>&lt;/p>
&lt;p>I am looking for &lt;code>SLACK_TOKEN&lt;/code> but this will get old soon if I do a few of these since they all have different tokens. I would suggest an &lt;code>config/slack.php&lt;/code> to then have areas for this.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
return [
'slack_report' =&amp;gt; env('SLACK_TOKEN_FEATURE_FOO', '12345'),
];
&lt;/code>&lt;/pre></description><category>slack</category><category>laravel</category></item><item><title>We Code in the Context of our Quoting</title><link>https://alfrednutile.info/posts/207/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/207/</guid><description>&lt;p>This article can be listened too &lt;a href="http://www.readorlisten.com/16">here&lt;/a> or in your favorite podcast player&lt;/p>
&lt;p>Whether you are working Waterfall, or Agile we still need to quote out the time it will take for new features . We still need to give the product owners, or the people with the money, a sense of timing. And it is this skill or lack thereof that drives the experience we are going to have when we code.&lt;/p>
&lt;p>There are many, many, many formulas around on how to quote and how not to quote. And I am not talking about &lt;strong>Fixed Bids&lt;/strong> here those are a story in an of themselves. I am talking about sprint planning, task planning anything that is part of the relationship between you and the owner to have a sense of how much something might cost.&lt;/p>
&lt;blockquote>
&lt;p>And it is this skill or lack there of that drives experience we are going to have when we code&lt;/p>
&lt;/blockquote>
&lt;p>In this article I will cover two main concepts. One is about pacing yourself for the &amp;ldquo;race&amp;rdquo; ahead. Every task/feature or what ever is like a little, or big, jog. If you start the jog not knowing how long it is then you have no clue how to pace your self. And if you have not idea where you are in the &amp;ldquo;track&amp;rdquo; or race then you have no clue if you should speed up or slow down. So to begin with we need to consider how to quote items. Second I will cover how to know where I am in the race.&lt;/p>
&lt;blockquote>
&lt;p>Be warned I suck at spreadsheets. I use them to their bare minimum but that is for me enough to make all the difference in my day to day work&lt;/p>
&lt;/blockquote>
&lt;h2 id="who-is-this-article-for">Who is this article for&lt;/h2>
&lt;p>It is for developers who find themselves not working in the ideal Agile situation and maybe still in Waterfall. Where Story Points are not an option and the clients need a sense of time a feature might take so they can budget for it. This is not for Fixed bids. Sure it can work for that but those always are risky and may take different tools.&lt;/p>
&lt;p>This is also for developers who know quoting sucks, who know things go wrong and this &amp;ldquo;technique&amp;rdquo; will help to, sooner than later, check in with the client so they and you can have a good sense of how things are really going.&lt;/p>
&lt;h2 id="thoughts-on-quoting">Thoughts on Quoting&lt;/h2>
&lt;blockquote>
&lt;p>And above all remember, you are not building features you are building an application, so with each new feature you are responsible for the bigger picture or health of your application.&lt;/p>
&lt;/blockquote>
&lt;p>Story points are an interesting practice BUT I find it hard to use them most of the time with clients. It seems a bit too abstract. Sure there might be a client who really get&amp;rsquo;s Story points but this article is more about that middle ground, where you want to write good code in the context of a client who is confident in the time &amp;ldquo;range&amp;rdquo; you quote for the feature.&lt;/p>
&lt;p>I am going to share some spreadsheets, but be warned I suck at spreadsheets. I use them to their bare minimum but that is for me enough to make all the difference in my day to day work.&lt;/p>
&lt;p>The first &amp;ldquo;tool&amp;rdquo; is &lt;a href="https://docs.google.com/spreadsheets/d/1RJeqqF0BIeYgww_pcbQvszFdkFCexRLSrN1a5u9faw8/edit?usp=sharing">here&lt;/a> basically I am doing two things. A simple Quoting template with ideas from the book &amp;ldquo;Agile Estimating and Planning&amp;rdquo; no offense to them if I got it totally wrong.&lt;/p>
&lt;p>First I will write out all the tasks that make this feature. And second I will write down assumptions so I make sure they are presented to the client as well.&lt;/p>
&lt;p>Keep in mind this is not quoting out an entire project. Sure you can do that but I will focus on a feature. Some of which might take a week or two weeks or maybe less.&lt;/p>
&lt;p>This sheet will take your items and instead of buffering each item it will buffer the results and add them to the total of the columns you quoted at 60% confidence to hopefully end up with a more realistic result. I will cover Confidence levels in a moment.&lt;/p>
&lt;p>And as the book &amp;ldquo;Agile Estimating and Planning&amp;rdquo;; which I link to below, notes if you buffer each item then you are going to end up with too high of a quote, so that is why we use this formula.&lt;/p>
&lt;p>The book uses a really simple example of having to do 5 things in the morning before going to the airport. If you buffer all 5 things then you will end up in the airport way too early. But with this approach you end up with a better buffer.&lt;/p>
&lt;h3 id="confidence-level">Confidence Level&lt;/h3>
&lt;p>To begin with I consider confidence levels. Have I done this before, has it been done before, etc. Then I quote at two levels. 60% confidence and 90% confidence.&lt;/p>
&lt;p>It is these two numbers that help us make the final &amp;ldquo;buffered&amp;rdquo; results.&lt;/p>
&lt;p>What to consider in this thinking? This is what at my job, we call a &amp;ldquo;Done Done&amp;rdquo; list.&lt;/p>
&lt;ul>
&lt;li>Testing&lt;/li>
&lt;li>Documentation&lt;/li>
&lt;li>Time to model out ideas&lt;/li>
&lt;li>Feedback&lt;/li>
&lt;li>CI and deployment&lt;/li>
&lt;li>Manual QA&lt;/li>
&lt;li>Deployment&lt;/li>
&lt;/ul>
&lt;p>Seriously give your self time to do these things right!&lt;/p>
&lt;p>And above all remember, you are not building a features you are building an application, so with each new feature you are responsible for the bigger picture or health of your application.&lt;/p>
&lt;p>Take time to consider what else this feature might be touching that needs to be fixed, tightened up or just made better. Should you include all of these little touches in your conversation with the client? In my opinion no, I think you are responsible for so much that already does not always get brought up in conversations that this falls in that area. For example maybe you know testing is weak because you had to rush the last feature, well add a few more tests while doing this feature. I think that this type of detail work goes beyond any todo list and is just the nature of being an artisan building and maintaining such a complex system.&lt;/p>
&lt;p>Remember in the end if your buffer is too big or too small it leaves you in an unprofessional situation. As a professional I want to have a sense of honesty with the client that I am not over quoting items so I can sit around on Facebook or over compensate for my lack of skill in quoting. And that I am not under quoting forcing myself into a situation where I am not able to deliver a quality product and not enjoy quality coding time.&lt;/p>
&lt;p>It is key to keep each item in this sheet under one day. I will cover that shortly.&lt;/p>
&lt;h3 id="ticket-system-numbers">Ticket System Numbers&lt;/h3>
&lt;p>You will notice in my sheet a column for &amp;ldquo;Ticket System Numbers&amp;rdquo;. This number I will use in the sheet that helps me pace myself. It is not a perfect number but it is a flexible formula (I change as needed) so the total matches the total that comes from the overall buffer the system makes for me. I could maybe make it a bit more dynamic and relative to the spread of each item related to the 60% and 90% quote but in the mean time I just adjust the multiplier as needed till the total matches the &amp;ldquo;Total Days&amp;rdquo; that system originally totaled up for me. Not ideals but just to help me pace myself in the bigger picture of the total time quoted.&lt;/p>
&lt;h3 id="assumptions">Assumptions&lt;/h3>
&lt;p>Before I move on to &amp;ldquo;Pacing Yourself&amp;rdquo; I want to note this area of the sheet.
This is very import. The hardest part of our job is not coding but communicating with other humans, especially those who we are trying to comprehend what it is they want us to build.&lt;/p>
&lt;blockquote>
&lt;p>The hardest part of our job is not coding but communicating with other humans, especially those who we are trying to comprehend what it is they want us to build&lt;/p>
&lt;/blockquote>
&lt;p>So write them out, no matter how dumb they might sound and review them with the client to make sure you are both assuming the same things.&lt;/p>
&lt;h2 id="pacing-yourself">Pacing Yourself&lt;/h2>
&lt;blockquote>
&lt;p>Human nature, in my opinion, when we do not know the length of the course we are on, is too start off too slow and end off in a desperate pace when finally we see the finish line and realize it is too late.&lt;/p>
&lt;/blockquote>
&lt;p>The client approved your numbers now it is time to start the project. Ah the first few days, so nice, so easy to relax, write a test, go for a jog, code slowly, chit chat on Slack but then it happens! You finally see there is a week left in the project, you can finally see the due date outside the abstraction of gantt charts or a ticket system, and you finally see you have a ton more work to do, and you start to run really, really fast, do not sleep, eat, do not test, do not QA or do anything but code hoping to get to the finish line.&lt;/p>
&lt;p>For me this very simple system showed me how I can easily start and manage my pace. Not only that but help me to see when I am falling behind as early as possible, so I can talk to the client and let them know up front what is happening. It is a lot nicer for them to see 2 weeks before the deadline versus 2 days before the deadline how the project is really going.&lt;/p>
&lt;blockquote>
&lt;p>I hated when managers asked me how are things going as if I could stick my thumb in the air to measure the wind and tell them &amp;ldquo;Yup things are great project is on time&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>The simple stupid spread sheet can be seen &lt;a href="https://docs.google.com/spreadsheets/d/1p1xBV9xj0vEbZlpu1Zwv9g1VBgm0OGogkY86QZxeiyA/edit#gid=7">here&lt;/a> the broken site explaining it is &lt;a href="http://www.agilistapm.com/burn-chart-tutorial/">here&lt;/a> by Joel Wenzel&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2iy7d6c9igghdug/burn_down.png?dl=0" alt="">&lt;/p>
&lt;p>And let&amp;rsquo;s keep it simple stupid by following a few key rules.&lt;/p>
&lt;p>One, who cares if you are 1/2 way done or 75% done or 90% done, it is just not done. So an item is either Complete or not. And until it is Complete do not consider it as a task done. Once Complete then add that day to the section where you total up the work you did for that day.&lt;/p>
&lt;p>Second, check in the morning and see how to pace your day. It is a great way to start.&lt;/p>
&lt;p>Third, you will not make up time! So do not start behind, and once you fall behind talk sooner than later to the client. It might be hard to admit you are falling behind but do it.&lt;/p>
&lt;p>Fourth, one day tops per quoted item. No item can be more than a day, why? Cause you will fool yourself and if an item is say 2 days long and on the 3rd day you finally admit to yourself you fell behind then now you are possibly 2-3 more days behind than you think. Where if you had it at one day then by the next day&amp;rsquo;s morning check in you would know that you are not done and falling behind.&lt;/p>
&lt;p>That really is it for this, keep it simple, check in daily and keep the tasks small.&lt;/p>
&lt;h2 id="spikes">Spikes&lt;/h2>
&lt;p>Quoting is hard. I mean how do you quote things you have never done before! Sometimes a Spike is a great way to just say to the client, I am not sure how long this will take, let me take 1-2 days to take a stab at it, paid days of course, and then let&amp;rsquo;s see what comes from that. If anything you will have a sense of how possible the task is and in what timeframe. In a Spike you can set aside some of the detail work and just code away knowing the code will be thrown out once done. You are mainly just trying to get an idea of how and if this task is possible.&lt;/p>
&lt;p>Well, that is it! I just wanted to share these simple tools and concepts that I think are really key to &lt;strong>coding in the context of less stressful expectations&lt;/strong> and therefore giving your self space to code well and happily.&lt;/p>
&lt;h2 id="links-to-resources">Links to Resources&lt;/h2>
&lt;p>Agile Estimating and Planning &lt;a href="https://www.mountaingoatsoftware.com/books/agile-estimating-and-planning">here&lt;/a>&lt;/p>
&lt;p>Joel&amp;rsquo;s burn down &lt;a href="https://docs.google.com/spreadsheets/d/1p1xBV9xj0vEbZlpu1Zwv9g1VBgm0OGogkY86QZxeiyA/edit#gid=7">here&lt;/a>&lt;/p>
&lt;p>My Quoting Template &lt;a href="https://docs.google.com/spreadsheets/d/1RJeqqF0BIeYgww_pcbQvszFdkFCexRLSrN1a5u9faw8/edit?usp=sharing">here&lt;/a>
Figured from the book linked to above&lt;/p></description><category>coding</category><category>planning</category></item><item><title>Instantiate Request for Testing</title><link>https://alfrednutile.info/posts/206/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/206/</guid><description>&lt;p>When I need to make a request for a test in which the Class is expecting a &lt;code>\Illuminate\Http\Request&lt;/code> I can do this for a file based or non file based request.&lt;/p>
&lt;pre>&lt;code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('tests/fixtures/example_profile.jpg');
$originalName = 'example_profile.jpg';
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file-&amp;gt;set('profile_image', $upload);
$request-&amp;gt;files = $file;
$this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/example_profile.jpg')), &amp;quot;File Not found&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>Or just Mocked&lt;/p>
&lt;pre>&lt;code> $fixture = File::get(base_path('tests/fixtures/slack_incoming_run_report.json'));
$fixture = json_decode($fixture, true);
//$request = new \Illuminate\Http\Request([], [], $fixture,[], [], [], false);
$request = Mockery::mock(\Illuminate\Http\Request::class);
$request-&amp;gt;shouldReceive('all')-&amp;gt;andReturn($fixture);
/** @var \App\PlannerSlackReport $report */
$report = new \App\PlannerSlackReport();
$report-&amp;gt;handle($request);
&lt;/code>&lt;/pre></description><category>laravel</category><category>note2self</category><category>php</category><category>testing</category></item><item><title>Load Testing With Behat</title><link>https://alfrednutile.info/posts/205/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/205/</guid><description>&lt;p>The team I am a part of write our tests using Behat for the most part as we try to practice BDD and take advantage of how writing in Gherkin can lead our code to be more inline with the language of the business.&lt;/p>
&lt;p>In this case I wanted to replicate some file upload and processing that the system will be doing during a training that will happen next week as 4 users are uploading files and going through the entire process.&lt;/p>
&lt;p>To do this I made an Artisan command to run these tests in parallel&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use Symfony\Component\Process\Process;
class LoadTestingCommand extends Command
{
public $processes;
protected $signature = 'load:testing {number} {--profile=default}';
protected $description = 'Run x number of load tests';
public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;processes = [];
foreach(range(1, $this-&amp;gt;argument('number')) as $index) {
$this-&amp;gt;info(sprintf(&amp;quot;Start running process %d&amp;quot;, $index + 1));
$command = $this-&amp;gt;getCommandToRun();
$process = new Process($command);
$process-&amp;gt;setTimeout(12000);
$process-&amp;gt;start();
$this-&amp;gt;processes[] = $process;
}
while(count($this-&amp;gt;processes) &amp;gt; 0) {
/** @var Process $process */
foreach($this-&amp;gt;processes as $key =&amp;gt; $process) {
if(!$process-&amp;gt;isRunning()) {
$this-&amp;gt;info(sprintf(&amp;quot;Done running process %d&amp;quot;, $key));
$this-&amp;gt;info($process-&amp;gt;getOutput());
unset($this-&amp;gt;processes[$key]);
}
$this-&amp;gt;info(sprintf(&amp;quot;Still running process %d&amp;quot;, $key));
sleep(2);
}
}
}
private function getCommandToRun()
{
$profile = $this-&amp;gt;option('profile');
$command = sprintf(&amp;quot;vendor/bin/behat --profile=%s -se2e_load_test&amp;quot;, $profile);
return $command;
}
}
&lt;/code>&lt;/pre>&lt;p>Just very simple for now. It allows the user to pass the number of concurrent tests to run and the profile to use, eg Staging, Production etc.&lt;/p>
&lt;p>Here is the &lt;code>behat.yml&lt;/code>&lt;/p>
&lt;pre>&lt;code>load_testing_staging:
extensions:
Behat\MinkExtension:
base_url: https://foo-staging.bar.com
load_testing_production:
extensions:
Behat\MinkExtension:
base_url: https://foo.bar.com
&lt;/code>&lt;/pre>&lt;p>Now when I run the command we get 4 windows starting up interacting with the site, and a terminal running top just to see if there are any obvious issues. I could take this a lot further by running other monitoring tools on the servers but in this case I wanted to just get a sense of how well it would work for there to be x users uploading files and what not at the same time.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/i4r7er84jh5vqtg/loadtesting.png?dl=0" alt="">&lt;/p></description><category>behat</category><category>laravel</category></item><item><title>Example Job Format for Queue</title><link>https://alfrednutile.info/posts/204/</link><pubDate>Sat, 14 Jan 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/204/</guid><description>&lt;p>Sometimes I just need this info to remind myself what a job looks like in a queue and how to mock it etc.&lt;/p>
&lt;p>In this case I have a simple class that will be used to dispatch the job.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Jobs;
use Illuminate\Bus\Queueable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Log;
class RandomWordJob implements ShouldQueue
{
use InteractsWithQueue, Queueable, SerializesModels;
public $payload = [];
public function __construct($payload)
{
$this-&amp;gt;payload = $payload;
}
/**
* Execute the job.
*
* @return void
*/
public function handle()
{
Log::debug(&amp;quot;Here&amp;quot;, [var_dump($this-&amp;gt;payload)]);
dd($this-&amp;gt;payload);
}
}
&lt;/code>&lt;/pre>&lt;p>Notice, in this case I put an array payload into the constructor. And it is &lt;strong>public&lt;/strong> because I want to be passed into the queue.&lt;/p>
&lt;p>What the payload in the queue will look like is this&lt;/p>
&lt;pre>&lt;code>{&amp;quot;job&amp;quot;:&amp;quot;Illuminate\\Queue\\CallQueuedHandler@call&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;commandName&amp;quot;:&amp;quot;App\\Jobs\\RandomWordJob&amp;quot;,&amp;quot;command&amp;quot;:&amp;quot;O:22:\&amp;quot;App\\Jobs\\RandomWordJob\&amp;quot;:5:{s:7:\&amp;quot;payload\&amp;quot;;a:2:{s:11:\&amp;quot;word_number\&amp;quot;;i:28;s:17:\&amp;quot;destination_queue\&amp;quot;;s:20:\&amp;quot;docker-words-private\&amp;quot;;}s:6:\&amp;quot;\u0000*\u0000job\&amp;quot;;N;s:10:\&amp;quot;connection\&amp;quot;;s:8:\&amp;quot;requests\&amp;quot;;s:5:\&amp;quot;queue\&amp;quot;;N;s:5:\&amp;quot;delay\&amp;quot;;N;}&amp;quot;}}
&lt;/code>&lt;/pre>&lt;p>Serialized data.&lt;/p>
&lt;p>For a quick example of making this happen I made an Artisan command just to put job(s) into the queue so I can see this and maybe for fun just see the whole process through (but honestly it is best to mock the queue and know your class will work if the payload is right) more on that in a moment.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Console\Commands;
use App\Jobs\RandomWordJob;
use Illuminate\Console\Command;
class PutSampleRequestInQueue extends Command
{
/**
* The name and signature of the console command.
*
* @var string
*/
protected $signature = 'docker-work:sample-request';
/**
* The console command description.
*
* @var string
*/
protected $description = 'Put a sample request into the right queue';
/**
* Create a new command instance.
*
* @return void
*/
public function __construct()
{
parent::__construct();
}
/**
* Execute the console command.
*
* @return mixed
*/
public function handle()
{
$payload = [
'word_number' =&amp;gt; random_int(1, 100),
'destination_queue' =&amp;gt; &amp;quot;docker-words-private&amp;quot;
];
$job = (new RandomWordJob($payload))-&amp;gt;onConnection('requests');
dispatch($job);
}
}
&lt;/code>&lt;/pre>&lt;p>From here I can now run &lt;code>php artisan queue:work requests --once&lt;/code> to see my class get this job and &amp;ldquo;process it&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/t5nhb2gyich2hfy/example_get_job.png?dl=0" alt="">&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>But now for ease of testing this Job Class I can just do this.&lt;/p>
&lt;pre>&lt;code> /**
* @test
*/
public function process_payload_make_word_count_and_destination_in_payload()
{
//Should get the number
//make a word
//make a payload to put back into the queue
$payload = [
'word_number' =&amp;gt; random_int(1, 100),
'destination_queue' =&amp;gt; &amp;quot;docker-words-private&amp;quot;
];
$job = new \App\Jobs\RandomWordJob($payload);
$job-&amp;gt;handle();
PHPUnit_Framework_Assert::assertNotNull($job-&amp;gt;getResults());
}
&lt;/code>&lt;/pre>&lt;p>In this case I will store some results of the process, since it is not saved in a databse for this example, in the object and then in my test prove the class did what it was suppose to do.&lt;/p>
&lt;p>Basically I know Laravel works, I know SQS works, and I know how the data will be handed to the class as it is instantiated so I am just testing the Class and how it handles the request.&lt;/p>
&lt;p>Note too like a Controller it is really key to handle inside a Try/Catch&lt;/p>
&lt;pre>&lt;code> public function handle()
{
try {
Log::debug(&amp;quot;Here&amp;quot;, [var_dump($this-&amp;gt;payload)]);
dd($this-&amp;gt;payload);
} catch (\Exception $e) {
Log::debug(sprintf(&amp;quot;Failed to work :( %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
&lt;/code>&lt;/pre></description><category>note2self</category><category>laravel</category></item><item><title>LarScanner simple foundation for building a good Laravel Security Scanner</title><link>https://alfrednutile.info/posts/203/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/203/</guid><description>&lt;p>Just the start to a new library that I hope others will help out on &lt;a href="https://github.com/alfred-nutile-inc/larscanner">https://github.com/alfred-nutile-inc/larscanner&lt;/a>&lt;/p>
&lt;p>There is a roadmap in the readme.md but basically how to start adding more and more features on this to protect our applications built in Laravel.&lt;/p></description><category>laravel</category><category>security</category></item><item><title>Super Simple Sending Messages to Slack from Laravel</title><link>https://alfrednutile.info/posts/202/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/202/</guid><description>&lt;p>Laravel 5.3 has this feature. But for those not using that version or who just want to see how easy this is, I will show here how I been doing this for some time now.&lt;/p>
&lt;p>Here is the main Class I call to send a message. As you can see I am using Guzzle, in this case &lt;code>&amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;^6.1&amp;quot;&lt;/code> but others versions can work.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Services;
use Illuminate\Support\Facades\Log;
use GuzzleHttp\Client;
class SlackWrapper
{
/**
* @var Client $client
*/
protected $client;
protected $slack_url = false;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
}
public function sendMessageToSlack($message)
{
try {
$this-&amp;gt;client-&amp;gt;request(
'POST',
$this-&amp;gt;getSlackUrl(),
[
'body' =&amp;gt; $this-&amp;gt;message($message)
]
);
} catch (\Exception $e) {
Log::debug(sprintf(&amp;quot;Error sending to Slack %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
protected function message($message)
{
return json_encode(
[
'text' =&amp;gt; $message
]
);
}
public function getSlackUrl()
{
if (!$this-&amp;gt;slack_url)
return env('SLACK_URL');
return $this-&amp;gt;slack_url;
}
/**
* @param boolean $slack_url
*/
public function setSlackUrl($slack_url)
{
$this-&amp;gt;slack_url = $slack_url;
return $this;
}
}
&lt;/code>&lt;/pre>&lt;p>And that is it. As long as I set this &lt;code>env('SLACK_URL')&lt;/code> in my .env OR in the class instantiation it will get to that endpoint.&lt;/p>
&lt;p>Then in slack just add get the webhook/room you want to post to&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/rk2gd4c5tpflpmi/webhooks_slack.png?dl=0" alt="">&lt;/p></description><category>php</category><category>laravel</category><category>slack</category></item><item><title>Pusher and PHP 'Error Failed to connect to Pusher'</title><link>https://alfrednutile.info/posts/201/</link><pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/201/</guid><description>&lt;p>Note to self. Getting this error &amp;ldquo;Error Failed to connect to Pusher&amp;rdquo; but the front end is working. And you know your credentials are correct, AND it was working just a day ago check the date and time on your machine/vm.&lt;/p>
&lt;p>Mine had drift and since it was behind by 20 minutes I would end up with this error.&lt;/p>
&lt;p>Oy what a waste or time x 2 :(&lt;/p></description><category>php</category><category>note2self</category><category>laravel</category></item><item><title>Model Boot Events</title><link>https://alfrednutile.info/posts/200/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/200/</guid><description>&lt;p>Just a quick not to modify model data upon an event. Laravel docs talk about it &lt;a href="https://laravel.com/docs/5.3/eloquent#events">here&lt;/a>&lt;/p>
&lt;p>But putting it in another class can get kinda confusing when you are trying to debug or update the code.&lt;/p>
&lt;p>In this example I have a model &lt;code>Board&lt;/code> and I want to, upon saving, make sure it has some key data.&lt;/p>
&lt;pre>&lt;code> protected static function boot()
{
static::bootTraits();
/** @var \App\Board $model */
static::creating(function ($model) {
if (!$model-&amp;gt;id) {
$model-&amp;gt;id = Uuid::uuid4()-&amp;gt;toString();
}
});
}
&lt;/code>&lt;/pre>&lt;p>So now my &lt;code>\App\Board&lt;/code> class will trigger this addition of UUID if the ID is not set upon &lt;code>creation&lt;/code>.&lt;/p></description><category>laravel</category><category>note2self</category></item><item><title>Queue onConnection</title><link>https://alfrednutile.info/posts/199/</link><pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/199/</guid><description>&lt;p>If you look here &lt;a href="https://laravel.com/docs/5.3/queues#customizing-the-queue-and-connection">https://laravel.com/docs/5.3/queues#customizing-the-queue-and-connection&lt;/a>&lt;/p>
&lt;p>Under &amp;ldquo;Dispatching To A Particular Connection&amp;rdquo;&lt;/p>
&lt;p>But if running test and local where I just want &lt;code>sync&lt;/code> or &lt;code>database&lt;/code>&lt;/p>
&lt;pre>&lt;code> if(env('QUEUE_DRIVER') != 'sync' &amp;amp;&amp;amp; env('QUEUE_DRIVER') != 'database') {
$concentration_curve = (new ImportDataColumnWorker($this-&amp;gt;job_notice-&amp;gt;model, $this-&amp;gt;job_notice-&amp;gt;payload))
-&amp;gt;onConnection('columns');
} else {
$concentration_curve = (new ImportDataColumnWorker($this-&amp;gt;job_notice-&amp;gt;model, $this-&amp;gt;job_notice-&amp;gt;payload));
}
$this-&amp;gt;dispatch($concentration_curve);
&lt;/code>&lt;/pre></description><category>laravel</category><category>note2self</category></item><item><title>Guzzle 5 or 6 or ????</title><link>https://alfrednutile.info/posts/198/</link><pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/198/</guid><description>&lt;p>Sometimes Guzzle can be a real pain to use in an library. You choose 5.x and then some other library needed 6.x and heck you really did not care either way.&lt;/p>
&lt;p>One interesting package example is &lt;a href="https://packagist.org/packages/aws/aws-sdk-php">aws/aws-sdk-php&lt;/a>&lt;/p>
&lt;p>If you look in it&amp;rsquo;s composer.json you will see this&lt;/p>
&lt;pre>&lt;code> &amp;quot;require&amp;quot;: {
&amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.5&amp;quot;,
&amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;~5.3|~6.0.1|~6.1&amp;quot;,
&amp;quot;guzzlehttp/psr7&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;guzzlehttp/promises&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;mtdowling/jmespath.php&amp;quot;: &amp;quot;~2.2&amp;quot;
},
&lt;/code>&lt;/pre>&lt;p>So it allows for other libraries to choose as needed and it will deal with the different versions as needed.&lt;/p>
&lt;p>&lt;code>vendor/aws/aws-sdk-php/src/functions.php:263&lt;/code>&lt;/p>
&lt;pre>&lt;code>function default_http_handler()
{
$version = (string) ClientInterface::VERSION;
if ($version[0] === '5') {
return new \Aws\Handler\GuzzleV5\GuzzleHandler();
} elseif ($version[0] === '6') {
return new \Aws\Handler\GuzzleV6\GuzzleHandler();
} else {
throw new \RuntimeException('Unknown Guzzle version: ' . $version);
}
}
&lt;/code>&lt;/pre>&lt;p>Then each class deals with instantiating the &lt;code>GuzzleHttp\Client&lt;/code> as needed.&lt;/p></description><category>php</category><category>note2self</category></item><item><title>Chrome update equals Behat Fail</title><link>https://alfrednutile.info/posts/197/</link><pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/197/</guid><description>&lt;p>Had trouble running behat after I ran updates on Chrome&lt;/p>
&lt;p>My typical install &lt;a href="https://www.npmjs.com/package/selenium-standalone">https://www.npmjs.com/package/selenium-standalone&lt;/a>&lt;/p>
&lt;p>did not fix it, even try &lt;code>brew&lt;/code> but no luck.&lt;/p>
&lt;p>All I needed to do was go &lt;a href="https://chromedriver.storage.googleapis.com/index.html?path=2.25/">here&lt;/a> and grab the lastest one for my Mac. For me this was the 32 bit.&lt;/p>
&lt;p>Then after running&lt;/p>
&lt;pre>&lt;code>selenium-standalone install
&lt;/code>&lt;/pre>&lt;p>to see where the old one was installed I used that path to unzip this file and move it there &lt;code> /usr/local/lib/node_modules/selenium-standalone/.selenium/chromedriver/2.21-x64-chromedriver&lt;/code>&lt;/p>
&lt;p>Then started things backup again and it was fine.&lt;/p>
&lt;pre>&lt;code>curl -O https://chromedriver.storage.googleapis.com/2.25/chromedriver_mac64.zip
unzip chromedriver_mac64.zip
mv chromedriver /usr/local/lib/node_modules/selenium-standalone/.selenium/chromedriver/2.21-x64-chromedriver
&lt;/code>&lt;/pre></description><category>note2self</category><category>behat</category></item><item><title>Laravel and Casting 'JSON_UNESCAPED_UNICODE' Data</title><link>https://alfrednutile.info/posts/196/</link><pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/196/</guid><description>&lt;p>Had a interesting issue with Laravel and the &lt;a href="https://laravel.com/docs/5.2/eloquent-mutators">cast feature&lt;/a>&lt;/p>
&lt;p>Basically a Chinese set of characters would be converted to their unicode counterpart &lt;a href="http://php.net/manual/en/json.constants.php">http://php.net/manual/en/json.constants.php&lt;/a>&lt;/p>
&lt;p>So saving &amp;ldquo;你好，世界&amp;rdquo; would become &amp;ldquo;\u4f60\u597d\uff0c\u4e16\u754c&amp;rdquo; in the database.&lt;/p>
&lt;p>Making it hard to search for &amp;ldquo;你好，世界&amp;rdquo;&lt;/p>
&lt;p>But I just wanted this data as it was, so later I could query the data and interact with it in it&amp;rsquo;s default character state.&lt;/p>
&lt;p>Digging into the Model class &lt;code>vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:3044&lt;/code> I found that this method would &lt;code>json_encode&lt;/code> but with no options.&lt;/p>
&lt;p>So on my model I had to override that&lt;/p>
&lt;pre>&lt;code> protected function asJson($value)
{
/**
* Alter Cast
* Default is altering unicode
*/
return json_encode($value, JSON_UNESCAPED_UNICODE);
}
&lt;/code>&lt;/pre>&lt;p>And now &amp;ldquo;你好，世界&amp;rdquo; would save that way to the database and not &amp;ldquo;\u4f60\u597d\uff0c\u4e16\u754c&amp;rdquo;&lt;/p></description><category>laravel</category><category>json</category><category>note2self</category></item><item><title>Laravel 5.x Cookbook Chat Area</title><link>https://alfrednutile.info/posts/195/</link><pubDate>Thu, 20 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/195/</guid><description>&lt;h2 id="topics">Topics&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#events">Events&lt;/a>&lt;/li>
&lt;li>&lt;a href="#questions">Questions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#clientinterface">ComicClientInterface&lt;/a>&lt;/li>
&lt;li>&lt;a href="#layout">But there is no mention about layout file&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Just wanted to make a place to centralize some comments and feedback around the book &lt;a href="https://www.packtpub.com/web-development/laravel-5x-cookbook">Laravel Cookbook&lt;/a>&lt;/p>
&lt;p>I will do my best to reply and help with the book as needed.&lt;/p>
&lt;p>The main repo for this book is &lt;a href="https://github.com/alnutile/recipes">here&lt;/a> btw&lt;/p>
&lt;p>Just add comments below and I will get them.&lt;/p>
&lt;hr>
&lt;p>&lt;a name="events">&lt;/a>&lt;/p>
&lt;h2 id="events">Events&lt;/h2>
&lt;h3 id="wednesday-october-26th-2pm-est">Wednesday October 26th 2pm EST&lt;/h3>
&lt;p>Will host a live hangout for all to join and ask question. I will try and do this once per week for a bit &lt;strong>&lt;a href="https://www.freeconferencecall.com/join/alfrednutile">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Session one. Here is a little intro&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/T_StJKRR6bo" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>Future sessions I will record&lt;/p>
&lt;h3 id="wednesday-november-2nd-2pm-est">Wednesday November 2nd 2pm EST&lt;/h3>
&lt;p>Will host a live hangout for all to join and ask question. I will try and do this once per week for a bit &lt;strong>&lt;a href="https://www.freeconferencecall.com/join/alfrednutile">here&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="thursday-november-10th-2pm-est">Thursday November 10th 2pm EST&lt;/h3>
&lt;p>Will host a live hangout for all to join and ask question. I will try and do this once per week for a bit &lt;strong>&lt;a href="https://www.freeconferencecall.com/join/alfrednutile">here&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="wednesday-november-16th-2pm-est">Wednesday November 16th 2pm EST&lt;/h3>
&lt;p>Will host a live hangout for all to join and ask question. I will try and do this once per week for a bit &lt;strong>&lt;a href="https://www.freeconferencecall.com/join/alfrednutile">here&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="wednesday-november-23th-2pm-est">Wednesday November 23th 2pm EST&lt;/h3>
&lt;h2 id="will-host-a-live-hangout-for-all-to-join-and-ask-question-i-will-try-and-do-this-once-per-week-for-a-bit-herehttpswwwfreeconferencecallcomjoinalfrednutile">Will host a live hangout for all to join and ask question. I will try and do this once per week for a bit &lt;strong>&lt;a href="https://www.freeconferencecall.com/join/alfrednutile">here&lt;/a>&lt;/strong>&lt;/h2>
&lt;p>&lt;a name="questions">&lt;/a>&lt;/p>
&lt;h2 id="questions">Questions&lt;/h2>
&lt;p>&lt;a name="clientinterface">&lt;/a>&lt;/p>
&lt;h3 id="comicclientinterface">ComicClientInterface&lt;/h3>
&lt;p>For example, at chapter 3, page 34, point 4, the book says: “And in the ComicClientInterface class, I handle the comics method like this.”. And then there is a screenshot of the comics function, but there is no clue about in which file put these lines of code, and no mention of ComicClientInterface so far.&lt;/p>
&lt;h4 id="answer">Answer&lt;/h4>
&lt;p>The first part &lt;strong>but there is no clue about in which file put these lines of code&lt;/strong> is me assuming you would know it is the controller since I show the route. Sorry about that assumption. I see now I could have been more clear that just showing this&lt;/p>
&lt;pre>&lt;code>Route::get(&amp;quot;api/v1/search&amp;quot;, &amp;quot;SearchComics@searchComicsByName&amp;quot;);
&lt;/code>&lt;/pre>&lt;p>I should also have noted this relates to, as always in Laravel &amp;ldquo;app/Http/Controllers/SearchComics.php&amp;rdquo; eg CLASS_NAME is before the &lt;code>@&lt;/code>&lt;/p>
&lt;p>Yes you are correct. At that start of this process I had Chapter 8 &amp;ldquo;Testing&amp;rdquo; as the first chapter in the book since I start projects with testing and was trying to show that as a foundation to all these recipes but when I was asked to move it to Chapter 8 I missed this &amp;ldquo;context&amp;rdquo;. Chapter 8 section &amp;ldquo;Using tests to think through your code TDT (Test Driven Thinking)&amp;rdquo; starts to cover that.&lt;/p>
&lt;p>And moreover, I have not idea how to get the result showing in the next picture, at point 5. Where do these informations about comics come from?
Later in the book I see there is a MARVEL_API_BASE_URL= &lt;a href="https://gateway.marvel.com">https://gateway.marvel.com&lt;/a> but how can the example in chapter 3 work without pointing to this url?&lt;/p>
&lt;h4 id="answer-1">Answer&lt;/h4>
&lt;p>Again sorry it is confusing seems this Context is lost as above. You are correct you needed to have the URL in your .env file to make this work. It is in section 10 of Chapter 8 section &amp;ldquo;Using tests to think through your code TDT (Test Driven Thinking)&amp;rdquo; starts to cover that.&lt;/p>
&lt;hr>
&lt;p>&lt;a name="layout">&lt;/a>&lt;/p>
&lt;h3 id="but-there-is-no-mention-about-this-file-extendslayout">But there is no mention about this file &amp;ldquo;@extends(‘layout')&amp;rdquo;&lt;/h3>
&lt;p>Furthermore, at page 41, the book show how to write a route_view.blade.php file than at the first row refers to a layout.blade.php file: &amp;ldquo;@extends(‘layout')&amp;rdquo;.
But there is no mention about this file, until page 70 when his says: “t has made resources/views/layout.blade.php, which is the base to all your Blade
files. In here, we see content.” and then there is a screenshot that show the content of this file. And this is a very simple and beginning topic in Laravel Framework.
So, how is supposed that a person could follow the book, if there is full lack and references to future parts of the book?&lt;/p>
&lt;h4 id="answer-2">Answer&lt;/h4>
&lt;p>As noted above we had some chapter changes that may have caused this. Chapter 4 &amp;ldquo;Organizing your Blade files&amp;rdquo; I install a template helper that brings in this file. Basically I think that Routing was written after Views. But honestly on that one I am not sure why I would have done that since imo I needed to tackle Routing before I can show you views.&lt;/p>
&lt;hr></description></item><item><title>Laravel Throttle Feature using IP address as Key</title><link>https://alfrednutile.info/posts/193/</link><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/193/</guid><description>&lt;p>&lt;strong>NOTE: 5.3, for 5.2 see ending update&lt;/strong>&lt;/p>
&lt;p>The Laravel Throttle feature &lt;a href="https://laravel.com/docs/5.3/authentication#login-throttling">here&lt;/a> is a great addition to the framework. By default it uses the &lt;code>username&lt;/code> and the IP for the key to count &lt;code>attempts&lt;/code>.&lt;/p>
&lt;p>But I want to cover how to switch that to use an IP only and not the username. A good example of why is a hacker running through a list of emails and passwords just trying to break into sites where that user would use the same password as the site the got the list from. This person could try this 5000 long list against your server and not once will Throttle care about that.&lt;/p>
&lt;p>The fix is fairly simple in your &lt;code>app/Http/Controllers/Auth/AuthController.php&lt;/code> add&lt;/p>
&lt;pre>&lt;code> /**
* Get the throttle key for the given request.
*
* @param \Illuminate\Http\Request $request
* @return string
*/
protected function throttleKey(Request $request)
{
if (Config::get('auth.throttle_key') == 'ip') {
return $request-&amp;gt;ip();
} else {
return Str::lower($request-&amp;gt;input($this-&amp;gt;username())).'|'.$request-&amp;gt;ip();
}
}
&lt;/code>&lt;/pre>&lt;p>Then in your &lt;code>config/auth.php&lt;/code> add&lt;/p>
&lt;pre>&lt;code> /*
|--------------------------------------------------------------------------
| Throttle Key
|--------------------------------------------------------------------------
|
| You may choose to block ip address from failed attempts
| of a combination of IP and Username
|
| Supported: &amp;quot;ip&amp;quot;, &amp;quot;username|ip&amp;quot;
|
*/
'throttle_key' =&amp;gt; 'ip'
&lt;/code>&lt;/pre>&lt;p>This way you can switch it later back if needed&lt;/p>
&lt;p>From here on the IP will track the failed attempts.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/0n2v4f1o6jxbmmm/login_throttle_fail.png?dl=0" alt="">&lt;/p>
&lt;h2 id="laravel-52">Laravel 5.2&lt;/h2>
&lt;p>In 5.2 I had to change &lt;code> protected function throttleKey&lt;/code> to &lt;code> protected function throttleKey&lt;/code>&lt;/p></description><category>laravel</category><category>security</category></item><item><title>Throttle Password Reset</title><link>https://alfrednutile.info/posts/194/</link><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/194/</guid><description>&lt;p>Laravel Throttle works on failed auth attempts but how about password resets?&lt;/p>
&lt;p>Here is what I made my &lt;code>app/Http/Controllers/Auth/PasswordController.php&lt;/code> look like&lt;/p>
&lt;h2 id="53">5.3&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers\Auth;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
class PasswordController extends Controller
{
/*
|--------------------------------------------------------------------------
| Password Reset Controller
|--------------------------------------------------------------------------
|
| This controller is responsible for handling password reset requests
| and uses a simple trait to include this behavior. You're free to
| explore this trait and override any methods you wish to tweak.
|
*/
use ResetsPasswords, ThrottlesLogins;
protected $username;
/**
* Create a new password controller instance.
*
* @return void
*/
public function __construct()
{
$this-&amp;gt;middleware('guest');
}
/**
* Validate the request of sending reset link.
*
* @param \Illuminate\Http\Request $request
* @return void
*/
protected function validateSendResetLinkEmail(Request $request)
{
$this-&amp;gt;incrementLoginAttempts($request);
$this-&amp;gt;username = 'email';
if($this-&amp;gt;hasTooManyLoginAttempts($request)) {
return back()
-&amp;gt;withError(&amp;quot;You have exceeded the limit of attempts. Please try again shortly&amp;quot;)
-&amp;gt;withInput();
}
$validator = Validator::make(
$request-&amp;gt;all(), [
'email' =&amp;gt; 'required|email'
]
);
if ($validator-&amp;gt;fails()) {
return back()
-&amp;gt;withMessage(&amp;quot;If you are in the system you will get an email shortly to reset your password&amp;quot;)
-&amp;gt;withInput();
}
}
public function loginUsername()
{
return property_exists($this, 'username') ? $this-&amp;gt;username : 'email';
}
protected function getThrottleKey(Request $request)
{
return $request-&amp;gt;ip();
}
}
&lt;/code>&lt;/pre>&lt;h2 id="52">5.2&lt;/h2>
&lt;p>The controller ended up looking like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers\Auth;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Password;
class PasswordController extends Controller
{
/*
|--------------------------------------------------------------------------
| Password Reset Controller
|--------------------------------------------------------------------------
|
| This controller is responsible for handling password reset requests
| and uses a simple trait to include this behavior. You're free to
| explore this trait and override any methods you wish to tweak.
|
*/
use ResetsPasswords, ThrottlesLogins;
protected $username;
/**
* Create a new password controller instance.
*
* @return void
*/
public function __construct()
{
$this-&amp;gt;middleware('guest');
}
/**
* Validate the request of sending reset link.
*
* @param \Illuminate\Http\Request $request
* @return void
*/
protected function sendResetLinkEmail(Request $request)
{
$this-&amp;gt;incrementLoginAttempts($request);
$this-&amp;gt;username = 'email';
Log::debug(&amp;quot;Validate&amp;quot;);
if($this-&amp;gt;hasTooManyLoginAttempts($request)) {
return redirect()-&amp;gt;back()-&amp;gt;withErrors(['email' =&amp;gt; &amp;quot;You have exceeded the limit of attempts. Please try again shortly&amp;quot;]);
}
$this-&amp;gt;validate($request, ['email' =&amp;gt; 'required|email']);
$broker = $this-&amp;gt;getBroker();
$response = Password::broker($broker)-&amp;gt;sendResetLink(
$request-&amp;gt;only('email'), $this-&amp;gt;resetEmailBuilder()
);
switch ($response) {
case Password::RESET_LINK_SENT:
return $this-&amp;gt;getSendResetLinkEmailSuccessResponse($response);
case Password::INVALID_USER:
default:
return $this-&amp;gt;getSendResetLinkEmailFailureResponse($response);
}
}
public function loginUsername()
{
return property_exists($this, 'username') ? $this-&amp;gt;username : 'email';
}
protected function getThrottleKey(Request $request)
{
return $request-&amp;gt;ip();
}
}
&lt;/code>&lt;/pre>&lt;h2 id="tip-while-your-add-it-leak-even-less-about-your-apps-user-emails">TIP: While your add it leak even less about your app&amp;rsquo;s user emails&lt;/h2>
&lt;p>On other thing here is take a moment to change your error message &lt;code>resources/lang/en/passwords.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> 'password' =&amp;gt; 'Passwords must be at least six characters and match the confirmation.',
'reset' =&amp;gt; 'Your password has been reset!',
'sent' =&amp;gt; 'We have e-mailed your password reset link!',
'token' =&amp;gt; 'This password reset token is invalid.',
'user' =&amp;gt; &amp;quot;If you are a user in the system an a reset email has been sent&amp;quot;,
&lt;/code>&lt;/pre>&lt;p>Where &lt;code>user&lt;/code> does not leak out any information about the email being correct or not.&lt;/p></description><category>laravel</category><category>security</category></item><item><title>Troubleshooting a Failed Build with Codeship and SauceLabs</title><link>https://alfrednutile.info/posts/192/</link><pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/192/</guid><description>&lt;p>In this article, I will continue where I left off with my previous post, Laravel and Behat Using Selenium and Headless Chrome, and explain what you can do when troubleshooting a failed build.&lt;/p>
&lt;p>Checkout the article on CodeShip &lt;a href="https://blog.codeship.com/troubleshooting-a-failed-build-with-codeship-and-saucelabs/">https://blog.codeship.com/troubleshooting-a-failed-build-with-codeship-and-saucelabs/&lt;/a>&lt;/p></description><category>codeship</category><category>saucelabs</category></item><item><title>Amazon Machine Learning</title><link>https://alfrednutile.info/posts/191/</link><pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/191/</guid><description>&lt;p>This is mostly a note2self.&lt;/p>
&lt;p>Amazon Machine learning is one way to dig into things. For me it mean not getting bogged down in Python or tons of formulas for now.&lt;/p>
&lt;p>Basically I watched their main video &lt;a href="https://aws.amazon.com/machine-learning/getting-started/">here&lt;/a> to get a view of how things worked.&lt;/p>
&lt;p>Then I read their docs &lt;a href="http://docs.aws.amazon.com/machine-learning/latest/dg/what-is-amazon-machine-learning.html">here&lt;/a> and follow &lt;a href="http://docs.aws.amazon.com/machine-learning/latest/dg/tutorial.html">this&lt;/a> tutorial.&lt;/p>
&lt;p>After that I took a moment to watch another video of how they used ML to help process messages from Twitter &lt;a href="https://www.youtube.com/watch?v=GRRX9amYsyM">https://www.youtube.com/watch?v=GRRX9amYsyM&lt;/a>&lt;/p>
&lt;p>From there I tried a few of my own datasets one I used on a not ready for prime time product &lt;a href="https://incomings.io/blogs/3">here&lt;/a>&lt;/p>
&lt;p>Anyways it was just fun to play around. Their API is super easy to use, even to the point of having a PHP client I could plug in for AWS or MicroSoft &lt;a href="https://alfrednutile.info/projects/57">https://alfrednutile.info/projects/57&lt;/a>&lt;/p>
&lt;p>Have a number of other ideas as well looking forward to making them happen here or with other services.&lt;/p></description><category>note2self</category></item><item><title>Mockery Behat and Laravel</title><link>https://alfrednutile.info/posts/190/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/190/</guid><description>&lt;p>This is a quick view of using this library &lt;a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension&lt;/a> and a Mockery Trait (should be included soon but for now put the below in your &lt;code>features/bootstrap&lt;/code> folder and run &lt;code>composer dump&lt;/code>).&lt;/p>
&lt;p>The example here is a method that looks like this&lt;/p>
&lt;p>&lt;code>features/bootstrap/ExampleContext.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> $partial = Mockery::mock(\App\Broadcasts\ColumnsAndRowsDoneProcessingEmail::class, [$this-&amp;gt;segment])-&amp;gt;makePartial();
$partial-&amp;gt;shouldReceive('sendEmail')-&amp;gt;never();
$repo = App::make(\App\JobsRepository::class);
$partial-&amp;gt;handle($repo);
&lt;/code>&lt;/pre>&lt;p>When this is done running I would get pass BUT if I change it &lt;code>never&lt;/code> to &lt;code>once&lt;/code> and run it again I still get green :(&lt;/p>
&lt;p>But I need to include the Mockery. In my case I made this trait that will allow me to also tests and mock events.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
trait MockeryTrait
{
public $firedEvents = [];
public $beforeApplicationDestroyedCallbacks = [];
/**
* @AfterScenario
*/
public function reviewMocks()
{
if ($this-&amp;gt;app) {
foreach ($this-&amp;gt;beforeApplicationDestroyedCallbacks as $callback) {
call_user_func($callback);
}
$this-&amp;gt;app-&amp;gt;flush();
$this-&amp;gt;app = null;
}
if (class_exists('Mockery')) {
Mockery::close();
}
$this-&amp;gt;beforeApplicationDestroyedCallbacks = [];
}
protected function beforeApplicationDestroyed(callable $callback)
{
$this-&amp;gt;beforeApplicationDestroyedCallbacks[] = $callback;
}
/**
* Specify a list of events that should be fired for the given operation.
*
* These events will be mocked, so that handlers will not actually be executed.
*
* @param array|string $events
* @return $this
*
* @throws \Exception
*/
public function expectsEvents($events)
{
$events = is_array($events) ? $events : func_get_args();
$this-&amp;gt;withoutEvents();
$this-&amp;gt;beforeApplicationDestroyed(function () use ($events) {
$fired = $this-&amp;gt;getFiredEvents($events);
if ($eventsNotFired = array_diff($events, $fired)) {
throw new Exception(
'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
);
}
});
return $this;
}
/**
* Mock the event dispatcher so all events are silenced and collected.
*
* @return $this
*/
protected function withoutEvents()
{
$mock = Mockery::mock('Illuminate\Contracts\Events\Dispatcher');
$mock-&amp;gt;shouldReceive('fire')-&amp;gt;andReturnUsing(function ($called) {
$this-&amp;gt;firedEvents[] = $called;
});
$this-&amp;gt;app-&amp;gt;instance('events', $mock);
return $this;
}
/**
* Filter the given events against the fired events.
*
* @param array $events
* @return array
*/
protected function getFiredEvents(array $events)
{
return $this-&amp;gt;getDispatched($events, $this-&amp;gt;firedEvents);
}
/**
* Filter the given classes against an array of dispatched classes.
*
* @param array $classes
* @param array $dispatched
* @return array
*/
protected function getDispatched(array $classes, array $dispatched)
{
return array_filter($classes, function ($class) use ($dispatched) {
return $this-&amp;gt;wasDispatched($class, $dispatched);
});
}
/**
* Check if the given class exists in an array of dispatched classes.
*
* @param string $needle
* @param array $haystack
* @return bool
*/
protected function wasDispatched($needle, array $haystack)
{
foreach ($haystack as $dispatched) {
if ((is_string($dispatched) &amp;amp;&amp;amp; ($dispatched === $needle || is_subclass_of($dispatched, $needle))) ||
$dispatched instanceof $needle) {
return true;
}
}
return false;
}
}
&lt;/code>&lt;/pre>&lt;p>This pulls in a trait Laravel uses in PHPUnit.&lt;/p>
&lt;p>So now when I run that test I get red and when I set it back to &lt;code>zero&lt;/code> I get green!&lt;/p></description><category>php</category><category>laravel</category><category>behat</category><category>bdd</category></item><item><title>Adding Basic Auth to Forge</title><link>https://alfrednutile.info/posts/189/</link><pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/189/</guid><description>&lt;p>make the username and password &lt;a href="http://www.htaccesstools.com/htpasswd-generator/">http://www.htaccesstools.com/htpasswd-generator/&lt;/a>&lt;/p>
&lt;pre>&lt;code>admin:$apr1$wLiZDI74$/D64sfIdn74kHc6F.76Qv/
&lt;/code>&lt;/pre>&lt;p>And save it in a file called, for example, &lt;code>htpass&lt;/code>&lt;/p>
&lt;p>Now &lt;code>scp -v htpass forge@your_server:~/&lt;/code>&lt;/p>
&lt;p>Go to forge and find the site and click &amp;ldquo;Edit Nginx Configuration&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/l10cxnvgoekvdo8/edit_nginx.png?dl=0" alt="">&lt;/p>
&lt;p>Now in there just add these lines&lt;/p>
&lt;pre>&lt;code> auth_basic &amp;quot;Restricted Area&amp;quot;;
auth_basic_user_file /home/forge/htpass;
&lt;/code>&lt;/pre>&lt;p>As seen below&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/oxuo4vw6rvfnrnv/nginx_conf.png?dl=0" alt="">&lt;/p>
&lt;p>I think that will restart/reload Nginx, if does not go to the page that list your &amp;ldquo;Server Details&amp;rdquo; and restart there&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/hp1p1v9nkv684r8/restart_nginx.png?dl=0" alt="">&lt;/p></description><category>note2self</category></item><item><title>Uploading Images in Behat both at Domain Level and UI Level</title><link>https://alfrednutile.info/posts/188/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/188/</guid><description>&lt;p>The goal here is as follows&lt;/p>
&lt;pre>&lt;code> @fileCleanup @javascript
Scenario: Uploading File
Given I already made a Segmentation and am editing it
Then I add file and the system will process it
And I can not add another file till it is done
And when the system is done I can add another file
&lt;/code>&lt;/pre>&lt;p>In this case they are large files and I want to get an MVP for the users to interact with so one file at a time is enough for now.&lt;/p>
&lt;p>The tricky part is that I am running Selenium on my Mac and running behat in my VM there is no file path connection between the two.
This can also be an issue when using Saucelabs and &lt;a href="https://crossbrowsertesting.com/">https://crossbrowsertesting.com/&lt;/a>.&lt;/p>
&lt;h2 id="ui-level">UI Level&lt;/h2>
&lt;p>I am using the Flow Angular library so it is JavaScript heavy (some notes below). Otherwise your work is even easier.&lt;/p>
&lt;p>My step to set things up &lt;code>Given I already made a Segmentation and am editing it&lt;/code> just adds that resource to the system and then I visit it.&lt;/p>
&lt;p>From there I hit &lt;code>Then I add file and the system will process it&lt;/code> and this is where it all begins&lt;/p>
&lt;pre>&lt;code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this-&amp;gt;visit('/segments/files/' . $this-&amp;gt;segment_uuid);
sleep(2); //load up the page
$this-&amp;gt;assertPageContainsText('Upload File'); //make sure the button is there
/**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this-&amp;gt;attachFileToField('image_upload', $remotePath); //see Flow notes at the bottom of this page
$this-&amp;gt;assertPageNotContainsText('Upload File');
unlink($tempZip);
sleep(5); //Later on I will move this to `spin` see notes below
$this-&amp;gt;assertPageContainsText('data_columns_not_snaked');
}
&lt;/code>&lt;/pre>&lt;p>Let me show that again but now more simple just a normal input button&lt;/p>
&lt;pre>&lt;code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this-&amp;gt;visit('/segments/files/' . $this-&amp;gt;segment_uuid);
sleep(2); //load up the page
$this-&amp;gt;assertPageContainsText('Upload File'); //make sure the button is there
/**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this-&amp;gt;attachFileToField('image_upload', $remotePath); //the input field
/** prove the button is gone during this process **/
$this-&amp;gt;assertPageNotContainsText('Upload File');
unlink($tempZip);
$this-&amp;gt;pressButton('Upload File'); //dealing with normal input button
}
&lt;/code>&lt;/pre>&lt;h2 id="domain-level">Domain Level&lt;/h2>
&lt;p>Since my Controller gets the info from the incoming &lt;code>Request&lt;/code> and hands it to the Repository class, I like to test my classes outside the Controller then plug them in (see &lt;a href="https://alfrednutile.info/posts/187">here&lt;/a> for more on that), there is typically no need to pass the full &lt;code>Request&lt;/code> to the Repository. But in this case I went about passing the entire &lt;code>Request&lt;/code> to the &lt;code>Repository&lt;/code> and doing some checking in there as well.&lt;/p>
&lt;pre>&lt;code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('features/fixtures/data_columns_not_snaked.xls');
$originalName = 'data_columns_not_snaked.xls';
/** note `true` passed in to `UploadedFile` it defines this as a test request **/
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file-&amp;gt;set('profile_image', $upload);
$request-&amp;gt;files = $file;
$this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/data_columns_not_snaked.xls')), &amp;quot;File Not found&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>And now that is passing as well.&lt;/p>
&lt;h2 id="thats-it">Thats It&lt;/h2>
&lt;p>I am now testing both the UI and the Domain level part of this Application.&lt;/p>
&lt;h2 id="note">Note&lt;/h2>
&lt;p>Using Flow Library &lt;a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow&lt;/a> makes it easy to process large files in PHP for me.&lt;/p>
&lt;p>One thing I had to do was do was set &lt;code>flow-attrs&lt;/code> to the directive so I can get a &lt;code>name&lt;/code> in there to target field.&lt;/p>
&lt;pre>&lt;code>&amp;lt;div class=&amp;quot;btn btn-xs btn-primary&amp;quot; flow-attrs=&amp;quot;{name:'image_upload'}&amp;quot; flow-btn ng-if=&amp;quot;vm.file_uploading&amp;quot;&amp;gt;
&amp;lt;i class=&amp;quot;fa fa-cloud-upload&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Upload File
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Link to Spin on Behat docs and StackOverflow for a better solution than &lt;code>sleep&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat">http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html">http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html&lt;/a>&lt;/p>
&lt;p>And a bit more on that
&lt;a href="http://www.tentacode.net/10-tips-with-behat-and-mink">http://www.tentacode.net/10-tips-with-behat-and-mink&lt;/a>&lt;/p></description><category>behat</category><category>bdd</category><category>php</category><category>laravel</category></item><item><title>Behat Laravel Domain Testing Inside Out</title><link>https://alfrednutile.info/posts/187/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/187/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/055lj0hcljvpp7u/4_pane_guy_and_getting_started.png?dl=0" alt="">&lt;/p>
&lt;p>I will cover the use of &lt;code>FormRequest&lt;/code>, &lt;code>Mockery&lt;/code>, &lt;code>Behat&lt;/code> and more in this article.&lt;/p>
&lt;p>The article will show how to test your Domain code, in this case I mean testing how the code will work outside of the Routing and Controller layer of your Application. But what this will lead to is a &amp;ldquo;lego&amp;rdquo; like moment of plugging in these parts to your Controller so you know it will work. Of course it will be tested as well during the UI testing.&lt;/p>
&lt;p>I will start off with this Behat Feature&lt;/p>
&lt;pre>&lt;code>Feature: Login Page
Login page to do authenticated tasks
As an anonymous user
So we can protect some personal and administrative parts of the site
@happy_path @smoke @javascript @profile
Scenario: A user can login and see their profile
Given I am on the login page
And I fill in the login form with my proper username and password
Then I should be able to see my profile page
Then if I try to see another persons page I should get rejected
@smoke @profile
Scenario: A non logged in user can not get a profile
Given I am an anonymous user
And I go to the profile page
Then I should get redirected with an error message to let me know the problem
&lt;/code>&lt;/pre>&lt;p>What we have is the &lt;code>@happy_path&lt;/code> that will be the UI &lt;code>Scenario&lt;/code> in this case as well as the Domain. And yes I can have more than one UI &lt;code>Scenario&lt;/code> but in this case I just want to deliver something that let&amp;rsquo;s the Product Owner knows her application is working as expected.&lt;/p>
&lt;p>What we will start with is &lt;code>Scenario: A user can login and see their profile&lt;/code>&lt;/p>
&lt;p>In my example there will be a &lt;code>Repository&lt;/code> class to manage the Business logic and a &lt;code>FormRequest&lt;/code> Class to deal with managing ACL.&lt;/p>
&lt;p>Let&amp;rsquo;s take the Context file one step at a time &lt;code>features/bootstrap/LoginPageDomainContext.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> /**
* @Given I am on the login page
*/
public function iAmOnTheLoginPage()
{
$this-&amp;gt;user = factory(\App\User::class)-&amp;gt;create();
}
&lt;/code>&lt;/pre>&lt;p>I setup the state of the world for this &lt;code>Scenario&lt;/code> I do not rely on seed data.&lt;/p>
&lt;p>Also at the top of the Class I pull in &lt;code>use \Laracasts\Behat\Context\DatabaseTransactions;&lt;/code> and &lt;code>\Laracasts\Behat\Context\Migrator&lt;/code>&lt;/p>
&lt;p>These come from the Laracast Library on Behat &lt;a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs&lt;/a> and &lt;a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension&lt;/a>&lt;/p>
&lt;p>This next step is written with too much &amp;ldquo;Web&amp;rdquo; in mind. I should try and reword it so it fits more inline with the business goals.&lt;/p>
&lt;pre>&lt;code> /**
* @Given I fill in the login form with my proper username and password
*/
public function iFillInTheLoginFormWithMyProperUsernameAndPassword()
{
Auth::login($this-&amp;gt;user);
PHPUnit_Framework_Assert::assertFalse(Auth::guest());
}
&lt;/code>&lt;/pre>&lt;p>Here is where things get fun&lt;/p>
&lt;pre>&lt;code> /**
* @Then I should be able to see my profile page
*/
public function iShouldBeAbleToSeeMyProfilePage()
{
$user = factory(\App\User::class)-&amp;gt;create();
factory(\App\Profile::class)-&amp;gt;create(['user_id' =&amp;gt; $user-&amp;gt;id]);
/** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)-&amp;gt;makePartial();
$auth-&amp;gt;shouldReceive('route')-&amp;gt;andReturn($user-&amp;gt;url);
$results = $auth-&amp;gt;authorize();
PHPUnit::assertTrue($results);
}
&lt;/code>&lt;/pre>&lt;p>And the next part to that&lt;/p>
&lt;pre>&lt;code> /**
* @Then if I try to see another persons page I should get rejected
*/
public function ifITryToSeeAnotherPersonsPageIShouldGetRejected()
{
$user = factory(\App\User::class)-&amp;gt;create();
factory(\App\Profile::class)-&amp;gt;create(
['favorite_comic_character' =&amp;gt; &amp;quot;foo&amp;quot;, 'user_id' =&amp;gt; $user-&amp;gt;id]
);
/** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)-&amp;gt;makePartial();
$auth-&amp;gt;shouldReceive('route')-&amp;gt;andReturn($user-&amp;gt;url);
$results = $auth-&amp;gt;authorize();
PHPUnit::assertFalse($results);
}
&lt;/code>&lt;/pre>&lt;p>Making sure to close my &lt;code>Mockery&lt;/code> when done&lt;/p>
&lt;pre>&lt;code> /**
* @afterScenario
*/
public function cleanUp() {
Mockery::close();
}
&lt;/code>&lt;/pre>&lt;p>We are testing the two pieces that matter right now, the &lt;code>Repo&lt;/code> and the &lt;code>FormRequest&lt;/code>.&lt;/p>
&lt;p>All I did was run &lt;code>vendor/bin/behat -slogin_domain --append-snippets --tags=@happy_path&lt;/code> and I got to see the one(s) with that tag working.&lt;/p>
&lt;h2 id="the-repo">The Repo&lt;/h2>
&lt;p>&lt;code>\App\Repositories\ProfileShowPage&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Repositories;
use App\Profile;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;
class ProfileShowPage extends ProfileRepository
{
public function showProfileForUserFromSlug($slug)
{
return \App\User::fromSlug($slug);
}
}
&lt;/code>&lt;/pre>&lt;p>Why not just use the Controller! Well this is still a simple simple example but honestly if you are just building something for fun or something serious and just getting the feel of an idea go for it. I am doing this cause I want to plug in more to this later since it is part of a larger plan.&lt;/p>
&lt;p>&lt;strong>Note: &lt;code>Profile::fromSlug()&lt;/code> is just a scope and the model works out the rest of the query for me&lt;/strong>&lt;/p>
&lt;pre>&lt;code> public function scopeFromSlug($query, $slug)
{
return $query-&amp;gt;with('profile')-&amp;gt;where('url', $slug)-&amp;gt;firstOrFail();
}
&lt;/code>&lt;/pre>&lt;p>That is it for the repository, now how about this &lt;code>FormRequest&lt;/code> at &lt;code>app/Http/Requests/ProfileShowRequest.php&lt;/code>?&lt;/p>
&lt;h2 id="formrequest">FormRequest&lt;/h2>
&lt;p>You can read more about this &lt;a href="https://laravel.com/docs/5.2/validation#form-request-validation">here&lt;/a> on Laravel Docs&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Requests;
/**
* @NOTE THERE ARE SOME CLASSES HERE SEE GITHUB
*/
class ProfileShowRequest extends Request
{
protected $profile;
/**
* Determine if the user is authorized to make this request.
*
* @return bool
*/
public function authorize()
{
if (Auth::guest()) {
return false;
}
/** @var \App\Repositories\ProfileShowPage $profilePage */
$profilePage = App::make(\App\Repositories\ProfileShowPage::class);
$user = $profilePage-&amp;gt;showProfileForUserFromSlug($this-&amp;gt;route('slug'));
return Auth::user()-&amp;gt;id == $user-&amp;gt;profile-&amp;gt;user_id;
}
public function forbiddenResponse()
{
return redirect('login')-&amp;gt;with('message', &amp;quot;You need to login first&amp;quot;);
}
/**
* Get the validation rules that apply to the request.
*
* @return array
*/
public function rules()
{
return [
//
];
}
}
&lt;/code>&lt;/pre>&lt;h2 id="the-controller">The Controller&lt;/h2>
&lt;p>All right now that step is passing and the pieces are ready to plug in to the Controller!&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use App\Http\Requests\ProfileShowRequest;
use App\Repositories\ProfileShowPage;
use Illuminate\Database\Eloquent\ModelNotFoundException;
class ProfileShowController extends Controller
{
public function getProfileForUserUsingSlug(ProfileShowRequest $request, ProfileShowPage $repository, $slug)
{
try {
$profile = $repository-&amp;gt;showProfileForUserFromSlug($slug);
return view('profile.show', compact('profile'));
} catch (ModelNotFoundException $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Could not find your profile :(&amp;quot;);
} catch (\Exception $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Error getting profile :(&amp;quot;);
}
}
}
&lt;/code>&lt;/pre>&lt;p>This controller has one Job &lt;code>app/Http/Controllers/ProfileShowController.php&lt;/code> Showing the profile.&lt;/p>
&lt;p>In with that job it has the ACL taken care of before it even has to think about what it needs to do.&lt;/p>
&lt;p>After that it asks the repo to take care of the request and it deals with the response or inevitable exception!&lt;/p>
&lt;p>So right away I can go to my ui test and make it so you can see the &lt;strong>&lt;a href="https://github.com/alnutile/recipes/blob/a5f2522e702ee49d21711d9416c5a659e7761ddc/features/bootstrap/LoginPageUIContext.php">code here&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="follow-up">Follow Up&lt;/h2>
&lt;p>All code for this can be seen at &lt;a href="https://github.com/alnutile/recipes">https://github.com/alnutile/recipes&lt;/a> this is a foundation repo for a new book coming out in 2 months with many day to day Laravel Recipes!&lt;/p></description><category>behat</category><category>bdd</category><category>php</category><category>laravel</category></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description>&lt;p>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.&lt;/p>
&lt;p>In this example I had a Class responsible for saving data, we&amp;rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&amp;rsquo;ll call FooProcessData.&lt;/p>
&lt;p>The BDD Story for this worked out well in that just like in Konstantin Kudryashov noted in this &lt;a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example#_=_">article&lt;/a> I had a great reading business driven gherkin feature that I then, using &lt;a href="http://docs.behat.org/en/v3.0/guides/5.suites.html">Behat 3 and Suites&lt;/a> was able to make some really great names for my classes and methods.&lt;/p>
&lt;p>But this was fine as I was working on FooSaveData, but the fact that FooProcessData had to iterate over a large complex array of data I did not want to do inside of this Gherkin test. It would mean that I had to deal with 5 other steps, x number of model states I needed etc. Instead I just made a unit test for that class &amp;ldquo;FooProcessData&amp;rdquo; and focused on it for a bit outside the rest of this work.&lt;/p>
&lt;p>To begin with I just use&lt;/p>
&lt;pre>&lt;code>File::put(base_path('tests/fixtures/data_to_process.json', json_encode($some_data, JSON_PRETTY_PRINT))
&lt;/code>&lt;/pre>&lt;p>to put that data right where I want it for my unit tests.&lt;/p>
&lt;p>Then from there I go around and around unil the thinking on the left reads more like the thinking on the right&lt;/p>
&lt;p>&lt;a href="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0">&lt;img src="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0" alt="start to end">&lt;/a>&lt;/p>
&lt;p>Which is my favorite part of this really as I see code evolve to something I can come back 6 months later and read.&lt;/p>
&lt;blockquote>
&lt;p>Let&amp;rsquo;s Plan for a Future Where We&amp;rsquo;re All As Stupid as We Are Today - Dan Milstein&lt;/p>
&lt;/blockquote>
&lt;p>At this point that &amp;ldquo;lego&amp;rdquo; like piece is done and I can go back to my Behat BDD Gherkin test to finish off where I left off.&lt;/p></description><category>php</category><category>laravel</category><category>bdd</category><category>behat</category><category>phpunit</category></item><item><title>Keeping a Controller Method Simple</title><link>https://alfrednutile.info/posts/186/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/186/</guid><description>&lt;p>When I am done with a controller, done mocking up ideas and ready for some long term code, then I think this is the most information a Controller method should have.&lt;/p>
&lt;pre>&lt;code>public function updateFoor($id, $foo) {
        try {
           
            $results = $this-&amp;gt;someRepoOrServiceClass($Id, $foo);           
            return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; &amp;quot;Success doing something&amp;quot;], 202);
        } catch (\Exception $e) {
            $message = sprintf(&amp;quot;Error doing something %s&amp;quot;, $e-&amp;gt;getMessage());
            Log::debug($message);
           
            return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; $message], 400);
        }
}
&lt;/code>&lt;/pre>&lt;p>At this point I have &lt;code>someRepoOrServiceClass&lt;/code> well tested outside of this Controller. And I do not need to do much to this controller since it is just returning the results or dealing with an error.&lt;/p>
&lt;p>Even using &lt;a href="https://laravel.com/docs/5.2/validation#form-request-validation">Form Request Validation&lt;/a> I can create logic and test logic outside of my Controller. Making the moment I come back to my controller just about plugging in these &amp;ldquo;lego&amp;rdquo; like pieces.&lt;/p></description><category>php</category><category>coding</category></item><item><title>Homestead and Auto Setup Hosts File</title><link>https://alfrednutile.info/posts/184/</link><pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/184/</guid><description>&lt;p>I discovered this Vagrant Plugin &lt;a href="https://github.com/cogitatio/vagrant-hostsupdater">https://github.com/cogitatio/vagrant-hostsupdater&lt;/a> thanks to &lt;a href="https://github.com/cogitatio/vagrant-hostsupdater">https://github.com/cogitatio/vagrant-hostsupdater&lt;/a> when setting up Windows and thought why can&amp;rsquo;t I use it on my Mac?&lt;/p>
&lt;p>Just like the docs say on their github site&lt;/p>
&lt;pre>&lt;code>vagrant plugin install vagrant-hostsupdater
&lt;/code>&lt;/pre>&lt;p>Then update your ruby file that setups up homestead&lt;/p>
&lt;pre>&lt;code>subl ~/Homestead/scripts/homestead.rb
&lt;/code>&lt;/pre>&lt;p>This will look like &lt;img src="https://dl.dropboxusercontent.com/s/chwinvw18ufcurv/homestead_alias.png?dl=0" alt="alias">&lt;/p>
&lt;p>Then&lt;/p>
&lt;pre>&lt;code>subl ~/.homestead/Homestead.yaml
&lt;/code>&lt;/pre>&lt;p>And make that like this&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/8mbqv837jgtpnm9/homestead_alias_two.png?dl=0" alt="homestead">&lt;/p>
&lt;p>Then run provision&lt;/p>
&lt;pre>&lt;code>cd ~/Homestead
vagrant provision
&lt;/code>&lt;/pre>&lt;p>That is it now your /etc/hosts file will look like this&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/91u5omdgwoij006/homestead_hosts.png?dl=0" alt="homestead">&lt;/p></description><category>homestead</category><category>laravel</category></item><item><title>API Token Based Access Laravel 5.1 (Yet another article on this)</title><link>https://alfrednutile.info/posts/183/</link><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/183/</guid><description>&lt;h2 id="api-token">API Token&lt;/h2>
&lt;p>Laravel 5.2 introduces the auth token guard setup which is way simpler than Oauth. Also it does not assume a certain level of complexity in needs like Scopes and expirations of tokens that we do not need for our internal app to app communications.&lt;/p>
&lt;p>We are using 5.1 so this will implement it.&lt;/p>
&lt;p>See some docs here &lt;a href="https://gistlog.co/JacobBennett/090369fbab0b31130b51">https://gistlog.co/JacobBennett/090369fbab0b31130b51&lt;/a>&lt;/p>
&lt;p>For creating a user the AppServiceProvider boots the user record and if no api_token
is present it will set one. As well as the UUID (we use &lt;a href="https://packagist.org/packages/ramsey/uuid">https://packagist.org/packages/ramsey/uuid&lt;/a> for this)&lt;/p>
&lt;p>&lt;code>app/Providers/AppServiceProvider.php:18&lt;/code>&lt;/p>
&lt;pre>&lt;code> User::creating(function($user) {
if (!$user-&amp;gt;id)
{
$user-&amp;gt;id = Uuid::uuid4()-&amp;gt;toString();
}
if (!$user-&amp;gt;api_token)
{
$user-&amp;gt;api_token = Uuid::uuid4()-&amp;gt;toString();
}
});
&lt;/code>&lt;/pre>&lt;p>The factory includes this as well &lt;code>database/factories/ModelFactory.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>$factory-&amp;gt;define(App\User::class, function ($faker) {
return [
'id' =&amp;gt; $faker-&amp;gt;uuid,
'name' =&amp;gt; $faker-&amp;gt;name,
'email' =&amp;gt; $faker-&amp;gt;email,
'api_token' =&amp;gt; $faker-&amp;gt;uuid,
'password' =&amp;gt; str_random(10),
'remember_token' =&amp;gt; str_random(10),
];
});
&lt;/code>&lt;/pre>&lt;p>Note in the &lt;code>\App\User&lt;/code> model has this field hidden like the password field &lt;code>app/User.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>///
class User extends Model implements AuthenticatableContract, CanResetPasswordContract
{
use Authenticatable, CanResetPassword;
protected $hidden = ['password', 'remember_token', 'api_token'];
///
&lt;/code>&lt;/pre>&lt;p>And of course we need the migration for this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class AddApiTokenToUsersTable extends Migration
{
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;string('api_token', 60)-&amp;gt;unique();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
if(Schema::hasColumn('users', 'api_token'))
$table-&amp;gt;dropColumn('api_token');
});
}
}
&lt;/code>&lt;/pre>&lt;p>This is all happening using the &lt;code>api_token&lt;/code> middleware seen here &lt;code>app/Http/Middleware/ApiToken.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Middleware;
use App\User;
use Closure;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\App;
class ApiToken
{
protected $auth;
public function __construct(Guard $auth)
{
$this-&amp;gt;auth = $auth;
}
public function handle($request, Closure $next)
{
if($request-&amp;gt;input('api_token') &amp;amp;&amp;amp; $this-&amp;gt;hasMatchingToken($request-&amp;gt;input('api_token'))) {
return $next($request);
}
/**
* This assumes it is behind auth at all times
* so if the above fails we then let auth manage it
*/
if ($this-&amp;gt;auth-&amp;gt;guest()) {
if ($request-&amp;gt;ajax()) {
return response('Unauthorized.', 401);
} else {
return redirect()-&amp;gt;guest('auth/login');
}
}
return $next($request);
}
/**
* Laravel 5.2 uses vendor/laravel/framework/src/Illuminate/Auth/TokenGuard.php:66 and then
* vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:87 to get
* a user based on the password
*
* @NOTE
* We can load the user if we want to manage scopes/roles etc but right now it is
* just pass fail
*/
public function hasMatchingToken($token)
{
if($user = User::where('api_token', $token)-&amp;gt;first())
return true;
}
}
&lt;/code>&lt;/pre>&lt;p>And plug that into the Kernel &lt;code>app/Http/Kernel.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http;
use Illuminate\Foundation\Http\Kernel as HttpKernel;
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];
/**
* The application's route middleware.
*
* @var array
*/
protected $routeMiddleware = [
'auth' =&amp;gt; \App\Http\Middleware\Authenticate::class,
'auth.token' =&amp;gt; \App\Http\Middleware\ApiToken::class,
'auth.basic' =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'guest' =&amp;gt; \App\Http\Middleware\RedirectIfAuthenticated::class,
];
}
&lt;/code>&lt;/pre>&lt;h2 id="tests">Tests&lt;/h2>
&lt;p>You can see the tests &lt;code>tests/UserTokenTest.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
class UserTokenTest extends TestCase
{
use DatabaseMigrations;
/**
* @test
*/
public function should_pass_auth_with_no_token_since_they_auth()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
/**
* @test
*/
public function should_auth_user_since_they_have_token()
{
$user = factory(\App\User::class)-&amp;gt;create();
$results = $this-&amp;gt;call('GET', sprintf(&amp;quot;/example/auth_token?api_token=%s&amp;quot;, $user-&amp;gt;api_token));
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
/**
* @test
*/
public function should_fail_user_no_token_no_auth()
{
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(302, $results-&amp;gt;status());
}
}
&lt;/code>&lt;/pre>&lt;h2 id="console-commands-to-make-tokens">Console Commands to Make Tokens&lt;/h2>
&lt;p>You can see the commands &lt;code>app/Console/Commands/UserTokenCrud.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Console\Commands;
use App\User;
use Illuminate\Console\Command;
use Ramsey\Uuid\Uuid;
class UserTokenCrud extends Command
{
/**
* @TODO
* Show, Update, Delete
*/
protected $signature = 'cat:create-token {user_email} {--show=false : Just show the token} ';
protected $description = 'Create the token for the user';
public function __construct()
{
parent::__construct();
}
public function handle()
{
try
{
$user = User::where('email', $this-&amp;gt;argument('user_email'))-&amp;gt;first();
if(!$user)
throw new \Exception(sprintf(&amp;quot;User not found for %s&amp;quot;, $this-&amp;gt;argument(&amp;quot;user_email&amp;quot;)));
if($this-&amp;gt;option('show'))
{
$this-&amp;gt;info(sprintf(&amp;quot;User token is %s&amp;quot;, $user-&amp;gt;api_token));
return false;
}
$token = Uuid::uuid4()-&amp;gt;toString();
$user-&amp;gt;api_token = $token;
$user-&amp;gt;save();
$this-&amp;gt;info(sprintf(&amp;quot;User with email %s now has token %s&amp;quot;, $user-&amp;gt;email, $token));
}
catch(\Exception $e)
{
$this-&amp;gt;error(sprintf(&amp;quot;Error finding user %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
}
&lt;/code>&lt;/pre>&lt;p>Plug that into the Console Kernel &lt;code>Console/Kernel.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
//\App\Console\Commands\Inspire::class,
\App\Console\Commands\UserTokenCrud::class
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
//$schedule-&amp;gt;command('inspire')
-&amp;gt;hourly();
}
}
&lt;/code>&lt;/pre>&lt;p>Allowing to update, delete and see tokens&lt;/p>
&lt;h2 id="example-routes">Example Routes&lt;/h2>
&lt;pre>&lt;code>Route::group(['middleware' =&amp;gt; 'auth.token'], function () {
Route::get('example/auth_token', function () {
return &amp;quot;foo&amp;quot;;
});
});
&lt;/code>&lt;/pre>&lt;p>I added some testing / example routes. Once you have your api_token give them a try&lt;/p>
&lt;ul>
&lt;li>/example/auth_token?api_token=foo to show the API Token working&lt;/li>
&lt;li>/s3?api_token=foo&lt;/li>
&lt;li>/rds?api_token=foo&lt;/li>
&lt;li>/dynamodb?api_token=foo&lt;/li>
&lt;/ul>
&lt;p>Note the token might change if you seed the database. You can ssh into the server and run&lt;/p>
&lt;pre>&lt;code>php artisan cat:create-token foo@gmail.com --show
&lt;/code>&lt;/pre>&lt;p>To get the token.&lt;/p></description><category>php</category><category>auth</category><category>laravel</category><category>api</category></item><item><title>Contract Testing</title><link>https://alfrednutile.info/posts/182/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/182/</guid><description>&lt;p>Sometimes we need to make sure external APIs have not changed. Some of those we have control over some of those we do not.&lt;/p>
&lt;p>Either way we can run tests daily, weekly or as needed, outside of our tests we run with every push to Github, that will make sure this API is still delivering what we expect.&lt;/p>
&lt;p>This &lt;a href="https://www.youtube.com/watch?v=NAF7HWW_eJs">video&lt;/a> gave me some good tips on this one being to keep your Contract tests outside of your Domain Logic. Secondly to focus on the KEYS and VALUES you care about.&lt;/p>
&lt;h2 id="keys">KEYS&lt;/h2>
&lt;p>Focusing on the ones you care about can make this a ton easier. If I am calling an API and only want to know the ID and TITLE then I am going to make sure those exist and are in the same place every time.&lt;/p>
&lt;p>Here are some results from the Marvel Comics API&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;offset&amp;quot;: 0,
&amp;quot;limit&amp;quot;: 20,
&amp;quot;total&amp;quot;: 733,
&amp;quot;count&amp;quot;: 20,
&amp;quot;results&amp;quot;: [
{
&amp;quot;id&amp;quot;: 55699,
&amp;quot;digitalId&amp;quot;: 0,
&amp;quot;title&amp;quot;: &amp;quot;Spider-Man (2016) #5&amp;quot;,
&amp;quot;issueNumber&amp;quot;: 5,
&amp;quot;variantDescription&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;BLACK CAT makes her move against SPIDER-MAN!!!&amp;quot;,
&amp;quot;modified&amp;quot;: &amp;quot;2016-04-05T12:46:27-0400&amp;quot;,
&amp;quot;isbn&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;upc&amp;quot;: &amp;quot;75960608314500511&amp;quot;,
&amp;quot;diamondCode&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;ean&amp;quot;: &amp;quot;&amp;quot;,
&lt;/code>&lt;/pre>&lt;p>I just want to make sure &amp;ldquo;results&amp;rdquo; has a record, with ID and TITLE. So I can call this api via PHPUnit on a scheduled basis and make sure it is working if not ping us in Slack.&lt;/p>
&lt;h2 id="values">VALUES&lt;/h2>
&lt;p>Then there are values. Many times these change so I might not focus on the value of the value but the type. Integer, Array, Not-Null, Empty etc. What am I expecting?&lt;/p>
&lt;h2 id="phpunit">PHPUnit&lt;/h2>
&lt;p>With these two things in place we can have a set of PHPUnit tests that can run on a schedule. You can set your phpunit.xml to hit these as separate Suites.&lt;/p>
&lt;pre>&lt;code> &amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;./tests/&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;testsuite name=&amp;quot;Contracts Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;./tests/contracts/&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&lt;/code>&lt;/pre>&lt;p>And just run those &lt;code>phpunit --testsuite Contracts Test Suite&lt;/code>&lt;/p></description><category>php</category><category>testing</category></item><item><title>Getting Going Quickly Windows, Behat and Selenium</title><link>https://alfrednutile.info/posts/181/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/181/</guid><description>&lt;p>Quick Install Steps&lt;/p>
&lt;h2 id="vagrant-and-homestead">Vagrant and Homestead&lt;/h2>
&lt;p>This was easy I just followed these steps &lt;a href="http://sherriflemings.blogspot.ca/2015/03/laravel-homestead-on-windows-8.html">here&lt;/a> and I was done. For me I used Vmware but Virtualbox is fine.&lt;/p>
&lt;h2 id="windows-in-selenium">Windows in Selenium&lt;/h2>
&lt;p>Two easy steps&lt;/p>
&lt;h3 id="step-1-install-nodejs-super-easy">Step 1 Install Node.js SUPER EASY&lt;/h3>
&lt;p>&lt;a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/&lt;/a>&lt;/p>
&lt;p>Install the .exe, restart your console and you have node!&lt;/p>
&lt;h3 id="step-2-install-selenium">Step 2 Install Selenium&lt;/h3>
&lt;p>Just go here and you are done!
&lt;a href="https://www.npmjs.com/package/selenium-standalone">https://www.npmjs.com/package/selenium-standalone&lt;/a>&lt;/p>
&lt;p>After those steps I run it in a powershell and the server is running and I am set to use it.&lt;/p>
&lt;h2 id="final-touches">Final Touches&lt;/h2>
&lt;p>In my VM I &amp;ldquo;sudo vim /etc/hosts&amp;rdquo; and point it to my selenium on windows using the domain &amp;ldquo;selenium.dev&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>192.168.7.57 selenium.dev
&lt;/code>&lt;/pre>&lt;p>Then my behat.yml looks like this&lt;/p>
&lt;p>So when I run this inside the VM it knows to talk to the exteral version of Selenium&lt;/p>
&lt;pre>&lt;code>default:
suites:
home_ui:
paths: [ %paths.base%/features/home]
contexts: [ HomePageUiContext ]
extensions:
Laracasts\Behat:
env_path: .env.behat
Behat\MinkExtension:
default_session: laravel
base_url: https://recipes.dev
laravel: ~
selenium2:
wd_host: &amp;quot;http://selenium.dev:4444/wd/hub&amp;quot;
browser_name: chrome
&lt;/code>&lt;/pre>&lt;p>You can see more of it &lt;a href="https://github.com/alnutile/recipes/blob/master/behat.yml">here&lt;/a>&lt;/p></description><category>bdd</category><category>behat</category><category>windows</category></item><item><title>AWS, S3 Storage and limited Visibility</title><link>https://alfrednutile.info/posts/180/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/180/</guid><description>&lt;p>Storing files on S3 is great. And many times those files are private so I only want to give temporary access to them. Using Laravel Storage I can interact with the file-system quite easily and seamlessly especially between Cloud and Local.&lt;/p>
&lt;p>In this case I want to return a file only for 10 minutes&lt;/p>
&lt;pre>&lt;code> public function getSignedUrl($filename_and_path, $expires_minutes = '10')
{
$client = Storage::disk('s3')-&amp;gt;getDriver()-&amp;gt;getAdapter()-&amp;gt;getClient();
$bucket = env('BUCKET');
$command = $client-&amp;gt;getCommand('GetObject', [
'Bucket' =&amp;gt; $bucket,
'Key' =&amp;gt; $filename_and_path
]);
$request = $client-&amp;gt;createPresignedRequest($command, Carbon::now()-&amp;gt;addMinutes($expires_minutes));
return (string) $request-&amp;gt;getUri();
}
&lt;/code>&lt;/pre>&lt;p>That is it!&lt;/p>
&lt;p>Thanks to this &lt;a href="https://github.com/minio/minio/issues/1285">post&lt;/a> for the help.&lt;/p></description><category>php</category><category>aws</category></item><item><title>Behat and Uploading Files to a Form Even on Remote Selenium2 Servers</title><link>https://alfrednutile.info/posts/179/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/179/</guid><description>&lt;p>Just had to tackle this issue so making some notes for later here :)&lt;/p>
&lt;p>&lt;strong>Updated and more detailed &lt;a href="https://alfrednutile.info/posts/188">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>I run selenium on my Windows PC and before that my Mac, either one would have had this issue since my test is running side my VM. This meant when I needed to run a test to interact with a form to upload an image that image path was relative to the machine (VM) that I started the test on and not the Browser that was being manipulated by Selenium2.&lt;/p>
&lt;p>The solution was &amp;ldquo;easy&amp;rdquo; thanks to this &lt;a href="https://github.com/minkphp/MinkSelenium2Driver/issues/187#issuecomment-112106857">thread&lt;/a>&lt;/p>
&lt;p>After that my step just looked like this and I was done&lt;/p>
&lt;pre>&lt;code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$localFile = base_path('features/assets/profile.jpg');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
$this-&amp;gt;attachFileToField('profile_image', $remotePath);
unlink($tempZip);
$this-&amp;gt;pressButton('Save');
}
&lt;/code>&lt;/pre>&lt;p>I also had to add &lt;code>@javascript&lt;/code> to the test to allow this WebDriver feature to work.&lt;/p>
&lt;p>That was it, saved me a ton of time suffering through this gotcha moment.&lt;/p></description><category>behat</category><category>bdd</category><category>php</category><category>note2self</category></item><item><title>Laravel, PHPUnit, Require_Once on Routes</title><link>https://alfrednutile.info/posts/178/</link><pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/178/</guid><description>&lt;p>Going crazy running PHPUnit all and getting fail but you run the one route and it works!&lt;/p>
&lt;p>The difference is &lt;code>require&lt;/code> versus &lt;code>require_once&lt;/code> in PHPUnit tests.&lt;/p>
&lt;p>For example&lt;/p>
&lt;pre>&lt;code>require __DIR__ . '/../ConfigurationExamples/routes.php';
Route::get('/', function () {
return view('welcome');
});
&lt;/code>&lt;/pre>&lt;p>Now when I run my tests I get 100% pass&lt;/p>
&lt;pre>&lt;code>/**
* @test
*/
public function should_auth_user()
{
$user = factory(\App\User::class)-&amp;gt;create();
$results = $this-&amp;gt;call('GET', sprintf(&amp;quot;/example/auth_token?api_token=%s&amp;quot;, $user-&amp;gt;api_token));
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
/**
* @test
*/
public function should_fail_user()
{
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(302, $results-&amp;gt;status());
}
/**
* @test
*/
public function should_pass_auth_with_no_token()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
&lt;/code>&lt;/pre>&lt;p>The moment I change it to &lt;code>require_once&lt;/code> I get fails on the last or second to last one, it is not consistant except that it will fail. I immediately run that one and it passes.&lt;/p>
&lt;p>It is not the database and I can change the order of these tests to have the bottom one fail.&lt;/p>
&lt;p>So &lt;code>require&lt;/code> is your friend!!&lt;/p></description><category>note2self</category><category>php</category><category>laravel</category></item><item><title>Remote Behat Testing with Laravel</title><link>https://alfrednutile.info/posts/177/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/177/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/k92297boe0w9tta/balloon_2_of_3.jpg?dl=0" alt="balloon_2_or_3">&lt;/p>
&lt;p>&lt;strong>&lt;a href="http://www.readorlisten.com/12">Listen Here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>This document will cover how to use a Behat specific API to setup a site for testing. What this includes is setting up a Scenario so that it has the data you need to run a test. This makes it possible not to rely on Seed data for this. This will allow us to run behat tests from remote machines as well as run tests in parallel.&lt;/p>
&lt;h2 id="why-not-seed-data">Why not seed data?&lt;/h2>
&lt;p>From experience seed data fails in two ways.&lt;/p>
&lt;p>One a project gets large and there is a ton of seed data and one person adds to it or alters in a way that effects how someone else was expecting the data to be. It just becomes too much of it&amp;rsquo;s own domain of knowledge outside of the test it applies to.&lt;/p>
&lt;p>Second seed data assumes you can reset the state of the application at anytime. But if you want to run your tests in parallel you need to have a more precise system to set up the &amp;ldquo;World&amp;rdquo; for that particular Scenario.&lt;/p>
&lt;h2 id="the-api">The API&lt;/h2>
&lt;p>First we will setup an API in our app just for Behat and the behat user.&lt;/p>
&lt;p>Example Route protected by Authentication as a particular user.&lt;/p>
&lt;pre>&lt;code>Route::get('/api/v1/behat/setup_campaign_eu',
['as' =&amp;gt; 'behat.camp_eu', 'uses' =&amp;gt; '\AlfredNutileInc\BehatAPI\BehatApiController@setupCampaignEU']);
&lt;/code>&lt;/pre>&lt;p>Example Controller&lt;/p>
&lt;pre>&lt;code> public function setEUCampaignToPushed()
{
$campaign = Campaign::find($this-&amp;gt;campaign_id_eu);
if($campaign)
{
$campaign-&amp;gt;status = Campaign::PUSHED;
$campaign-&amp;gt;save();
}
}
&lt;/code>&lt;/pre>&lt;p>So now our data is set.&lt;/p>
&lt;h2 id="behat-steps">Behat Steps&lt;/h2>
&lt;p>So when we run our Behat test we start by setting that state.&lt;/p>
&lt;pre>&lt;code> Background: Login
Given I setup campaigns
Given I login as &amp;quot;admin&amp;quot;
And I wait
&lt;/code>&lt;/pre>&lt;p>We are setting up this state right before we run the Scenario(s). Of course we can move this one step into the needed Scenario if there are many in the test.&lt;/p>
&lt;p>Example of the &lt;code>FeatureContext.php&lt;/code> file that has this step.&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^I setup campaigns$/
*/
public function iSetupCampaigns()
{
$this-&amp;gt;iLoginAs('behat');
$this-&amp;gt;visit('/api/v1/behat/setup_campaign_eu');
}
&lt;/code>&lt;/pre>&lt;p>You see we are using the already existing Behat steps and sessions to log in and finally hit the API path we created above.&lt;/p>
&lt;h2 id="clean-up">Clean Up&lt;/h2>
&lt;p>And using the hooks that Behat has we can clean up after our steps even if there is a fail. Again leaving the system in the same stat it was when we first hit it with our tests.&lt;/p>
&lt;p>The test file&amp;rsquo;s scenario has a tag &lt;code>@1_1&lt;/code> as seen below&lt;/p>
&lt;pre>&lt;code> @1_1
Scenario: Campaign Misc
Given I am on an EU Campaign
And I wait
&lt;/code>&lt;/pre>&lt;p>This tag is then called in our &lt;code>FeatureContext&lt;/code> file using a Behat Hook &lt;code>AfterScenario&lt;/code>&lt;/p>
&lt;pre>&lt;code> /**
* @AfterScenario @1_1
*/
public function after_1_1($event)
{
$this-&amp;gt;iLoginAs('behat');
$this-&amp;gt;visit('/api/v1/behat/1_1_cleanup');
}
&lt;/code>&lt;/pre>&lt;p>This allows us to hit the api at the end of the Scenario once again&lt;/p>
&lt;pre>&lt;code> public function cleanUpCampaignEU()
{
try
{
$country = Country::find('test-country-eu');
$country-&amp;gt;active = 0;
$country-&amp;gt;save();
$campaign_fixture = $this-&amp;gt;loadCampaignFixtureForEu();
$this-&amp;gt;cleanOutRelatedMetaMaster($campaign_fixture);
$this-&amp;gt;cleanUpByID($campaign_fixture);
$this-&amp;gt;cleanUpByID_16Name();
$this-&amp;gt;misc_cleanup();
return Response::json(&amp;quot;Done cleaning Campaign EU&amp;quot;, 200);
}
catch(\Exception $e)
{
return Response::json(&amp;quot;Error cleaning Campaign EU &amp;quot; . $e-&amp;gt;getMessage());
}
}
&lt;/code>&lt;/pre>&lt;p>And that is it. We have tested and cleaned up after our selves with a precision that allows us to run tests in parallel, from remote machines and to even do &lt;code>smoke&lt;/code> tests on any environment.&lt;/p></description><category>behat</category><category>laravel</category></item><item><title>CMS or NOT CMS</title><link>https://alfrednutile.info/posts/176/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/176/</guid><description>&lt;p>This video just shows and example of a NOT CMS we built for a client. Sure they can add content and manage it BUT they did not need all the extra features that come with Wordpress or Drupal like workflows, versioning, intricate roles etc.&lt;/p>
&lt;p>Also they had a huge need to easily deploy all of this work. For example the Help system can have updates deployed to all of the sites via one Github commit.&lt;/p>
&lt;p>So in this case the need for spinning up new instances for clients, easily updating 100s of sites and keeping the whole UI simple far out weighed all the other features Wordpress and Drupal gave you out of the box.&lt;/p>
&lt;iframe width="640" height="480" src="https://www.youtube.com/embed/on9GAAIus_M" frameborder="0" allowfullscreen>&lt;/iframe></description><category>cms</category><category>laravel</category></item><item><title>Feature Flags In Laravel</title><link>https://alfrednutile.info/posts/175/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/175/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;strong>Library is &lt;a href="https://github.com/friendsofcat/laravel-feature-flag/">https://github.com/friendsofcat/laravel-feature-flag/&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Listen &lt;a href="http://www.readorlisten.com/10">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Watch &lt;a href="https://youtu.be/4nq7FyHQj8I">https://youtu.be/4nq7FyHQj8I&lt;/a>&lt;/strong>&lt;/p>
&lt;p>We are working on using FeatureFlags or Toggles in our applications. For one we are aiming to do all our work on mainline branch at all times so this would be a key coding discipline to use FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application. For example if a hotfix or another feature is ready to go to production we can push that with no worries of the in progress feature.&lt;/p>
&lt;blockquote>
&lt;p>FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application&lt;/p>
&lt;/blockquote>
&lt;p>You can see many of the reasons in this article &lt;a href="http://martinfowler.com/articles/feature-toggles.html">http://martinfowler.com/articles/feature-toggles.html&lt;/a> by Pete Hodgson for using this system. So not just the more common situations of permissions but also Release Toggles, Experiment Toggles and more see list and image below&lt;/p>
&lt;p>&lt;img src="http://martinfowler.com/articles/feature-toggles/chart-4.png" alt="flag_types">&lt;/p>
&lt;p>&lt;strong>[image from martin fowler feature-toggles article&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Release Toggles&lt;/li>
&lt;li>Ops Toggles&lt;/li>
&lt;li>Permission Toggles&lt;/li>
&lt;li>Experiment Toggles&lt;/li>
&lt;/ul>
&lt;p>The core coding logic I will be using is this library &lt;a href="https://github.com/Atriedes/feature">Atriedes/feature&lt;/a> as it has the logic needed to consider common feature flag states eg user, users, on, off, groups, admin, internal, random etc.&lt;/p>
&lt;ul>
&lt;li>on or off value simple!&lt;/li>
&lt;li>on for users&lt;/li>
&lt;li>on for groups&lt;/li>
&lt;li>on for a user&lt;/li>
&lt;li>bucketing random&lt;/li>
&lt;li>random&lt;/li>
&lt;li>percentage&lt;/li>
&lt;li>url query string&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The core coding logic I will be using is this library &lt;a href="https://github.com/Atriedes/feature">Atriedes/feature&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>One key thing, as I use this in Laravel, is I will try and mix this with the existing &lt;a href="https://laravel.com/docs/5.2/authorization">Authorization&lt;/a> workflow that is already present. This gives me some already prepared ways to think about this both at the view layer, model layer and controller layer and where to register these states. Plus we then get great Laravel docs to help explain some of it.&lt;/p>
&lt;p>For example I can use this in my theme &lt;a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-snippet-blade-php">snippet&lt;/a>&lt;/p>
&lt;h2 id="installing">Installing&lt;/h2>
&lt;p>This will install two things. The library I made to do this and the Example library I am using to show it in action.&lt;/p>
&lt;h3 id="providers">Providers&lt;/h3>
&lt;p>Add the below to your config/app.php&lt;/p>
&lt;pre>&lt;code>AlfredNutileInc\LaravelFeatureFlags\FeatureFlagsProvider::class,
AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureProvider::class,
&lt;/code>&lt;/pre>&lt;h3 id="the-core-library-featureflagsprovider">The Core Library FeatureFlagsProvider&lt;/h3>
&lt;p>What does this do?&lt;/p>
&lt;p>It does some basic Laravel work for registering views for settings, routes for managing settings CRUD and some cache on model changes so we can update the World as needed.&lt;/p>
&lt;p>The big thing it does do is instantiate World.&lt;/p>
&lt;pre>&lt;code> public function boot()
{
$this-&amp;gt;registerViewFiles();
$this-&amp;gt;injectLinks();
$this-&amp;gt;registerFeatureFlags();
}
private function registerFeatureFlags()
{
$features = FeatureFlag::where('active', 1)-&amp;gt;get()-&amp;gt;toArray();
foreach($features as $key =&amp;gt; $value)
{
$features = $this-&amp;gt;transformFeatures($features, $value, $key);
unset($features[$key]);
}
$world = new World();
\Feature\Feature::create($world, $features);
}
private function transformFeatures($features, $value, $key)
{
$features[$value['key']] = $value;
$features[$value['key']]['users'] = (isset($value['variants']['users'])) ? $value['variants']['users'] : [];
return $features;
}
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The big thing it does do is instantiate World.&lt;/p>
&lt;/blockquote>
&lt;p>The database saves the data in a way that I will talk about below. Above is the transformation of that data into a more compatible form to this library.&lt;/p>
&lt;p>So at this point we have World, which is where we set our way of finding truth and &lt;code>$features&lt;/code> which is the state of all features.&lt;/p>
&lt;h4 id="world">World&lt;/h4>
&lt;p>This class implements the interface that comes with the library&lt;/p>
&lt;p>You can see that &lt;a href="https://gist.github.com/anonymous/c508101f0a85a4751c93">here&lt;/a>&lt;/p>
&lt;p>I simply do some logic in there based off User email since that is all I am using right now instead of user id or name. More can be added as needed to react to all the other options.&lt;/p>
&lt;p>But this is how we find things like &amp;lsquo;can this user see this feature&amp;rsquo;, &amp;lsquo;what users are active for this feature&amp;rsquo; etc. Basically it is the class you use to tie your framework into the FeatureFlag logic. So when it asks for groups, users, etc it has the methods and logic needed to compare your data to the feature flag requirements.&lt;/p>
&lt;h3 id="then-the-examplefeature-provider">Then the ExampleFeature Provider&lt;/h3>
&lt;p>Just so I could try out this library on something so I could wrap my head around it I made an example feature that added a twitter field to the user data.&lt;/p>
&lt;p>This was great cause it was a schema change so I had to make sure the field was &lt;code>nullable&lt;/code> and it offered some view level interactions with the FeatureFlag.&lt;/p>
&lt;h3 id="in-the-view">In the View&lt;/h3>
&lt;p>I made a view of it &lt;a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-partial-blade-php">partial&lt;/a>&lt;/p>
&lt;p>That can be injected into the main view that this feature will be altering &lt;a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-example-blade-php">example.blade.php&lt;/a>&lt;/p>
&lt;p>All of this is registered in the Provider setup above&lt;/p>
&lt;pre>&lt;code>public function boot(GateContract $gate)
{
$this-&amp;gt;registerPolicies($gate);
$gate-&amp;gt;define('add-twitter-field', '\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@addTwitterField');
$gate-&amp;gt;define('see-twitter-field', '\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@seeTwitterField');
}
&lt;/code>&lt;/pre>&lt;p>Those logic classes are super simple thanks to this library and really could just have been Closures.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace AlfredNutileInc\LaravelFeatureFlags;
class ExampleFeatureFlagLogic
{
public function addTwitterField()
{
return \Feature\Feature::isEnabled('add-twitter-field');
}
public function seeTwitterField($user)
{
return \Feature\Feature::isEnabled('see-twitter-field');
}
}
&lt;/code>&lt;/pre>&lt;p>Now you can turn off this info as needed. And in your Controllers/Repository just remember to not assume that field is coming in via request or that it even exists in the Model.&lt;/p>
&lt;pre>&lt;code>$user-&amp;gt;twitter = ($request-&amp;gt;input(&amp;quot;twitter&amp;quot;)) ? $request-&amp;gt;input(&amp;quot;twitter&amp;quot;) : null;
&lt;/code>&lt;/pre>&lt;p>Honestly I think it is better to add this to a Laravel Model Event. Then as you listen to that Event you can react to it. And when not having the feature on or installed any longer it is one less place your code is being injected into the application.&lt;/p>
&lt;h3 id="featureflag-migration">FeatureFlag Migration&lt;/h3>
&lt;p>The Migration will make one table for &lt;code>feature_flags&lt;/code> and add a column to the user table for the example twitter field feature.&lt;/p>
&lt;p>Note the Example Provider will add the &lt;code>twitter&lt;/code> column to the &lt;code>user&lt;/code> table. It is nullable so it will not be an issue if other parts of the app do not consider this data.&lt;/p>
&lt;p>In the &lt;code>feature_flags&lt;/code> table there we have the id column, the key column, active column to even consider the feature flag and then the variants column if any. I might get rid of the active column but thought it might speed up queries.&lt;/p>
&lt;p>The variant column being json allows us to store unstructured data to hold any data for different situations so we can cover all the possible variants listed above.&lt;/p>
&lt;p>For example&lt;/p>
&lt;pre>&lt;code>
$server_config['show-twitter'] =&amp;gt; array('users' =&amp;gt; array('on' =&amp;gt; array('fred')))
&lt;/code>&lt;/pre>&lt;p>would store as&lt;/p>
&lt;pre>&lt;code>|ID |KEY |ACTIVE |VARIANT |
|---|--------------|---------|---------------------------------|
| 2 | show-twitter | 1 |{ 'users': [ 'on': [ 'fred' ] ] }|
| | | | |
&lt;/code>&lt;/pre>&lt;h2 id="menu">Menu&lt;/h2>
&lt;p>Just a note the demo has the Feature Flag menu. Because this core app uses the ViewComposer pattern to create a &amp;ldquo;links&amp;rdquo; array I can add to that later on in my FeatureFlagProvider&lt;/p>
&lt;p>&lt;img src="https://dl.dropbox.com/s/daftzzfq7it6wxx/feature_flag_menu.png?dl=0" alt="menu">&lt;/p>
&lt;pre>&lt;code> private function injectLinks()
{
view()-&amp;gt;composer(
'layouts.default', function($view) {
if ($view-&amp;gt;offsetExists('links')) {
$links_original = $view-&amp;gt;offsetGet('links');
$links = [
['title' =&amp;gt; 'Feature Flags', 'url' =&amp;gt; route('feature_flags.index'), 'icon' =&amp;gt; 'flag-o']
];
$view-&amp;gt;with('links', array_merge($links_original, $links));
}
}
);
}
&lt;/code>&lt;/pre>&lt;p>But that is for another post!&lt;/p>
&lt;h2 id="video">Video&lt;/h2>
&lt;p>
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/4nq7FyHQj8I" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;/p>
&lt;h2 id="todo">TODO&lt;/h2>
&lt;ul>
&lt;li>Use Model Events to do that level of work&lt;/li>
&lt;li>Cache of the FeatureFlag Settings and update Cache on Change&lt;/li>
&lt;li>Show how it works in the menu and other areas eg include and Provider&lt;/li>
&lt;/ul></description><category>laravel</category><category>feature_flags</category><category>php</category></item><item><title>Install Webdriver to get testing with Behat and Javascript</title><link>https://alfrednutile.info/posts/174/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/174/</guid><description>&lt;p>This is so I do not forget!&lt;/p>
&lt;p>&lt;strong>UPDATED: go here instead &lt;a href="https://www.npmjs.com/package/selenium-standalone">https://www.npmjs.com/package/selenium-standalone&lt;/a>&lt;/strong>&lt;/p>
&lt;h2 id="1-sudo-npm--g-install-webdriver-manager">1) sudo npm -g install webdriver-manager&lt;/h2>
&lt;h2 id="2-sudo-webdriver-manager-update---chrome">2) sudo webdriver-manager update &amp;ndash;chrome&lt;/h2>
&lt;h2 id="3-get-java-for-the-mac">3) Get Java for the Mac&lt;/h2>
&lt;p>Googled El Capitan Java and takes me to Apples site to get the right version of java&lt;/p>
&lt;p>&lt;a href="https://support.apple.com/kb/dl1572?locale=en_US">https://support.apple.com/kb/dl1572?locale=en_US&lt;/a>&lt;/p>
&lt;h2 id="4-webdriver-manager-start">4) webdriver-manager start&lt;/h2>
&lt;p>That is it!&lt;/p></description><category>behat</category><category>note2self</category></item><item><title>Slack Custom Commands and Laravel to Make an American to British Translater</title><link>https://alfrednutile.info/posts/173/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/173/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/b8vwn1peb7s5cet/a2b.gif?dl=0" alt="in use">&lt;/p>
&lt;p>Laravel or anything you are comfortable with making a Route and Response will work fine really.&lt;/p>
&lt;p>This &amp;ldquo;messaging as a platform&amp;rdquo; is a new world for me, challenging my way of thinking in many ways. Some things just do not need a authentication of their own, a UI, etc they just need a place to get info from, or do something with some info etc.&lt;/p>
&lt;p>In this case I made a really simple &amp;ldquo;Custom Slash Command&amp;rdquo; to translate British Slang to American and American to British (so I can sound cooler!)&lt;/p>
&lt;p>Later I will look into bots etc but for now here is a look at a custom slash commands.&lt;/p>
&lt;h2 id="getting-api-endpoint-setup">Getting API Endpoint Setup&lt;/h2>
&lt;p>I still do not have a great local workflow for this. There are articles about this online with secure tunnels etc. My next step is to use my wildcard cert or using &lt;a href="https://letsencrypt.org/">https://letsencrypt.org/&lt;/a> to have a local url so I can make this workflow a ton easier.&lt;/p>
&lt;p>But to get going I had to setup a domain with valid HTTPS. As linked above, Let&amp;rsquo;s Encrypt might be a great way to setup a play area and solutions like Forge &lt;a href="https://forge.laravel.com/">https://forge.laravel.com/&lt;/a> Heroku &lt;a href="https://www.heroku.com/">https://www.heroku.com/&lt;/a> are great ways to get going quickly on getting a &amp;ldquo;POSTABLE&amp;rdquo; API in place.&lt;/p>
&lt;p>What I mean by POSTABLE is that your API needs to take a POST from Slack (it can take a GET but not sure the advantage to that) but consider App you are setting up the foundation to so many cool integrations you can do with Slack all using this one server your are setting up, until of course something needs it&amp;rsquo;s own space. One POSTABLE API can be like your own &amp;ldquo;If This Then That&amp;rdquo; &lt;a href="https://ifttt.com/">https://ifttt.com/&lt;/a> solution in my opinion. Fun for some of us that is for sure.&lt;/p>
&lt;p>Once that was setup I could start playing around.&lt;/p>
&lt;h2 id="setting-up-the-slack-endpoint">Setting up the Slack Endpoint&lt;/h2>
&lt;p>Once I log into the slack.com website and read up on the API went over to Custom Integrations. Making a Slack App will come later but for not this was more than enough to have some fun.&lt;/p>
&lt;p>In there I added a configuration.&lt;/p>
&lt;p>There are several settings here that matter.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/jbnl2yn9e9odfhg/slack_image_1.png?dl=0" alt="example image">&lt;/p>
&lt;ul>
&lt;li>Command: /b2a&lt;/li>
&lt;li>URL: &lt;a href="https://foo.com/api/v1/brit_to_us">https://foo.com/api/v1/brit_to_us&lt;/a>&lt;/li>
&lt;li>Method: POST&lt;/li>
&lt;li>Token: TOP_SECRET&lt;/li>
&lt;li>Customize Name: brit2american&lt;/li>
&lt;li>Custom Icon: speaking_head_in_silhouette&lt;/li>
&lt;li>Help Text:&lt;/li>
&lt;li>Description: Translate British slang to American Slang&lt;/li>
&lt;li>Usage hint: Throw A Spanner In The Works&lt;/li>
&lt;li>Descriptive Label: Brit to American Slang&lt;/li>
&lt;/ul>
&lt;p>I made two of them since I also need to turn my boring American into cool British Slang&lt;/p>
&lt;ul>
&lt;li>Command: /a2b&lt;/li>
&lt;li>URL: &lt;a href="https://foo.com/api/v1/us_to_brit">https://foo.com/api/v1/us_to_brit&lt;/a>&lt;/li>
&lt;li>Method: POST&lt;/li>
&lt;li>Token: TOP_SECRET&lt;/li>
&lt;li>Customize Name: american2brit&lt;/li>
&lt;li>Custom Icon: speaking_head_in_silhouette&lt;/li>
&lt;li>Help Text:&lt;/li>
&lt;li>Description: Translate American to Cool British Slang&lt;/li>
&lt;li>Usage hint: Throw A Spanner In The Works&lt;/li>
&lt;li>Descriptive Label: Good Morning All!&lt;/li>
&lt;/ul>
&lt;p>Once these are setup we are ready to build our Routes!&lt;/p>
&lt;h2 id="setting-up-the-receiving-api">Setting Up the Receiving API&lt;/h2>
&lt;p>This part could have gone better if I had a local environment setup to receive these Slack commands and next time I will, I just did not realize how easy it was to just setup my own local environment with a good signed cert which Slack requires until I started writing this article.&lt;/p>
&lt;p>This was for fun so I did not go crazy with design. All of it could have been in the route file really. But I do want this domain and Laravel install I made to allow me to plug in other Custom Commands and later Slack App.&lt;/p>
&lt;h3 id="slack-payload">Slack Payload&lt;/h3>
&lt;p>Note this page on Slack &lt;a href="https://api.slack.com/slash-commands">https://api.slack.com/slash-commands&lt;/a> you will get a payload like this&lt;/p>
&lt;pre>&lt;code>token=gIkuvaNzQIHg97ATvDxqgjtO
team_id=T0001
team_domain=example
channel_id=C2147483705
channel_name=test
user_id=U2147483697
user_name=Steve
command=/weather
text=94070
response_url=https://hooks.slack.com/commands/1234/5678
&lt;/code>&lt;/pre>&lt;p>For me that meant keeping some things in the .env file as needed to look for a specific Token, User etc BUT later I can see making a Provider class and Config file to setup up for each Slash Command or App I make so that I keep the settings as needed in one grouped place and not in a huge file.&lt;/p>
&lt;p>For now I just use the &lt;code>text&lt;/code> and the &lt;code>response_url&lt;/code> to my advantage the rest I am not worried about right now.&lt;/p>
&lt;p>This is also I good example of an easy &lt;code>Webhook&lt;/code> workflow. Give me your object and where to send the results back to.&lt;/p>
&lt;p>Keeping the routing simple my &lt;code>routes.php&lt;/code> file is just this&lt;/p>
&lt;pre>&lt;code>Route::post('/api/v1/brit_to_us', 'BritToUSController@britToUs');
Route::post('/api/v1/us_to_brit', 'BritToUSController@usToBrit');
&lt;/code>&lt;/pre>&lt;p>And that controller is just this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Goutte\Client as GoutteClient;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;
class BritToUSController extends Controller
{
protected $url = 'http://www.translatebritish.com/';
/**
* @var GoutteClient
*/
protected $client;
public function __construct(GoutteClient $client)
{
$this-&amp;gt;client = $client;
}
public function usToBrit(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url . 'reverse.php');
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
public function britToUs(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url);
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
protected function respondToSlack($message, $original_message, $type = 'in_channel')
{
return ['response_type' =&amp;gt; 'in_channel', 'text' =&amp;gt; trim($message), 'attachments' =&amp;gt; ['text' =&amp;gt; $original_message]];
}
/**
* @return string
*/
public function getUrl()
{
return $this-&amp;gt;url;
}
/**
* @param string $url
*/
public function setUrl($url)
{
$this-&amp;gt;url = $url;
}
}
&lt;/code>&lt;/pre>&lt;p>The gist of it is to take the incoming &lt;code>text&lt;/code> and pass it to the Translation Site, and return it to the &lt;code>response_url&lt;/code> using the Response::json Facade.&lt;/p>
&lt;p>Pretty easy. Later I can validate tokens, validate users or query info based on a user eg &amp;ldquo;Get me my tickets from JIRA&amp;rdquo; for example&lt;/p>
&lt;p>That is some of my goals later, how to use Slack to automate some of my, and my teams, day to day needs and workflows.&lt;/p>
&lt;p>&lt;strong>UPDATE&lt;/strong>
Make sure you exclude this route from the &amp;ldquo;app/Http/Middleware/VerifyCsrfToken.php&amp;rdquo; middleware&lt;/p>
&lt;pre>&lt;code> protected $except = [
'api/v1/imports'
];
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>slack</category></item><item><title>Then Benefits of Building a Clickable POC as a Developer</title><link>https://alfrednutile.info/posts/172/</link><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/172/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/p5at7k18vzmf7l6/balloon_and_monster_1_of_3.jpg?dl=0" alt="ballon 1 or 3">&lt;/p>
&lt;p>&lt;strong>Listen &lt;a href="http://www.readorlisten.com/4">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>This article will focus on web applications and not really be about building websites eg a company blog, college website etc.&lt;/p>
&lt;p>This will cover two things. One, how helpful it can be to make a clickable Proof of Concepts (POC), not just with images, or tools the spit out html but instead just enough javascript and base theme to help &amp;ldquo;sell&amp;rdquo; the idea, or more importantly to help Product Owners see the possibilities that are not too far out of reach. And the second, and maybe more important thing I will cover is that the developer has a lot to gain in taking on this seemingly non-coding path.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Use it to make the &amp;ldquo;happy paths&amp;rdquo; that the Product Owners need to see&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>To begin with I want to set a baseline for the user interface. If your project is new find a theme or base theme (WrapBootstrap, BootStrap, Zurb Foundation, etc). Something that you can easily plug a collection of pieces together to get going easily. This leaves your more time, energy and budget to focus on the business&amp;rsquo;s solution. But if this is an existing project then use the already established theme for your POC so people can really see the context of what you are showing them. Either way you want more than just a un-styled, out of context feature on a white background to help them, the Product Owners, see how their User Stories can work. And you want something more than a bunch of image maps in my opinion.&lt;/p>
&lt;p>And to help with the above use Javascript, but keep the it &amp;ldquo;simple&amp;rdquo; while also keeping in realistic. Use it to make the &amp;ldquo;happy paths&amp;rdquo; that the Product Owners need to see. For example, I had to show a POC of turning on and off comments, different levels of diffs on images for comparing two states of a website page from 2 different time periods in 3 different widths. And in about two days, with the foundation theme we used before, I was able to show this interactive web application. And in this case the designer helped to translate the business needs into wireframes to help lay out a bare path for me to follow.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&amp;hellip;only they (the developer) know the boundaries of the technologies being used and possibilities&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>So why should the developer do this and not a person un-experienced in the technologies being used? Why not just use one of those tools that spit out html and make a clickable mock in the context of those tool? This is the key, in my opinion, because it is only the developer who will be able to push the technologies to the next level of possibilities for the solution because only they know the boundaries of the technologies being used and possibilities. And only they can discover new possibilities along the way. And what you will get is a solution that can confidently expose new ideas and possibilities that helps it exceed expectations.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;But the developer also &lt;strong>needs&lt;/strong> to do this for their own good&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>But the developer also &lt;strong>needs&lt;/strong> to do this for their own good, to get into the business domain, to start thinking about the business needs and exploring, knowing it is not final, knowing it can be thrown away. And it is this process that helps the developer to see the many things they had not realized they had missed about the business domain model and grow in the knowledge needed to make the right product.&lt;/p>
&lt;p>And when it is done it might have zero reusable code but that is fine. Maybe the developer can use it to build some acceptance tests out of it as he or she starts working with real code having a clear understanding of the goals.&lt;/p>
&lt;h2 id="links-to-great-resources">Links to Great Resources&lt;/h2>
&lt;h3 id="themes-that-have-lots-of-widgets-and-ui-elements">Themes that have lots of widgets and UI elements&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://wrapbootstrap.com/">https://wrapbootstrap.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.google.com/design/spec/material-design/introduction.html">https://www.google.com/design/spec/material-design/introduction.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://getbootstrap.com/">http://getbootstrap.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://material.angularjs.org/latest/">https://material.angularjs.org/latest/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://foundation.zurb.com/">http://foundation.zurb.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://angular-ui.github.io/bootstrap/">https://angular-ui.github.io/bootstrap/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="techniques">Techniques&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://alfrednutile.info/posts/58">https://alfrednutile.info/posts/58&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://laravel.com/docs/5.2/routing">https://laravel.com/docs/5.2/routing&lt;/a> See the Any route&lt;/li>
&lt;/ul>
&lt;h3 id="tools">Tools&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://www.json-generator.com/">http://www.json-generator.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.layoutit.com/">http://www.layoutit.com/&lt;/a>&lt;/li>
&lt;/ul></description><category>developer</category><category>user stories</category><category>workflows</category></item><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description>&lt;p>&lt;strong>Update: September 06 2016&lt;/strong>&lt;/p>
&lt;p>We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.&lt;/p>
&lt;p>&lt;strong>Or Listen &lt;a href="http://www.readorlisten.com/2">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Another article about this written by Loran Jane Mitchell &lt;a href="http://www.lornajane.net/posts/2014/using-composer-without-gitignoring">Using Composer Without GitIgnoring Vendor&lt;/a>&lt;/p>
&lt;p>I have done this for sometime with node_modules because I use to hate waiting for npm to pull down during CI builds. I could have used the CI systems cache for this but I realized once the project starts it is rare that I needed to add more libraries. And when I did it was just as easy to wipe using &lt;code>git rm&lt;/code> and do them again fresh. This included my use of Bower.&lt;/p>
&lt;p>But then there is Composer and PHP. The project starts and I might be pulling in libraries quite a bit but at some point we are just running &lt;code>composer install&lt;/code> and never &lt;code>composer update&lt;/code>. This step included &lt;code>rm -rf vendor&lt;/code> which helped with the speed. And this is going great BUT has a few draw backs I will cover below.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="speed-ci-and-deployment">Speed (CI, and Deployment)&lt;/h2>
&lt;p>This is not HUGE but with workflow now each deployment, unless it is a &lt;code>quick&lt;/code> one, we tend to just use &lt;code>rm -rf vendor &amp;amp;&amp;amp; composer install&lt;/code>. And it does cost us 1/2 a minute. Again not huge but nice to not have that as down time to the user. For at this point the app is not usable. And even worse as I will talk about below. And we do a lot of builds a day in the CI.&lt;/p>
&lt;h2 id="one-point-of-failure-vs-many">One Point of Failure VS Many&lt;/h2>
&lt;p>This is the big reason in my opinion. I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing. This can be caused due to a misconfiguration on our part, eg using anonymous Github connections but at times I have seen it even when authenticated and am not totally sure why.&lt;/p>
&lt;p>Then there are those moments, and they happen, when Github is under DDOS attack! So then it is just a day of no deployments and that is not an option really. And with this technique we have a good chance of getting a deployment in since we are just hitting one repo and not trying our luck at many.&lt;/p>
&lt;h2 id="rollback">Rollback&lt;/h2>
&lt;p>Then there are Rollback moments. Zero down time would be great and this is one step closer. With our releases we use Tags. So if I was to release 1.2.2 and it had a bug I could rollback to tag 1.2.1 in moments. No need to rebuild composer. Sure it saves minor amount of time but when things are down on production 1/2 a minute can feel like a life time. This does not cover all migration issues but that is not a thing we do every deployment and honestly with the migration rollback feature we have in Laravel I think that becomes an edge case that can be dealt with using Artisan and some creative coding.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;when things are down on production 1/2 a minute can feel like a life time&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="fixing-merge-conflicts">Fixing Merge Conflicts&lt;/h2>
&lt;p>Well what happens when there is a conflict in this vendor folder? That is easy really just &lt;code>rm&lt;/code> the whole thing and do what I have been doing all along &lt;code>composer install&lt;/code> saving &lt;code>composer update&lt;/code> only for those moments you are looking for something to really be updated and feeling lucky (and patient).&lt;/p></description><category>laravel</category><category>php</category><category>workflows</category><category>coding</category><category>best practices</category></item><item><title>Why Side Projects are Good For Me</title><link>https://alfrednutile.info/posts/170/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/170/</guid><description>&lt;p>&lt;strong>&lt;a href="http://www.readorlisten.com/1">You can Listen here!&lt;/a>&lt;/strong>&lt;/p>
&lt;p>First let me define what a “Side Project” is. In this case a “Side Project” is something you are not being paid for and something that you have complete control over. It can even be something you are just trying out some new ideas on. The reason it can not be something you are being paid for and ideally something you are fully in charge of is so you&amp;rsquo;re not under any pressure to deliver but you have time to explore, to learn, to try new ideas and overall build confidence.&lt;/p>
&lt;blockquote>
&lt;p>In this case of “Side Project” is something you are not being paid for something and that you have complete control over.&lt;/p>
&lt;/blockquote>
&lt;p>Otherwise I would say; for me, side projects are the worst thing to do if you are working full time and using them to earn money on the side. Of course I have done many of them, mainly because I had to but at some point when my finances were at a certain place, and my skills needed more than that type of work gave me, it just was not worth my time. This does not include contributing to OpenSource.&lt;/p>
&lt;p>So now we have a good idea of what I mean by side project so why is it good for me to have one? I think there are a few reasons.&lt;/p>
&lt;p>Switching my mindset so that I can focus on the business details of the daytime job and the business details of the night time job, for me, is very difficult. I believe this is especially true since some of the domain knowledge of the business, that comes with the work, is so important to grasp and sometimes difficult to really understand. And for me switching from say a full time job that has a business domain of sports and a side project that has a business domain of clothing can be too much to do either well.&lt;/p>
&lt;p>Then there is the chance to have control. When it&amp;rsquo;s a side project we can control of expectations, goals etc and we can kind of just explore. We can try ideas and not worry about immediate deadlines and not worry about delivering a certain feature a certain way. It is this control that allows us to just be creative and not have to really rush things.&lt;/p>
&lt;p>Also if we are in charge of both the item to be delivered and the person who needs to deliver it we get to see both sides of the challenge. And by doing so we can sometimes build empathy for that Project Owner. Then the next time they do not realize till after the feature was built, by me, that it just was not what they wanted, it will not be as frustrating.&lt;/p>
&lt;blockquote>
&lt;p>Then there is the chance to have control&lt;/p>
&lt;/blockquote>
&lt;p>Then there is repetition. The act of nightly or a few times a week sitting down to create something makes the repetition happen that we need to code well. Maybe you are just building a library or learning how to unit test or acceptance test better. Maybe you&amp;rsquo;re building an API or just going to play around with some API to get data from a website that you like to make a little tool to scratch your own itch. It is the repetition that starts to build the confidence we need to code well.&lt;/p>
&lt;blockquote>
&lt;p>It is the repetition that starts to build the confidence we need to code well.&lt;/p>
&lt;/blockquote>
&lt;p>All of this goes hand in hand of course with learning from more senior developers, books, videos etc but none of those can make us a better coder as much as doing.&lt;/p>
&lt;p>One thing I do during the day to help with my side work is I will post into Wunderlist any ideas that come to mind that I might like to try out later on. And then when the time comes that have I set aside at the end of the day I can find inspirations from that list and just give it a go for an hour or two. And it has been many times in those sessions of coding, without pressure, that I have experienced the moments of why I still find coding so interesting and satisfying.&lt;/p></description><category>readorlisten</category><category>freelance</category></item><item><title>Do I Really Need This Route Anymore?</title><link>https://alfrednutile.info/posts/169/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/169/</guid><description>&lt;p>Clean out old code can be hard. When your application has numerous javascript widgets, blade templates and forms you can not easily say what routes are being used. But with just a few artisan commands we can easily make this happen.&lt;/p>
&lt;p>Also this can help with knowing what routes your Tests are NOT covering.&lt;/p>
&lt;p>Package can be found &lt;a href="https://packagist.org/packages/alfred-nutile-inc/route-tracking">here&lt;/a> as well.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/892qdyoy099835b/route_report.png?dl=0" alt="route report">&lt;/p>
&lt;h2 id="the-commands-to-get-started">The Commands to Get Started&lt;/h2>
&lt;pre>&lt;code>php artisan make:model RouteUsage
php artisan make:middleware RouteUsageTracker
php artisan make:migration route_usage_tracker_table
php artisan make:console RouteReport
&lt;/code>&lt;/pre>&lt;h2 id="migration">Migration&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class RouteUsageTrackerTable extends Migration
{
public function up()
{
Schema::create('route_usages', function (Blueprint $table) {
$table-&amp;gt;increments('id');
$table-&amp;gt;string('path');
$table-&amp;gt;timestamps();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('route_usages');
}
}
&lt;/code>&lt;/pre>&lt;h2 id="middleware">Middleware&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Middleware;
use App\RouteUsage;
use Closure;
class RouteUsageTracker
{
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next)
{
RouteUsage::create(['path' =&amp;gt; $request-&amp;gt;path()]);
return $next($request);
}
}
&lt;/code>&lt;/pre>&lt;p>And plug that into the Kernel.php&lt;/p>
&lt;pre>&lt;code>
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\App\Http\Middleware\RouteUsageTracker::class,
];
&lt;/code>&lt;/pre>&lt;h3 id="model">Model&lt;/h3>
&lt;pre>&lt;code>&amp;lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
class RouteUsage extends Model
{
protected $fillable = ['path'];
}
&lt;/code>&lt;/pre>&lt;h3 id="artisan-reporting">Artisan Reporting&lt;/h3>
&lt;p>This can use more work like pagination, filtering etc. I used the &lt;code>RouteListCommand&lt;/code> to get started&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Console\Commands;
use App\RouteUsage;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
class RouteReport extends Command
{
/**
* The name and signature of the console command.
*
* @var string
*/
protected $signature = 'route:report {page?} {--count} ';
protected $headers = ['Path', 'Date'];
protected $headers_count = ['count', 'Path'];
/**
* The console command description.
*
* @var string
*/
protected $description = 'Command description';
/**
* Create a new command instance.
*
* @return void
*/
public function __construct()
{
parent::__construct();
}
/**
* Execute the console command.
*
* @return mixed
*/
public function handle()
{
if($this-&amp;gt;option('count'))
{
$report = RouteUsage::select(DB::raw('count(*) as used, path'))-&amp;gt;groupBy('path')-&amp;gt;orderBy('used', 'DESC')-&amp;gt;get()-&amp;gt;toArray();
$this-&amp;gt;table($this-&amp;gt;headers_count, $report);
}
else
{
$report = RouteUsage::select('path', 'created_at')-&amp;gt;paginate(100);
$this-&amp;gt;table($this-&amp;gt;headers, $report-&amp;gt;toArray()['data']);
}
}
}
&lt;/code>&lt;/pre>&lt;pre>&lt;code>php artisan route:report --count
&lt;/code>&lt;/pre>&lt;p>Can give us&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/kh042i76j6oa6w9/route_counted.png?dl=0" alt="counted">&lt;/p></description><category>php</category></item><item><title>Logout User After Inactivity Laravel and Milddleware</title><link>https://alfrednutile.info/posts/168/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/168/</guid><description>&lt;p>&lt;strong>Original Post&lt;/strong> &lt;a href="http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user">http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user&lt;/a>&lt;/p>
&lt;p>This Middleware made it super easy to satisfy a requirement to log the user out after 15 minutes of in activity.&lt;/p>
&lt;p>I added only a few touchups.&lt;/p>
&lt;p>One was the &lt;code>getTimeOut&lt;/code> this was so I can work locally and override this by setting it to a large number. I could even use it to just bypass the whole things for a bit since on &lt;code>local&lt;/code> I rather not deal with this.&lt;/p>
&lt;p>Also I removed the message count since it just was not needed for what I was doing.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Http\Middleware;
use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Session\Store;
class SessionTimeout {
protected $session;
protected $timeout=900;
public function __construct(Store $session){
$this-&amp;gt;session=$session;
}
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next)
{
if(!$this-&amp;gt;session-&amp;gt;has('lastActivityTime'))
$this-&amp;gt;session-&amp;gt;put('lastActivityTime',time());
elseif(time() - $this-&amp;gt;session-&amp;gt;get('lastActivityTime') &amp;gt; $this-&amp;gt;getTimeOut()){
$this-&amp;gt;session-&amp;gt;forget('lastActivityTime');
Auth::logout();
return redirect('auth/login')-&amp;gt;withErrors(['You had not activity in 15 minutes']);
}
$this-&amp;gt;session-&amp;gt;put('lastActivityTime',time());
return $next($request);
}
protected function getTimeOut()
{
return (env('TIMEOUT')) ?: $this-&amp;gt;timeout;
}
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category></item><item><title>CentOS or RedHat and Laravel</title><link>https://alfrednutile.info/posts/167/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/167/</guid><description>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/b0ourzj0umlrduq/laravel_redhat.png?dl=0" alt="">&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://serversforhackers.com/an-ansible-tutorial">Got Ideas from here An Ansible Tutorial&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Just wrapped up setting up two RedHat servers (version 7) and one CentOS Virtual box so I could deploy a Laravel site.&lt;/p>
&lt;p>&lt;strong>Code is &lt;a href="https://github.com/alnutile/ansible-laravel-redhat">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Thanks to Ansible it was not as bad as it could have been.&lt;/p>
&lt;p>I am not an ansible expert just getting into it as we need to do this more. What these scripts will do is&lt;/p>
&lt;ul>
&lt;li>Setup a CentOS Vagrant box&lt;/li>
&lt;li>Setup a Server for Laravel and Queues SupervisorD&lt;/li>
&lt;li>Setup up SSHD to be key based only you can remove this&lt;/li>
&lt;li>Setup Cron to run scheduler&lt;/li>
&lt;li>Setup SSL if you make the keys for this&lt;/li>
&lt;li>Redirect to https for site&lt;/li>
&lt;/ul>
&lt;h2 id="local-vm">Local VM&lt;/h2>
&lt;p>Step one is to install Ansible on your Mac and then &lt;code>vim /etc/ansible/hosts&lt;/code>&lt;/p>
&lt;p>In there I have&lt;/p>
&lt;pre>&lt;code>[local]
192.168.1.22
[serverprod]
111.111.111.111
[serverstage]
111.111.111.111
&lt;/code>&lt;/pre>&lt;p>Local is the VM&lt;/p>
&lt;p>I needed a local VM to run CentOS since I did not have RedHat but it is close enough. I downloaded the ISO installed it the old fashion way on VirtualBox then I ran my ansible scripts against it. You can see this line in the readme.md&lt;/p>
&lt;pre>&lt;code>ansible-playbook --limit local -s centos.yml -u centos -k --ask-sudo-pass --extra-vars &amp;quot;user=centos&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Now that that is set I can hit it with my nginx config&lt;/p>
&lt;pre>&lt;code>ansible-playbook --limit local -s nginx.yml -u centos --extra-vars &amp;quot;user=centos version=centos&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Okay now it should work?&lt;/p>
&lt;h2 id="redhat">RedHat&lt;/h2>
&lt;p>As I note in the readme.md I then setup the RedHat servers. They where a bit tougher but it all worked out. Note SELinux might be on that is why I have some lines to allow things but they may not be enough for your setup.&lt;/p></description><category>laravel</category><category>devops</category></item><item><title>Quick Tip Forcing More Complex Passwords in Laravel</title><link>https://alfrednutile.info/posts/166/</link><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/166/</guid><description>&lt;p>With the great &lt;a href="http://laravel.com/docs/5.1/validation">Laravel Docs&lt;/a> I will quickly show how to &amp;ldquo;encourage&amp;rdquo; the user to set a better password.&lt;/p>
&lt;p>Going through the standard docs for &lt;a href="http://laravel.com/docs/5.1/authentication">Authentication&lt;/a> we end up with a registration form.&lt;/p>
&lt;p>Then in the &lt;a href="https://github.com/laravel/laravel/blob/master/app/Http/Controllers/Auth/AuthController.php">AuthController&lt;/a> that comes with Laravel I modify it a bit.&lt;/p>
&lt;pre>&lt;code> protected function validator(array $data)
{
$messages = ['password.regex' =&amp;gt; &amp;quot;Your password must contain 1 lower case character 1 upper case character one number&amp;quot;];
return Validator::make($data, [
'name' =&amp;gt; 'required|max:255',
'email' =&amp;gt; 'required|email|max:255|unique:users',
'password' =&amp;gt; 'required|confirmed|min:8|regex:/^(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])\S*$/',
], $messages);
}
&lt;/code>&lt;/pre>&lt;p>Using the &lt;code>regex&lt;/code> rule seen in the &lt;a href="http://laravel.com/docs/5.1/validation#available-validation-rules">docs&lt;/a> &lt;a href="http://php.net/manual/en/function.preg-match.php">http://php.net/manual/en/function.preg-match.php&lt;/a> and the Laravel docs I can then set an expression to check for these characters, and I can also set a custom message if it fails.&lt;/p>
&lt;p>And with that little bit of work we get an error message to help the user make a better password.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0" alt="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0">&lt;/p>
&lt;p>btw this is coming about as I start this &lt;a href="https://onemonth.com/courses/web-security">Web Security Course&lt;/a> and try to consider some of these ideas in my day to day Laravel work.&lt;/p></description><category>laravel</category><category>php</category><category>security</category></item><item><title>Image Uploads, Laravel, Angular and Flow.js</title><link>https://alfrednutile.info/posts/165/</link><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/165/</guid><description>&lt;p>Here is one combination out of many to make this happen.&lt;/p>
&lt;p>The libraries are&lt;/p>
&lt;p>&lt;a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow&lt;/a>&lt;/p>
&lt;p>and&lt;/p>
&lt;p>&lt;a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server&lt;/a>&lt;/p>
&lt;h2 id="model-and-imageable-resource">Model and Imageable Resource&lt;/h2>
&lt;p>What I like about this is we can make 1 controller to manage uploads. That controller will upload the file, place it into the correct folder, and setup the relationship to the resource.&lt;/p>
&lt;p>In this example the Resource will be a Contact.&lt;/p>
&lt;p>So I then follow Laravel docs to create the Polymorphic Imageable/Photo example &lt;a href="http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations">http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations&lt;/a>&lt;/p>
&lt;p>Ending up with an image model like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
class Image extends Model
{
public $timestamps = false;
/**
* Get all of the owning imageable models.
*/
public function imageable()
{
return $this-&amp;gt;morphTo();
}
}
&lt;/code>&lt;/pre>&lt;p>And a Contact.php file like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
use Rhumsaa\Uuid\Uuid;
class Contact extends Model
{
protected $fillable = [
'first_name',
'last_name',
'active'
];
public function images()
{
return $this-&amp;gt;morphMany(\App\Image::class, 'imageable');
}
}
&lt;/code>&lt;/pre>&lt;p>Nothing special really&lt;/p>
&lt;p>Even the migration is right from the docs&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class CreateTableImageable extends Migration
{
public function up()
{
Schema::create('images', function (Blueprint $table) {
$table-&amp;gt;increments('id');
$table-&amp;gt;string('path');
$table-&amp;gt;integer('imageable_id');
$table-&amp;gt;string('imageable_type');
});
}
public function down()
{
Schema::drop('images');
}
}
&lt;/code>&lt;/pre>&lt;h2 id="controller">Controller&lt;/h2>
&lt;p>Now for the Controller.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use App\Image;
use Flow\Config;
use Illuminate\Support\Facades\Input;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;
class ImageController extends Controller
{
public $model_id;
public $model_class_path;
public $destination_path;
public $filename;
public $config;
public function uploadFile(Request $request, $model_id = false)
{
try
{
$this-&amp;gt;model_id = $model_id;
$model_class_path = $this-&amp;gt;getClassName($request);
$path = $this-&amp;gt;getImagePublicDestinationPath($request);
$this-&amp;gt;model_class_path = $model_class_path;
$this-&amp;gt;destination_path = $path;
$this-&amp;gt;config = new Config(array(
'tempDir' =&amp;gt; storage_path('chunks_temp_folder')
));
$this-&amp;gt;filename = Input::get('flowFilename');
$this-&amp;gt;saveImagable();
$flowRequest = new \Flow\Request();
if(\Flow\Basic::save(
public_path($this-&amp;gt;getDestinationPath()). '/' . $this-&amp;gt;filename,
$this-&amp;gt;config,
$flowRequest)) {
return Response::json(['data' =&amp;gt; $model_id, 'message' =&amp;gt; &amp;quot;File Uploaded $this-&amp;gt;filename&amp;quot;], 200);
} else {
return Response::json([], 204);
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error saving image %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
public function saveImagable()
{
$imageable = new Image();
$imageable-&amp;gt;path = $this-&amp;gt;destination_path . '/' . $this-&amp;gt;filename;
$imageable-&amp;gt;imageable_id = $this-&amp;gt;model_id;
$imageable-&amp;gt;imageable_type = $this-&amp;gt;model_class_path;
$imageable-&amp;gt;save();
}
public function getDestinationPath()
{
return $this-&amp;gt;destination_path;
}
public function setDestinationPath($destination_path)
{
$this-&amp;gt;destination_path = $destination_path;
}
private function getClassName($request)
{
return ($request-&amp;gt;input('model_class_path')) ? $request-&amp;gt;input('model_class_path') : 'App\Contact';
}
public function getImagePublicDestinationPath(Request $request)
{
return ($request-&amp;gt;input('path')) ? $request-&amp;gt;input('path') : 'images/contacts';
}
}
&lt;/code>&lt;/pre>&lt;p>Nothing special there just per the docs of the Flow php library &lt;a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server&lt;/a>&lt;/p>
&lt;p>And the route.php file&lt;/p>
&lt;pre>&lt;code>Route::get('images/upload/{model_id}', 'ImageController@uploadFile');
Route::post('images/upload/{model_id}', 'ImageController@uploadFile');
&lt;/code>&lt;/pre>&lt;p>By the time this project is done though all of this is behind auth middleware. While being built it is behind htaccess.&lt;/p>
&lt;p>One catch overall is the resource needs to exist before you can upload a file related to it so on Contact New type pages you may need to wait till the contact is created before you do the upload. There are ways around this but for now we are keeping it simple.&lt;/p>
&lt;h2 id="angular">Angular&lt;/h2>
&lt;p>This is a simple example.&lt;/p>
&lt;p>The route I made a simple example path&lt;/p>
&lt;pre>&lt;code>Route::get('/upload_example', function () {
return view('upload');
});
&lt;/code>&lt;/pre>&lt;p>That view extends the example layout view&lt;/p>
&lt;h3 id="defaultbladephp">default.blade.php&lt;/h3>
&lt;pre>&lt;code>&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
/* This helps the ng-show/ng-hide animations start at the right place. */
/* Since Angular has this but needs to load, this gives us the class early. */
.ng-hide { display: none!important; }
&amp;lt;/style&amp;gt;
&amp;lt;title ng-bind=&amp;quot;title&amp;quot;&amp;gt;Ratsoc v2.0&amp;lt;/title&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge, chrome=1&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&amp;quot; /&amp;gt;
&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;
&amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body flow-prevent-drop&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;div ng-include=&amp;quot;'layout/shell.html'&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;splash-page&amp;quot; ng-show=&amp;quot;showSplash&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;page-splash&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;page-splash-message&amp;quot;&amp;gt;
Ratsoc v2.0
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;progress progress-striped active page-progress-bar&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;bar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@yield('content')
&amp;lt;script src=&amp;quot;/temp/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/angular.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/ng-flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/app.upload.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Of course this would be setup better with Gulp but for now keeping it simple. The the view that is the content.&lt;/p>
&lt;h3 id="uploadbladephp">upload.blade.php&lt;/h3>
&lt;pre>&lt;code>@extends('layouts.default')
@section('content')
&amp;lt;div ng-app=&amp;quot;app.upload&amp;quot; flow-init flow-prevent-drop&amp;gt;
&amp;lt;div ng-controller=&amp;quot;MainController as vm&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-8 col-lg-offset-2&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;&amp;quot;
flow-init=&amp;quot;{
target: '/images/upload/' + vm.contact.id, singleFile: true, testChunks: true,
query: { '_token': vm.token, 'model_class_path': 'App\\Contact', 'path': 'images/contacts'}
}&amp;quot;
flow-files-submitted=&amp;quot;vm.upload( $files, $event, $flow )&amp;quot;
flow-file-success=&amp;quot;vm.setFileName($flow.files)&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;
flow-drop flow-drag-enter=&amp;quot;style={opacity: .5}&amp;quot;
flow-drag-leave=&amp;quot;style={}&amp;quot; ng-style=&amp;quot;style&amp;quot;
flow-drop-enabled=true&amp;gt;
&amp;lt;strong&amp;gt;&amp;lt;i class=&amp;quot;fa fa-arrow-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Upload image here by dragging here&amp;lt;/strong&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;btn btn-xs btn-default&amp;quot; ng-click=&amp;quot;vm.removeFile($flow)&amp;quot;
ng-if=&amp;quot;($flow.files.length &amp;gt; 0)&amp;quot; name=&amp;quot;remove-file&amp;quot;&amp;gt; Remove File &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;img ng-src=&amp;quot;@{{ vm.image }}&amp;quot; ng-show=&amp;quot;vm.image&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection
&lt;/code>&lt;/pre>&lt;p>Not much of a looker here. This makes it super easy to work on things though before plugging it into your more complex applications.&lt;/p>
&lt;p>Here I am adding a payload so when I use this on a page I can decide then is it at Contact, a Project, a Product etc. and setup the path eg &amp;lsquo;images/projects&amp;rsquo; or Model name &amp;lsquo;App\Contact&amp;rsquo; as needed.&lt;/p>
&lt;p>Then for the app.js file to do all this, again you might break it up into more files just keeping this simple.&lt;/p>
&lt;pre>&lt;code>(function () {
'use strict';
angular.module('app.upload', [
'flow'
]);
function FlowConfig(flowFactoryProvider)
{
flowFactoryProvider.defaults = {
speedSmoothingFactor: 0.2,
maxChunkRetries: 10,
simultaneousUploads: 10
};
}
function MainController($http, $scope)
{
var vm = this;
vm.contact = {};
vm.contact.id = 'new';
vm.token = false;
vm.upload = upload;
vm.setFileName = setFileName;
vm.image_root = '/images/contacts/';
activate();
////
function activate()
{
getToken();
}
function setFileName(flow_files)
{
vm.image = vm.image_root + flow_files[0].name;
}
function upload(files, event, flow)
{
angular.forEach(files, function(v,i) {
files[i].flowObj.opts.query._token = vm.token;
});
flow.upload();
}
function getToken()
{
$http.get('/auth/token').then(
successGettingToken,
errorGettingToken
);
}
function successGettingToken(response)
{
vm.token = response.data;
}
function errorGettingToken(response)
{
console.log(&amp;quot;Error&amp;quot;);
console.log(response);
}
}
angular.module('app.upload')
.controller(&amp;quot;MainController&amp;quot;, MainController)
.config(FlowConfig);
})();
&lt;/code>&lt;/pre>&lt;p>So we use the flow upload event to run our upload method. This then adds the token to the POST request for the CSRF middleware.&lt;/p>
&lt;p>Keep in mind my Angular is just a widget in blade. There is no separate session situation that you may have in SPA (Single Page Applications)&lt;/p>
&lt;p>Thats it, drag file, file uploads and you have Flow, Angular and Laravel.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/01l8psl1rpud4ee/laravel_flow_angular.png?dl=0" alt="">&lt;/p></description><category>laravel</category><category>php</category><category>angular</category></item><item><title>Simple Example of Making Code Easier to Read</title><link>https://alfrednutile.info/posts/164/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/164/</guid><description>&lt;p>Just a quick example&lt;/p>
&lt;p>Before&lt;/p>
&lt;pre>&lt;code> public function updateMarketoFolder($folder)
{
/**
* If parent id found in array then use it else use root
*/
if(isset($this-&amp;gt;folders_and_meta_data[$folder['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['id']];
}
elseif(isset($folder['parent']) &amp;amp;&amp;amp; isset($folder['parent']['id']) &amp;amp;&amp;amp; isset($this-&amp;gt;folders_and_meta_data[$folder['parent']['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['parent']['id']];
}
else
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data['root'];
}
if(isset($folder['name']))
$this-&amp;gt;names[] = $folder['name'] . '--' . $folder_meta_data-&amp;gt;id;
$this-&amp;gt;folders_and_meta_data[$folder['id']] = $folder_meta_data;
}
&lt;/code>&lt;/pre>&lt;p>Here is what we can do to make it easier to come back to six months later.&lt;/p>
&lt;pre>&lt;code> public function updateMarketoFolder($folder)
{
if($this-&amp;gt;hasOwnFolder($folder))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['id']];
}
elseif($this-&amp;gt;hasAParentAndParentHasFolder($folder))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['parent']['id']];
}
else
{
$folder_meta_data = $this-&amp;gt;getRootFolder();
}
if($this-&amp;gt;checkItHasAName($folder))
$this-&amp;gt;names[] = $folder['name'] . '--' . $folder_meta_data-&amp;gt;id;
$this-&amp;gt;folders_and_meta_data[$folder['id']] = $folder_meta_data;
}
private function hasOwnFolder($folder)
{
return isset($this-&amp;gt;folders_and_meta_data[$folder['id']]);
}
private function hasAParentAndParentHasFolder($folder)
{
return isset($folder['parent']) &amp;amp;&amp;amp; isset($folder['parent']['id']) &amp;amp;&amp;amp; isset($this-&amp;gt;folders_and_meta_data[$folder['parent']['id']]);
}
private function getRootFolder()
{
return $this-&amp;gt;folders_and_meta_data['root'];
}
private function checkItHasAName($folder)
{
return isset($folder['name']);
}
&lt;/code>&lt;/pre>&lt;p>Just a lot easier to come back to an remember why and what I am doing in the if statements. Also just to read a bit more easily what the needs are here of the data.&lt;/p></description><category>php</category><category>clean code</category></item><item><title>Spark Setup Issue</title><link>https://alfrednutile.info/posts/163/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/163/</guid><description>&lt;p>During the install &lt;a href="https://github.com/laravel/spark">https://github.com/laravel/spark&lt;/a> I kept getting this error&lt;/p>
&lt;pre>&lt;code> Problem 1
- Installation request for laravel/spark-installer ~1.0 -&amp;gt; satisfiable by laravel/spark-installer[v1.0.0].
- Conclusion: remove illuminate/support v4.2.17
- laravel/spark-installer v1.0.0 requires illuminate/support ~5.0 -&amp;gt; satisfiable by illuminate/support[v5.0.0, v5.0.22, v5.0.25, v5.0.26, v5.0.28, v5.0.33, v5.0.4, v5.1.1, v5.1.13, v5.1.16, v5.1.2, v5.1.6, v5.1.8].
- Can only install one of: illuminate/support[v5.0.0, v4.2.17].
- Can only install one of: illuminate/support[v5.0.22, v4.2.17].
- Can only install one of: illuminate/support[v5.0.25, v4.2.17].
- Can only install one of: illuminate/support[v5.0.26, v4.2.17].
- Can only install one of: illuminate/support[v5.0.28, v4.2.17].
- Can only install one of: illuminate/support[v5.0.33, v4.2.17].
- Can only install one of: illuminate/support[v5.0.4, v4.2.17].
- Can only install one of: illuminate/support[v5.1.1, v4.2.17].
- Can only install one of: illuminate/support[v5.1.13, v4.2.17].
- Can only install one of: illuminate/support[v5.1.16, v4.2.17].
- Can only install one of: illuminate/support[v5.1.2, v4.2.17].
- Can only install one of: illuminate/support[v5.1.6, v4.2.17].
- Can only install one of: illuminate/support[v5.1.8, v4.2.17].
- Installation request for illuminate/support == 4.2.17.0 -&amp;gt; satisfiable by illuminate/support[v4.2.17].
&lt;/code>&lt;/pre>&lt;p>Finally I went into my ~/.composer folder. Removed &lt;code>composer.lock&lt;/code> then I edited the &lt;code>composer.json&lt;/code> to look like this&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/envoy&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;laravel/installer&amp;quot;: &amp;quot;~1.1&amp;quot;,
&amp;quot;laravel/spark-installer&amp;quot;: &amp;quot;~1.0&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>I use Envoy for a lot of my projects so I left that there and made sure to update my installer.&lt;/p>
&lt;p>Then I ran, in that folder composer update.&lt;/p>
&lt;p>Finally I made sure to add the path to my ~/.bash_profile as&lt;/p>
&lt;pre>&lt;code>export PATH=$PATH:/Users/alfrednutile/.composer/vendor/bin/
&lt;/code>&lt;/pre>&lt;p>Then ran &lt;code>source ~/.bash_profile&lt;/code>&lt;/p>
&lt;p>With all that in place I could go to my new Laravel install to run &lt;code>spark install&lt;/code>&lt;/p></description><category>spark</category><category>laravel</category><category>php</category></item><item><title>Adding Expose IDS to Laravel MiddleWare</title><link>https://alfrednutile.info/posts/162/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/162/</guid><description>&lt;p>The library is &lt;a href="https://github.com/enygma/expose">https://github.com/enygma/expose&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Expose is an Intrusion Detection System for PHP loosely based on the PHPIDS project (and using it&amp;rsquo;s ruleset for detecting potential threats).&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>After seeing it in the latest PHPArch &lt;a href="https://www.phparch.com/2015/09/september-2015-issue-release-security-boot-camp/">magazine&lt;/a> on security I wanted to give it a try.&lt;/p>
&lt;p>Of course this is far from a complete look.&lt;/p>
&lt;p>Step 1 Make the MiddleWare&lt;/p>
&lt;p>&lt;code>php artisan make:middleware ExposeMiddleware&lt;/code>&lt;/p>
&lt;p>Then add Expose as noted in the docs.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Middleware;
use Closure;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Log;
class ExposeMiddleware
{
public function handle($request, Closure $next)
{
$filters = new \Expose\FilterCollection();
$filters-&amp;gt;load();
$logger = App::make('log');
$manager = new \Expose\Manager($filters, $logger);
$manager-&amp;gt;run($request-&amp;gt;input());
Log::info(sprintf(&amp;quot;Logging results from Expose %d&amp;quot;, $manager-&amp;gt;getImpact()));
return $next($request);
}
}
&lt;/code>&lt;/pre>&lt;p>Then in &lt;code>app/Http/Kernel.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\ExposeMiddleware::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];
&lt;/code>&lt;/pre>&lt;p>Now to make the route for testing&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
Route::get('/', function () {
return view('welcome');
});
Route::post('/post', function() {
return &amp;quot;Yo&amp;quot;;
});
&lt;/code>&lt;/pre>&lt;p>And now a phpunit test to hit the route&lt;/p>
&lt;pre>&lt;code> public function testPost()
{
$token = csrf_token();
$data = array(
'_token' =&amp;gt; $token,
'test' =&amp;gt; 'foo',
'bar' =&amp;gt; array(
'baz' =&amp;gt; 'quux',
'testing' =&amp;gt; '&amp;lt;script&amp;gt;test&amp;lt;/script&amp;gt;'
)
);
$this-&amp;gt;call('POST', '/post', $data);
}
&lt;/code>&lt;/pre>&lt;p>One more thing is to set the &lt;code>app/Http/Middleware/VerifyCsrfToken.php&lt;/code> as such&lt;/p>
&lt;pre>&lt;code>
public function handle($request, Closure $next)
{
if ( 'testing' === App::environment() &amp;amp;&amp;amp; $request-&amp;gt;exists('_token') ) {
$input = $request-&amp;gt;all();
$input['_token'] = $request-&amp;gt;session()-&amp;gt;token();
$request-&amp;gt;replace( $input );
}
if ($this-&amp;gt;isReading($request) || $this-&amp;gt;shouldPassThrough($request) || $this-&amp;gt;tokensMatch($request)) {
return $this-&amp;gt;addCookieToResponse($request, $next($request));
}
throw new TokenMismatchException;
}
&lt;/code>&lt;/pre>&lt;p>Okay so now we can tail the log file in the terminal and hit the route with phpunit&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/fgoax2z12mhhf0t/expose.png?dl=0" alt="">&lt;/p>
&lt;p>And the logs should output&lt;/p>
&lt;pre>&lt;code>[2015-09-02 23:50:44] testing.INFO: Match found on Filter ID 38 [{&amp;quot;id&amp;quot;:&amp;quot;38&amp;quot;,&amp;quot;rule&amp;quot;:&amp;quot;(?:\\&amp;lt;[\\/]?(?:[i]?frame|applet|isindex|marquee|keygen|script|audio|video|input|button|textarea|style|base|body|meta|link|object|embed|param|plaintext|xm\\w+|image|im(?:g|port)))&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;Detects possibly malicious html elements including some attributes&amp;quot;,&amp;quot;tags&amp;quot;:&amp;quot;xss, csrf, id, rfe, lfi&amp;quot;,&amp;quot;impact&amp;quot;:&amp;quot;4&amp;quot;}]
[2015-09-02 23:50:44] testing.INFO: Logging results from Expose 8
&lt;/code>&lt;/pre>&lt;p>At this point the MiddleWare can do numerous things&lt;/p>
&lt;ul>
&lt;li>Log to an in memory db IP addresses that violates a rule of a certain level and block them.&lt;/li>
&lt;li>Keep track of issues and notify the team of issues&lt;/li>
&lt;li>Cut through a can without getting dull&lt;/li>
&lt;/ul>
&lt;p>Anyways I have a ways to go with this but just seeing the different tools I could use to make my applications more secure.&lt;/p></description><category>security</category><category>laravel</category><category>php</category></item><item><title>Note To Self: A VirtualBox machine with the name 'homestead' already exists.</title><link>https://alfrednutile.info/posts/161/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/161/</guid><description>&lt;p>Since I know this will happen again I want to remind myself and others how to fix it.&lt;/p>
&lt;p>I had this error &lt;code>A VirtualBox machine with the name 'homestead' already exists.&lt;/code> when doing my normal vagrant up. I got some help at &lt;a href="http://stackoverflow.com/questions/26993903/a-virtualbox-machine-with-the-name-homestead-already-exists">http://stackoverflow.com/questions/26993903/a-virtualbox-machine-with-the-name-homestead-already-exists&lt;/a> but it was not made too clear.&lt;/p>
&lt;p>Here are the exact steps for me to fix this&lt;/p>
&lt;p>Run &lt;code>vboxmanage list vms&lt;/code>&lt;/p>
&lt;p>This will output a list&lt;/p>
&lt;pre>&lt;code>&amp;quot;homestead&amp;quot; {5dc30604-8ebe-4060-8966-4881958e6bf5}
&amp;quot;boot2docker-vm&amp;quot; {38af33d4-7ebc-4498-a80e-39711a08b413}
&amp;quot;settler_default_1434987271004_24349_1440846292799_16470&amp;quot; {2c80bf94-99b8-4b51-95a0-034dddae8c33}
&lt;/code>&lt;/pre>&lt;p>Then I took the id of homestead &lt;code>5dc30604-8ebe-4060-8966-4881958e6bf5&lt;/code> and did&lt;/p>
&lt;pre>&lt;code>echo '5dc30604-8ebe-4060-8966-4881958e6bf5' &amp;gt; ~/Homestead/.vagrant/machines/default/virtualbox/id
&lt;/code>&lt;/pre>&lt;p>&lt;strong>UPDATE&lt;/strong>&lt;/p>
&lt;p>Rough day. Like I said this rarely happens but in this case I also had the &lt;code>default: Warning: Authentication failure. Retrying...&lt;/code> error so I did this&lt;/p>
&lt;pre>&lt;code>cd /tmp
wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub
cat vagrant.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
&lt;/code>&lt;/pre></description><category>laravel</category><category>note</category></item><item><title>Laravel and Angular Widgets e.g. Non SPA (Single Page Application) Pattern</title><link>https://alfrednutile.info/posts/160/</link><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/160/</guid><description>&lt;p>Not all apps need to be an SPA (Single Page Application). Sure they have their place but in most cases the task might benefit from just a Blade template and Angular widget. This saves you from having to write an angular route which can be a tedious duplication of work. Also Blade is fast and fun to work with.&lt;/p>
&lt;h2 id="step-one-add-data-to-global-window">Step One Add Data to Global Window&lt;/h2>
&lt;p>Using the &lt;a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">Transform PHP Vars to JavaScript&lt;/a> you can easily start to inject some content into your templates, if needed, to setup the data your Angular widget can use to build out it&amp;rsquo;s elements.&lt;/p>
&lt;p>For example the Controller below will push some info into the view that I can use later&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use App\Campaign;
use App\Folder;
use App\Helpers\ReturnWebhook;
use App\Http\Requests;
use App\Providers\WebhookExtendedProvider;
use App\Utilities\GenerateSampleContent;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Response;
use Michelf\MarkdownExtra;
use Rhumsaa\Uuid\Uuid;
class HelpController extends Controller
{
use GenerateSampleContent;
use ReturnWebhook;
public function api()
{
$url = url();
$apis['campaigns'] = 'api/v1/campaigns';
$apis['campaigns_get'] = 'api/v1/campaigns/';
$campaigns = Campaign::select('id', 'name')-&amp;gt;groupBy('name')-&amp;gt;orderBy('name')-&amp;gt;get();
$folders = Folder::with('meta_values')-&amp;gt;groupBy('folders.id')-&amp;gt;get();
/**
* Using the Javacript Library
*/
\JavaScript::put([
'campaigns' =&amp;gt; $campaigns,
'token' =&amp;gt; csrf_token(),
'folders' =&amp;gt; $folders,
'url' =&amp;gt; $url,
'apis' =&amp;gt; $apis
]);
$text = file_get_contents(base_path('docs/webhooks.md'));
$webhooks = MarkdownExtra::defaultTransform($text);
$api = file_get_contents(base_path('docs/api.md'));
$api = MarkdownExtra::defaultTransform($api);
return view('help.api', compact('webhooks', 'api', 'campaigns', 'url', 'apis', 'folders'));
}
&lt;/code>&lt;/pre>&lt;h2 id="setting-up-the-view-and-angular">Setting Up the View and Angular&lt;/h2>
&lt;p>Now in the view for the Controller above we use that info. Note the Angular brackets &lt;code>@{{&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-partial-blade-php">See template here&lt;/a>&lt;/p>
&lt;p>So now that view is rendering both Blade data &lt;code>{{&lt;/code> and Angular.&lt;/p>
&lt;p>You will see too I setup the Angular controller &lt;code>vm.addMarketoFolderNameToQuery&lt;/code> keep in mind I already setup that &lt;code>ng-app&lt;/code> in my main template file &lt;code>layouts.default&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-default-blade-php">See Default Layout Here&lt;/a>&lt;/p>
&lt;h2 id="angular-controller">Angular Controller&lt;/h2>
&lt;p>Here is the ApiController injected above. Notice we use Angular&amp;rsquo;s $window to get the data we passed in from the Laravel Controller. You can also see it making API requests later on as the user clicks buttons etc.&lt;/p>
&lt;pre>&lt;code>(function(){
'use strict';
function ApiControllerUserShow($http, $window, toaster)
{
var vm = this;
vm.getting_token = '';
vm.user = $window.user;
vm.url = $window.url;
vm.message = &amp;quot;You do not have an API Key yet. Click the button below to make one&amp;quot;;
vm.getNewApi = getNewApi;
activate();
///
function activate()
{
console.log($window.user);
setApiToken();
}
function getNewApi()
{
vm.getting_token = 'fa-spin';
toaster.pop('info', &amp;quot;Getting new token&amp;quot;);
$http.get('/api/v1/create_client_token')
.success(function(response) {
toaster.pop('info', &amp;quot;Loading new token&amp;quot;);
console.log(response);
vm.getting_token = ''
vm.api_token = response.data;
})
.error(function(response) {
toaster.pop('error', &amp;quot;Could not get token please contact support&amp;quot;);
console.log(response);
});
}
function setApiToken()
{
//$user-&amp;gt;oauth_client-&amp;gt;oauth_session-&amp;gt;oauth_access_tokens-&amp;gt;id
if(!vm.user.oauth_client)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session.oauth_access_tokens)
{
vm.api_token = vm.message;
}
else
{
vm.api_token = vm.user.oauth_client.oauth_session.oauth_access_tokens.id;
}
}
}
angular.module('app')
.controller('ApiControllerUserShow', ApiControllerUserShow);
})();
&lt;/code>&lt;/pre>&lt;p>That is it. Keep in mind that Blade template can have numerous angular &amp;ldquo;widgets&amp;rdquo; so different sections of the page can benefit from Angular. Or the one page can have several places that the Angular controller controls some of the output.&lt;/p>
&lt;p>So hopefully this sums up a quick way to start putting Angular widgets into your Laravel application and still benefit from all speed that these too tools offer both in developing and in rendering!&lt;/p></description><category>laravel</category><category>php</category><category>angular</category></item><item><title>Laravel 5.1 and Oauth</title><link>https://alfrednutile.info/posts/159/</link><pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/159/</guid><description>&lt;h1 id="laravel-51-and-oauth2-server">Laravel 5.1 and Oauth2 Server&lt;/h1>
&lt;p>Video coming soon&amp;hellip;&lt;/p>
&lt;p>Example repo is here &lt;a href="https://github.com/alnutile/oauth_how_to">https://github.com/alnutile/oauth_how_to&lt;/a>&lt;/p>
&lt;p>The library we will use is&lt;/p>
&lt;p>&lt;a href="https://github.com/lucadegasperi/oauth2-server-laravel">https://github.com/lucadegasperi/oauth2-server-laravel&lt;/a>&lt;/p>
&lt;p>This will setup a server both client_type and password_type for Grant Types.&lt;/p>
&lt;h1 id="coming-to-terms-with-oauth">Coming to Terms with Oauth&lt;/h1>
&lt;p>Coming to terms with this stuff is long and tedious.
The docs are here &lt;a href="https://github.com/lucadegasperi/oauth2-server-laravel/">https://github.com/lucadegasperi/oauth2-server-laravel/&lt;/a> wiki will help and then these lead to the League docs as well &lt;a href="http://oauth2.thephpleague.com/">http://oauth2.thephpleague.com/&lt;/a>&lt;/p>
&lt;p>There is also a podcast interview with the Alex Bilbie who made the League Oauth Library &lt;a href="http://fullstackradio.com/episodes/4/">http://fullstackradio.com/episodes/4/&lt;/a>&lt;/p>
&lt;p>What I will cover is mainly the instalation going beyond the docs above into the details of getting this thing going. I will also provide a &amp;ldquo;play&amp;rdquo; repo for you to review.&lt;/p>
&lt;h2 id="base-laravel-install">Base Laravel Install&lt;/h2>
&lt;p>If you want to use this demo to play around just run &lt;code>composer install&lt;/code> and see the migration info below.&lt;/p>
&lt;p>Install laravel as normal, install the library as normal. You will see some extra stuff I have in the repo for helping out as well (this will be seen in the video too)&lt;/p>
&lt;p>&lt;code>app/OauthTools&lt;/code>&lt;/p>
&lt;p>Some commands to use artisan to make users, tokens etc.&lt;/p>
&lt;p>So in the end my &lt;code>app/Console/Kernel.php&lt;/code> looked like &lt;a href="https://github.com/alnutile/oauth_how_to/blob/master/app/Console/Kernel.php">https://github.com/alnutile/oauth_how_to/blob/master/app/Console/Kernel.php&lt;/a>&lt;/p>
&lt;p>So I could easily do&lt;/p>
&lt;pre>&lt;code>php artisan oauth-tools:adduser admin@foo.com
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/4oz4yn8p8gxftt2/make_user_oauth.png?dl=0" alt="">&lt;/p>
&lt;p>or&lt;/p>
&lt;pre>&lt;code>php artisan oauth-tools:generate-token 33591b34-03c2-4ece-a763-d531aee0298a admin@foo.com client
&lt;/code>&lt;/pre>&lt;p>Also note &lt;a href="https://github.com/alnutile/oauth_how_to/blob/master/composer.json">composer.json&lt;/a> I use a uuid library to help with these commands etc.&lt;/p>
&lt;p>Finally to have all of this work out of the box with the Postman file I shared run it this way for now&lt;/p>
&lt;pre>&lt;code>cd public
php -S localhost:8181
&lt;/code>&lt;/pre>&lt;p>The database for this example is sqlite so&lt;/p>
&lt;pre>&lt;code>touch storage/database.sqlite
php artisan migrate:refresh --seed
&lt;/code>&lt;/pre>&lt;p>And you should now have a db and migrations&lt;/p>
&lt;p>Since it is sqlite just rm the file and touch it again to re-migrate and save your self the headache of DBAL driver etc since this just just a quick working demo.&lt;/p>
&lt;h2 id="setup-your-oauth-config">Setup your oauth config&lt;/h2>
&lt;p>&lt;code>config/oauth2.php&lt;/code> file as seen &lt;a href="https://github.com/alnutile/oauth_how_to/blob/master/config/oauth2.php">here&lt;/a> &lt;strong>BUT&lt;/strong> only if you want these. And my &lt;code>access_token_ttl&lt;/code> is way too big so see the defaults in the docs. Also note it points to &lt;a href="https://github.com/alnutile/oauth_how_to/blob/master/app/OauthPasswordVerifier.php">OauthPasswordVerifier&lt;/a> which the docs talk about as well.&lt;/p>
&lt;h2 id="route">Route&lt;/h2>
&lt;p>As noted you add the code to your route&lt;/p>
&lt;pre>&lt;code>Route::post('oauth/access_token', function() {
return Response::json(Authorizer::issueAccessToken());
});
Route::get('test', ['middleware' =&amp;gt; 'oauth', function() {
return Response::json(&amp;quot;Welcome&amp;quot;);
}]);
&lt;/code>&lt;/pre>&lt;p>Later on you will see this instead&lt;/p>
&lt;pre>&lt;code>Route::post('oauth/access_token', function() {
return Response::json(Authorizer::issueAccessToken());
});
Route::get('test', ['middleware' =&amp;gt; 'oauthOrAuth', function() {
return Response::json(&amp;quot;Welcome&amp;quot;);
}]);
&lt;/code>&lt;/pre>&lt;p>With the &lt;strong>oauthOrAuth&lt;/strong> I will explain that in the video as well. But basically and api endpoint can be used by a local session based user and a remote application using oauth. It is just how our APIs go.&lt;/p>
&lt;p>So this lets that work just fine.&lt;/p>
&lt;h2 id="postman">Postman&lt;/h2>
&lt;p>Just to show it all working you will see in the video me using postman. You will see that in the repo &lt;a href="https://github.com/alnutile/oauth_how_to/blob/master/oauth_try_2.json.postman_collection">here&lt;/a>&lt;/p>
&lt;h2 id="now-what">Now What&lt;/h2>
&lt;p>Between the links above and Postman you have a working&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/bbt0fmfflm2zq7x/oauth_token.gif?dl=0" alt="">&lt;/p></description><category>oauth</category><category>laravel</category></item><item><title>Talking to the Methods Not the Properties</title><link>https://alfrednutile.info/posts/158/</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/158/</guid><description>&lt;p>Just a team related style guide item.&lt;/p>
&lt;p>When talking to properties in a class talk via a getter.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
class Foo {
protected $client;
function bar()
{
return $this-&amp;gt;client-&amp;gt;getAll();
}
}
&lt;/code>&lt;/pre>&lt;p>Would then become&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
class Foo {
protected $client;
function bar()
{
return $this-&amp;gt;getClient-&amp;gt;getAll();
}
function getClient()
{
return $this-&amp;gt;client;
}
}
&lt;/code>&lt;/pre>&lt;p>There are a few reasons for this&lt;/p>
&lt;ul>
&lt;li>Consistent style for the team&lt;/li>
&lt;li>Changes to that property can be done in one place. So if we have to for example alter it before it is used then we can do it here.&lt;/li>
&lt;li>PHPUnit Mockery can mock both but mocking a Method over a Property is another style I prefer.&lt;/li>
&lt;li>Easier to have your IDE see all the places that is being used.&lt;/li>
&lt;li>Instantiate on use&lt;/li>
&lt;/ul>
&lt;h2 id="instantiate-on-use">Instantiate on Use&lt;/h2>
&lt;p>When writing a package/libraries that does not have dependency injection and I do not want to make the __constructor too busy I will do this instead.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
class Foo {
protected $client;
function bar()
{
return $this-&amp;gt;getClient-&amp;gt;getAll();
}
function getClient()
{
if($this-&amp;gt;client == null)
$this-&amp;gt;setClient();
return $this-&amp;gt;client;
}
function setClient($client = null)
{
if($client == null)
$client = new Client();
$this-&amp;gt;client = $client;
return $this;
}
}
&lt;/code>&lt;/pre>&lt;p>This makes it simple to mock during testing and simple to instantiate as needed.&lt;/p></description><category>team</category><category>laravel</category><category>php</category></item><item><title>Using your project docs inside the application</title><link>https://alfrednutile.info/posts/157/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/157/</guid><description>&lt;p>The applications I work on have markdown docs. These can be in the docs/ folder for example as &lt;code>docs/webhooks.md&lt;/code>&lt;/p>
&lt;p>But some of these docs have value to the user of the UI not just the developer, and when we include these docs inside the application repo it is a TON easier to just update them as you fix and make new features in the codebase.&lt;/p>
&lt;p>You can have the best of both worlds with a simple to use library &lt;a href="https://github.com/michelf/php-markdown">https://github.com/michelf/php-markdown&lt;/a>&lt;/p>
&lt;h2 id="the-controller">The Controller&lt;/h2>
&lt;p>This then allows me, in my controllers to get some content from these docs, for example&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use App\Http\Requests;
use Michelf\MarkdownExtra;
class HelpController extends Controller
{
public function api()
{
$text = file_get_contents(base_path('docs/webhooks.md'));
$webhooks = MarkdownExtra::defaultTransform($text);
return view('help.api', compact('webhooks'));
}
}
&lt;/code>&lt;/pre>&lt;h2 id="the-blade-template-file">The Blade Template File&lt;/h2>
&lt;p>Then in the blade template all I need to do to show those docs are&lt;/p>
&lt;pre>&lt;code>@extends('layouts.default')
@section('content')
&amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;API Help&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-12&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;wrapper wrapper-content animated fadeInRight&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;ibox-content&amp;quot;&amp;gt;
{!! $webhooks !!}
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection
&lt;/code>&lt;/pre>&lt;p>Being a private repo we review the code so using &amp;ldquo;{!!&amp;rdquo; is not so bad. But keep in mind you are trusting what is in these files! Of course a simple&lt;/p>
&lt;pre>&lt;code>$webhooks = strip_tags($webhooks, &amp;quot;tags you allow here&amp;quot;);
&lt;/code>&lt;/pre>&lt;p>Will help out there.&lt;/p>
&lt;h2 id="the-markdown">The Markdown&lt;/h2>
&lt;p>Then just write your file as normal in markdown!&lt;/p></description><category>laravel</category><category>php</category><category>docs</category></item><item><title>Behat for Product Owners</title><link>https://alfrednutile.info/posts/156/</link><pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/156/</guid><description>&lt;p>As a developer putting all the business requirements into action and then showing that it is working as expected can be hard. 10 different google docs, 3 different views of what are the goals etc.&lt;/p>
&lt;p>And as a Product Owner you are not sure if the work is done without always clicking around. And more importantly you do not even know if the developer really gets what you want.&lt;/p>
&lt;p>This is where Behat / Gherkin (cause that name really gets Product Owners feeling comfortable) can help out. BUT the key is to remove ALL language barriers.&lt;/p>
&lt;h2 id="gathering-the-business-requirements-into-a-gherkin-file">Gathering the Business Requirements into a Gherkin File&lt;/h2>
&lt;p>Just open up a text editor, or google doc or even email, talk to the product owner, even share your screen, and write it with them.&lt;/p>
&lt;pre>&lt;code>Feature: Reporting Goals for Product Foo
So I can decide what to order for next week
As a the business manager
Should allow me to see products, sort and filter
Scenario: Visit Reporting Page
I should be able to go to the report page
See all the products but only 100 per page to keep it easy to see
No products should be here that are not &amp;quot;active&amp;quot;
Filter by types of products using many filters at once
Paginate on those filter results
Export to a spreadsheet those results
@done
Scenario: Visit Reporting Page and do not have permission to be here
As a non admin person who goes to the reports page I should not be allowed to go here
&lt;/code>&lt;/pre>&lt;p>So at this point there are 3 things they need to know and at that the rest is freeform.&lt;/p>
&lt;h3 id="feature">Feature&lt;/h3>
&lt;p>This is a one line look at the goal of this area, requirement.&lt;/p>
&lt;h3 id="the-three-lines-after-the-feature">The Three Lines After the Feature&lt;/h3>
&lt;p>Benefit, Role or User or Feature, The Feature itself&lt;/p>
&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Start your small bite size goals here. Maybe there is just one? Maybe there are also negatives to consider like &lt;code>Scenario: Someone how does not have permission goes here&lt;/code>&lt;/p>
&lt;h3 id="tagging">Tagging&lt;/h3>
&lt;p>Also maybe agree on some simple tags&lt;/p>
&lt;p>@done = um done&lt;/p>
&lt;p>@wip = work in progress&lt;/p>
&lt;p>@needs_review&lt;/p>
&lt;p>Etc.&lt;/p>
&lt;h3 id="now-what">Now What&lt;/h3>
&lt;p>At this point the Owners and Developers hopefully have what they need to start writing. Behat so easily let&amp;rsquo;s us make custom steps that we can turn any of this into steps and even better code.&lt;/p>
&lt;p>And as an Owner you can go simply to github and add these tests if you feel comfortable (yes some even are okay with this) and write it as the business needs it not as &amp;ldquo;gherkin&amp;rdquo; needs it.&lt;/p></description><category>bdd</category><category>behat</category></item><item><title>HasMany Through a Many to Many</title><link>https://alfrednutile.info/posts/155/</link><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/155/</guid><description>&lt;p>This thread helped a lot &lt;a href="http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many">http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many&lt;/a>&lt;/p>
&lt;p>In the end I had this query&lt;/p>
&lt;pre>&lt;code> class MetaData extends Model
{
public function meta_values()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class);
}
public function meta_data_types()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class)
-&amp;gt;leftJoin('meta_data_type_meta_value', 'meta_values.id', '=', 'meta_data_type_meta_value.meta_value_id')
-&amp;gt;leftJoin('meta_data_types', 'meta_data_types.id', '=', 'meta_data_type_meta_value.meta_data_type_id')
-&amp;gt;groupBy('meta_data_types.id')
-&amp;gt;select('meta_data_types.*');
}
&lt;/code>&lt;/pre>&lt;p>Model &lt;code>meta_data_types&lt;/code> had not direct relation to this MetaData model class. But MetaData did relate to meta_values.&lt;/p>
&lt;p>So using that info I could get the related MetaValues and then the related MetaDataTypes and that was it.&lt;/p>
&lt;p>It is a lot easier if just doing this through a One to Many &lt;a href="http://laravel.com/docs/5.1/eloquent-relationships#has-many-through">http://laravel.com/docs/5.1/eloquent-relationships#has-many-through&lt;/a>&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Adding RSS to Your Site</title><link>https://alfrednutile.info/posts/154/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/154/</guid><description>&lt;p>Using this library &lt;a href="https://packagist.org/packages/thujohn/rss">https://packagist.org/packages/thujohn/rss&lt;/a>&lt;/p>
&lt;p>We simply install but using a forked version so it works with L5&lt;/p>
&lt;pre>&lt;code> &amp;quot;require&amp;quot;: {
&amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.5.9&amp;quot;,
&amp;quot;laravel/framework&amp;quot;: &amp;quot;5.1.*&amp;quot;,
&amp;quot;thujohn/rss&amp;quot;: &amp;quot;dev-master&amp;quot;
},
&amp;quot;repositories&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;vcs&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/majortom731/rss-l4.git&amp;quot;
}
],
&lt;/code>&lt;/pre>&lt;pre>&lt;code>composer update
&lt;/code>&lt;/pre>&lt;p>And as they note in the docs&lt;/p>
&lt;pre>&lt;code>'providers' =&amp;gt; array(
'Thujohn\Rss\RssServiceProvider',
)
&lt;/code>&lt;/pre>&lt;p>Now in my route I simply put&lt;/p>
&lt;pre>&lt;code>Route::get('feed', function() {
$feed = Thujohn\Rss\RssFacade::feed('2.0', 'UTF-8');
$feed-&amp;gt;channel(array('title' =&amp;gt; 'Incomings.io Blog and News', 'description' =&amp;gt; 'Latest News and Blog postings for Incomings.io', 'link' =&amp;gt; 'http://incomings.io/feed'));
$blogs = Blog::all();
foreach ($blogs as $blog){
$feed-&amp;gt;item(array('title' =&amp;gt; $blog-&amp;gt;title, 'description|cdata' =&amp;gt; $blog-&amp;gt;body, 'link' =&amp;gt; 'http://incomings.io/blogs/' . $blog-&amp;gt;id));
}
return Response::make($feed, 200, array('Content-Type' =&amp;gt; 'text/xml'));
});
&lt;/code>&lt;/pre>&lt;p>And nothing fancy here I just output my blog model. I could limit to the latest 10 or output the data better but for now.&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Bower and Elixir</title><link>https://alfrednutile.info/posts/153/</link><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/153/</guid><description>&lt;p>Trying to make this workflow more easy. Right now it seems that since bower ends up putting all assets into bower_components (css and js) and elixir wants assets by default in resources/assets/css and js that I need to have an easy way to get the files via bower and then get them to the needed folders.&lt;/p>
&lt;p>For most project we actually leave the files in the git repo for faster ui testing builds and we rarely run updates but when we do it would be nice for bower to also be able to work and not mess any of the above settings not cause me to have to manually move files around.&lt;/p>
&lt;h2 id="setting-up-bower">Setting up Bower&lt;/h2>
&lt;p>Following this &lt;a href="https://github.com/blittle/bower-installer">https://github.com/blittle/bower-installer&lt;/a> I have bower-installer ready to go.&lt;/p>
&lt;p>Then I setup my &lt;code>bower.json&lt;/code> to get my long list of way to many files ready to gulp / elixir&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;name&amp;quot;: &amp;quot;demo&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
&amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/alnutile/demo&amp;quot;,
&amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
&amp;quot;ignore&amp;quot;: [
&amp;quot;**/.*&amp;quot;,
&amp;quot;node_modules&amp;quot;,
&amp;quot;bower_components&amp;quot;,
&amp;quot;test&amp;quot;,
&amp;quot;tests&amp;quot;
],
&amp;quot;install&amp;quot;: {
&amp;quot;path&amp;quot;: {
&amp;quot;css&amp;quot;: &amp;quot;resources/assets/css/vendor&amp;quot;,
&amp;quot;js&amp;quot;: &amp;quot;resources/assets/js/vendor&amp;quot;
}
},
&amp;quot;dependencies&amp;quot;: {
&amp;quot;angular&amp;quot;: &amp;quot;1.3.*&amp;quot;,
&amp;quot;angular-bootstrap&amp;quot;: &amp;quot;0.11.*&amp;quot;,
&amp;quot;angular-animate&amp;quot;: &amp;quot;1.3.*&amp;quot;,
&amp;quot;angular-sanitize&amp;quot;: &amp;quot;1.3.*&amp;quot;,
&amp;quot;angular-resource&amp;quot;: &amp;quot;1.3.*&amp;quot;,
&amp;quot;restangular&amp;quot;: &amp;quot;1.4.0&amp;quot;,
&amp;quot;ng-flow&amp;quot;: &amp;quot;~2&amp;quot;,
&amp;quot;angular-xeditable&amp;quot;: &amp;quot;~0.1.8&amp;quot;,
&amp;quot;jquery&amp;quot;: &amp;quot;2.1.1&amp;quot;,
&amp;quot;bootstrap&amp;quot;: &amp;quot;~3.2.0&amp;quot;,
&amp;quot;checklist-model&amp;quot;: &amp;quot;0.1.3&amp;quot;,
&amp;quot;pace&amp;quot;: &amp;quot;0.5.*&amp;quot;,
&amp;quot;moment&amp;quot;: &amp;quot;latest&amp;quot;,
&amp;quot;jasny-bootstrap&amp;quot;: &amp;quot;*&amp;quot;,
&amp;quot;angular-ui-router&amp;quot;: &amp;quot;*&amp;quot;,
&amp;quot;angularjs-toaster&amp;quot;: &amp;quot;~0.4.10&amp;quot;,
&amp;quot;angular-strap&amp;quot;: &amp;quot;~2.1.6&amp;quot;,
&amp;quot;iCheck&amp;quot;: &amp;quot;~1.0.2&amp;quot;,
&amp;quot;angular-spinner&amp;quot;: &amp;quot;~0.6.1&amp;quot;,
&amp;quot;fontawesome&amp;quot;: &amp;quot;~4.3.0&amp;quot;,
&amp;quot;ng-table&amp;quot;: &amp;quot;~0.5.4&amp;quot;,
&amp;quot;angular-ui-select&amp;quot;: &amp;quot;~0.11.2&amp;quot;,
&amp;quot;jquery-ui&amp;quot;: &amp;quot;~1.11.4&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>Now I have bower_components which I do not need or push around anymore (thanks to this) but I also have &lt;code>resources/assets/js&lt;/code> and &lt;code>resources/assets/css&lt;/code> which I can now keep in the repo saving up npm and bower speed issues when running acceptance tests on Codeship &lt;a href="https://alfrednutile.info/posts/151">more on that here&lt;/a>.&lt;/p>
&lt;p>That gets my &lt;code>gulpfile.js&lt;/code> for the base libraries down to&lt;/p>
&lt;pre>&lt;code>var elixir = require('laravel-elixir');
elixir(function(mix) {
mix
.styles([&amp;quot;vendor/**/*.css&amp;quot; ], &amp;quot;public/css/vendor.css&amp;quot;)
.scripts( [&amp;quot;vendor/angular/angular.js&amp;quot;, &amp;quot;vendor/**/*.js&amp;quot;], &amp;quot;public/js/vendor.js&amp;quot;);
});
&lt;/code>&lt;/pre>&lt;p>I still would like to controller the ordering more. For example not sure angular just happened to be in the right order due to alphabetical order, or if it was included twice etc.&lt;/p>
&lt;p>Lastly adding versioning&lt;/p>
&lt;pre>&lt;code>var elixir = require('laravel-elixir');
elixir(function(mix) {
mix
.styles([&amp;quot;vendor/**/*.css&amp;quot; ], &amp;quot;public/css/vendor.css&amp;quot;)
.scripts( [&amp;quot;vendor/angular/angular.js&amp;quot;, &amp;quot;vendor/**/*.js&amp;quot;], &amp;quot;public/js/vendor.js&amp;quot;)
.version( [&amp;quot;css/vendor.css&amp;quot;, &amp;quot;js/vendor.js&amp;quot;]);
});
&lt;/code>&lt;/pre>&lt;p>As noted in the docs &lt;a href="http://laravel.com/docs/5.1/elixir#versioning-and-cache-busting">http://laravel.com/docs/5.1/elixir#versioning-and-cache-busting&lt;/a>&lt;/p>
&lt;p>From here I still need to setup a workflow for all my app files.&lt;/p>
&lt;p>For example a page like &amp;ldquo;/projects&amp;rdquo; in angular will need a service, controller and route file.&lt;/p>
&lt;p>So do I put those in resources/assets/js and add a new section to the gulp file list&lt;/p>
&lt;pre>&lt;code>elixir(function(mix) {
mix
.styles([&amp;quot;vendor/**/*.css&amp;quot; ], &amp;quot;public/css/vendor.css&amp;quot;)
.scripts( [&amp;quot;vendor/angular/angular.js&amp;quot;, &amp;quot;vendor/**/*.js&amp;quot;], &amp;quot;public/js/vendor.js&amp;quot;)
.scripts( [&amp;quot;custom/**/*.js&amp;quot;], &amp;quot;public/js/custom.js&amp;quot;)
.version( [&amp;quot;css/vendor.css&amp;quot;, &amp;quot;js/vendor.js&amp;quot;]);
});
&lt;/code>&lt;/pre>&lt;p>and run &lt;code>gulp watch&lt;/code>. This is not my normal workflow but it sure beats putting all the files in my html file and then also doing this to concatenate them.&lt;/p></description><category>laravel</category><category>elixir</category></item><item><title>Quick way to Request Json from Angular and return from Laravel</title><link>https://alfrednutile.info/posts/152/</link><pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/152/</guid><description>&lt;p>I simply want to make sure to return json from my app more easily even on errors. So in Angular I set my app.js as such&lt;/p>
&lt;pre>&lt;code>(function(){
'use strict';
angular.module('app', []);
angular.module('app').run(
function($http)
{
$http.defaults.headers.common.Accept = 'application/json';
}
);
})();
&lt;/code>&lt;/pre>&lt;p>Then in my Laravel routes I can&lt;/p>
&lt;pre>&lt;code> public function index(Request $request)
{
$blogs = Blog::orderBy('created_at', 'desc')-&amp;gt;paginate(5);
$customPagination = new CustomPagination($blogs);
if($request-&amp;gt;header('Accept') == 'application/json')
return $blogs;
return view('blogs.index', compact('blogs', 'customPagination'));
}
&lt;/code>&lt;/pre>&lt;p>Then I can share the same route with Angular that I do with my Blade templates as needed.&lt;/p></description><category>laravel</category><category>angular</category></item><item><title>Laravel 5.1 Behat and Codeship</title><link>https://alfrednutile.info/posts/151/</link><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/151/</guid><description>&lt;p>The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.&lt;/p>
&lt;p>Here are some steps to getting behat going on Codeship so you get full CI even of Angular.&lt;/p>
&lt;p>This is all based off of &lt;a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension&lt;/a>&lt;/p>
&lt;h2 id="behatyml">Behat.yml&lt;/h2>
&lt;p>behat.yml looks like this for me&lt;/p>
&lt;pre>&lt;code>default:
extensions:
Laracasts\Behat:
# env_path: .env.behat
Behat\MinkExtension:
base_url: https://microservicehub.dev:44300
default_session: laravel
laravel: ~
selenium2:
wd_host: &amp;quot;http://192.168.10.1:4444/wd/hub&amp;quot;
browser_name: chrome
codeship:
extensions:
Laracasts\Behat:
env_path: .env.codeship
Behat\MinkExtension:
base_url: http://localhost:8080
default_session: laravel
laravel: ~
selenium2:
wd_host: &amp;quot;http://localhost:4444/wd/hub&amp;quot;
browser_name: chrome
&lt;/code>&lt;/pre>&lt;p>This is so I can run it locally as needed. The Codeship profile will then call in the &lt;code>.env.codeship&lt;/code> and update the url as needed.&lt;/p>
&lt;h2 id="envcodeship">.env.codeship&lt;/h2>
&lt;p>This file has&lt;/p>
&lt;pre>&lt;code>APP_ENV=testing
APP_DEBUG=true
APP_KEY=f5edkkfijPDKQXPLHyYNDhiNZZrpT0Qd
DB_HOST=localhost
DB_DATABASE=test
CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync
MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
&lt;/code>&lt;/pre>&lt;h2 id="build-script-for-codeship">Build Script for Codeship&lt;/h2>
&lt;p>Using the code they offer on their site I add that to my projects folder under tests/selenium_server.sh it is this file &lt;a href="https://github.com/codeship/scripts/blob/master/packages/selenium_server.sh">here&lt;/a>&lt;/p>
&lt;p>Maybe some do not need to be there?&lt;/p>
&lt;h2 id="codeship-test-settings">Codeship Test Settings&lt;/h2>
&lt;p>Now in the settings I end up with inside the CodeShip UI are as follows&lt;/p>
&lt;p>Here for example is the URL for my project to find these settings.&lt;/p>
&lt;p>&lt;code>https://codeship.com/projects/8844/configure_tests&lt;/code>&lt;/p>
&lt;p>Under Setup Commands&lt;/p>
&lt;pre>&lt;code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foobar
touch .env
echo &amp;quot;APP_ENV='testing'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;DB_DATABASE='test'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MYSQL_TESTING_URL='localhost'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;APP_KEY=DHMbPIbNLd1jI0ZEZZSxRFOHj03SU4P5&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;CACHE_DRIVER=file&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;SESSION_DRIVER=file&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;QUEUE_DRIVER=sync&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_DRIVER=smtp&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_HOST=smtp.mailgun.org&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_PORT=2525&amp;quot; &amp;gt;&amp;gt; .env
composer install --dev
php artisan migrate
php artisan db:seed
nohup bash -c &amp;quot;sh tests/selenium_server.sh &amp;amp;&amp;quot; &amp;amp;&amp;amp; sleep 9
cd public &amp;amp;&amp;amp; nohup bash -c &amp;quot;php -S localhost:8080 &amp;amp;&amp;quot; &amp;amp;&amp;amp; sleep 9
cd ../
&lt;/code>&lt;/pre>&lt;p>Under Configure Test&lt;/p>
&lt;pre>&lt;code>DB_DATABASE=test phpunit
php artisan migrate
php artisan db:seed
vendor/bin/behat --profile=codeship --stop-on-failure
&lt;/code>&lt;/pre>&lt;p>I run the migration one more time to get it ready for behat&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2uadht5426s40p8/behat_codeship.png?dl=0" alt="behat">&lt;/p></description><category>laravel</category><category>php</category><category>bdd</category></item><item><title>Conventions to Help Minimize your ENV File</title><link>https://alfrednutile.info/posts/150/</link><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/150/</guid><description>&lt;p>&lt;strong>UPDATE&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>I think we can also do AWS_BUCKET=foo_$APP_ENV directly in the env file, see &lt;a href="https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables"> https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://twitter.com/cavanaghacea">Andrew Cavanagh&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The .env file can be a real pain and get pretty big. And even though there is a &lt;a href="https://github.com/alfred-nutile-inc/env-deployer">tool&lt;/a>, I made :), to move it around easily here is a thought on reducing it a bit so it is the same on all environments.&lt;/p>
&lt;p>Typically we have dev, stage, production, testing and local. And when you consider all are services we might use it can be pretty large for example&lt;/p>
&lt;ul>
&lt;li>Amazon or Iron.io and different queues&lt;/li>
&lt;li>Database Settings&lt;/li>
&lt;li>AWS Buckets&lt;/li>
&lt;/ul>
&lt;p>So a normal config could look like this on dev for example&lt;/p>
&lt;pre>&lt;code>APP_ENV=dev
APP_DEBUG=false
APP_KEY=yo
DB_HOST=localhost
DB_DATABASE=db_name_dev
DB_USERNAME=username_dev
DB_PASSWORD=secret
AWS_BUCKET=some-bucket-dev
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1
IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFooDev
IRON_DIFF_QUEUE=QueueNameBarDev
DYNAMO_RT_TABLE=table_dev
DYNAMO_DIFF_TABLE=table_dev
IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken
DYNAMO_OCR_RT_TABLE='some_table_dev'
OCR_IRON_TOKEN='sometoken'
OCR_IRON_PROJECT_ID='somekey'
OCR_IRON_QUEUE='foo_dev'
&lt;/code>&lt;/pre>&lt;p>That is about 24 settings but if we alter our code to do this when getting settings&lt;/p>
&lt;pre>&lt;code>'some_key' =&amp;gt; env('OCR_IRON_QUEUE') . '_' . env('APP_ENV');
&lt;/code>&lt;/pre>&lt;p>Instead of&lt;/p>
&lt;pre>&lt;code>'some_key' =&amp;gt; env('OCR_IRON_QUEUE');
&lt;/code>&lt;/pre>&lt;p>And we name our services and resources as needed &lt;code>_dev&lt;/code> or &lt;code>_stage&lt;/code> or &lt;code>_production&lt;/code> then we can simplify the list above so it is the same for most of the environments.&lt;/p>
&lt;p>For example &lt;code>OCR_IRON_QUEUE='foo_dev'&lt;/code> is now &lt;code>OCR_IRON_QUEUE='foo'&lt;/code> and can be the same on all servers!&lt;/p>
&lt;pre>&lt;code>APP_ENV=dev
APP_DEBUG=false
APP_KEY=yo
DB_HOST=localhost
DB_DATABASE=db_name
DB_USERNAME=username
DB_PASSWORD=secret
AWS_BUCKET=some_bucket
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1
IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFoo
IRON_DIFF_QUEUE=QueueNameBar
DYNAMO_RT_TABLE=table
DYNAMO_DIFF_TABLE=table
IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken
DYNAMO_OCR_RT_TABLE='some_table'
OCR_IRON_TOKEN='sometoken'
OCR_IRON_PROJECT_ID='somekey'
OCR_IRON_QUEUE='foo'
&lt;/code>&lt;/pre>&lt;p>Convention over configuration so simple yet so easy for me to forget :)&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Codeship and Laravel for Continuous Integration</title><link>https://alfrednutile.info/posts/148/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/148/</guid><description>&lt;p>Getting going on Codeship and Laravel is pretty easy.&lt;/p>
&lt;p>Once you setup codeship to work with your github account just pull in your repo and set your Testing scripts as follows. (they have a ui for ENV variables as well)&lt;/p>
&lt;h2 id="codeship-testing-settings-easier-copy-paste-bottom-of-article">Codeship Testing Settings [easier copy paste bottom of article]&lt;/h2>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/fh6vv3g5wpqw7ac/codeship1.png?dl=0" alt="codeship">&lt;/p>
&lt;p>You can do this in their UI as well. But at this point I am&lt;/p>
&lt;ul>
&lt;li>Setting up the composer token for any private repos that application might have&lt;/li>
&lt;li>Setting up .env for their specific needs as well eg MYSQL_*&lt;/li>
&lt;/ul>
&lt;p>For the Database to use their settings I have to edit &lt;code>config/database.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
return [
'fetch' =&amp;gt; PDO::FETCH_CLASS,
'default' =&amp;gt; env('DB_CONNECTION', 'mysql'),
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; env('DB_HOST', 'localhost'),
'database' =&amp;gt; env('DB_DATABASE', env('TEST_ENV_NUMBER')),
'username' =&amp;gt; env('DB_USERNAME', env('MYSQL_USER')),
'password' =&amp;gt; env('DB_PASSWORD', env('MYSQL_PASSWORD')),
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
'strict' =&amp;gt; false,
],
],
.......
];
&lt;/code>&lt;/pre>&lt;p>Adding&lt;/p>
&lt;pre>&lt;code>env('DB_PASSWORD', env('MYSQL_PASSWORD')),
env('DB_USERNAME', env('MYSQL_USER')),
env('DB_DATABASE', env('TEST_ENV_NUMBER')),
&lt;/code>&lt;/pre>&lt;p>So we default to theirs if ours is not there. Finally when we run the test I set the db to the name they want&lt;/p>
&lt;pre>&lt;code>DB_DATABASE=test phpunit
&lt;/code>&lt;/pre>&lt;h2 id="envoy-deploy">Envoy Deploy&lt;/h2>
&lt;p>After it passes I can use Envoy to deploy it.&lt;/p>
&lt;p>The Envoy scripts are not on Forge but use to be so a lot of the naming matches.&lt;/p>
&lt;p>Under the Codeship Deployment page I set&lt;/p>
&lt;pre>&lt;code>composer global require &amp;quot;laravel/envoy=~1.0&amp;quot; &amp;amp;&amp;amp; /home/rof/.composer/vendor/bin/envoy run deploy_dev
&lt;/code>&lt;/pre>&lt;p>In that script do what ever you need to make this thing deploy for example.&lt;/p>
&lt;pre>&lt;code>@servers(['dev' =&amp;gt; 'forge@foo.com'])
@task('deploy_dev', ['on' =&amp;gt; 'dev'])
cd /home/forge/app
git reset --hard HEAD
git pull origin dev
composer config -g github-oauth.github.com foo
rm -rf vendor
composer install
composer dump-autoload
php artisan migrate:refresh --seed
bower install
@endtask
&lt;/code>&lt;/pre>&lt;p>We do not do this on Prod. Someone with proper permissions will run Envoy locally once the tests are passing.&lt;/p>
&lt;p>&lt;strong>UPDATE&lt;/strong>&lt;/p>
&lt;p>Easier copy paste&lt;/p>
&lt;pre>&lt;code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foo
touch .env
echo &amp;quot;APP_ENV='testing'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MYSQL_TESTING_URL='localhost'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MYSQL_TESTING_URL='localhost'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;APP_KEY=foo&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;CACHE_DRIVER=file&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;SESSION_DRIVER=file&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;QUEUE_DRIVER=sync&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_DRIVER=smtp&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_HOST=smtp.mailgun.org&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_PORT=2525&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_USERNAME=postmaster@email.foo.io&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_PASSWORD=foo&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;MAIL_ENCRYPTION=true&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;STRIPE_API_SECRET='foo'&amp;quot; &amp;gt;&amp;gt; .env
echo &amp;quot;STRIPE_PUBLIC='foo'&amp;quot; &amp;gt;&amp;gt; .env
composer install --dev
&lt;/code>&lt;/pre></description><category>laravel</category><category>testing</category><category>phpunit</category><category>php</category><category>ci</category><category>codeship</category></item><item><title>Start to end Billing using Stripe, Cashier and Laravel 5.1</title><link>https://alfrednutile.info/posts/149/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/149/</guid><description>&lt;h1 id="start-to-end-billing-and-laravel">Start to end Billing and Laravel&lt;/h1>
&lt;p>As usual the Laravel docs rock but sometimes it is nice to see this from start to end.&lt;/p>
&lt;p>With that said read those &lt;a href="http://laravel.com/docs/master/billing">docs&lt;/a> first and then come back here. Also the public repo can be seen &lt;a href="https://github.com/alnutile/sponsors">here&lt;/a>&lt;/p>
&lt;h2 id="setup-your-stripe">Setup your Stripe&lt;/h2>
&lt;p>Yup this is easy. Note the test/live dash board. Super nice to see the different processes.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/9k39kbjzb1eqiri/dash.png?dl=0" alt="dash">&lt;/p>
&lt;p>Turn it to test and make your plans. Keep in mind you will have to make the same plans for Live after the fact.&lt;/p>
&lt;p>Go to Accounts -&amp;gt; Settings and get your API keys.&lt;/p>
&lt;p>Plug them into the .env file (try this super cool &lt;a href="https://github.com/alfred-nutile-inc/env-deployer">.env deployer tool&lt;/a> to make life easier)&lt;/p>
&lt;p>So now your .env has the right settings, your config/app.php has the right &lt;code>env&lt;/code> calls&lt;/p>
&lt;pre>&lt;code> 'stripe' =&amp;gt; [
'model' =&amp;gt; 'App\User',
'key' =&amp;gt; env('STRIPE_PUBLIC'),
'secret' =&amp;gt; env('STRIPE_API_SECRET'),
],
&lt;/code>&lt;/pre>&lt;p>You are ready to code.&lt;/p>
&lt;p>Add this to your composer.json if you are using linux&lt;/p>
&lt;pre>&lt;code> &amp;quot;scripts&amp;quot;: {
&amp;quot;post-install-cmd&amp;quot;: [
&amp;quot;php artisan clear-compiled&amp;quot;,
&amp;quot;php artisan optimize&amp;quot;,
&amp;quot;php -r \&amp;quot;exec('chmod -R +x vendor/laravel/cashier/src/Laravel/Cashier/bin');\&amp;quot;&amp;quot;,
],
&lt;/code>&lt;/pre>&lt;p>Or just remember you need to do this to print&lt;/p>
&lt;p>Like that docs say go ahead and install it and setup your app.php for the Provider&lt;/p>
&lt;h2 id="routes">Routes&lt;/h2>
&lt;p>My main route file looked like this when I was done&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
Route::get('/', function() {
return Redirect::to('/sponsor');
});
require __DIR__ . '/routes.sponsor.php';
require __DIR__ . '/routes.profile.php';
require __DIR__ . '/routes.auth.php';
&lt;/code>&lt;/pre>&lt;p>Which is not much help :)&lt;/p>
&lt;p>The profile one is this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
Route::group(['prefix' =&amp;gt; 'profile', 'middleware' =&amp;gt; 'auth'], function () {
Route::get('/', 'ProfileController@getUser');
Route::post('edit', 'ProfileController@postEdit');
Route::get('invoice/{invoice}', 'ProfileController@getPrintInvoice');
Route::get('cancel', 'ProfileController@getCancel');
});
&lt;/code>&lt;/pre>&lt;p>And the sponsor one is&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
Route::group(['prefix' =&amp;gt; 'sponsor'], function() {
Route::get('/', 'SubscribeController@getSponsorPage');
Route::post('1show', 'SubscribeController@post1Show');
Route::post('2show', 'SubscribeController@post2Show');
Route::post('fan', 'SubscribeController@postFan');
});
&lt;/code>&lt;/pre>&lt;h2 id="stripe-controller">Stripe Controller&lt;/h2>
&lt;p>Pretty simple, which is my goal. Basically take the requests, check the plans and setup the user.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use Illuminate\Routing\Controller;
use App\Plans;
use App\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Str;
class SubscribeController extends Controller
{
public function registerUser($input, $level)
{
if($user = User::where(&amp;quot;email&amp;quot;, $input['stripeEmail'])-&amp;gt;first())
{
if($user-&amp;gt;subscribed())
{
$user-&amp;gt;subscription($level)-&amp;gt;swap();
}
else
{
$user-&amp;gt;subscription($level)-&amp;gt;create($input['stripeToken']);
}
}
else
{
$user = User::create(
[
'email' =&amp;gt; $input['stripeEmail'],
'password' =&amp;gt; Hash::make(Str::random())
]
);
$user-&amp;gt;subscription($level)-&amp;gt;create($input['stripeToken']);
}
return $user;
}
public function getSponsorPage()
{
$public_key = env('STRIPE_PUBLIC');
return view('stripe.subscribe', compact('public_key'));
}
public function post1Show()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$ONE_SHOW_A_MONTH);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}
public function post2Show()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$TWO_SHOWS_A_MONTH);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}
public function postFan()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$FAN);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>We will hit the UI now&lt;/p>
&lt;h2 id="stripe-ui">Stripe Ui&lt;/h2>
&lt;p>I ended up with these view files and a theme file from &lt;a href="https://wrapbootstrap.com/theme/responsive-pricing-tables-WB0PF9PH7">WrapBootstrap&lt;/a> which I can not include of course but just use default bootstrap and it will all work.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/nd761k0gztvj4qg/sponsor_files.png?dl=0" alt="files">&lt;/p>
&lt;p>You can see them all &lt;a href="https://gist.github.com/alnutile/f6f9d49efc39fd431cca">here&lt;/a>&lt;/p>
&lt;p>So at this point you could have something like this&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2rrapm04wwma4dd/sponsor_page.png?dl=0" alt="page">&lt;/p>
&lt;p>Now how do they manage all this?&lt;/p>
&lt;h2 id="profile-controller">Profile Controller&lt;/h2>
&lt;p>This controller takes on the profile route to manage their subscriptions and print.
You can see those files for the view about in the image and the gist link provided above.&lt;/p>
&lt;p>When all that is in place they can see this&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/9dhd81vxyu78yph/subscribe.gif?dl=0" alt="the site">&lt;/p></description><category>stripe</category><category>laravel</category></item><item><title>Logging in Iron.io Workers</title><link>https://alfrednutile.info/posts/147/</link><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/147/</guid><description>&lt;p>Previously I wrote about how to use &lt;a href="https://alfrednutile.info/posts/143">Lumen and Iron.io&lt;/a> this adds to that by modifying the logging technique.&lt;/p>
&lt;p>As noted the worker is basically a class that sets things up, hands off the payload to the handler and returns the results.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use App\CompareFuseHandler;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;
require_once __DIR__ . '/libs/bootstrap.php';
$payload = getPayload(true);
fire($payload);
function fire($payload)
{
$logs = storage_path('logs/lumen.log');
Log::info(sprintf(&amp;quot;Starting Worker at %s&amp;quot;, \Carbon\Carbon::now()));
try
{
//Empty Logs
$handler = App::make('App\CompareFuseHandler');
$handler-&amp;gt;handle($payload);
echo &amp;quot;Success See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now()));
echo File::get($logs);
}
catch(\Exception $e)
{
echo &amp;quot;Error See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now()));
echo File::get($logs);
}
}
&lt;/code>&lt;/pre>&lt;p>The nice thing about above is that all throughout my handler class I can start the do &lt;code>Log::info('foo')&lt;/code> to store up a report for the end of the process on either Success or Error.&lt;/p>
&lt;p>Other options of course are &lt;a href="https://bugsnag.com/">BugSnag&lt;/a> and &lt;a href="https://papertrailapp.com">PaperTrail&lt;/a>&lt;/p></description><category>iron</category><category>microservices</category><category>laravel</category></item><item><title>Writing Commands and Scheduling in Laravel 5.1</title><link>https://alfrednutile.info/posts/146/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/146/</guid><description>&lt;p>Wow, writing &lt;a href="http://laravel.com/docs/master/artisan#command-structure">Artisan Commands&lt;/a> just become even easier. And plugging it into &lt;a href="http://laravel.com/docs/master/scheduling">Scheduler&lt;/a> makes for a great combination.&lt;/p>
&lt;p>For example we need to clean out a folder every so many minutes. The example below I also for fun play around with &lt;code>progress&lt;/code> and table output.&lt;/p>
&lt;p>Note too &lt;code>protected $signature = 'approve:cleanuploads {--minutes=10}';&lt;/code> simplifies the&lt;code>argument&lt;/code> and &lt;code>options&lt;/code> features.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Console\Commands;
use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
class CleanUploadsCommands extends Command
{
protected $rootPath = 'public/storage';
protected $maxMinutes = 10;
protected $deleted = [];
protected $signature = 'approve:cleanuploads {--minutes=10}';
protected $description = 'Clean all the uploads in the storage folder for security reasons';
protected $pdfFiles = [];
protected $files = [];
public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;maxMinutes = $this-&amp;gt;option('minutes');
$this-&amp;gt;anyPdfFilesHere();
$this-&amp;gt;deletePdfFiles();
$this-&amp;gt;outputResults();
}
protected function anyPdfFilesHere()
{
$this-&amp;gt;files = File::allFiles(base_path($this-&amp;gt;rootPath));
foreach($this-&amp;gt;files as $file)
{
if (File::mimeType($file) == 'application/pdf')
{
$this-&amp;gt;pdfFiles[] = $file;
}
}
}
private function deletePdfFiles()
{
if(count($this-&amp;gt;pdfFiles) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressStart(count($this-&amp;gt;pdfFiles));
foreach($this-&amp;gt;pdfFiles as $file)
{
$modified = File::lastModified($file);
$minutes = Carbon::createFromTimestamp($modified)-&amp;gt;diffInMinutes();
if($minutes &amp;gt; $this-&amp;gt;maxMinutes)
{
$this-&amp;gt;setDeleted(['filename' =&amp;gt; $file]);
File::delete($file);
$this-&amp;gt;output-&amp;gt;progressAdvance();
}
}
}
}
private function outputResults()
{
if(count($this-&amp;gt;deleted) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressFinish();
$headers = ['File Name and Path'];
$this-&amp;gt;table($headers, $this-&amp;gt;getDeleted());
}
else
{
$this-&amp;gt;comment(sprintf(&amp;quot;No files older than %d minutes&amp;quot;, $this-&amp;gt;maxMinutes));
}
}
public function getDeleted()
{
return $this-&amp;gt;deleted;
}
public function setDeleted($deleted)
{
$this-&amp;gt;deleted[] = $deleted;
}
}
&lt;/code>&lt;/pre>&lt;p>Then in the Kernel.php I enter&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace Approve\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
'App\Console\Commands\CleanUploadsCommands'
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
$schedule-&amp;gt;command('approve:cleanuploads --minutes=10')
-&amp;gt;everyMinute();
}
}
&lt;/code>&lt;/pre>&lt;p>And that is it.&lt;/p>
&lt;p>One big thing about Commands is the power of Asynchronous processing that libraries like &lt;a href="http://symfony.com/doc/current/components/process.html">Symfony Process&lt;/a> gives us the ability to run numerous commands at once!&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/cu1v0wl61ul29qr/cleanFiles.gif?dl=0" alt="running">&lt;/p></description><category>laravel</category><category>php</category><category>commands</category></item><item><title>Easily Create Fixture Data from Remote Services and Refresh Mock Data</title><link>https://alfrednutile.info/posts/145/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/145/</guid><description>&lt;p>&lt;strong>Oops Codeship and Laravel is &lt;a href="https://goo.gl/k62TEB">here&lt;/a>&lt;/strong>&lt;/p>
&lt;h1 id="easily-create-fixture-data-from-remote-services-and-refresh-mock-data">Easily Create Fixture Data from Remote Services and Refresh Mock Data&lt;/h1>
&lt;p>We have integration tests that hit remote apis like Github, S3, DynomoDB, our own APIs etc and we do not want to hit those during out tests but we also want to make sure we have the real data. So when one of those APIs change then our mock data can be refreshed to see if our systems really work with it.&lt;/p>
&lt;p>Using Laravel&amp;rsquo;s new integration tests, though this works with any framework, we will swap out these Service classes with a Wrapper class ONLY if we have a matching file. This allows us to delete those files and get another one on the fly.&lt;/p>
&lt;h2 id="lets-start-with-the-controller">Lets start with the Controller&lt;/h2>
&lt;p>This simple Controller will talk to a Repo. Imagine the repo talking to Dynamodb or GithubApi, database etc.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Http\Controllers;
use App\ExampleRepo;
use Illuminate\Support\Facades\Response;
class ExampleController extends Controller
{
public function mocking(ExampleRepo $exampleRepo)
{
return Response::json(&amp;quot;You are here &amp;quot; . $exampleRepo-&amp;gt;get());
}
}
&lt;/code>&lt;/pre>&lt;p>So thanks to the dependency injection system; and the use of the Reflection Class, &lt;code>ExampleRepo&lt;/code> get constructed as well.&lt;/p>
&lt;h2 id="the-tests">The Tests&lt;/h2>
&lt;p>First lets look at a normal test no mock&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;
class ExampleTest extends TestCase
{
public function testDefault()
{
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here foo&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>Pretty simple. But not lets&amp;hellip;&lt;/p>
&lt;h2 id="swap-things-out">Swap Things Out&lt;/h2>
&lt;p>Here we add an example of replacing the default instance &lt;code>App&lt;/code> would make with our own Wrapper&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;
class ExampleTest extends TestCase
{
public function testDefault()
{
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here foo&amp;quot;);
}
public function testMocking()
{
$mock = m::mock('App\ExampleRepo');
$mock-&amp;gt;shouldReceive('get')-&amp;gt;once()-&amp;gt;andReturn('bar');
App::instance('App\ExampleRepo', $mock);
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here bar&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>testMocking&lt;/code> will now return bar!&lt;/p>
&lt;h2 id="making-fixtures-on-the-fly">Making Fixtures on the Fly&lt;/h2>
&lt;p>Same results BUT we hit my wrapper not the real services. But here is where I think it gets even better. I can return fixture data BUT at the same time I can not worry about returning stale fixture data eg the apis have changed but my fixtures have not. All of this without having my test code wrapped into the app code.&lt;/p>
&lt;p>This will look for the output of a route. That Controller and Repo we will show in a moment&lt;/p>
&lt;pre>&lt;code> public function testMakeFixture()
{
$wrapper = App::make('App\ExampleRepoWrapper');
App::instance('App\ExampleRepo', $wrapper);
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here foo&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>This test has a wrapper which extends the repo&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App;
use Illuminate\Support\Facades\File;
class ExampleRepoWrapper extends ExampleRepo
{
public function get()
{
if(File::exists(base_path('tests/fixtures/foo.json')))
{
$content = File::get(base_path('tests/fixtures/foo.json'));
return json_decode($content, true);
}
$results = parent::get();
if(!File::exists(base_path('tests/fixtures/foo.json')))
{
$content = json_encode($results, JSON_PRETTY_PRINT);
File::put(base_path('tests/fixtures/foo.json'), $content);
}
return $results;
}
}
&lt;/code>&lt;/pre>&lt;p>So now the Controller will talk to the Wrapper instead which will look for a file &lt;code>(NOTE: You can easily pass in $id or $name to make the fixtures unique)&lt;/code>&lt;/p>
&lt;p>So now when the Controller hits our Wrapper it goes right to the real &lt;code>ExampleRepo&lt;/code> (seen below) &lt;strong>if there is no fixture file&lt;/strong> and then the Wrapper kicks in to make the file (as seen in the above class).&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App;
class ExampleRepo
{
protected $results;
public function get()
{
$this-&amp;gt;results = 'foo';
return $this-&amp;gt;results;
}
/**
* @return mixed
*/
public function getResults()
{
return $this-&amp;gt;results;
}
}
&lt;/code>&lt;/pre>&lt;p>That is it you can do integration testing on your APIs and not hit external services or even databases.&lt;/p>
&lt;h2 id="force-full-integration">Force Full Integration&lt;/h2>
&lt;p>Sometimes you want to hit the external resources. This can be part of a weekly or daily test to make sure you app is working with all the external APIs. You can do this by deleting all the fixtures before running that test.&lt;/p>
&lt;p>So you can setup a provider like this&lt;/p>
&lt;pre>&lt;code>
class ExampleProvider extends ServiceProvider
{
public function register()
{
if(App::environment() == 'testing' and env('FULL_INTEGRATION') != 'true')
{
$this-&amp;gt;app-&amp;gt;bind('App\ExampleRepo', 'App\ExampleRepoWrapper');
} else {
$this-&amp;gt;app-&amp;gt;bind('App\ExampleRepo', 'App\ExampleRepo');
}
}
}
** UPDATE **
Another good idea, by [Nathan Kirschbaum](https://twitter.com/n_kirschbaum), is to set the `FULL_INTEGRATION` setting by the user that is logged in.
&lt;/code>&lt;/pre>&lt;h2 id="cons">Cons&lt;/h2>
&lt;p>One is UI testing. Prior to this I would make wrappers as needed to then take over if say &lt;code>APP_MOCK=true&lt;/code>. Then I could mock even on Behat testing or the UI. But that meant a lot of Providers and alot of mixing of testing and code. But it worked and ran well on services like CodeShip and locally. If you Behat/Acceptance tests are hitting the API or UI it would be nice to fake all the external responses. Though now with the above the API testing is easy. The UI (when there is javascript) not so easy :(&lt;/p>
&lt;p>Since we are using &lt;code>App::instance&lt;/code> we did not need to register a Provider Class. But to make the UI con a non issue you can go that far to register a ServiceProvider&lt;/p>
&lt;pre>&lt;code>
class ExampleProvider extends ServiceProvider
{
public function register()
{
if(App::environment() == 'testing'
{
$this-&amp;gt;app-&amp;gt;bind('App\ExampleRepo', 'App\ExampleRepoWrapper');
} else {
$this-&amp;gt;app-&amp;gt;bind('App\ExampleRepo', 'App\ExampleRepo');
}
}
}
&lt;/code>&lt;/pre>&lt;p>Then register as normal in your config/app.php . This can be kinda tedious but would produce the same results.&lt;/p>
&lt;p>Great book on the topic &lt;a href="https://leanpub.com/laravel-testing-decoded">Laravel Testing Decoded&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://s3.amazonaws.com/titlepages.leanpub.com/laravel-testing-decoded/large?1425536214" alt="decoded">&lt;/p></description><category>testing</category><category>laravel</category><category>php</category><category>phpunit</category><category>integration</category></item><item><title>Adding Cache to your Laravel Site</title><link>https://alfrednutile.info/posts/144/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/144/</guid><description>&lt;p>Using Laravel&amp;rsquo;s built in Cache facade is super easy. I will quickly cover how to use it for showing your Posts and showing a Post.&lt;/p>
&lt;h2 id="example-1-show-a-post">Example 1 Show a Post&lt;/h2>
&lt;p>This example will first check the Cache to see if there is a match for post_ID of the post if not it will make one. Also I happen to do the same for the sidebar.&lt;/p>
&lt;pre>&lt;code>public function show($id)
{
$post = Cache::rememberForever('post_' . $id, function() use ($id)
{
return Post::findOrFail($id);
});
$posts = Cache::rememberForever('posts_sidebar', function()
{
return Post::all()-&amp;gt;sortBy(&amp;quot;created_at&amp;quot;, null, TRUE);
});
$active = $post-&amp;gt;id;
return View::make('posts.show', compact('post', 'posts', 'active'));
}
&lt;/code>&lt;/pre>&lt;p>Of course this could be moved into a Service and out of the Controller.&lt;/p>
&lt;p>It really is that simple&lt;/p>
&lt;h2 id="all-posts">All Posts&lt;/h2>
&lt;p>Same thing.&lt;/p>
&lt;p>If you are not authenticated, eg all users but me, and there is no posts cache make one else show it.&lt;/p>
&lt;pre>&lt;code>if(Auth::user()) {
$posts = Post::OrderByCreatedAt()-&amp;gt;get();
} else {
$posts = Cache::rememberForever('posts', function()
{
return Post::Published()-&amp;gt;OrderByCreatedAt()-&amp;gt;get();
});
}
&lt;/code>&lt;/pre>&lt;h2 id="clearing-cache">Clearing Cache&lt;/h2>
&lt;p>For this I made a PostsObeserver Class&lt;/p>
&lt;p>This will reset Cache for the related caches whenever a post is made or updated.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Support\Facades\Cache;
class PostObserver {
public function saved($model)
{
foreach(['posts_sidebar', 'posts'] as $value)
{
Cache::forget($value);
}
Cache::forget('post_' . $model-&amp;gt;id);
}
}
&lt;/code>&lt;/pre>&lt;p>Then I register it in the model&lt;/p>
&lt;pre>&lt;code>
public static function boot()
{
parent::boot();
Post::observe(new PostObserver());
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>cache</category></item><item><title>Iron.io and Lumen</title><link>https://alfrednutile.info/posts/143/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/143/</guid><description>&lt;h1 id="lumen-iron-worker">Lumen Iron Worker&lt;/h1>
&lt;h2 id="what-and-why">What and why&lt;/h2>
&lt;p>A worker is a great way to run tasks as needed taking the load off your applications server and greatly speeding up the process of a task as you can run numerous workers at once.&lt;/p>
&lt;p>A lot of this comes from &lt;a href="http://dev.iron.io/worker/beta/getting_started/">http://dev.iron.io/worker/beta/getting_started/&lt;/a> and
&lt;a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/&lt;/a> and their examples&lt;/p>
&lt;h2 id="topics-covered">Topics covered&lt;/h2>
&lt;ul>
&lt;li>Creating a Lumen Worker&lt;/li>
&lt;li>Creating a statically linked binary in the worker&lt;/li>
&lt;li>Testing the worker locally with Docker&lt;/li>
&lt;li>Entering your docker environment&lt;/li>
&lt;li>Design patterns&lt;/li>
&lt;/ul>
&lt;h2 id="install-lumen">Install Lumen&lt;/h2>
&lt;pre>&lt;code>composer create-project laravel/lumen --prefer-dist
&lt;/code>&lt;/pre>&lt;p>Add to composer.json&lt;/p>
&lt;blockquote>
&lt;pre>&lt;code> &amp;quot;iron-io/iron_mq&amp;quot;: &amp;quot;~1.5&amp;quot;,
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;pre>&lt;code> &amp;quot;iron-io/iron_worker&amp;quot;: &amp;quot;~1.4&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>So now it looks like&lt;/p>
&lt;pre>&lt;code> &amp;quot;require&amp;quot;: {
&amp;quot;laravel/lumen-framework&amp;quot;: &amp;quot;5.0.*&amp;quot;,
&amp;quot;vlucas/phpdotenv&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;iron-io/iron_mq&amp;quot;: &amp;quot;~1.5&amp;quot;,
&amp;quot;iron-io/iron_worker&amp;quot;: &amp;quot;~1.4&amp;quot;
},
&lt;/code>&lt;/pre>&lt;h2 id="install-iron-client">Install iron client&lt;/h2>
&lt;p>See their notes here &lt;a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/&lt;/a>&lt;/p>
&lt;h2 id="install-docker">Install docker&lt;/h2>
&lt;p>On a mac they have great steps here for that &lt;a href="https://docs.docker.com/installation/mac/">https://docs.docker.com/installation/mac/&lt;/a>&lt;/p>
&lt;h2 id="environment-settings">Environment settings&lt;/h2>
&lt;p>For Lumen we can simply use our typical .env file. For Iron you put your info in the iron.json file in the root of the app (make sure to add this to .gitignore)&lt;/p>
&lt;p>The format is&lt;/p>
&lt;pre>&lt;code>{ &amp;quot;token&amp;quot;: &amp;quot;foo&amp;quot;, &amp;quot;project_id&amp;quot;: &amp;quot;bar&amp;quot; }
&lt;/code>&lt;/pre>&lt;h2 id="the-worker">The worker&lt;/h2>
&lt;p>Make a folder called workers at the root of your app&lt;/p>
&lt;p>In there place your worker file. In this case &lt;code>ExampleOneWorker&lt;/code>. This is what gets called, as you will see soon, when the worker starts. This is what will receive the payload.&lt;/p>
&lt;pre>&lt;code>workers/ExampleOneWorker.php
&lt;/code>&lt;/pre>&lt;p>Inside of this to start will be&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
require_once __DIR__ . '/libs/bootstrap.php';
$payload = getPayload(true);
fire($payload);
function fire($payload)
{
try
{
$handler = new \App\ExampleOneHandler();
$handler-&amp;gt;handle($payload);
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error with worker %s&amp;quot;, $e-&amp;gt;getMessage());
echo $message;
}
}
&lt;/code>&lt;/pre>&lt;p>For testing reasons and code clarity I do not like to put much code in here. I instantiate a handler class and pass in the payload.&lt;/p>
&lt;p>The getPayload in the helper.php file, provided by an Iron.io example, will get the payload for us.&lt;/p>
&lt;p>There is another folder to make in there called libs and for now it has this file &lt;code>bootstrap.php&lt;/code> and &lt;code>helper.php&lt;/code> [1] The helper is &lt;a href="https://github.com/alnutile/lumen_worker/blob/master/workers/libs/helper.php">here&lt;/a>&lt;/p>
&lt;p>With the contents as seen below for bootstrap or &lt;a href="https://github.com/alnutile/lumen_worker/tree/master/workers/libs">visit&lt;/a> to get the files.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
require __DIR__ . '/../../vendor/autoload.php';
$app = require_once __DIR__ . '/../../bootstrap/app.php';
if(!function_exists('getPayload'))
require_once __DIR__ . '/helper.php';
use Illuminate\Encryption\Encrypter;
$app-&amp;gt;boot();
function decryptPayload($payload)
{
$crypt = new Encrypter(getenv('IRON_ENCRYPTION_KEY'));
$payload = $crypt-&amp;gt;decrypt($payload);
return json_decode(json_encode($payload), FALSE);
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>helper.php&lt;/code> I placed a gist here &lt;a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8">https://gist.github.com/alnutile/41ee747bb8e1810d19e8&lt;/a>&lt;/p>
&lt;p>Also for this example we will need a &lt;code>payload.json&lt;/code> file in the root of our app. More on that shortly, for now put this into the file.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Finally our app folder has the &lt;code>ExampleOneHandler.php&lt;/code> file to handle the job.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace App;
class ExampleOneHandler {
public function handle($payload)
{
echo &amp;quot;This is the Payload&amp;quot;;
echo print_r($payload, 1);
}
}
&lt;/code>&lt;/pre>&lt;p>We will do more shortly.&lt;/p>
&lt;p>Here is the folder/file layout&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/c561wmsnv8hl2rm/worker_files.png?dl=0" alt="files">&lt;/p>
&lt;h2 id="round-1-exampleonehandler">Round 1 ExampleOneHandler&lt;/h2>
&lt;p>Lets now run this and see what happens.&lt;/p>
&lt;p>Using docker we can run this locally&lt;/p>
&lt;pre>&lt;code>docker run --rm -v &amp;quot;$(pwd)&amp;quot;:/worker -w /worker iron/images:php-5.6 sh -c &amp;quot;php /worker/workers/ExampleOneWorker.php -payload payload.json&amp;quot;
&lt;/code>&lt;/pre>&lt;p>You just ran, what ideally will be, the exact worker you will run when you upload the code. It will take a moment on the first run. After that it will be super fast.&lt;/p>
&lt;p>Here is my output&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/4qkq5e21jl550sg/worker_command.png?dl=0" alt="outputone">&lt;/p>
&lt;h3 id="uploading-to-iron">Uploading to Iron&lt;/h3>
&lt;h4 id="bundle">Bundle&lt;/h4>
&lt;p>This is really easy to make a script for by just adding them to an upload_worker.sh file in the root of your app and running that as needed.&lt;/p>
&lt;pre>&lt;code>touch ExampleOneWorker.zip
rm ExampleOneWorker.zip
zip -r ExampleOneWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleOneWorker.zip php workers/ExampleOneWorker.php
&lt;/code>&lt;/pre>&lt;p>So we are touching the file so there are no errors if it is not there.
Then we rm it
And zip it ignoring .git to keep it slim
and then we upload it with the worker and point to the directory to use.&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t run it just yet&lt;/strong>&lt;/p>
&lt;p>I add my iron.json file to the root of my app as noted above.&lt;/p>
&lt;p>and I make the Project on the Iron HUD&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/qq2h0to2epnc0qw/worker_json.png?dl=0" alt="iron">&lt;/p>
&lt;p>And then I can run the &lt;code>make_worker.sh&lt;/code> I made above&lt;/p>
&lt;p>You should end up with this output&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/utb478g6510rssd/worker_iron_upload.png?dl=0" alt="output">&lt;/p>
&lt;h4 id="looking-at-the-hud-iron-webui">Looking at the HUD (Iron WebUI)&lt;/h4>
&lt;p>Under Worker and tasks we see&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/7d1klwablw037wh/worker_hud_tasks.png?dl=0" alt="worker">&lt;/p>
&lt;p>So lets run it from the command line to see it work&lt;/p>
&lt;pre>&lt;code>iron worker queue --wait -payload-file payload.json ExampleOneWorker
&lt;/code>&lt;/pre>&lt;p>The wait is pretty cool since we can get this output. This is key when doing master slave workers as well.&lt;/p>
&lt;p>You get the same output as before. But it was run on the worker&lt;/p>
&lt;p>Here is the HUD&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/bxc1dolij0l2f7w/worker_run_example1.png?dl=0" alt="worker ran">&lt;/p>
&lt;h2 id="round-2-lets-do-something-real">Round 2 Lets do something real&lt;/h2>
&lt;p>So far the payload has not done much but lets use it in this next example.&lt;/p>
&lt;p>As above we make and &lt;code>ExampleTwoWorker.php&lt;/code>&lt;/p>
&lt;p>Make payload2.json file&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;search_word&amp;quot;: &amp;quot;batman&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Then we use it to call our &lt;code>ExampleTwoWorkerHandler&lt;/code>&lt;/p>
&lt;p>&lt;strong>warning this is not an example on good php code&lt;/strong>&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App;
class ExampleTwoHandler {
protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
return file_get_contents($image);
}
}
}
&lt;/code>&lt;/pre>&lt;p>I test locally&lt;/p>
&lt;pre>&lt;code>docker run --rm -v &amp;quot;$(pwd)&amp;quot;:/worker -w /worker iron/images:php-5.6 sh -c &amp;quot;php /worker/workers/ExampleTwoWorker.php -payload payload2.json&amp;quot; &amp;gt; output.png
&lt;/code>&lt;/pre>&lt;p>But this time put the output into a file and we get&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/kmtuvgzhpzws6xz/worker_lego_one.png?dl=0" alt="lego guys">&lt;/p>
&lt;h3 id="making-a-custom-binary">Making a custom binary&lt;/h3>
&lt;p>Before I get this to iron lets make it more useful since I will lose that output.png file on the worker. Some workers we have would convert that into a base64 blob and send that back in a callback.&lt;/p>
&lt;p>One enter into docker like I noted above&lt;/p>
&lt;p>Two run &lt;code>apt-get update&lt;/code>&lt;/p>
&lt;p>Then run &lt;code>apt-get install jp2a&lt;/code>&lt;/p>
&lt;p>Then make a folder called /worker/builds/&lt;/p>
&lt;p>And in there follow these instructions &lt;a href="http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html">http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html&lt;/a> replacing jp2a as needed.&lt;/p>
&lt;p>Then make a folder called /worker/bin and copy jp2a from &lt;code>/worker/builds/jp2a-1.0.6/src/jp2a&lt;/code> to this bin folder.&lt;/p>
&lt;p>You should be able to see that run now by ding /worker/bin/jp2a even run &lt;code>apt-get remove jp2a&lt;/code> to show it works as a standalone library [3]&lt;/p>
&lt;p>Let&amp;rsquo;s adjust our code&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 4/27/15
* Time: 9:02 PM
*/
namespace App;
use Illuminate\Support\Facades\File;
class ExampleTwoHandler {
protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
$path_to_worker = base_path('bin/');
exec(&amp;quot;chmod +x {$path_to_worker}/jp2a&amp;quot;);
exec(&amp;quot;TERM=xterm {$path_to_worker}/bin/jp2a $image&amp;quot;, $output);
return implode(&amp;quot;\n&amp;quot;, $output);
}
}
}
&lt;/code>&lt;/pre>&lt;p>run locally and you might get some decent output or not :(&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/76vbdf0iubehf5c/worker_batman.png?dl=0" alt="batman">&lt;/p>
&lt;h3 id="make-and-upload-the-worker">Make and upload the worker&lt;/h3>
&lt;p>Then I run &lt;code>sh ./make_worker_two.php&lt;/code>&lt;/p>
&lt;pre>&lt;code>touch ExampleTwoWorker.zip
rm ExampleTwoWorker.zip
zip -r ExampleTwoWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleTwoWorker.zip php workers/ExampleTwoWorker.php
&lt;/code>&lt;/pre>&lt;p>And run and wait&lt;/p>
&lt;pre>&lt;code>iron worker queue --wait -payload-file payload2.json ExampleTwoWorker
&lt;/code>&lt;/pre>&lt;p>And if all goes well your console and the logs should show something like&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/263tlw5vkswqqvp/worker_results.png?dl=0" alt="batman">&lt;/p>
&lt;h2 id="entering-your-docker-environment">Entering your docker environment&lt;/h2>
&lt;p>Easy&lt;/p>
&lt;pre>&lt;code>docker run -it -v &amp;quot;$(pwd)&amp;quot;:/worker -w /worker iron/images:php-5.6 /bin/bash
&lt;/code>&lt;/pre>&lt;p>Now you can test things in there, download packages etc.&lt;/p>
&lt;h2 id="mvc">MVC&lt;/h2>
&lt;p>Not sure if this really is correct but I tend to see the Worker file as my route file. The handler as the controller and other classes as needed, Service, Repository etc. This makes things more testable etc and better organize imo.&lt;/p>
&lt;h2 id="connecting-the-queue-to-the-worker">Connecting the Queue to the Worker&lt;/h2>
&lt;p>Coming soon&amp;hellip;&lt;/p>
&lt;h2 id="numerous-environments">Numerous Environments&lt;/h2>
&lt;p>Waiting on bug report &lt;a href="https://github.com/iron-io/docs/issues/467">https://github.com/iron-io/docs/issues/467&lt;/a>&lt;/p>
&lt;p>But part of the process is to setup other projects at iron. For example if my worker is ExampleWorker then I would make ExampleWorker-dev.
I would then switch to my git branch dev and do my changes. Once that is done I would make sure the token and key in my iron.json file matches that new project I made for dev and that is it.&lt;/p>
&lt;p>The other way is slicker cause you do not need to change your iron.json each time but in the mean time this works fine.&lt;/p>
&lt;h2 id="deploy-from-codeship">Deploy from Codeship&lt;/h2>
&lt;p>Codeship will allow you to set custom deploy scripts or bash shells scrips basically.&lt;/p>
&lt;p>In here I placed for the branch I wanted&lt;/p>
&lt;pre>&lt;code>curl -sSL -O https://github.com/iron-io/ironcli/releases/download/v0.0.6/ironcli_linux
chmod +x ironcli_linux
touch iron.json
echo &amp;quot;{&amp;quot; &amp;gt;&amp;gt; iron.json
echo '&amp;quot;token&amp;quot;: &amp;quot;bar&amp;quot;,' &amp;gt;&amp;gt; iron.json
echo '&amp;quot;project_id&amp;quot;: &amp;quot;foo&amp;quot;' &amp;gt;&amp;gt; iron.json
echo &amp;quot;}&amp;quot; &amp;gt;&amp;gt; iron.json
zip -r PDF2PagesWorker.zip .
./ironcli_linux worker upload --stack php-5.6 PDF2PagesWorker.zip php workers/PDF2PagesWorker.php
&lt;/code>&lt;/pre>&lt;p>You can easily then swap out the related project id and token for the environment you are uploading to eg development, staging etc.&lt;/p>
&lt;h2 id="repo">Repo&lt;/h2>
&lt;p>&lt;a href="https://github.com/alnutile/lumen_worker">https://github.com/alnutile/lumen_worker&lt;/a>&lt;/p>
&lt;p>another example &lt;a href="https://github.com/alnutile/thumbnail-maker">Thumbnail Maker&lt;/a>&lt;/p>
&lt;p>[1] These seems to be a part of the iron worker for version 1 but not sure why not for 2 maybe there is a better pattern for this.&lt;/p>
&lt;p>[2] I renamed it to ExampleOneLumen&lt;/p>
&lt;p>[3] So far this is a 50/50 solution it did not work for pdf2svg but it did work for pdftk&lt;/p></description><category>laravel</category><category>php</category><category>iron</category><category>lumen</category></item><item><title>Quick way to mock data for Behat in Laravel</title><link>https://alfrednutile.info/posts/142/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/142/</guid><description>&lt;p>Below allows me to use this type of step in my tests&lt;/p>
&lt;pre>&lt;code>Scenario: Given I update a Domain get 200
Given I mock &amp;quot;App\Sites\Domain&amp;quot; with properties:
&amp;quot;&amp;quot;&amp;quot;
id: &amp;quot;mock-update-1&amp;quot;
site_id: &amp;quot;mock-site-1&amp;quot;
domain: &amp;quot;foo2.com
&amp;quot;&amp;quot;&amp;quot;
Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{
&amp;quot;data&amp;quot;:
{
&amp;quot;id&amp;quot;: &amp;quot;mock-update-1&amp;quot;,
&amp;quot;site_id&amp;quot;: &amp;quot;mock-site-1&amp;quot;,
&amp;quot;domain&amp;quot;: &amp;quot;foo2.com&amp;quot;
}
}
&amp;quot;&amp;quot;&amp;quot;
Then I request &amp;quot;PUT /api/v1/sites/mock-site-1/domains/mock-update-1&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
&lt;/code>&lt;/pre>&lt;p>Here is the code in my &lt;code>FeatureContext.php&lt;/code>&lt;/p>
&lt;pre>&lt;code> /**
* @Given I mock :arg1 with properties:
*/
public function iMockWithProperties($model, PyStringNode $properties)
{
try
{
$this-&amp;gt;setModel($model);
$this-&amp;gt;makeFields($properties);
$this-&amp;gt;removeMockIfExists();
$this-&amp;gt;checkModelForTimeStamps();
$this-&amp;gt;createMock();
}
catch(\Exception $e)
{
$this-&amp;gt;printDebug(sprintf(&amp;quot;Error making mock&amp;quot;, $e-&amp;gt;getMessage()));
}
}
private function checkModelForTimeStamps()
{
if($this-&amp;gt;getModel()-&amp;gt;timestamps)
{
$dateTime = new DateTime('-3 day');
$created_at = $dateTime-&amp;gt;format('Y-m-d H:i:s');
$this-&amp;gt;fields['created_at'] = $created_at;
$this-&amp;gt;fields['updated_at'] = $created_at;
}
}
protected function removeMockIfExists()
{
if(isset($this-&amp;gt;fields['id']) &amp;amp;&amp;amp; $results = $this-&amp;gt;getModel()-&amp;gt;find($this-&amp;gt;fields['id']))
$results-&amp;gt;delete();
}
protected function makeFields($properties)
{
foreach($properties-&amp;gt;getStrings() as $value)
{
$field = explode(&amp;quot;:&amp;quot;, $value);
$this-&amp;gt;fields[trim($field[0])] = str_replace('&amp;quot;', '', trim($field[1]));
}
}
public function createMock()
{
$this-&amp;gt;getModel()-&amp;gt;create($this-&amp;gt;fields);
}
/**
* @return mixed
*/
public function getFields()
{
return $this-&amp;gt;fields;
}
/**
* @param mixed $fields
*/
public function setFields($fields)
{
$this-&amp;gt;fields = $fields;
}
/**
* @return mixed
*/
public function getModel()
{
return $this-&amp;gt;model;
}
/**
* @param mixed $model
*/
public function setModel($model)
{
$this-&amp;gt;model = new $model;
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>behat</category></item><item><title>Code for making a Shortcut tool for your App</title><link>https://alfrednutile.info/posts/141/</link><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/141/</guid><description>&lt;p>This allows the user to easily make shortcuts to urls they are on and give them names.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/bwnfydndpx6ic4l/widget_shortcuts.gif?dl=0" alt="image 1">&lt;/p>
&lt;p>&lt;a href="http://youtu.be/tMi0tqPmnhg">video&lt;/a>&lt;/p>
&lt;h1 id="the-migration">The Migration&lt;/h1>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
class CreateShortcutsTable extends Migration {
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::create('shortcuts', function(Blueprint $table)
{
$table-&amp;gt;string('id', 36)-&amp;gt;primary();
$table-&amp;gt;string('url');
$table-&amp;gt;string('name');
$table-&amp;gt;string('user_id', 36);
$table-&amp;gt;timestamps();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('shortcuts');
}
}
&lt;/code>&lt;/pre>&lt;h1 id="the-model">The Model&lt;/h1>
&lt;p>You will see me using scopes as I wanted to make a really simple POC&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 3/28/15
* Time: 8:28 PM
*/
namespace BehatEditor\Models;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
class Shortcut extends BaseModel {
public $incrementing = false;
public static $rulesCreate = [
'name' =&amp;gt; 'required|min:3',
'url' =&amp;gt; 'required'
];
protected $fillable = [
&amp;quot;id&amp;quot;,
&amp;quot;url&amp;quot;,
&amp;quot;name&amp;quot;,
&amp;quot;user_id&amp;quot;
];
public function user()
{
return $this-&amp;gt;belongsTo('BehatEditor\User');
}
public function scopeGetAllForCurrentUser($query)
{
return $query-&amp;gt;where('user_id', Auth::user()-&amp;gt;id)-&amp;gt;get();
}
public function scopeDeleteForUser($query, $shortcut_id)
{
try
{
return ($results = $query-&amp;gt;where('id', $shortcut_id)-&amp;gt;where('user_id', Auth::user()-&amp;gt;id)-&amp;gt;first()) ? $results-&amp;gt;delete() : false;
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Could not delete the shortcut %s&amp;quot;, $shortcut_id));
}
}
public function scopeCreateForUser($query, $input)
{
try
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
$this-&amp;gt;create(
[
'id' =&amp;gt; (isset($input['id'])) ? $input['id'] : $uuid,
'url' =&amp;gt; $input['url'],
'name' =&amp;gt; $input['name'],
'user_id' =&amp;gt; Auth::user()-&amp;gt;id
]
);
return $uuid;
}
catch(\Exception $e)
{
$this-&amp;gt;throw_and_log_error(sprintf(&amp;quot;Error making shortcut %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
}
&lt;/code>&lt;/pre>&lt;h1 id="the-controller">The Controller&lt;/h1>
&lt;p>Typically this is a no no too much logic in the controller.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 3/28/15
* Time: 8:45 PM
*/
namespace BehatEditor\Http\Controllers;
use AlfredNutileInc\CoreApp\BaseController;
use BehatEditor\Models\Shortcut;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;
class ShortcutsController extends BaseController {
public function getUserShortCuts()
{
try
{
$results['shortcuts'] = Shortcut::getAllForCurrentUser();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded Shortcuts&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
public function deleteUserShortCut($shortcut_id)
{
try
{
$results = Shortcut::deleteForUser($shortcut_id);
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Deleted Shortcut&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
public function postShortcut()
{
try
{
$input = $this-&amp;gt;getInput();
$validator = Validator::make($input, Shortcut::$rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
}
catch(\Exception $e)
{
Log::debug(sprintf(&amp;quot;Error making shortcut during validaiton %s&amp;quot;, $e-&amp;gt;getMessage()));
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond([], &amp;quot;Creation Error&amp;quot;), 500);
}
try
{
$results = Shortcut::createForUser($input);
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Created Shortcut&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
}
&lt;/code>&lt;/pre>&lt;p>Then for the nav area&lt;/p>
&lt;pre>&lt;code>&amp;lt;li class=&amp;quot;shortcut-form&amp;quot;&amp;gt;
&amp;lt;form class=&amp;quot;navbar-form navbar-left&amp;quot; role=&amp;quot;shortcuts&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
&amp;lt;input
placeholder=&amp;quot;shortcut name&amp;quot;
type=&amp;quot;text&amp;quot;
class=&amp;quot;form-control input-sm&amp;quot;
ng-model=&amp;quot;main.shortcut_new.name&amp;quot;&amp;gt;
&amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
&amp;lt;button
ng-disabled=&amp;quot;!main.shortcut_new.name&amp;quot;
type=&amp;quot;button&amp;quot;
class=&amp;quot;btn btn-default&amp;quot;
ng-click=&amp;quot;main.addShortCut()&amp;quot;&amp;gt;
&amp;lt;i class=&amp;quot;fa fa-plus-circle&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;dropdown&amp;quot;&amp;gt;
&amp;lt;a class=&amp;quot;dropdown-toggle&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;
&amp;lt;i class=&amp;quot;fa fa-thumb-tack&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 
Your Shortcuts&amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;ul class=&amp;quot;dropdown-menu dropdown-messages&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;input
class=&amp;quot;form-control&amp;quot;
type=&amp;quot;text&amp;quot;
autofocus=&amp;quot;{{ form_focus == 'nav' }}&amp;quot;
placeholder=&amp;quot;Click Tab to enter mouse into input and search&amp;quot;
data-ng-model=&amp;quot;search_shortcuts&amp;quot;
&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li ng-repeat=&amp;quot;shortcut in main.shortcuts | filter:search_shortcuts&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;dropdown-messages-box&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;span ng-bind-html=&amp;quot;shortcut.shortcut&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;a class=&amp;quot;pull-right&amp;quot; href=&amp;quot;#&amp;quot; ng-click=&amp;quot;main.deleteShortcut(shortcut.id)&amp;quot;&amp;gt;
&amp;lt;i class=&amp;quot;fa fa-trash&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code>&lt;/pre>&lt;h1 id="the-angular">The Angular&lt;/h1>
&lt;p>We have a MainController for initial app setup then after that ui-router has controllers.&lt;/p>
&lt;p>Also you can get the shortcuts via a http request on page load. I just inject the initial load into the blade render. But either is fine really.&lt;/p>
&lt;pre>&lt;code># controller.js
function addShortCut()
{
vm.shortcut_new.url = $location.url();
vm.ShortcutsService.create(vm.shortcut_new, vm.callbackCreateShortcutSuccess, vm.callbackShortcutError);
}
function loadShortcuts()
{
vm.shortcuts = [];
angular.forEach(vm.ENV.shortcuts, function(v,i){
var link = vm.makeLink(v);
vm.shortcuts.push( { &amp;quot;id&amp;quot;: v.id, &amp;quot;shortcut&amp;quot;: link } );
});
}
function deleteShortcut(id)
{
vm.shortcut_to_delete = id;
vm.ShortcutsService.deleteShortcut(id, vm.callbackShortcutSuccess, vm.callbackShortcutError);
}
function callbackShortcutSuccess(response)
{
vm._.remove(vm.shortcuts, function(s) {
return s.id == vm.shortcut_to_delete;
});
vm.toaster.pop(&amp;quot;success&amp;quot;, &amp;quot;Success updating shortcut&amp;quot;);
}
function callbackCreateShortcutSuccess(response)
{
vm.shortcut_new.id = response.data;
var link = vm.makeLink(vm.shortcut_new);
vm.shortcuts.push( { &amp;quot;id&amp;quot;: vm.shortcut_new.id, &amp;quot;shortcut&amp;quot;: link } );
vm.shortcut_new = {};
vm.toaster.pop('info', &amp;quot;Success creating shortcut&amp;quot;);
}
function makeLink(shortcut)
{
return &amp;quot;&amp;lt;a href='https://alfrednutile.info/behat#&amp;quot; + shortcut.url + &amp;quot;'&amp;gt;&amp;quot; + shortcut.name + &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;;
}
function callbackShortcutError(response)
{
vm.toaster.pop(&amp;quot;error&amp;quot;, &amp;quot;Error updating your shortcut&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;h1 id="the-behat-api-tests">The Behat API Tests&lt;/h1>
&lt;pre>&lt;code>@api
Feature: Shortcuts
Shortcuts for quick access
As an authenticated user
So I can make and use shortcuts to get from place to place
Background: Login
Given I do basic auth on behat
Scenario: Get My Shortcuts
When I request &amp;quot;GET /api/v1/shortcuts&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
And scope into the &amp;quot;data.shortcuts.0&amp;quot; property
And the properties exist:
&amp;quot;&amp;quot;&amp;quot;
url
user_id
&amp;quot;&amp;quot;&amp;quot;
Scenario: Delete My Shortcuts
When I request &amp;quot;DELETE /api/v1/shortcuts/mock-shortcut-5&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
Scenario: Can Create a Shortcut
Given I reseed the database
Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{ &amp;quot;data&amp;quot;:
{
&amp;quot;name&amp;quot;: &amp;quot;New ShortCut&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;/dashboard&amp;quot;
}
}
&amp;quot;&amp;quot;&amp;quot;
When I request &amp;quot;POST /api/v1/shortcuts&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
&lt;/code>&lt;/pre></description><category>angular</category><category>laravel</category></item><item><title>Using Faker and ENV vars with Behat</title><link>https://alfrednutile.info/posts/140/</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/140/</guid><description>&lt;p>&lt;strong>UPDATED April 01 2015&lt;/strong>&lt;/p>
&lt;p>Realized I needed more &amp;ldquo;tokens&amp;rdquo; and I was already using my .env file for info for Seeding and for our different servers. So the Trait now pulls those in.&lt;/p>
&lt;p>This is a simple trait to use in your FeatureContext file to then get the power of &lt;a href="https://packagist.org/packages/fzaninotto/faker">Faker&lt;/a> in your Behat tests&lt;/p>
&lt;h2 id="the-trait">The Trait&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php
trait TokenFaker {
public function checkForTokens($arg)
{
$arg = str_replace($this-&amp;gt;replaceAbleTokens(), $this-&amp;gt;loadTokensValues(), $arg);
return $arg;
}
protected function replaceAbleTokens()
{
return array_merge($this-&amp;gt;getManualTokensKeys(), $this-&amp;gt;getEnvTokensKeys());
}
protected function getManualTokensKeys()
{
return [
'TOKEN_EMAIL',
'TOKEN_UUID',
'TOKEN_USERNAME',
'TOKEN_URL'];
}
protected function loadTokensValues()
{
return array_merge($this-&amp;gt;getManualTokenValues(), $this-&amp;gt;getEnvTokensValues());
}
protected function getManualTokenValues()
{
return [
$this-&amp;gt;faker-&amp;gt;email,
$this-&amp;gt;faker-&amp;gt;uuid,
$this-&amp;gt;faker-&amp;gt;word,
$this-&amp;gt;faker-&amp;gt;url
];
}
protected function getEnvTokensValues()
{
return array_values($_ENV);
}
protected function getEnvTokensKeys()
{
return array_keys($_ENV);
}
}
&lt;/code>&lt;/pre>&lt;h2 id="the-feature-context">The Feature Context&lt;/h2>
&lt;p>In my Feature Context I setup Faker and instantiate it and use the trait&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Faker\Factory as Faker;
class BaseContext extends MinkContext {
use TokenFaker;
public function __construct($parameters = [])
{
$this-&amp;gt;faker = Faker::create();
}
&lt;/code>&lt;/pre>&lt;h2 id="the-step">The Step&lt;/h2>
&lt;p>Here is one example but you could pass all your args through this&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^I have the payload:$/
*/
public function iHaveThePayload(PyStringNode $requestPayload)
{
$this-&amp;gt;requestPayload = $this-&amp;gt;checkForTokens($requestPayload);
}
&lt;/code>&lt;/pre>&lt;h2 id="and-the-scenario">And The Scenario&lt;/h2>
&lt;pre>&lt;code> Scenario: Can Create a Person
Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{ &amp;quot;data&amp;quot;:
{
&amp;quot;email&amp;quot;: &amp;quot;TOKEN_EMAIL&amp;quot;,
&amp;quot;roles&amp;quot;: [
{ &amp;quot;id&amp;quot;: &amp;quot;role-manager&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Manager&amp;quot; }
]
}
}
&amp;quot;&amp;quot;&amp;quot;
Scenario: How do I get a token
Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{
&amp;quot;password&amp;quot;: &amp;quot;ADMIN_PASS&amp;quot;,
&amp;quot;grant_type&amp;quot;: &amp;quot;password&amp;quot;,
&amp;quot;client_id&amp;quot;: &amp;quot;CLIENT_ID&amp;quot;,
&amp;quot;client_secret&amp;quot;: &amp;quot;CLIENT_SECRET&amp;quot;,
&amp;quot;username&amp;quot;: &amp;quot;ADMIN_USERNAME&amp;quot;
}
&amp;quot;&amp;quot;&amp;quot;
And I request &amp;quot;POST /oauth/access_token&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
&lt;/code>&lt;/pre>&lt;p>I would like to also save the state of the token made so I can check that the update/post really worked etc. But for now this makes it super easy to not reseed with every step and not worry about duplicate ids.&lt;/p></description><category>behat</category><category>bdd</category></item><item><title>Using a BurnDown Chart to Pace Yourself</title><link>https://alfrednutile.info/posts/139/</link><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/139/</guid><description>&lt;p>A sprint starts and you feel unsure or overly sure of being able to complete all the work in that sprint. And depending on that you crank at the start working long hours in stress of not getting done in time or not enough focus (too much twitter) thinking you have it under control only to stress at the end of the sprint! It would be as if I started out for a jog not knowing how long the route was in a full sprint. I need to pace myself to do it well.&lt;/p>
&lt;p>This chart has helped me a ton to not only help pace myself but to simplify what I track. &lt;a href="http://joel.inpointform.net/software-development/burn-down-charts-tutorial-simple-agile-project-tracking/">Joel Wenzel&lt;/a> has a post that covers the using his spreadsheet to do a simple burndown. He points out in the post that you just need to focus on marking tasks Complete and not trying to track how complete, or how long did it really take.&lt;/p>
&lt;p>His post makes it super clear and I added this video as well.&lt;/p>
&lt;p>&lt;a href="http://youtu.be/RrhDqtHQudw">&lt;img src="https://dl.dropboxusercontent.com/s/5xuog6xr3y6s16e/chart_sc.png?dl=0" alt="chart">&lt;/a>&lt;/p></description><category>freelance</category><category>developer</category></item><item><title>Behat and PhantomJs</title><link>https://alfrednutile.info/posts/138/</link><pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/138/</guid><description>&lt;h1 id="using-phantomjs-both-with-selenium-and-in-replace-of-selenium">Using PhantomJS both with Selenium and in replace of Selenium&lt;/h1>
&lt;h2 id="with-selenium">With Selenium&lt;/h2>
&lt;p>Here is my example behat profile for this one&lt;/p>
&lt;pre>&lt;code>phantom_via_selenium:
paths:
features: app/tests/acceptance/features/ui
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: https://behat.dev:443
asset_path: '/tmp/'
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte:
guzzle_parameters:
curl.options:
CURLOPT_SSL_VERIFYPEER: false
CURLOPT_CERTINFO: false
CURLOPT_TIMEOUT: 120
ssl.certificate_authority: false
selenium2:
wd_host: &amp;quot;http://selenium-server.dev:4444/wd/hub&amp;quot;
capabilities:
browser: phantomjs
base_url: 'https://behat.dev:443'
browser_name: 'phantomjs'
&lt;/code>&lt;/pre>&lt;p>And as usual you start up selenium.&lt;/p>
&lt;p>In both cases the test is this one&lt;/p>
&lt;pre>&lt;code>@javascript @thisone
Feature: Testing
Scenario: Testing Wiki
Given I am on &amp;quot;http://en.wikipedia.org/wiki/Main_Page&amp;quot;
Then I should see &amp;quot;Wiki&amp;quot;
And I take a screenshot
&lt;/code>&lt;/pre>&lt;p>This allows me to take screenshots as well &lt;a href="https://dl.dropboxusercontent.com/u/54803135/phantom.jpg">screenshot&lt;/a>
which is super handy.&lt;/p>
&lt;p>Also note &lt;code>http://selenium-server.dev:4444/wd/hub&lt;/code> works because in my /etc/hosts file I set 127.0.0.1 to be that domain. You could easily do &lt;code>http://127.0.0.1:4444/wd/hub&lt;/code>&lt;/p>
&lt;h2 id="without-selenium">Without Selenium&lt;/h2>
&lt;p>This one will now run via phantom as the &amp;ldquo;selenium&amp;rdquo; server&lt;/p>
&lt;pre>&lt;code>phantom_ui:
paths:
features: app/tests/acceptance/features/ui
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: https://behat.dev:443
asset_path: '/tmp/'
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte:
guzzle_parameters:
curl.options:
CURLOPT_SSL_VERIFYPEER: false
CURLOPT_CERTINFO: false
CURLOPT_TIMEOUT: 120
ssl.certificate_authority: false
selenium2:
wd_host: &amp;quot;http://localhost:8643/wd/hub&amp;quot;
capabilities:
browser: phantomjs
base_url: 'https://behat.dev:443'
browser_name: 'phantomjs'
&lt;/code>&lt;/pre>&lt;p>This is really thanks to &lt;a href="http://shashikantjagtap.net/running-behat-scenarios-with-pahntomjs/">http://shashikantjagtap.net&lt;/a>&lt;/p>
&lt;p>Running phantom in the background as &lt;code>phantomjs --webdriver=8643&lt;/code>&lt;/p>
&lt;h2 id="coming-up">Coming up&lt;/h2>
&lt;h3 id="self-signed-ssl">Self Signed SSL&lt;/h3>
&lt;h3 id="render-tree-dumps-of-the-site-for-later-parsing">Render Tree dumps of the site for later parsing&lt;/h3></description><category>behat</category><category>phantom</category></item><item><title>PHP Error: Maximum function nesting level of '100' reached, aborting Behat</title><link>https://alfrednutile.info/posts/137/</link><pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/137/</guid><description>&lt;p>This started to happen on Codeship and local for me and other developers. Though one developer had a higher setting for max nesting as noted &lt;a href="http://stackoverflow.com/questions/17488505/php-error-maximum-function-nesting-level-of-100-reached-aborting">here&lt;/a> I wanted to not worry about this so I just locked down Symfony and Behat in our composer.json file&lt;/p>
&lt;pre>&lt;code> &amp;quot;require-dev&amp;quot;: {
&amp;quot;symfony/dependency-injection&amp;quot;: &amp;quot;2.7.x-dev#9fcd589dfb67697f1e3e34611b97eb1be2cd85be&amp;quot;,
&amp;quot;php-vcr/php-vcr&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;phpunit/phpunit&amp;quot;: &amp;quot;~4.0&amp;quot;,
&amp;quot;phpspec/phpspec&amp;quot;: &amp;quot;~2.1&amp;quot;,
&amp;quot;php-vcr/phpunit-testlistener-vcr&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;mockery/mockery&amp;quot;: &amp;quot;*@dev&amp;quot;,
&amp;quot;fzaninotto/faker&amp;quot;: &amp;quot;*&amp;quot;,
&amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;4.*&amp;quot;,
&amp;quot;pda/pheanstalk&amp;quot;: &amp;quot;~3.0&amp;quot;,
&amp;quot;knplabs/github-api&amp;quot;: &amp;quot;1.2.1&amp;quot;,
&amp;quot;way/generators&amp;quot;: &amp;quot;~3.0&amp;quot;,
&amp;quot;symfony/Yaml&amp;quot;:&amp;quot;2.1.x-dev&amp;quot;,
&amp;quot;behat/behat&amp;quot;: &amp;quot;dev-master#ec1e3890d3753908695483ca1f3cf7304c02251f&amp;quot;,
&amp;quot;behat/mink&amp;quot;: &amp;quot;dev-master#30014f0a15579176b7fca879cb461aad900f4db5&amp;quot;,
&amp;quot;behat/mink-extension&amp;quot;: &amp;quot;dev-master#ba5329be65a816adfc2d9ba9b639a92f548371da&amp;quot;,
&amp;quot;laracasts/behat-laravel-extension&amp;quot;: &amp;quot;dev-master#205a3d217d33d4315d20d0f3497edd65a8b5443e&amp;quot;
},
&lt;/code>&lt;/pre>&lt;p>And then&lt;/p>
&lt;pre>&lt;code>rm -rf vendor composer.lock &amp;amp;&amp;amp; composer install
&lt;/code>&lt;/pre>&lt;p>And &lt;code>bin/behat -dl&lt;/code> and other behat tests worked again&lt;/p></description><category>behat</category><category>laravel</category></item><item><title>Iron.io Laravel and Workers, Microservices</title><link>https://alfrednutile.info/posts/136/</link><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/136/</guid><description>&lt;p>We are starting to use Iron.io and their workers for a lot of the tasks that our apps need to do. For example one app needs to scan websites for images and text and report on them. In our case that is 2 workers, one with the code needed to get the text we want and the other images. Another worker runs behat tests to take screenshots and reports back to the called with the results.&lt;/p>
&lt;p>Using Iron.io has made this whole process easy and scalable. One request can be for say 100 urls and with Iron.io we can run one worker per url or using the Symfony Process library we can even use a worker to run a multi-threaded processes.&lt;/p>
&lt;p>Some of the resources out there like &lt;a href="https://github.com/iron-io/iron_worker_examples/tree/master/php/laravel">iron`s example&lt;/a> are great. And using &lt;a href="https://github.com/iron-io/laraworker">this&lt;/a> library has made it super easy. Below I cover how exactly to set this up. (hopefully this week we will have a Laravel 5 version of it out)&lt;/p>
&lt;h2 id="step-1-install">Step 1 Install&lt;/h2>
&lt;p>Install 4.2 work. (5 might be ready soon)&lt;/p>
&lt;pre>&lt;code>composer create-project laravel/laravel=4.2 example_worker --prefer-dist
&lt;/code>&lt;/pre>&lt;p>Set your minimum stability in your composer.json&lt;/p>
&lt;pre>&lt;code> },
&amp;quot;config&amp;quot;: {
&amp;quot;preferred-install&amp;quot;: &amp;quot;dist&amp;quot;
},
&amp;quot;minimum-stability&amp;quot;: &amp;quot;dev&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Then pull in the library&lt;/p>
&lt;pre>&lt;code>composer require iron-io/laraworker
&lt;/code>&lt;/pre>&lt;p>And add this one patch for PHP 5.6 &lt;strong>TODO add code snippet&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/iron-io/laraworker/issues/5">https://github.com/iron-io/laraworker/issues/5&lt;/a>&lt;/p>
&lt;p>and&lt;/p>
&lt;p>&lt;a href="https://github.com/iron-io/iron_core_php/blob/master/src/IronCore.php#L269">https://github.com/iron-io/iron_core_php/blob/master/src/IronCore.php#L269&lt;/a>&lt;/p>
&lt;p>And of course as the readme.md notes for Laraworker&lt;/p>
&lt;pre>&lt;code>php vendor/iron-io/laraworker/LaraWorker.php -i true
&lt;/code>&lt;/pre>&lt;p>As the developer notes this makes a new folder and file&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/workers/libs/worker_boot.php">/worker/libs/worker_boot.php&lt;/a>
and
&lt;a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/workers/ExampleLaraWorker.php">/worker/ExampleLaraWorker.php&lt;/a>&lt;/p>
&lt;h2 id="step-2-configure">Step 2 Configure&lt;/h2>
&lt;p>We will use the .env to do configuration not the way noted in the laraworker docs so lets install that. Just use &lt;a href="https://alfrednutile.info/posts/113">this post&lt;/a> to set that up.&lt;/p>
&lt;p>So after you are done your, as in the Laraworker docs, we need to set the queue config.&lt;/p>
&lt;blockquote>
&lt;p>Set Iron.io credentials in app/config/queue.php and set default to iron &amp;ndash;&amp;gt; &amp;lsquo;default&amp;rsquo; =&amp;gt; &amp;lsquo;iron&amp;rsquo;,&lt;/p>
&lt;/blockquote>
&lt;p>So yours will look like&lt;/p>
&lt;pre>&lt;code># https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/config/queue.php
'default' =&amp;gt; getenv('QUEUE_DRIVER'),
'connections' =&amp;gt; array(
'iron' =&amp;gt; array(
'driver' =&amp;gt; 'iron',
'host' =&amp;gt; 'mq-aws-us-east-1.iron.io',
'token' =&amp;gt; getenv('IRON_TOKEN'),
'project' =&amp;gt; getenv('IRON_PROJECT_ID'),
'queue' =&amp;gt; 'your-queue-name',
'encrypt' =&amp;gt; true,
),
),
&lt;/code>&lt;/pre>&lt;p>Then make your project on Iron and get the Token and Project ID&lt;/p>
&lt;h2 id="step-3-see-if-example-worker-works">Step 3 See if Example Worker works&lt;/h2>
&lt;p>Lets see if the Example works before we move forward.&lt;/p>
&lt;pre>&lt;code>php artisan ironworker:upload --worker_name=ExampleLaraWorker --exec_worker_file_name=ExampleLaraWorker.php
&lt;/code>&lt;/pre>&lt;p>If it worked you will see&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/example_command.png" alt="example">&lt;/p>
&lt;p>This will upload a worker related queue&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/example_queue.png" alt="example">&lt;/p>
&lt;h2 id="step-4-make-our-own-worker">Step 4 Make our own worker!&lt;/h2>
&lt;p>The goal of this worker&lt;/p>
&lt;ul>
&lt;li>It will get a JSON object of the info needed to do a job&lt;/li>
&lt;li>It will do the job by getting the json file from the S3 file system where it lives (it could live in a db or other location)&lt;/li>
&lt;li>Using the JSON object&amp;rsquo;s callback it will send back the results to the caller&lt;/li>
&lt;/ul>
&lt;p>That is it.&lt;/p>
&lt;p>This example will be used in real life to later on parse say 100 urls for already created json render tree objects of the urls data including images and text. This job only cares about the text. Cause the job is fairly easy I will be sending to each worker 5 urls to process.&lt;/p>
&lt;h3 id="copy-the-worker-in-workers-folder-to-the-new-worker-name">Copy the worker in /workers folder to the new Worker name&lt;/h3>
&lt;p>Due to bad naming abilities I am calling this &lt;code>RenderTreeTextGrepper.php&lt;/code>&lt;/p>
&lt;p>So now my worker folder has&lt;/p>
&lt;pre>&lt;code>RenderTreeTextGrepper.php
&lt;/code>&lt;/pre>&lt;p>But I do not want that class to have all my code so I will start to build out a namespace for all of this and the 2 classes I want to manage ALL of this work.&lt;/p>
&lt;h3 id="class-1-fire">Class 1 @fire&lt;/h3>
&lt;p>So the worker will fire the class I have to handle all of this.&lt;/p>
&lt;pre>&lt;code> &amp;quot;autoload&amp;quot;: {
&amp;quot;classmap&amp;quot;: [
&amp;quot;app/commands&amp;quot;,
&amp;quot;app/controllers&amp;quot;,
&amp;quot;app/models&amp;quot;,
&amp;quot;app/database/migrations&amp;quot;,
&amp;quot;app/database/seeds&amp;quot;,
&amp;quot;app/tests/TestCase.php&amp;quot;
],
&amp;quot;psr-4&amp;quot;: {
&amp;quot;AlfredNutileInc\\RenderTreeTextGrepperWorker\\&amp;quot;: &amp;quot;app/&amp;quot;
}
},
&lt;/code>&lt;/pre>&lt;p>then&lt;/p>
&lt;pre>&lt;code>composer dump
&lt;/code>&lt;/pre>&lt;p>Then in &lt;code>app/RenderTreeTextGrepperWorker&lt;/code> folder I have&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/example_folders.png" alt="example_folder">&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/RenderTreeTextGrepperWorker/RenderTreeGrepperHandler.php">/projects/example_worker/app/RenderTreeTextGrepperWorker/RenderTreeGrepperHandler.php&lt;/a> is the class to handle the incoming request and process it.&lt;/p>
&lt;h3 id="class-2-event-listener">Class 2 Event Listener&lt;/h3>
&lt;p>Then I register the event listener with the app/config/app.php to make it easier to handle the results of the output. You can do all of this in class 1
as well.&lt;/p>
&lt;pre>&lt;code>#app/config/app.php
'AlfredNutileInc\RenderTreeTextGrepperWorker\GrepCallbackListener'
&lt;/code>&lt;/pre>&lt;p>And that is it.&lt;/p>
&lt;p>What is it?&lt;/p>
&lt;p>So we are going to upload and run this and here is what will happen. NO WAIT!&lt;/p>
&lt;p>First lets make a test so we can see locally if all the logic is there.&lt;/p>
&lt;h3 id="local-test">Local Test&lt;/h3>
&lt;p>Just a quick test to see if the handler will handle things and pass results&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
class RenderTreeTextTest extends \TestCase {
/**
* @test
*/
public function should_populate_results()
{
$handle = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeGrepperHandler();
$payload = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO(
'foo-bar',
['foo', 'bar', 'baz'],
['text1', 'text2'],
[
'caller' =&amp;gt; 'http://someposturl.dev/rendertree_results',
'params' =&amp;gt; ['foo', 'bar']
],
false,
false
);
$results = $handle-&amp;gt;handle($payload);
var_dump($results);
$this-&amp;gt;assertNotNull($results);
}
}
&lt;/code>&lt;/pre>&lt;p>Running this&lt;/p>
&lt;pre>&lt;code>phpunit --filter=should_populate_results
&lt;/code>&lt;/pre>&lt;p>Produces this&lt;/p>
&lt;pre>&lt;code> class AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO#334 (6) {
public $uuid =&amp;gt;
string(7) &amp;quot;foo-bar&amp;quot;
public $urls =&amp;gt;
array(3) {
[0] =&amp;gt;
string(3) &amp;quot;foo&amp;quot;
[1] =&amp;gt;
string(3) &amp;quot;bar&amp;quot;
[2] =&amp;gt;
string(3) &amp;quot;baz&amp;quot;
}
public $text =&amp;gt;
array(2) {
[0] =&amp;gt;
string(5) &amp;quot;text1&amp;quot;
[1] =&amp;gt;
string(5) &amp;quot;text2&amp;quot;
}
public $callback =&amp;gt;
array(2) {
'caller' =&amp;gt;
string(41) &amp;quot;http://someposturl.dev/rendertree_results&amp;quot;
'params' =&amp;gt;
array(2) {
...
}
}
public $results =&amp;gt;
array(1) {
[0] =&amp;gt;
string(21) &amp;quot;Listener is listening&amp;quot;
}
public $status =&amp;gt;
bool(false)
}
}
&lt;/code>&lt;/pre>&lt;p>Of course I need to go into more testing for the two classes to see how they react to different data going in but just to see that there are not obvious issues before I upload the worker.&lt;/p>
&lt;h3 id="upload-the-worker-we-just-made">Upload the worker we just made&lt;/h3>
&lt;pre>&lt;code>php artisan ironworker:upload --worker_name=RenderTreeTextGrepper --exec_worker_file_name=RenderTreeTextGrepper.php
&lt;/code>&lt;/pre>&lt;p>And then we see on Iron.io&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/example_worker_run.png" alt="new worker">&lt;/p>
&lt;p>Then we run it&lt;/p>
&lt;pre>&lt;code>php artisan ironworker:run --queue_name=RenderTreeTextGrepper
&lt;/code>&lt;/pre>&lt;p>Before that though I updated &lt;a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/commands/RunWorker.php#L26">app/commands/RunWorker.php:26&lt;/a> to make a better payload&lt;/p>
&lt;pre>&lt;code> public function fire()
{
$queue_name = $this-&amp;gt;option('queue_name');
$payload = &amp;quot;This is Hello World payload :)&amp;quot;;
if($queue_name == 'RenderTreeTextGrepper')
{
$payload = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO(
'foo-bar',
['foo', 'bar', 'baz'],
['text1', 'text2'],
[
'caller' =&amp;gt; 'http://someposturl.dev/rendertree_results',
'params' =&amp;gt; ['foo', 'bar']
],
false,
false
);
}
&lt;/code>&lt;/pre>&lt;p>We then see the Task&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/task.png" alt="task">&lt;/p>
&lt;p>And the example log output&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/u/54803135/log.png" alt="log">&lt;/p>
&lt;h2 id="guzzle-and-the-callback">Guzzle and the Callback&lt;/h2>
&lt;p>How to format the callback?&lt;/p>
&lt;p>Let&amp;rsquo;s require guzzle&lt;/p>
&lt;pre>&lt;code>composer require guzzlehttp/guzzle
&lt;/code>&lt;/pre>&lt;p>At this point we have a working example. The queue takes the json and the worker processes it!&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/RenderTreeTextGrepperWorker/GrepCallbackListener.php">/projects/example_worker/app/RenderTreeTextGrepperWorker/GrepCallbackListener.php&lt;/a>&lt;/p>
&lt;p>Thanks to the library and Iron.io it really is that simple.&lt;/p></description><category>microservices</category><category>laravel</category><category>iron.io</category></item><item><title>Multi Domain Nginx Redirect</title><link>https://alfrednutile.info/posts/135/</link><pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/135/</guid><description>&lt;p>&lt;a href="http://wordpress.stackexchange.com/questions/106445/multisite-redirect-loop-for-a-single-www-domain">http://wordpress.stackexchange.com/questions/106445/multisite-redirect-loop-for-a-single-www-domain&lt;/a>&lt;/p>
&lt;p>Basically the site went from foo-prod.stagingarea.us to wearelive.com but since it was an internal app I wanted to make sure the old url still worked and redirected as needed to the new url&lt;/p>
&lt;pre>&lt;code>server {
listen 80;
server_name foo-prod.stagingarea.us;
return 301 https://$host$request_uri;
}
server {
listen 443;
server_name foo-prod.stagingarea.us;
if ($host ~* ^foo-prod.stagingarea.us) {
rewrite ^(.*)$ https://wearelive.com$1 permanent;
}
&lt;/code>&lt;/pre>&lt;p>Interesting note is server_name does not contain the primary name wearlive.com&lt;/p></description><category>note2self</category></item><item><title>Sending Dates to Angular from Laravel</title><link>https://alfrednutile.info/posts/134/</link><pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/134/</guid><description>&lt;p>This might not be ideal but so far it allows me to more easily sort dates and filter dates in Angular.&lt;/p>
&lt;p>From the Laravel model I add these two methods&lt;/p>
&lt;pre>&lt;code>
/**
* See docs http://laravel.com/docs/5.0/eloquent#date-mutators
*/
public function getDates()
{
return array('created_at');
}
public function getCreatedAtAttribute($attr) {
return Carbon::parse($attr)-&amp;gt;timestamp; //Change the format to whichever you desire
}
&lt;/code>&lt;/pre>&lt;p>Then in Angular I can use the filters&lt;/p>
&lt;pre>&lt;code>{{ vm.created_at | date:'medium'}}
&lt;/code>&lt;/pre></description><category>laravel</category><category>angular</category></item><item><title>Dealing with Oauth2 Server and Laravel for both a local app login and for remote apps using Lucadegasperi/oauth2-server-laravel</title><link>https://alfrednutile.info/posts/133/</link><pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/133/</guid><description>&lt;p>This is all based around this library &lt;a href="https://github.com/lucadegasperi/oauth2-server-laravel">https://github.com/lucadegasperi/oauth2-server-laravel&lt;/a>&lt;/p>
&lt;p>I am building and API to be used by an iOs and Android client I will be making soon. &lt;strong>But&lt;/strong> I also needed the filter system to deal with my local Laravel view that was using the api via an Angular driven widget so the user can go to the website as well.&lt;/p>
&lt;p>So the website is where the user can go to do change settings, subscription updates etc, but in that case they are logged in via the Laravel login form. From there they land on the profile page where the Angular widget will do n xhr request to the api to fill in the table/settings.&lt;/p>
&lt;p>The routes ends up looking like this&lt;/p>
&lt;pre>&lt;code>
Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});
//The view they see using Laravel Blade and an embedded angular widget
Route::get('profile', ['middleware' =&amp;gt; 'auth', 'uses' =&amp;gt; 'ProfileController@getProfile']);
//The API
Route::group(['prefix' =&amp;gt; 'api/v1', 'before' =&amp;gt; 'oauth|setUser|auth'], function() {
Route::get('profile', 'ProfileController@getApiProfile');
});
&lt;/code>&lt;/pre>&lt;p>The thing is the Oauth2 filter was causing some issues&lt;/p>
&lt;p>1 Looks for a access_token query string or header
2 Does not load the user like I need&lt;/p>
&lt;p>The first issue I just made a class to extend the core filter for the Oauth2 library.&lt;/p>
&lt;h3 id="my-provider">My provider&lt;/h3>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Providers;
use App\Filters\OauthTotalRecalls;
use Illuminate\Support\ServiceProvider;
class OauthFilterProvider extends ServiceProvider {
public function boot()
{
$this-&amp;gt;app-&amp;gt;bindShared('LucaDegasperi\OAuth2Server\Filters\OAuthFilter', function ($app) {
$httpHeadersOnly = $app['config']-&amp;gt;get('oauth2.http_headers_only');
return new OauthTotalRecalls($app['oauth2-server.authorizer'], $httpHeadersOnly);
});
}
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
// TODO: Implement register() method.
}
}
&lt;/code>&lt;/pre>&lt;p>Then I register that in my app.conf after I register his.&lt;/p>
&lt;h3 id="my-filter">My Filter&lt;/h3>
&lt;p>It overrides the filter to do one thing and that is to check if the user is a guest. Which they would not be if they are logging in via the Laravel login form.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Filters;
use Illuminate\Support\Facades\Auth;
use LucaDegasperi\OAuth2Server\Filters\OAuthFilter;
class OauthTotalRecalls extends OAuthFilter {
/**
* Run the oauth filter
*
* @internal param mixed $route, mixed $request, mixed $scope,...
* @return void a bad response in case the request is invalid
*/
public function filter()
{
if(Auth::guest())
{
if (func_num_args() &amp;gt; 2) {
$args = func_get_args();
$this-&amp;gt;scopes = array_slice($args, 2);
}
$this-&amp;gt;authorizer-&amp;gt;validateAccessToken($this-&amp;gt;httpHeadersOnly);
$this-&amp;gt;validateScopes();
}
}
}
&lt;/code>&lt;/pre>&lt;h3 id="loading-user">Loading user&lt;/h3>
&lt;p>So at this point the user is logged in via Laravel so the Auth::user() is fully set. But lastly if this was the token based log in the &amp;ldquo;setUser&amp;rdquo; filter will kick in and load the user from the token. If the token is wrong then this all will fail.&lt;/p>
&lt;pre>&lt;code>Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});
&lt;/code>&lt;/pre></description><category>oauth</category><category>laravel</category><category>apis</category></item><item><title>Simple Look at Laravel Events</title><link>https://alfrednutile.info/posts/132/</link><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/132/</guid><description>&lt;h1 id="events">Events&lt;/h1>
&lt;h2 id="getting-started">Getting Started&lt;/h2>
&lt;p>This is part of a larger &lt;a href="https://github.com/alnutile/laravel_guide/blob/master/index.md">Laravel Guide&lt;/a> I am working on in this case the example is in the Events &lt;a href="https://github.com/alnutile/laravel_guide/tree/master/projects/events">folder&lt;/a>&lt;/p>
&lt;p>Start the example&lt;/p>
&lt;pre>&lt;code>php artisan serve --port=8081
&lt;/code>&lt;/pre>&lt;p>Then visit&lt;/p>
&lt;pre>&lt;code>http://localhost:8081/example1
&lt;/code>&lt;/pre>&lt;p>So if you look in&lt;/p>
&lt;pre>&lt;code>app/routes.php
&lt;/code>&lt;/pre>&lt;p>You see route example1 will fire and event and there are two listeners&lt;/p>
&lt;h2 id="do-they-run-async-or-sync">Do they run async or sync&lt;/h2>
&lt;p>If you hit that &lt;a href="http://localhost:8081/example1">route&lt;/a> you see the sleep taking effect so it is syncronous&lt;/p>
&lt;p>See in the image below an example. I reload the page and the results are staggered by the sleep amount in the route.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/events_delay.png" alt="sleep">&lt;/p>
&lt;p>On the left I have&lt;/p>
&lt;pre>&lt;code>php artisan tail
&lt;/code>&lt;/pre>&lt;p>Here is the route&lt;/p>
&lt;pre>&lt;code>Event::listen('example1', function()
{
sleep(5);
Log::info(&amp;quot;Event one is Triggered&amp;quot;);
});
Event::listen('example1', function()
{
sleep(5);
Log::info(&amp;quot;Event two is Triggered&amp;quot;);
});
Route::get('/example1', function()
{
Event::fire('example1');
return &amp;quot;Event Example 1&amp;quot;;
});
&lt;/code>&lt;/pre>&lt;p>So if you did not want to hold up the process you would place these into a queue.&lt;/p>
&lt;h2 id="passing-data-to-events">Passing data to events&lt;/h2>
&lt;p>How can Event 1 alter Event 2 and Event 3&lt;/p>
&lt;p>See route would be &lt;a href="http://localhost:8081/example2">/example2&lt;/a>&lt;/p>
&lt;p>Also there is a registered event listener seen in the route file
that&lt;/p>
&lt;pre>&lt;code>$subscriber = new \Acme\ExampleEventHandler;
Event::subscribe($subscriber);
&lt;/code>&lt;/pre>&lt;p>Which shows how that made it hard to pass a state&lt;/p>
&lt;pre>&lt;code>$subscriber = new \Acme\ExampleEventHandler;
Event::subscribe($subscriber);
Event::listen('example2', function($state)
{
$state-&amp;gt;total = $state-&amp;gt;total + 5;
var_dump(sprintf(&amp;quot;From The listener one state %s &amp;lt;br&amp;gt;&amp;quot;, $state-&amp;gt;total));
Log::info(sprintf(&amp;quot;Event two listener 1 is Triggered total %s&amp;quot;, $state-&amp;gt;total));
});
Event::listen('example2', function($state)
{
$state-&amp;gt;total = $state-&amp;gt;total + 5;
var_dump(sprintf(&amp;quot;From The listener two state %s &amp;lt;br&amp;gt;&amp;quot;, $state-&amp;gt;total));
Log::info(sprintf(&amp;quot;Event two listener 2 is Triggered total %s&amp;quot;, $state-&amp;gt;total));
});
Route::get('/example2', function()
{
$state = new stdClass();
$state-&amp;gt;total = 0;
Event::fire('example2', array($state));
return sprintf(&amp;quot;Event Example 2 data total state %s&amp;quot;, $state-&amp;gt;total);
});
&lt;/code>&lt;/pre>&lt;p>This one you just see in the browser&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/example2.png" alt="example2">&lt;/p></description><category>laravel</category><category>events</category><category>php</category></item><item><title>Laravel-Flysystem and Creating Time Limited Public Urls on S3</title><link>https://alfrednutile.info/posts/131/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/131/</guid><description>&lt;p>We needed to offer timed links to the urls and we are using &lt;a href="https://github.com/GrahamCampbell/Laravel-Flysystem">Laravel-Flysystem&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/crypticsymbols">Aaron Smith&lt;/a> found this &lt;a href="https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php">how to&lt;/a> but I wanted it to work with existing use of FlySystem.&lt;/p>
&lt;p>I ended up moving the code into a trait so we could use this one feature&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace AlfredNutileInc\CoreApp\Helpers;
use GrahamCampbell\Flysystem\Facades\Flysystem;
use Illuminate\Support\Facades\Log;
trait S3Helper {
protected $path_for_assets;
protected $expire_time;
public $driver = 'awss3';
/**
* @return string
*/
public function getDriver()
{
return $this-&amp;gt;driver;
}
/**
* @param string $driver
*/
public function setDriver($driver)
{
$this-&amp;gt;driver = $driver;
}
public function iterateOverFiles($files)
{
foreach($files as $key =&amp;gt; $file)
{
if(isset($file['path'])) {
$files[$key]['url'] = $this-&amp;gt;getSignedUrl($file['path']);
}
}
return $files;
}
protected function getFiles()
{
$this-&amp;gt;path_for_assets = $this-&amp;gt;project_id . '/' . $this-&amp;gt;id;
$files = Flysystem::listContents($this-&amp;gt;path_for_assets);
if(!$files)
return [];
return $this-&amp;gt;iterateOverFiles($files);
}
/**
* https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php
*/
protected function getSignedUrl($filename)
{
$awsKeyId = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['key'];
$awsSecret = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['secret'];
$expires = $this-&amp;gt;getExpireTime();
$httpVerb = &amp;quot;GET&amp;quot;;
$contentMD5 = &amp;quot;&amp;quot;;
$contentType = &amp;quot;&amp;quot;;
$amzHeaders = &amp;quot;&amp;quot;;
$amzResource = &amp;quot;/&amp;quot; . Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['bucket'] . &amp;quot;/&amp;quot; . $filename;
$request = sprintf(&amp;quot;%s\n%s\n%s\n%s\n%s%s&amp;quot; , $httpVerb , $contentMD5 , $contentType , $expires , $amzHeaders , $amzResource );
$base64signed = urlencode(base64_encode( hash_hmac( 'sha1' , $request, $awsSecret , true ) ));
$url = &amp;quot;http://s3.amazonaws.com%s?AWSAccessKeyId=%s&amp;amp;Expires=%s&amp;amp;Signature=%s&amp;quot;;
$url = sprintf( $url , $amzResource , $awsKeyId , $expires , $base64signed );
return $url;
}
public function setExpireTime($time = false)
{
if($time == false)
{
$time = time() + (10*60);
}
$this-&amp;gt;expire_time = $time;
}
public function getExpireTime()
{
if($this-&amp;gt;expire_time == false)
{
$this-&amp;gt;setExpireTime();
}
return $this-&amp;gt;expire_time;
}
}
&lt;/code>&lt;/pre>&lt;p>Ideally seconds could be passed in too.&lt;/p>
&lt;p>Then in any model/repo I can use it like this&lt;/p>
&lt;pre>&lt;code> public function assets()
{
try
{
$files = $this-&amp;gt;getFiles();
return ['images' =&amp;gt; $files, 'videos' =&amp;gt; []];
} catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error getting files %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category></item><item><title>Laravel Behat and Selenium</title><link>https://alfrednutile.info/posts/130/</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/130/</guid><description>&lt;p>Laracasts has some great videos and libraries for Laravel 5 and Behat integration.&lt;/p>
&lt;p>Examples&lt;/p>
&lt;p>&lt;a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension&lt;/a>&lt;/p>
&lt;p>and&lt;/p>
&lt;p>&lt;a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs&lt;/a>&lt;/p>
&lt;p>Two things that I still need and get from this though that I do not think I can get from those are&lt;/p>
&lt;ul>
&lt;li>Laravel 4.2 support which obviously is not going to work with the above L5 libraries :)&lt;/li>
&lt;li>Mocking APIs when running under APP_ENV=local or testing&lt;/li>
&lt;/ul>
&lt;p>Also I think with the libraries above only goutte drivers work for the APP_ENV setting.&lt;/p>
&lt;h2 id="dealing-with-apis">Dealing with APIs&lt;/h2>
&lt;p>We use a lot of APIs. One for example is Github so make a provider like this&lt;/p>
&lt;h3 id="the-provider">The Provider&lt;/h3>
&lt;p>I register an API Provider like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace BehatEditor\Services;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;
class GitApiServiceProvider extends ServiceProvider {
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(App::environment() == 'testing' || Config::get('app.mock') == true)
{
$this-&amp;gt;app-&amp;gt;singleton('GithubClientInstance', function($app){
$git = new GithubApiMockService();
$username = getenv('GIT_USERNAME');
$token = getenv('GIT_TOKEN');
$git-&amp;gt;setUsername($username);
$git-&amp;gt;setToken($token);
$git-&amp;gt;setLogger($app['log']);
$git-&amp;gt;setLogging(true);
$git-&amp;gt;authenticate();
return $git;
});
} else
{
$this-&amp;gt;app-&amp;gt;singleton('GithubClientInstance', function($app){
$git = new GithubApiService();
$username = getenv('GIT_USERNAME');
$token = getenv('GIT_TOKEN');
$git-&amp;gt;setUsername($username);
$git-&amp;gt;setToken($token);
$git-&amp;gt;setLogger($app['log']);
$git-&amp;gt;setLogging(true);
$git-&amp;gt;authenticate();
return $git;
});
}
}
}
&lt;/code>&lt;/pre>&lt;p>The &amp;ldquo;app.mock&amp;rdquo; I set in two places&lt;/p>
&lt;pre>&lt;code>config/local/app.php
&lt;/code>&lt;/pre>&lt;p>and&lt;/p>
&lt;pre>&lt;code>config/testing/app.php
&lt;/code>&lt;/pre>&lt;pre>&lt;code>&amp;lt;?php
return array(
'chat_on' =&amp;gt; false,
'mock' =&amp;gt; true,
'debug' =&amp;gt; true,
'providers' =&amp;gt; append_config(array(
'GuilhermeGuitte\BehatLaravel\BehatLaravelServiceProvider'
))
);
&lt;/code>&lt;/pre>&lt;p>Testing works well for Codeship.&lt;/p>
&lt;p>Then if we have mock as true for local and I run&lt;/p>
&lt;pre>&lt;code>php artisan behat:run --profile=als_local_ui --stop-on-failure ui/people_ui.feature
&lt;/code>&lt;/pre>&lt;p>I can test all my Angular ui for People&lt;/p>
&lt;p>Here is the behat.yml for that, keep in mind I run this from inside of Vagrant (Homestead) and Selenium is running on my Mac thanks to &amp;ldquo;webdriver-manager&amp;rdquo; and brew install chromedriver you can see more on that &lt;a href="https://www.alfrednutile.info/posts/129">here&lt;/a>&lt;/p>
&lt;pre>&lt;code>default:
filters:
tags: &amp;quot;~@wip&amp;quot;
formatter:
name: pretty
parameters:
decorated: true
verbose: false
time: true
language: en
output_path: null
multiline_arguments: true
paths:
features: app/tests/acceptance/features
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: http://behat.dev
asset_path: '/tmp/'
als_local_ui:
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte:
guzzle_parameters:
curl.options:
CURLOPT_SSL_VERIFYPEER: false
CURLOPT_CERTINFO: false
CURLOPT_TIMEOUT: 120
ssl.certificate_authority: false
selenium2:
wd_host: &amp;quot;http://192.168.33.1:4444/wd/hub&amp;quot;
base_url: 'https://admin:foo@behat.dev:44300'
browser_name: chrome
&lt;/code>&lt;/pre>&lt;h3 id="the-mock-class">The Mock Class&lt;/h3>
&lt;p>The mock class just extends the real class but takes over&lt;/p>
&lt;p>If mock is on it looks for a matching fixture file and uses that, else it makes one real call, saves the fixture and then uses that next time.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
namespace BehatEditor\Services;
use AlfredNutileInc\Fixturizer\FixturizerReader;
use BehatEditor\Exceptions\ModelException;
use BehatEditor\Helpers\BuildFileObject;
use BehatEditor\Helpers\ThrowAndLogErrors;
use BehatEditor\Providers\GithubClientInterface;
use Github\Client;
use Github\ResultPager;
use BehatEditor\Interfaces\BehatUIInterface;
use BehatEditor\Repositories\ProjectsRepository;
use Illuminate\Support\Facades\Log;
class GithubApiMockService extends GithubApiService implements GithubClientInterface {
public $sha;
protected $application;
/**
* @var \Github\Client
*/
public $client;
protected $username;
protected $token;
protected $branch;
protected $parent_file;
protected $reponame;
protected $folder;
protected $logging = false;
protected $logger;
/**
* @var RepoSettingRepository
*/
private $repoSettingRepository;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
$this-&amp;gt;path = base_path() . '/tests/fixtures/';
}
public function seeIfRepoHasCustomSteps()
{
$this-&amp;gt;logMock('repo_has_custom_steps');
$results = FixturizerReader::getFixture('git_show_repo_custom_steps.yml', $this-&amp;gt;path);
return $results;
}
&lt;/code>&lt;/pre>&lt;p>I am using this library to quickly make fixtures &lt;a href="https://packagist.org/packages/alfred-nutile-inc/fixturizer">https://packagist.org/packages/alfred-nutile-inc/fixturizer&lt;/a>&lt;/p>
&lt;p>That makes our tests super fast since we are never hitting out APIs like Github, Pusher, etc.&lt;/p>
&lt;p>I cover it &lt;a href="https://www.alfrednutile.info/posts/120">Mocking Queue Service for faster Behat Testing&lt;/a> as well.&lt;/p>
&lt;h2 id="api-testing">API Testing&lt;/h2>
&lt;p>We use Behat to test our API endpoints as seen in the book &lt;a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&amp;rsquo;t Hate&lt;/a>&lt;/p>
&lt;p>For hitting the API we use basic.once&lt;/p>
&lt;pre>&lt;code>#filter.php
Route::filter('basic.once', function()
{
if(Auth::guest())
{
/**
* First authenticate as normal
*/
if ($results = Auth::onceBasic() )
{
return $results;
}
}
});
&lt;/code>&lt;/pre>&lt;p>And the route would be&lt;/p>
&lt;pre>&lt;code>Route::group(['prefix' =&amp;gt; 'api/v1', 'before' =&amp;gt; 'basic.once|auth'], function() {
///routes
}
&lt;/code>&lt;/pre>&lt;p>This allows our Angular app which happens to live inside the same codebase of the API to login using a standar Laravel Form but also allows other apps to access the API (Oauth coming soon)&lt;/p>
&lt;h2 id="reseeding-the-db">Reseeding the DB&lt;/h2>
&lt;p>This step helps with that&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
$env = getenv('APP_ENV');
if(getenv('APP_ENV') != 'production')
{
try
{
if(getenv('APP_ENV') == 'testing')
{
copy(__DIR__ . '/../../../../app/database/stubdb.sqlite', __DIR__ . '/../../../../app/database/testing.sqlite');
}
else
{
exec(&amp;quot;php artisan migrate:refresh --seed -n --env=$env&amp;quot;);
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error seeding the database %s&amp;quot;, $e-&amp;gt;getMessage()));
}
} else {
throw new \Exception(sprintf(&amp;quot;You can not seed production&amp;quot;));
}
}
&lt;/code>&lt;/pre>&lt;p>I cover more on that &lt;a href="https://www.alfrednutile.info/posts/117">PHP quick fixture data for phpunit testing&lt;/a>&lt;/p>
&lt;h2 id="loading-app">Loading APP&lt;/h2>
&lt;p>FeatureContext has a BaseContext that has these methods&lt;/p>
&lt;pre>&lt;code> public function setApp()
{
$app = new Illuminate\Foundation\Application;
$env = $app-&amp;gt;detectEnvironment(
function()
{
if(!getenv('APP_ENV'))
{
Dotenv::load(__DIR__ .'/../../../../');
}
return getenv('APP_ENV');
}
);
$app-&amp;gt;bindInstallPaths(require __DIR__ . '/../../../../bootstrap/paths.php');
$framework = $app['path.base'].
'/vendor/laravel/framework/src';
require $framework.'/Illuminate/Foundation/start.php';
$this-&amp;gt;app = $app;
$this-&amp;gt;app-&amp;gt;boot();
$this-&amp;gt;env = $env;
}
public function getApp()
{
return $this-&amp;gt;app;
}
&lt;/code>&lt;/pre>&lt;p>On the __construct it does&lt;/p>
&lt;pre>&lt;code> public function __construct(array $parameters) {
$config = isset($parameters['guzzle']) &amp;amp;&amp;amp; is_array($parameters['guzzle']) ? $parameters['guzzle'] : [];
$config['base_url'] = (isset($parameters['base_url'])) ? $parameters['base_url'] : false;
$this-&amp;gt;parameters = $parameters;
$this-&amp;gt;client = new Client($config);
$this-&amp;gt;iSetCredentials();
Factory::$factoriesPath = 'app/tests/factories';
$this-&amp;gt;setApp();
}
&lt;/code>&lt;/pre>&lt;h2 id="laracast-testdummy--factories">Laracast TestDummy / Factories&lt;/h2>
&lt;p>One example of using factories is a step like this&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^I create person fixture with &amp;quot;([^&amp;quot;]*)&amp;quot; id$/
*/
public function iCreatePersonFixtureWithId($arg1)
{
Factory::create('TheHub\Profile\User', [ 'id' =&amp;gt; $arg1 ]);
}
&lt;/code>&lt;/pre>&lt;p>Using the Laracast TestDummy library I can quickly stub out data for the test.&lt;/p></description><category>laravel</category><category>php</category><category>behat</category><category>angular</category></item><item><title>Linux, Behat and installing ChromeDriver</title><link>https://alfrednutile.info/posts/129/</link><pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/129/</guid><description>&lt;p>Setting up Chrome driver with Behat and Selenium2&lt;/p>
&lt;h2 id="side-note-for-mac">Side note for Mac&lt;/h2>
&lt;pre>&lt;code>brew install chromedriver
&lt;/code>&lt;/pre>&lt;h2 id="chromedriver">ChromeDriver&lt;/h2>
&lt;p>Once you find the path Chrome was installed you place the driver in there. For Ubuntu 14.04 it was&lt;/p>
&lt;pre>&lt;code>/opt/google/chrome/chromedriver
&lt;/code>&lt;/pre>&lt;p>I got the driver from &lt;a href="https://code.google.com/p/selenium/wiki/ChromeDriver#Overriding_the_Chrome_binary_location">https://code.google.com/p/selenium/wiki/ChromeDriver#Overriding_the_Chrome_binary_location&lt;/a>&lt;/p>
&lt;h2 id="starting-selenium">Starting Selenium&lt;/h2>
&lt;p>I still need to look up and try setting this in the behat.yml for now I just ran it this way&lt;/p>
&lt;pre>&lt;code>java -jar selenium-server-standalone-2.0rc2.jar -Dwebdriver.chrome.driver=/opt/google/chrome/chromedriver
&lt;/code>&lt;/pre>&lt;p>That is it. Now it should work with Chrome when you behat.yml is set like this&lt;/p>
&lt;pre>&lt;code>default:
formatter:
name: pretty
parameters:
decorated: true
verbose: false
time: true
language: en
output_path: null
multiline_arguments: true
paths:
features: app/tests/acceptance/features
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: http://thehub.dev
extensions:
Behat\MinkExtension\Extension:
goutte: null
selenium2:
wd_host: &amp;quot;http://192.168.10.1:4444/wd/hub&amp;quot;
base_url: 'http://thehub.dev:8000/'
browser_name: chrome
&lt;/code>&lt;/pre></description><category>note2self</category></item><item><title>Sqlite and Laravel</title><link>https://alfrednutile.info/posts/128/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/128/</guid><description>&lt;p>It is really really nice to use this for testing and local since any reseed work is quick.&lt;/p>
&lt;p>Overall the swap out is easy and I do not think, so far, there has been any issues going to mysql on production.&lt;/p>
&lt;p>The only two things to set over all is&lt;/p>
&lt;h2 id="seeding">Seeding&lt;/h2>
&lt;p>In my DatabaseSeeder.php file I set this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;
class DatabaseSeeder extends Seeder {
/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Eloquent::unguard();
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}
}
&lt;/code>&lt;/pre>&lt;p>This allows me to reseed without issues.&lt;/p>
&lt;h2 id="null-fields">Null fields&lt;/h2>
&lt;p>On fields that are allowed to be null just add this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
class AddGithubTokenToUsersTable extends Migration {
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;string('name')-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('name');
});
}
}
&lt;/code>&lt;/pre>&lt;p>Check out &lt;a href="https://www.alfrednutile.info/posts/112">Speeding up PHPunit tests and Behat in Laravel for Database refreshes&lt;/a> to see more info of how you can use this.&lt;/p>
&lt;p>Also see &lt;a href="https://www.alfrednutile.info/posts/63">php artisan migrate:reset not working&lt;/a> for some extra setup.&lt;/p>
&lt;h2 id="update-2-11-2015">Update 2-11-2015&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/cavanaghacea">Andrew Cavanagh&lt;/a> noted that since renameColumn does not work with Sqlite you can do this to drop and make the column. Also without the two steps in &lt;code>up()&lt;/code> seeding failed.&lt;/p>
&lt;pre>&lt;code> /**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('bundle_id');
});
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;string('project_id', 36)-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('project_id');
$table-&amp;gt;string('bundle_id', 36)-&amp;gt;nullable();
});
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>sqlite</category></item><item><title>Timing PHPUnit Tests</title><link>https://alfrednutile.info/posts/127/</link><pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/127/</guid><description>&lt;p>Maybe there is a better way to do this? But using this article &lt;a href="https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/">https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/&lt;/a> I was able to find a hanging test.&lt;/p>
&lt;h1 id="setup">Setup&lt;/h1>
&lt;p>I already have an xml file at the root of my project so I added to that that listener.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;phpunit backupGlobals=&amp;quot;false&amp;quot;
backupStaticAttributes=&amp;quot;false&amp;quot;
bootstrap=&amp;quot;tests/bootstrap.php&amp;quot;
colors=&amp;quot;true&amp;quot;
convertErrorsToExceptions=&amp;quot;true&amp;quot;
convertNoticesToExceptions=&amp;quot;true&amp;quot;
convertWarningsToExceptions=&amp;quot;true&amp;quot;
processIsolation=&amp;quot;false&amp;quot;
stopOnFailure=&amp;quot;true&amp;quot;
syntaxCheck=&amp;quot;false&amp;quot;
&amp;gt;
&amp;lt;listeners&amp;gt;
&amp;lt;listener file=&amp;quot;./app/tests/listeners/TestTimesListener.php&amp;quot; /&amp;gt;
&amp;lt;/listeners&amp;gt;
&amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/BehatEditor/Tests&amp;lt;/directory&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/TheHub/Tests&amp;lt;/directory&amp;gt;
&amp;lt;exclude&amp;gt;./app/tests/BehatEditor/Tests/Migrations&amp;lt;/exclude&amp;gt;
&amp;lt;exclude&amp;gt;./app/tests/DMPIntegration&amp;lt;/exclude&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/code>&lt;/pre>&lt;p>the lines are&lt;/p>
&lt;pre>&lt;code> &amp;lt;listeners&amp;gt;
&amp;lt;listener file=&amp;quot;./app/tests/listeners/TestTimesListener.php&amp;quot; /&amp;gt;
&amp;lt;/listeners&amp;gt;
&lt;/code>&lt;/pre>&lt;p>That I added.&lt;/p>
&lt;p>Then that file I ended up with this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
class PHPUnitTestListener implements PHPUnit_Framework_TestListener {
private $time;
private $timeLimit = 0;
public function startTest(PHPUnit_Framework_Test $test) {
$this-&amp;gt;time = time();
}
public function endTest(PHPUnit_Framework_Test $test, $time) {
$current = time();
$took = $current - $this-&amp;gt;time;
if($took &amp;gt; $this-&amp;gt;timeLimit ) {
echo &amp;quot;\nName: &amp;quot;.$test-&amp;gt;getName().&amp;quot; took &amp;quot;.$took . &amp;quot; second(s) (from: $this-&amp;gt;time, to: $current)\n&amp;quot;;
}
}
public function addError(PHPUnit_Framework_Test $test, Exception $e, $time) {
}
public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {
}
public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time){
}
public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time) {
}
public function startTestSuite(PHPUnit_Framework_TestSuite $suite) {
}
public function endTestSuite(PHPUnit_Framework_TestSuite $suite) {
}
/**
* Risky test.
*
* @param PHPUnit_Framework_Test $test
* @param Exception $e
* @param float $time
* @since Method available since Release 4.0.0
*/
public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
{
// TODO: Implement addRiskyTest() method.
}
}
&lt;/code>&lt;/pre>&lt;p>Right now I am only using startTest and endTest.&lt;/p>
&lt;p>Finally all my tests have a TestCase class they share so in there I ended up with&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Faker\Factory as Faker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Mockery as m;
class TestCase extends Illuminate\Foundation\Testing\TestCase {
public function setUp()
{
parent::setUp();
$this-&amp;gt;listener = new PHPUnitTestListener();
$this-&amp;gt;faker = Faker::create();
$this-&amp;gt;prepareForTests();
$this-&amp;gt;listener-&amp;gt;startTest($this);
}
public function tearDown()
{
$this-&amp;gt;listener-&amp;gt;endTest($this, time());
parent::tearDown();
}
&lt;/code>&lt;/pre>&lt;p>Overall it is pretty simple once the other post pointed it out. Now to use all the other listeners.&lt;/p></description><category>php</category><category>phpunit</category><category>testing</category></item><item><title>Reusable UI/API CRUD Laravel and Angular</title><link>https://alfrednutile.info/posts/126/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/126/</guid><description>&lt;p>&lt;a href="https://github.com/alnutile/angular_stubber">related repo&lt;/a>&lt;/p>
&lt;p>Working on a recent project it finally hit me how repetitive then need was to make a Resource at the API level and to make the UI to Create, Retrieve, Update, Delete, Index. And how easy it would be to make a foundation for this to use for each Resource keeping the UI goals consistent and simple between these Resources. With this came also a set of API tests in Behat that could also be used with the project.&lt;/p>
&lt;p>What I will cover below is building out the foundation for this code and using it in a &amp;lsquo;real life&amp;rsquo; example.&lt;/p>
&lt;p>You will end up with a UI like this&lt;/p>
&lt;h2 id="index">Index&lt;/h2>
&lt;p>Simple search, create and edit&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/9hwu9xzxvlriapc/index.png?dl=0" alt="index">&lt;/p>
&lt;h2 id="modal-create">Modal Create&lt;/h2>
&lt;p>Simple Create leaving complexities for Edit&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/x5k1zkixgp3a95j/create.png?dl=0" alt="create">&lt;/p>
&lt;h2 id="modal-edit">Modal Edit&lt;/h2>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/tix8hql68omwvxh/edit.png?dl=0" alt="edit">&lt;/p>
&lt;h1 id="now-for-the-code">Now for the code&lt;/h1>
&lt;h2 id="api">API&lt;/h2>
&lt;p>The API follows this pattern&lt;/p>
&lt;h3 id="route">Route&lt;/h3>
&lt;p>Build all the info into one namespace. For example using the a resource like the one in the images above call People and a name space of CoreApp.&lt;/p>
&lt;pre>&lt;code>CoreApp\PeopleApi
&lt;/code>&lt;/pre>&lt;p>What is in here is (we will cover each in detail)&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2go33ai45av8syr/people.png?dl=0" alt="people">&lt;/p>
&lt;p>The route file then has&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
Route::get('people', 'CoreApp\People\PeopleController@getAll');
Route::get('people/{uuid}', 'CoreApp\People\PeopleController@getOne');
Route::post('people', 'CoreApp\People\PeopleController@postResource');
Route::put('people/{uuid}', 'CoreApp\People\PeopleController@putResource');
&lt;/code>&lt;/pre>&lt;p>By using put and post Resource we all of this easier to reuse.&lt;/p>
&lt;p>Then include this in your main route file for Laravel or register it with a provider.&lt;/p>
&lt;pre>&lt;code>#app/routes.php
require_once(__DIR__ . '/App/PeopleApi/routes.php');
&lt;/code>&lt;/pre>&lt;p>So now the routes are in place lets go to the Controller&lt;/p>
&lt;h3 id="controller">Controller&lt;/h3>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\People;
use App\Teams\Team; //some other model
use App\Users\User; //some other model we rely on
use App\BaseController;
use App\People\PeopleService;//keep logic out of controller
use App\Services\ResponseServices; //just an example of a consistent response patter
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;
class PeopleController extends BaseController {
/**
* @var PeopleService
*/
private $peopleService;
public function __construct(PeopleService $service, ResponseServices $responseServices)
{
$this-&amp;gt;service = $peopleService; //@NOTE name it service not people service to ease the reuse.
$this-&amp;gt;responseServices = $responseServices;
}
/**
* @Get('api/v1/people
*/
public function getAll()
{
try
{
$results['people'] = $this-&amp;gt;service-&amp;gt;getAll();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Get('api/v1/people/{uuid}
*/
public function getOne($uuid)
{
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;getOne($uuid);
if(!empty($results['person']))
{
$results['roles'] = Role::all();
$results['teams'] = Team::all();
}
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Post('api/v1/people')
*/
public function postResource()
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;postPerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Team&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Put('api/v1/people/{uuid}
*/
public function putResource($uuid)
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results = $this-&amp;gt;service-&amp;gt;updatePerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Person&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
}
&lt;/code>&lt;/pre>&lt;p>The Controller talks to the service to get the respond to the request and the consistently responds back using the responseService. (more on that shortly)&lt;/p>
&lt;h3 id="the-service">The Service&lt;/h3>
&lt;pre>&lt;code>&amp;lt;?php
namespace CoreApp\People;
use CoreApp\Models\User;
use CoreApp\Services\UserService;
use CoreApp\Helpers\RoleHelper;
use CoreApp\Helpers\ThrowAndLogErrors;
use CoreApp\Services\BaseServices;
use CoreApp\Helpers\UuidHelper;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
class PeopleService extends BaseServices {
use RoleHelper;
use ThrowAndLogErrors;
use UuidHelper;
/**
* @var User
*/
private $user;
public $rulesCreate = [
'email' =&amp;gt; 'required|email'
];
public function __construct(UserService $user)
{
$this-&amp;gt;user = $user;
}
public function getAll()
{
try
{
$user_id = Auth::user()-&amp;gt;id;
if($this-&amp;gt;isInRole($user_id, ['role-admin']))
{
$results = $this-&amp;gt;user-&amp;gt;all();
} else {
$results = [];
}
}
catch(NotInRoleException $e)
{
$results = [];
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function getOne($uuid)
{
try
{
if($this-&amp;gt;isAdminRoleOrOwner($uuid))
{
$results = $this-&amp;gt;user-&amp;gt;getPerson($uuid);
} else {
$results = [];
}
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function updatePerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
try
{
$user = User::findOrFail($store['id']);
$store = (array) $store;
$user-&amp;gt;email = $store['email'];
(isset($store['image'])) ? $user-&amp;gt;image = $store['image'] : false;
$user-&amp;gt;save();
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error updating team %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
public function postPerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
$user = new User();
try
{
/**
* @TODO move this into a CoreApp service
* I am moving away from the BehatEditor Service
*/
$uuid = (!isset($store['id'])) ? $this-&amp;gt;generateNewId()-&amp;gt;toString() : $store['id'];
$user-&amp;gt;id = $uuid;
$user-&amp;gt;email = $store['email'];
$user-&amp;gt;password = Hash::make(Str::random(32));
$user-&amp;gt;image = $user-&amp;gt;default_image;
$user-&amp;gt;save();
$user = User::with('roles')-&amp;gt;find($uuid); //due to uuid work
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error creating user %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
protected function syncRoles($user, $store)
{
if(isset($store['roles']))
{
foreach($store['roles'] as $role)
{
$roles[] = $role['id'];
}
$user-&amp;gt;roles()-&amp;gt;sync($roles);
}
return $user;
}
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>angular</category></item><item><title>Laravel Blade and Angular brackets</title><link>https://alfrednutile.info/posts/124/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/124/</guid><description>&lt;p>I use one AngularController.php to render main.blade.php file that then renders angular. The only other blade file is the login page.
I could have done this in the routes.php file but since the routes file has the login page I decided to place it in this controller.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Http\Controllers;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\View;
use Laracasts\Utilities\JavaScript\Facades\JavaScript;
/**
* @Middleware(&amp;quot;auth&amp;quot;)
*/
class AngularController extends BaseController {
use UserHelper;
/**
* @var UserService
*/
private $userService;
public function __construct(UserService $userService)
{
$this-&amp;gt;userService = $userService;
}
/**
* @Get(&amp;quot;behat&amp;quot;, as=&amp;quot;behat.dash&amp;quot;)
*/
public function index()
{
Blade::setContentTags('&amp;lt;%', '%&amp;gt;'); // for variables and all things Blade
Blade::setEscapedContentTags('&amp;lt;%%', '%%&amp;gt;'); // for escaped data
$user_id = $this-&amp;gt;getUserId();
$profile = $this-&amp;gt;userService-&amp;gt;getPerson($user_id);
$token = csrf_token();
$chat_on = Config::get('app.chat_on', true);
JavaScript::put(
[
'pusher_public_key' =&amp;gt; $_ENV['PUSHER_PUBLIC'],
'sauce_key' =&amp;gt; $_ENV['SAUCE_TOKEN'],
'sauce_user' =&amp;gt; $_ENV['SAUCE_USER'],
'profile' =&amp;gt; $profile,
'token' =&amp;gt; $token,
'debug' =&amp;gt; Config::get('app.debug'),
]
);
return View::make('layouts.main', compact('chat_on'));
}
}
&lt;/code>&lt;/pre>&lt;p>Thanks to &lt;a href="http://scotch.io/bar-talk/quick-tip-using-laravel-blade-with-angularjs">http://scotch.io/bar-talk/quick-tip-using-laravel-blade-with-angularjs&lt;/a> for the tip&lt;/p></description><category>note2self</category><category>angularjs</category><category>laravel</category></item><item><title>Angular History Based BreadCrumbs</title><link>https://alfrednutile.info/posts/123/</link><pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/123/</guid><description>&lt;p>Originally I was going to go with one of the more well known packages but then I realized I wanted to show the history of the users states not the children of the state they are on. For example when the user lands on the website at say the path projects and then goes to projects/foo their breadcrumbs will look like this&lt;/p>
&lt;pre>&lt;code>Projects / Project Foo
&lt;/code>&lt;/pre>&lt;p>And if they then go to project/foo/reports then it would be&lt;/p>
&lt;pre>&lt;code>Projects / Project Foo / Reports
&lt;/code>&lt;/pre>&lt;p>So no matter where they go it just keeps saving the from state to the history object and loads that.&lt;/p>
&lt;p>Ideally like many of the other modules this would be a good mix of a directive and a service. Right now it is setup like this but I will move it later into a package. (unless there already is one out there that I just could not google well enough?)&lt;/p>
&lt;h2 id="config">Config&lt;/h2>
&lt;p>This is where I look at the &amp;ldquo;from state&amp;rdquo; to see if it has what I want and then save it to history. I also take a moment to keep history down to 5 items.&lt;/p>
&lt;pre>&lt;code> angular
.module('app')
.config(config)
.constant('ENV', constants())
.run(function ($rootScope, $state, editableOptions, $location, $stateParams) {
editableOptions.theme = 'bs3';
$rootScope.$state = $state;
$rootScope.history = [];
$rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
if($state.href(fromState, fromParams) &amp;amp;&amp;amp; fromState.data &amp;amp;&amp;amp; fromState.data.pageTitle)
{
if($rootScope.history.length &amp;gt; 5)
{
$rootScope.history = $rootScope.history.slice(1, $rootScope.history.length);
}
$rootScope.history.push({ label: fromState.data.pageTitle, url: $state.href(fromState, fromParams)});
}
});
});
&lt;/code>&lt;/pre>&lt;h2 id="pagetitle">PageTitle&lt;/h2>
&lt;p>This happen to be a data object I had set on all my routes to begin with&lt;/p>
&lt;pre>&lt;code> $stateProvider
.state('profile', {
url: &amp;quot;/profile&amp;quot;,
templateUrl: &amp;quot;/assets/js/profiles/templates/profile.html&amp;quot;,
controller: 'ProfileEditCtrl',
controllerAs: 'vm',
resolve: {
profile: ['ProfilesService', function (ProfilesService) {
return ProfilesService.getFull();
}]
},
data: {pageTitle: 'Profile'}
});
}
&lt;/code>&lt;/pre>&lt;h2 id="the-directive">The Directive&lt;/h2>
&lt;p>The directive is doing two things. I need to make it into two directives but for style reasons and timing I can not do that right now.&lt;/p>
&lt;p>Just taking the history and pageTitle and putting it into html&lt;/p>
&lt;pre>&lt;code>(function(){
'use strict';
function appHeader() {
var directive = {
restrict: 'E',
replace: true,
transclude: true,
scope: {
pageTitle: '=',
history: '='
},
templateUrl: &amp;quot;/assets/js/directives/templates/_header.directive.html&amp;quot;
};
return directive;
}
angular.module('app')
.directive('appHeader', appHeader)
})();
&lt;/code>&lt;/pre>&lt;p>The directives template file you see above&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/vk5pmf52217e6ec/Screenshot%202014-12-11%2020.23.36.png?dl=0" alt="directive">&lt;/p>
&lt;h2 id="the-html--page-showing-the-breadcrumbs">The HTML / Page showing the breadcrumbs&lt;/h2>
&lt;p>After all the above is in place you just need to add this to the pages you want this to be seen, or on some main page (ideally)&lt;/p>
&lt;pre>&lt;code>&amp;lt;app-header page-title=&amp;quot;vm.pageTitle&amp;quot; history=&amp;quot;history&amp;quot;&amp;gt;&amp;lt;/app-header&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You end up with something like this
&lt;img src="https://dl.dropboxusercontent.com/s/g1uac6y848mk6or/Screenshot%202014-12-11%2020.18.17.png?dl=0" alt="bc">&lt;/p>
&lt;p>Next step is to inject the title into the pageTitle so it would be the Project name. But right now I rather have the above so as a user I can easily go back to say &amp;ldquo;Batches&amp;rdquo; from where I am in the state.&lt;/p></description><category>angularjs</category></item><item><title>Embed Template Data in View (Angular, Laravel)</title><link>https://alfrednutile.info/posts/122/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/122/</guid><description>&lt;p>Sometimes, when your frontend shares the same view rendering of the backend, you can store data in the window object. This can save you queries to the backend when, for example, Profile Data that shows on every pages request.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/app0y31xxi3uk80/profile_example.png?dl=0" alt="profile">&lt;/p>
&lt;h1 id="embed-output-into-window-or-window">Embed output into window or $window&lt;/h1>
&lt;p>In the Controller I am using to output the Angular template (app/views/main.blade.php for example) I inject the window data that I want all pages to have.&lt;/p>
&lt;pre>&lt;code> public function index()
{
$user_id = $this-&amp;gt;getUserId();
$profile = $this-&amp;gt;userService-&amp;gt;getJustProfile($user_id);
$token = csrf_token();
JavaScript::put(
[
'profile' =&amp;gt; $profile,
'token' =&amp;gt; $token
]
);
return View::make('layouts.main');
}
&lt;/code>&lt;/pre>&lt;p>So every time the template is rendered it will add this data to the output. Later on I make use of that inside my Angular app using a MainCtrl.&lt;/p>
&lt;h1 id="mainctrl-wrapping-it-all">MainCtrl Wrapping it All&lt;/h1>
&lt;pre>&lt;code>&amp;lt;body ng-controller=&amp;quot;MainCtrl as main&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>This controller gets called at every page load to setup this base info for the site.&lt;/p>
&lt;pre>&lt;code>(function(){
'use strict';
function MainCtrl($rootScope, $window) {
var vm = this;
vm.profile = {};
vm.activate = activate;
vm.activate();
///////
function activate()
{
vm.profile = $window.profile;
}
}
/**
*
* Pass all functions into module
*/
angular
.module('app')
.controller('MainCtrl ', MainCtrl)
})();
&lt;/code>&lt;/pre>&lt;h1 id="template-calling-to-main">Template calling to Main&lt;/h1>
&lt;p>Now on those page that renders the profile image, name and email on the top left of the site I call to that scope.&lt;/p>
&lt;pre>&lt;code>&amp;lt;nav class=&amp;quot;navbar-default navbar-static-side&amp;quot; role=&amp;quot;navigation&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sidebar-collapse&amp;quot;&amp;gt;
&amp;lt;ul side-navigation class=&amp;quot;nav&amp;quot; id=&amp;quot;side-menu&amp;quot;&amp;gt;
&amp;lt;li class=&amp;quot;nav-header&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;dropdown profile-element&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-6 col-md-6 col-sm-6 col-xs-6&amp;quot;&amp;gt;
&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;
&amp;lt;img alt=&amp;quot;image&amp;quot; class=&amp;quot;img-responsive img-circle&amp;quot; src=&amp;quot;img/profiles/{{main.profile.image}}&amp;quot;/&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;dropdown-toggle&amp;quot; href&amp;gt;
&amp;lt;span class=&amp;quot;clear&amp;quot;&amp;gt;
&amp;lt;span class=&amp;quot;block m-t-xs&amp;quot;&amp;gt;
&amp;lt;strong class=&amp;quot;font-bold&amp;quot;&amp;gt;
{{ main.profile.email }}
&amp;lt;/strong&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;text-muted text-xs block&amp;quot;&amp;gt;Profile&amp;lt;b class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;ul class=&amp;quot;dropdown-menu animated fadeInRight m-t-xs&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;Profile&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/auth/logout&amp;quot;&amp;gt;Logout&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;logo-element&amp;quot;&amp;gt;
BE
&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code>&lt;/pre></description><category>php</category><category>laravel</category><category>angularjs</category></item><item><title>Quick fixture data and mocking external APIs</title><link>https://alfrednutile.info/posts/121/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/121/</guid><description>&lt;p>We are using a number of external APIs on a project (Pusher, Iron.io, Github, Saucelabs etc). Github is key as we are using it to store and retrieve files from for editing on the site. When running phpunit it is easy to mock these Classes but when running behat tests or protractor we had to do to things to make it possible to mock the tests and not hit the external APIs.&lt;/p>
&lt;h1 id="swapping-out-providers">Swapping out Providers&lt;/h1>
&lt;p>Using Laravel&amp;rsquo;s config/app.php settings we can easily swap out providers for different environments. For example config/testing/app.php could register my GithubMock class.&lt;/p>
&lt;p>The GithubMock class just extends the real Github Service but overrides the methods that I do not want to really call out to Github eg create file, update file etc.&lt;/p>
&lt;p>That is super easy but now how to return good data.&lt;/p>
&lt;h1 id="quick-fixtures">Quick Fixtures&lt;/h1>
&lt;p>I made a Facade package called Fixturizer &lt;a href="https://github.com/alfred-nutile-inc/fixturizer">https://github.com/alfred-nutile-inc/fixturizer&lt;/a>&lt;/p>
&lt;p>You can see in the readme.md how to use it to quickly write and read fixture data that you can get from any of these requests. Then when it is the turn of the mocked provider to return the results it just loads up this fixture and you are set. (PHP VCR is another option as well)&lt;/p>
&lt;p>One example&lt;/p>
&lt;pre>&lt;code> public function tokens($path)
{
$this-&amp;gt;logMock('tokens');
$files = FixturizerReader::getFixture('github_token_show.yml', $this-&amp;gt;path);
return $files;
}
&lt;/code>&lt;/pre>&lt;p>The method overrides the parent class (the real provider) &amp;ldquo;tokens&amp;rdquo; and returns the needed fixture info. I log it as well so I can double check the status of it.&lt;/p>
&lt;p>Now the tests not only run faster but are less fragile since sometimes the services would timeout.&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Mocking Queue Service for faster Behat Testing</title><link>https://alfrednutile.info/posts/120/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/120/</guid><description>&lt;p>As I wrote about &lt;a href="http://www.alfrednutile.info/posts/103/edit">here&lt;/a> I am using behat to tests our APIs. I could have used Laravel&amp;rsquo;s guzzle and phpunit integration to test the controllers but I decided to go with Behat. But this means when hitting those endpoints I need to find another way to mock services.&lt;/p>
&lt;p>Since Laravel has you register Providers you can easily replace or override a provider. In this case the &amp;ldquo;&amp;lsquo;Illuminate\Queue\QueueServiceProvider&amp;rsquo;&amp;rdquo; provider with my own.&lt;/p>
&lt;p>This allows me to test in my endpoints leaving the queue related classes to be tested during phpunit testing. Using the queue &amp;ldquo;sync&amp;rdquo; driver would help too but it would then cause this to not be an isolated tests since the queue would trigger another classes method. (@fire).&lt;/p>
&lt;h2 id="setup-a-class-to-use-as-the-new-provider">Setup a class to use as the new provider&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php
namespace App\Providers;
use Illuminate\Queue\QueueServiceProvider;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\ServiceProvider;
use Mockery as m;
class MockedQueue {
public function push($args)
{
return true;
}
}
class QueueMockProvider extends QueueServiceProvider {
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(getenv('APP_ENV') == 'local' || getenv('APP_ENV') == 'testing')
{
$this-&amp;gt;app-&amp;gt;bind('queue', function(){
$queue = new MockedQueue();
Log::info(&amp;quot;Mock queue in use&amp;quot;);
return $queue;
});
} else {
parent::register();
}
}
}
&lt;/code>&lt;/pre>&lt;h2 id="register-mocked-queue-over-real-queue">Register Mocked Queue over Real Queue&lt;/h2>
&lt;p>Instead of setting it for config/local/queue.php and config/testing/queue.php I set it in the main config/app.php. I would like to come back to using the config/app.php but had some issues.&lt;/p>
&lt;pre>&lt;code>'Illuminate\Queue\QueueServiceProvider',
&lt;/code>&lt;/pre>&lt;p>becomes&lt;/p>
&lt;pre>&lt;code>'App\Providers\QueueMockProvider',
&lt;/code>&lt;/pre>&lt;p>That was it. From there on my queue related API tests did not trigger a queued job which in this case was supper helpful those where calling external APIs.&lt;/p></description><category>behat</category><category>laravel</category><category>php</category></item><item><title>Docker, MailCatcher and Laravel</title><link>https://alfrednutile.info/posts/118/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/118/</guid><description>&lt;p>I wrote an article on Mailcatcher and Homestead &lt;a href="http://www.alfrednutile.info/posts/93">here&lt;/a> but as I move into docker I wanted the same setup for my docker website container which was super easy.&lt;/p>
&lt;p>First I downloaded this &lt;a href="https://registry.hub.docker.com/u/schickling/mailcatcher/">docker images&lt;/a> and ran the command as he noted. Once done I had the website up and running.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/w1mxwcw8129raxg/docker_behat.png?dl=0" alt="mailcatcher_docker">&lt;/p>
&lt;p>From there I just started my website container and made a link.&lt;/p>
&lt;pre>&lt;code>docker run -d -p 80:80 --name website --link mailcatcher:mailcatcher -v $PWD:/share alnutile/nginxlaravel:0.3.4 /sbin/my_init
&lt;/code>&lt;/pre>&lt;p>From there I was able to use the server set environments to connect to it as needed. Or more simply I just updated my local/mail.php as follows&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
return array(
'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; getenv('MAILCATCHER_PORT_1080_TCP_ADDR'),
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'foobar@gmail.com', 'name' =&amp;gt; 'Behat Editor Admin'),
'encryption' =&amp;gt; '',
'username' =&amp;gt; null,
'password' =&amp;gt; null,
'pretend' =&amp;gt; false,
);
&lt;/code>&lt;/pre>&lt;p>Now I get to see the email as a user would see it and click around as needed!&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Redirecting back to original Angular.js destination from Laravel Auth</title><link>https://alfrednutile.info/posts/119/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/119/</guid><description>&lt;p>&lt;strong>UPDATE&lt;/strong>&lt;/p>
&lt;p>You can see in the &lt;a href="https://www.alfrednutile.info/posts/119#comment-2448723710">comments&lt;/a> some updated info.&lt;/p>
&lt;p>When a user visits an Angular url (not html5) like &lt;a href="http://foo.com/app#some/long/path">http://foo.com/app#some/long/path&lt;/a>&lt;/p>
&lt;p>Then gets redirected to &lt;a href="http://foo.com/auth/login">http://foo.com/auth/login&lt;/a> because they are not logged in. It would be nice to send them right back after that.&lt;/p>
&lt;p>These steps will make that possible.&lt;/p>
&lt;p>Include this file in your authentication page.&lt;/p>
&lt;pre>&lt;code>#intended.js
(function(){
'use strict';
var intended = window.location.hash;
(intended.length &amp;gt; 0) ? jQuery.cookie('intended', '/app' + intended) : jQuery.cookie('intended', '/app');
})();
&lt;/code>&lt;/pre>&lt;p>Then add this library to your app jquery.cookies.js and load that, this script and of course jquery.&lt;/p>
&lt;p>Finally after an successful auth add this&lt;/p>
&lt;pre>&lt;code>return Redirect::to($_COOKIE['intended']);
&lt;/code>&lt;/pre>&lt;p>Laravel 4.2 = app/controllers/AuthController.php:61&lt;/p>
&lt;p>Laravel 5 = app/Http/Controllers/AuthController.php:52&lt;/p></description><category>laravel</category><category>php</category><category>angular</category></item><item><title>PHP quick fixture data for phpunit testing</title><link>https://alfrednutile.info/posts/117/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/117/</guid><description>&lt;p>You can use VCR or other libraries to make fixture data. But sometimes you can just make the request and save the results using this technique. From then on you mock and return the data.&lt;/p>
&lt;h1 id="get-the-data">Get the data.&lt;/h1>
&lt;p>In this example I had a Client that would get data and return it for import. I was testing out the class that would take this data and import it and do other things. So I make my phpunit test methods of that class (not the Client it is fully tested)&lt;/p>
&lt;pre>&lt;code>
/**
* @test
*/
public function should_get_data_to_import()
{
//Load up the client I will later mock, but to get some data to mock
$client = new Client();
//Get the results (api return json)
$results = $client-&amp;gt;getData();
//Get the yaml library I am using to covert it to Yaml
$yaml = new Yaml();
//Convert it to Yaml from Array
$results_yml = $yaml-&amp;gt;dump($results);
//Save it for now
file_put_contents('/tmp/data.yml', $results_yml);
}
&lt;/code>&lt;/pre>&lt;p>Once that is done I copy that data.yml file to fixtures/data.yml which is in the tests folder. Here is a quick look at the folders.&lt;/p>
&lt;pre>&lt;code>tests
tests/fixtures
// @NOTE this is the file we are using for the test example above
tests/NameSpace/Tests/ClassTest.php
&lt;/code>&lt;/pre>&lt;p>Finally I rewrite that same test method as&lt;/p>
&lt;pre>&lt;code>/**
* @test
*/
public function should_get_data_to_import()
{
$yaml = new Yaml();
$fixture = $yaml-&amp;gt;parse(__DIR__ . '/../fixtures/data.yml');
$client = m::mock();
$client-&amp;gt;shouldReceive('getData')-&amp;gt;andReturn($fixture);
$classTesting new ClassTest($client); //we inject the mock into it
$classTesting-&amp;gt;importData();
$this-&amp;gt;assertCount(100, $classTesting-&amp;gt;getDataImported());
}
&lt;/code>&lt;/pre>&lt;p>The client in this case if a fully tested standalone client so I am not testing it. Just my use of it to migrate data.&lt;/p></description><category>php</category><category>phpunit</category><category>testing</category></item><item><title>Nginx force SSL</title><link>https://alfrednutile.info/posts/116/</link><pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/116/</guid><description>&lt;p>Need to quickly setup ssl and default to that for our sites.&lt;/p>
&lt;p>This &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04">article&lt;/a> made it simple stupid for getting the certs setup.&lt;/p>
&lt;p>Then I wrapped up the redirect as seen below&lt;/p>
&lt;pre>&lt;code>server {
listen 80;
listen 443 ssl;
server_name somesite-dev.stagingarea.info;
root /home/someuser/somesite-dev.stagingarea.info/public;
ssl on;
ssl_certificate /etc/nginx/ssl/nginx.crt;
ssl_certificate_key /etc/nginx/ssl/nginx.key;
# Prevent a look
if ($ssl_protocol = &amp;quot;&amp;quot;) {
rewrite ^ https://$server_name$request_uri? permanent;
}
index index.html index.htm index.php;
charset utf-8;
}
&lt;/code>&lt;/pre>&lt;p>Thanks to this post as well &lt;a href="http://serverfault.com/a/298803">http://serverfault.com/a/298803&lt;/a>&lt;/p>
&lt;p>Still a mystery but&lt;/p>
&lt;pre>&lt;code>service nginx restart
&lt;/code>&lt;/pre>&lt;p>was not working had to do&lt;/p>
&lt;pre>&lt;code>/etc/init.d/nginx restart
&lt;/code>&lt;/pre>&lt;p>to get the server to reload.&lt;/p></description><category>nginx</category></item><item><title>Laravel and Angular Time/Date Display</title><link>https://alfrednutile.info/posts/114/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/114/</guid><description>&lt;p>Angular seems to, by default, easily deal with milliseconds, &lt;a href="https://docs.angularjs.org/api/ng/filter/date">https://docs.angularjs.org/api/ng/filter/date&lt;/a>.&lt;/p>
&lt;p>Laravel outputs created_at as a YYYY-MM-DD HH:MM:SS format that just does not work well with the Angular date filter.&lt;/p>
&lt;p>It is really simple to change the output of the date in Laravel just add this to your Model or BaseModel or even better Trait&lt;/p>
&lt;pre>&lt;code> /**
* Leave as Timestamps for Angular
* @return array
*/
public function getDates()
{
return [];
}
public function getCreatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
public function getUpdatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
&lt;/code>&lt;/pre>&lt;p>This is noted in the docs as well &lt;a href="http://laravel.com/docs/4.2/eloquent#date-mutators">http://laravel.com/docs/4.2/eloquent#date-mutators&lt;/a> and &lt;a href="http://laravel.com/docs/4.2/eloquent#accessors-and-mutators">http://laravel.com/docs/4.2/eloquent#accessors-and-mutators&lt;/a>&lt;/p>
&lt;p>Then in Angular I can easily format the date&lt;/p>
&lt;pre>&lt;code>&amp;lt;small&amp;gt;Created: {{ project.created_at | date:'yyyy-MM-dd' }}&amp;lt;/small&amp;gt;
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category></item><item><title>Moving Forge Deploy Script to Envoy</title><link>https://alfrednutile.info/posts/115/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/115/</guid><description>&lt;p>As we start to move off of Forge I still want the automation to take place after all tests pass.&lt;/p>
&lt;p>In Codeship or Locally I just follow some instructions from here &lt;a href="http://laravel.com/docs/4.2/ssh">http://laravel.com/docs/4.2/ssh&lt;/a>&lt;/p>
&lt;h1 id="locally">Locally&lt;/h1>
&lt;p>Setup Envoy globally as noted.&lt;/p>
&lt;p>Run envoy init&lt;/p>
&lt;p>And then I pasted this into my Envoy.blade.php&lt;/p>
&lt;pre>&lt;code>@servers(['dev' =&amp;gt; 'behat_dev'])
@task('deploy_dev', ['on' =&amp;gt; 'dev'])
date
cd /home/forge/foo-dev
git pull origin dev
composer config -g github-oauth.github.com sometoken
composer install
composer dump-autoload
php artisan dump-autoload
php artisan migrate
php artisan migrate:refresh --seed
~/node_modules/bower/bin/bower install
npm install
php artisan queue:restart
@endtask
&lt;/code>&lt;/pre>&lt;h1 id="setup-you-ssh-config">Setup you .ssh config&lt;/h1>
&lt;p>The behat_dev is a shortcut to the server I made in my ~/.ssh/config&lt;/p>
&lt;pre>&lt;code>Host foo_dev
Hostname 104.111.111.111
User forge
&lt;/code>&lt;/pre>&lt;p>So now locally I can run&lt;/p>
&lt;pre>&lt;code>envoy run deploy_dev
&lt;/code>&lt;/pre>&lt;h1 id="codeship">Codeship&lt;/h1>
&lt;p>Setup the server&lt;/p>
&lt;pre>&lt;code>sudo composer global require &amp;quot;laravel/envoy=~1.0&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Edit your ~/.ssh/config&lt;/p>
&lt;pre>&lt;code>Host behat_dev
Hostname localhost
User forge
&lt;/code>&lt;/pre>&lt;p>Make sure to put your key into authorized keys&lt;/p>
&lt;pre>&lt;code>cd .ssh
cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys
&lt;/code>&lt;/pre>&lt;p>Try logging in&lt;/p>
&lt;pre>&lt;code>ssh behat_dev
&lt;/code>&lt;/pre>&lt;p>Then setup codeship&lt;/p>
&lt;p>Under the Deployment settings use script&lt;/p>
&lt;pre>&lt;code>ssh forge@104.111.111.111 'cd ~/foo-dev &amp;amp;&amp;amp; envoy run deploy_dev'
&lt;/code>&lt;/pre>&lt;p>Make sure you codeship public key is also on the destination server&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Laravel 4.2 and Dotenv to set environment</title><link>https://alfrednutile.info/posts/113/</link><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/113/</guid><description>&lt;p>To start using Dotenv now it is very simple.&lt;/p>
&lt;h1 id="one-include-the-library">One include the library&lt;/h1>
&lt;pre>&lt;code>#composer.js
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.2.*&amp;quot;,
&amp;quot;vlucas/phpdotenv&amp;quot;: &amp;quot;1.0.*@dev&amp;quot;
},
&lt;/code>&lt;/pre>&lt;h1 id="two-update-your-startphp">Two update your start.php&lt;/h1>
&lt;pre>&lt;code>#bootstrap/start.php line 27
Dotenv::load(__DIR__ .'/../');
$env = $app-&amp;gt;detectEnvironment(
function()
{
return getenv('APP_ENV');
}
);
&lt;/code>&lt;/pre>&lt;h1 id="make-sure-to-set-your-env-file">Make sure to set your .env file&lt;/h1>
&lt;pre>&lt;code>#.env
APP_ENV='local'
&lt;/code>&lt;/pre>&lt;p>That is it you are set to use it for all your environments.&lt;/p>
&lt;p>&lt;strong>Update&lt;/strong>&lt;/p>
&lt;p>For Heroku I used this instead&lt;/p>
&lt;pre>&lt;code>$env = $app-&amp;gt;detectEnvironment(
function()
{
if(!isset(getenv('APP_ENV')))
{
Dotenv::load(__DIR__ .'/../');
}
return getenv('APP_ENV');
}
);
&lt;/code>&lt;/pre>&lt;p>Setting the initial APP_ENV using heroku config:set APP_ENV=stage&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Speeding up PHPunit tests and Behat in Laravel for Database refreshes</title><link>https://alfrednutile.info/posts/112/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/112/</guid><description>&lt;p>This &lt;a href="http://www.chrisduell.com/blog/development/speeding-up-unit-tests-in-php/">article&lt;/a> covers some good tips on this. Ideally you do not hit the database in unit tests but sometimes you do. Also in behat it hits the db all the time since it is at the Acceptance level.&lt;/p>
&lt;h1 id="sqlite">Sqlite&lt;/h1>
&lt;p>It is a great database and works. We easily can use it on running tests. When seeding the db I have my main seeding class doing this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
class DatabaseSeeder extends Seeder {
/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Model::unguard();
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
$this-&amp;gt;call('ParentRequestExample');
$this-&amp;gt;call('ProductionSeeder');
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}
}
&lt;/code>&lt;/pre>&lt;p>Since sqlite does not like this we skip it for it but not for production etc.&lt;/p>
&lt;p>Second my config/testing/database.php looks like this (as noted in the article)&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
return [
'default' =&amp;gt; 'sqlite',
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; $_ENV['DB_URL'],
'database' =&amp;gt; $_ENV['DB_NAME'],
'username' =&amp;gt; $_ENV['MYSQL_USER'],
'password' =&amp;gt; $_ENV['MYSQL_PASSWORD'],
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
],
'pgsql' =&amp;gt; [
'driver' =&amp;gt; 'pgsql',
'host' =&amp;gt; 'localhost',
'database' =&amp;gt; 'homestead',
'username' =&amp;gt; 'homestead',
'password' =&amp;gt; 'secret',
'charset' =&amp;gt; 'utf8',
'prefix' =&amp;gt; '',
'schema' =&amp;gt; 'public',
],
'setup' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__.'/../../database/stubdb.sqlite',
'prefix' =&amp;gt; '',
),
'sqlite' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__ . '/../../database/testing.sqlite',
'prefix' =&amp;gt; '',
),
],
];
&lt;/code>&lt;/pre>&lt;p>Which makes the below seeding command to setup the stub db work&lt;/p>
&lt;pre>&lt;code>php artisan migrate:refresh --seed --database=&amp;quot;setup&amp;quot; --env=&amp;quot;testing&amp;quot;
&lt;/code>&lt;/pre>&lt;h1 id="phpunit">PHPUnit&lt;/h1>
&lt;p>What I ended up with is a base TestCase like this&lt;/p>
&lt;pre>&lt;code>
public function setUp()
{
parent::setUp();
$this-&amp;gt;faker = Faker::create();
$this-&amp;gt;prepareForTests();
}
private function prepareForTests()
{
if(!file_exists(base_path() . '/app/database/testing.sqlite'))
{
$this-&amp;gt;refreshDb();
}
}
public function refreshDb()
{
copy(base_path() . '/app/database/stubdb.sqlite', base_path() . '/app/database/testing.sqlite');
}
&lt;/code>&lt;/pre>&lt;p>And with any new migrations I run this command&lt;/p>
&lt;pre>&lt;code>php artisan migrate:refresh --seed --database=&amp;quot;setup&amp;quot; --env=&amp;quot;testing&amp;quot;
&lt;/code>&lt;/pre>&lt;p>That file is kept in git since it is just seed data. If there are any conflicts just rm and start over. Testing.sqlite is not kept in git.&lt;/p>
&lt;p>#Behat&lt;/p>
&lt;p>Behat is the same idea. In the main FeatureContext file I have&lt;/p>
&lt;pre>&lt;code>
/**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
try
{
dd(getenv('APP_ENV'));
//exec(&amp;quot;php artisan migrate:refresh --seed&amp;quot;);
copy(__DIR__ . '/../../../../database/stubdb.sqlite', __DIR__ . '/../../../../database/testing.sqlite');
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error seeding the database %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
&lt;/code>&lt;/pre>&lt;p>So as we test the ui or api we can reload the data.&lt;/p>
&lt;p>#Behat / Laravel&lt;/p>
&lt;p>This package &lt;a href="https://github.com/GuilhermeGuitte/behat-laravel">https://github.com/GuilhermeGuitte/behat-laravel&lt;/a>&lt;/p>
&lt;p>This integrates behat into artisan command line helping with environment settings for behat.&lt;/p></description><category>laravel</category><category>php</category><category>behat</category><category>phpunit</category></item><item><title>Angular Pusher Factory to Centralize Code (also using Laravel to set constants and properties)</title><link>https://alfrednutile.info/posts/111/</link><pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/111/</guid><description>&lt;p>This will cover&lt;/p>
&lt;ul>
&lt;li>Making an Angular factory to centralize Pusher setup in Angular&lt;/li>
&lt;li>Passing settings form Laravel to Angular (though could be just Angular and a .env file as well)&lt;/li>
&lt;li>Passing Constants into the Angular App to pass these settings around, in this case to the Pusher Factory.&lt;/li>
&lt;/ul>
&lt;h2 id="setup-your-constants">Setup your constants&lt;/h2>
&lt;p>This is where I call in the info I need to use later on.&lt;/p>
&lt;pre>&lt;code>(function(){
function config($stateProvider, $urlRouterProvider) {
$urlRouterProvider.otherwise(&amp;quot;/dashboard&amp;quot;);
$stateProvider
.state('dashboard', {
url: &amp;quot;/dashboard&amp;quot;,
views: {
'': {
controller: 'DashCtrl',
controllerAs: 'vm',
resolve: {
reports: ['ReportsService', function(ReportsService)
{
return ReportsService.get();
}]
},
templateUrl: &amp;quot;/assets/js/dashboard/templates/dashboard.html&amp;quot;
};
}
function constants() {
return { 'pusher_public_key': window.pusher_public_key }
}
angular
.module('app')
.config(config)
.constant('ENV', constants())
.run(function($rootScope, $state) {
$rootScope.$state = $state;
});
})();
&lt;/code>&lt;/pre>&lt;p>So now we have the constants in place that are used by our factory below&lt;/p>
&lt;h2 id="the-pusher-factory">The Pusher Factory&lt;/h2>
&lt;pre>&lt;code>(function(){
'use strict';
function PusherService(ENV)
{
var vm = this;
vm.pusher = {};
vm.ENV = ENV; //We set this up above on the constants area.
vm.channelSet = {};
vm.activate = activate;
vm._subscribeToChannel = _subscribeToChannel;
vm._channelBind = _channelBind;
vm.PusherService = {
setPusher: setPusher
};
vm.activate();
////
function activate()
{
console.log(vm.ENV);
vm.pusher = new Pusher(vm.ENV.pusher_public_key);
}
function setPusher(channel, event, callback)
{
vm._subscribeToChannel(channel);
vm._channelBind(event, callback);
}
function _subscribeToChannel(channel)
{
vm.channelSet = vm.pusher.subscribe(channel);
}
function _channelBind(event_name, callback)
{
vm.channelSet.bind(event_name, callback);
}
return vm.PusherService;
}
angular.module('app')
.factory('PusherService', PusherService);
})();
&lt;/code>&lt;/pre>&lt;h2 id="laravel-now-need-to-load-the-settings-in-the-env-file-so-angular-can-access-them-later">Laravel now need to load the settings in the .env file so Angular can access them later.&lt;/h2>
&lt;p>Of course this could purely be Angular.js loading them from a config file that is not in git but relative to a server, local dev area etc.&lt;/p>
&lt;p>I set this all up user &lt;a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">https://github.com/laracasts/PHP-Vars-To-Js-Transformer&lt;/a>&lt;/p>
&lt;p>I run the config command &lt;em>note the change&lt;/em>&lt;/p>
&lt;pre>&lt;code>php artisan publish:config laracasts/utilities
&lt;/code>&lt;/pre>&lt;p>Then I edit that file&lt;/p>
&lt;pre>&lt;code>config/packages/laracasts/utilities/config.php
&lt;/code>&lt;/pre>&lt;p>To be&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
return [
/*
|--------------------------------------------------------------------------
| View to Bind JavaScript Vars To
|--------------------------------------------------------------------------
|
| Set this value to the name of the view (or partial) that
| you want to prepend the JavaScript variables to.
|
*/
'bind_js_vars_to_this_view' =&amp;gt; 'layouts/main',
/*
|--------------------------------------------------------------------------
| JavaScript Namespace
|--------------------------------------------------------------------------
|
| By default, we'll add variables to the global window object.
| It's recommended that you change this to some namespace - anything.
| That way, from your JS, you may do something like `Laracasts.myVar`.
|
*/
'js_namespace' =&amp;gt; 'window'
];
&lt;/code>&lt;/pre>&lt;p>The resources/views/layouts/main.blade.php the only trick here is any Angular related {{ brackets need to be @{{ to tell blade to ignore them.&lt;/p>
&lt;p>Finally my AngularController which renders the ONE page Laravel is in charge of besides login.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace App\Http\Controllers;
use Laracasts\Utilities\JavaScript\Facades\JavaScript;
/**
* @Middleware(&amp;quot;auth&amp;quot;)
*/
class AngularController extends BaseController {
/**
* @Get(&amp;quot;dash&amp;quot;, as=&amp;quot;dash&amp;quot;)
*/
public function index()
{
JavaScript::put([
'pusher_public_key' =&amp;gt; $_ENV['PUSHER_PUBLIC']]);
return view('layouts.main');
}
}
&lt;/code>&lt;/pre>&lt;p>If you have more than on View the share option might work &lt;a href="http://laravel.com/docs/master/views">http://laravel.com/docs/master/views&lt;/a>&lt;/p></description><category>angular</category><category>laravel</category></item><item><title>CSRF Tokens and Angular.js</title><link>https://alfrednutile.info/posts/110/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/110/</guid><description>&lt;p>This is key to preventing &lt;a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery&lt;/a>. Basically you log in and do some work on one site, then go to a malicious site and now they can send POST requests to the sites you have authentication to. But by passing a token we can prevent that issue.&lt;/p>
&lt;p>The steps&lt;/p>
&lt;ul>
&lt;li>Make a token path&lt;/li>
&lt;li>Make a token service to use again and again in Angular.js&lt;/li>
&lt;li>Add it as a resolve to the route in Angular.js&lt;/li>
&lt;li>Add it to your forms&lt;/li>
&lt;/ul>
&lt;h2 id="make-a-token-path">Make a token path&lt;/h2>
&lt;p>In this case it is Laravel and I just add this route (in a Controller or route.php same idea)&lt;/p>
&lt;pre>&lt;code> /**
* @Get(&amp;quot;auth/token&amp;quot;)
*/
public function getToken()
{
return csrf_token();
}
&lt;/code>&lt;/pre>&lt;h2 id="make-your-angular-service-and-inject-it-into-the-controller">Make your Angular Service and inject it into the Controller&lt;/h2>
&lt;p>Service in this case is&lt;/p>
&lt;pre>&lt;code>(function(){
'use strict';
function TokenService($http)
{
return {
get: get
};
////
function get() {
return $http.get('auth/token').then(
success,
fail
);
}
function success(response) {
return response;
}
function fail(response) {
return response;
}
}
angular
.module('app')
.factory('TokenService', TokenService);
})();
&lt;/code>&lt;/pre>&lt;p>The ui router passes it in on this POST related route&lt;/p>
&lt;pre>&lt;code> .state('projects_create', {
url: '/projects/create',
views: {
'': {
templateUrl: 'assets/js/projects/templates/projects.edit.html',
resolve: {
project: ['ProjectsService', function(ProjectsService){
return ProjectsService.create();
}],
token: ['TokenService', function(TokenService) {
return TokenService.get();
}]
},
controller: 'ProjectsCreateCtrl',
controllerAs: 'vm'
}
}
})
&lt;/code>&lt;/pre>&lt;p>Since it is a promise and in the resolve we get the benefits of not loading the page till this is done loading. A nice addition here could be getting is current_user info etc.&lt;/p>
&lt;p>Add it to your Angular Controller&lt;/p>
&lt;pre>&lt;code> function ProjectsCreateCtrl(project, token, ProjectHelpers, $window, Noty)
{
var vm = this;
vm.token = token.data;
&lt;/code>&lt;/pre>&lt;p>Later, using &lt;a href="https://github.com/mgonto/restangular">Restangular&lt;/a>, during the post I add it to the payload. So when the user clicks Create Project they trigger this.&lt;/p>
&lt;pre>&lt;code>function saveProject()
{
vm.rest.route = 'api/v1/projects';
vm.rest._token = vm.token;
vm.rest.post()
.then(function(response) {
vm.success(response);
}, function(response){
vm.fail(response);
});
}
&lt;/code>&lt;/pre>&lt;p>That is it. You can see it in the form&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/hilfee68v8acyx7/intheform.png?dl=0" alt="form">&lt;/p>
&lt;p>And you can remove it to show the form fail.&lt;/p>
&lt;p>You can also see it in the payload we are posting.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/4vy90lut4l12o55/Screenshot%202014-10-15%2014.38.35.png?dl=0" alt="post">&lt;/p></description><category>angularjs</category><category>laravel</category><category>l5</category><category>csrf</category></item><item><title>Temporary Auth Updates L5</title><link>https://alfrednutile.info/posts/109/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/109/</guid><description>&lt;h1 id="auth-updates">Auth updates&lt;/h1>
&lt;p>First make sure your composer update has the latest Laravel and check that
there are not relevant fixes already via laravel/docs master laravel/framework master or laravel/laravel dev&lt;/p>
&lt;p>Moved evn files to the new format and only 1 is needed now having the&lt;/p>
&lt;pre>&lt;code>APP_ENV='local'
&lt;/code>&lt;/pre>&lt;p>setting for the environment.&lt;/p>
&lt;p>Then update the path in the AuthController to go to auth/login&lt;/p>
&lt;pre>&lt;code>#app/Http/Controllers/Auth/AuthController
public function login(LoginRequest $request)
{
if ($this-&amp;gt;auth-&amp;gt;attempt($request-&amp;gt;only('email', 'password')))
{
return redirect('/');
}
return redirect('/auth/login')-&amp;gt;withErrors([
'email' =&amp;gt; 'The credentials you entered did not match our records. Try again?',
]);
}
&lt;/code>&lt;/pre>&lt;p>Here is a good article on using annotations which are needed now in the controller.&lt;/p>
&lt;p>&lt;a href="http://mattstauffer.co/blog/laravel-5.0-route-annotations">http://mattstauffer.co/blog/laravel-5.0-route-annotations&lt;/a>&lt;/p>
&lt;p>For example I remove api/v1/projects from routes.php (which is key it can not be in both)&lt;/p>
&lt;p>Then in the ProjectsController.php I added this to the top of the class&lt;/p>
&lt;pre>&lt;code>/**
* @Middleware(&amp;quot;BehatEditor\Http\Middleware\AuthMiddleware&amp;quot;)
* @Before(&amp;quot;auth&amp;quot;)
*/
class ProjectsController extends BaseController {
&lt;/code>&lt;/pre>&lt;p>and in the index function&lt;/p>
&lt;pre>&lt;code>
/**
* @Get(&amp;quot;api/v1/projects&amp;quot;, as=&amp;quot;api.v1.projects&amp;quot;)
* @return mixed
*/
public function index()
{
try
{
$results = $this-&amp;gt;service-&amp;gt;getAllProjectsForThisUser();
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded Projects&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;Error Getting Project Failed&amp;quot;), 422);
}
}
&lt;/code>&lt;/pre>&lt;p>So the route is now api/v1/projects using Get and the route name for ease of use is api.v1.projects&lt;/p>
&lt;p>Then I ran&lt;/p>
&lt;pre>&lt;code>php artisan route:scan
&lt;/code>&lt;/pre>&lt;p>to get this file made for me&lt;/p>
&lt;pre>&lt;code>storage/framework/routes.scanned.php
&lt;/code>&lt;/pre>&lt;p>Inside we see&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
$router-&amp;gt;get('auth/login', ['uses' =&amp;gt; 'App\Http\Controllers\Auth\AuthController@showLoginForm', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; NULL, 'middleware' =&amp;gt; array (
0 =&amp;gt; 'csrf',
1 =&amp;gt; 'guest',
), 'where' =&amp;gt; array (
)]);
$router-&amp;gt;post('auth/login', ['uses' =&amp;gt; 'App\Http\Controllers\Auth\AuthController@login', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; NULL, 'middleware' =&amp;gt; array (
0 =&amp;gt; 'csrf',
1 =&amp;gt; 'guest',
), 'where' =&amp;gt; array (
)]);
$router-&amp;gt;get('auth/logout', ['uses' =&amp;gt; 'App\Http\Controllers\Auth\AuthController@logout', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; NULL, 'middleware' =&amp;gt; array (
0 =&amp;gt; 'csrf',
1 =&amp;gt; 'guest',
), 'where' =&amp;gt; array (
)]);
$router-&amp;gt;get('api/v1/sites/reports', ['uses' =&amp;gt; 'App\Http\Controllers\DashController@getDash', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; 'sites.reports', 'middleware' =&amp;gt; array (
0 =&amp;gt; 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' =&amp;gt; array (
)]);
$router-&amp;gt;get('api/v1/projects', ['uses' =&amp;gt; 'App\Http\Controllers\ProjectsController@index', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; 'api.v1.projects', 'middleware' =&amp;gt; array (
0 =&amp;gt; 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' =&amp;gt; array (
)]);
$router-&amp;gt;get('sites', ['uses' =&amp;gt; 'App\Http\Controllers\SitesController@index', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; 'sites.index', 'middleware' =&amp;gt; array (
0 =&amp;gt; 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' =&amp;gt; array (
)]);
&lt;/code>&lt;/pre>&lt;p>All the App namespaces can really be your App or the default Laravel app files.&lt;/p>
&lt;p>This file is auto generated from that command so do not edit it.&lt;/p>
&lt;p>The one we just made is&lt;/p>
&lt;pre>&lt;code>$router-&amp;gt;get('api/v1/projects', ['uses' =&amp;gt; 'App\Http\Controllers\ProjectsController@index', 'domain' =&amp;gt; NULL, 'as' =&amp;gt; 'api.v1.projects', 'middleware' =&amp;gt; array (
0 =&amp;gt; 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' =&amp;gt; array (
)]);
&lt;/code>&lt;/pre></description><category>laravel</category><category>laravel 5</category><category>auth</category></item><item><title>Chrome and Behat</title><link>https://alfrednutile.info/posts/108/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/108/</guid><description>&lt;p>Getting Chrome run was &amp;ldquo;easy&amp;rdquo; thanks to &lt;a href="https://groups.google.com/forum/#!topic/behat/_xHeL0Y-kWA">this post&lt;/a>&lt;/p>
&lt;p>My install has behat running inside of a vagrant box so my behat.yml talks to Selenium running on my Mac and uses my Macs Chrome&lt;/p>
&lt;pre>&lt;code>default:
paths:
features: behat/features
bootstrap: features/bootstrap
formatter:
name: pretty
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte: null
selenium2:
wd_host: &amp;quot;http://192.168.33.1:4444/wd/hub&amp;quot;
capabilities: { &amp;quot;browserName&amp;quot;: &amp;quot;chrome&amp;quot;, &amp;quot;browser&amp;quot;: &amp;quot;chrome&amp;quot;, &amp;quot;version&amp;quot;: &amp;quot;25&amp;quot;, 'chrome': {'switches':['--no-sandbox']}}
base_url: 'http://cms.dev:8000/'
browser_name: chrome
&lt;/code>&lt;/pre>&lt;p>I placed chromedriver in /opt and just ran this&lt;/p>
&lt;pre>&lt;code>java -jar selenium-server-standalone-2.43.1.jar -Dwebdriver.chrome.driver=&amp;quot;/opt/chromedriver&amp;quot;
&lt;/code>&lt;/pre>&lt;p>That was it. Now in my vagrant box I can run behat to open the chrome browser which happens to be faster for me than Safari and Firefox on this mac.&lt;/p></description><category>behat</category><category>chrome</category></item><item><title>Design Guide - Controllers, Services and IOC</title><link>https://alfrednutile.info/posts/107/</link><pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/107/</guid><description>&lt;h2 id="design-guides">Design Guides&lt;/h2>
&lt;ul>
&lt;li>Controllers - contains application logic and passing user input data to service&lt;/li>
&lt;li>Services - The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.&lt;/li>
&lt;li>Repositories - layer for interaction with models and performing DB operations&lt;/li>
&lt;li>Models - common laravel model files with relationships defined&lt;/li>
&lt;/ul>
&lt;h1 id="in-and-out-burgers">In and Out Burgers&lt;/h1>
&lt;p>Between the user&amp;rsquo;s request and the response is the application. The above design guide not only gives us a consistent, flexible way to manage a requests and responses from a web user but then leads us into creating applications that can manage consul request as well.&lt;/p>
&lt;p>&lt;img src="https://docs.google.com/drawings/d/1D601St_IuaZ8FKW2eXQYqE2vHqZxRRLtmB8eGpQw8Aw/pub?w=761&amp;amp;h=296" alt="in and out">&lt;/p>
&lt;p>Starting with the book by the Author of Laravel, Tyler Otwell&lt;/p>
&lt;p>&lt;a href="https://leanpub.com/laravel">book laravel&lt;/a>&lt;/p>
&lt;p>The great thing about this book is that it is not really about Laravel but about SOLID design principles&lt;/p>
&lt;ul>
&lt;li>Single responsibility principle&lt;/li>
&lt;li>Open/closed principle&lt;/li>
&lt;li>Liskov substitution principle&lt;/li>
&lt;li>Interface segregation principle&lt;/li>
&lt;li>Dependency inversion principle&lt;/li>
&lt;/ul>
&lt;p>[wikipedia solid](&lt;a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&lt;/a>&lt;/p>
&lt;h1 id="change-to-scope-does-not-cause-bad-code-bad-design-patterns-cause-bad-code">Change to scope does not cause bad code, bad design patterns cause bad code.&lt;/h1>
&lt;p>&lt;em>Scope changes and that is fine.&lt;/em> This is key to the success of an application. It must change with the vision of the Product owner as deliverables bring to light what could not be seen on paper, mock ups, whiteboards etc.&lt;/p>
&lt;p>If we follow the Solid Design Principles then &amp;ldquo;change is okay&amp;rdquo; and easy.&lt;/p>
&lt;h1 id="back-to-the-book-laravel-from-apprentice-to-artisan">Back to the book &amp;ldquo;Laravel: from Apprentice to Artisan&lt;/h1>
&lt;p>So Tyler Otwell goes over each principle showing them in context of Laravel.&lt;/p>
&lt;p>Here are some key design patters to grasp&lt;/p>
&lt;h2 id="ioc">IOC&lt;/h2>
&lt;p>Inversion of control is fundamental to a flexible application that meets the 5 goals above. By &amp;ldquo;coding to an interface&amp;rdquo; we can not only work faster as a team but adapt to change easily.&lt;/p>
&lt;p>How to get here?&lt;/p>
&lt;p>Other than reading the book consider this common example.&lt;/p>
&lt;p>&amp;ldquo;Build A Contract&amp;rdquo; Taylor Otwell. Laravel: From Apprentice To Artisan (Kindle Location 75 to 185). leanpub.com.&lt;/p>
&lt;p>By hooking an Interface into the Service Provider we can attach any implementation we want to that interface.&lt;/p>
&lt;p>This means someone can be working on one part of the app talking to another part that is not even done yet cause they can mock out the responses based on an Interface.&lt;/p>
&lt;p>Using&lt;/p>
&lt;pre>&lt;code>php artisan make:provider BillingInterface
&lt;/code>&lt;/pre>&lt;p>You will easily setup the class to start with in the app/Providers folder&lt;/p>
&lt;p>Laravel 5 is taking this to the next level with &amp;ldquo;Contracts/Interfaces&amp;rdquo; as a big part of the framework.&lt;/p>
&lt;p>&lt;a href="https://laracasts.com/series/whats-new-in-laravel-5/episodes/7">laracasts contracts&lt;/a>&lt;/p>
&lt;p>This also means we can easily swap out classes as needed. The book goes over Billing we have another example Queue. We are using Beanstalkd to work locally and Amazon SQS to work on production. This is all done via such design patters. Interfaces/Contracts around talking to a queue.&lt;/p>
&lt;h1 id="controllers">Controllers&lt;/h1>
&lt;p>A request comes in and it sends it to the right service. Finally it delivers the response. Below is an example of what a method in a controller should have and no more.&lt;/p>
&lt;pre>&lt;code>app/Http/Controllers/ProjectsController.php:31
public function index()
{
try
{
$results = $this-&amp;gt;service-&amp;gt;getAllProjectsForThisUser();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded Projects&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;Error Getting Project Failed&amp;quot;), 422);
}
}
&lt;/code>&lt;/pre>&lt;p>It traps any errors and responds as needed to that error.&lt;/p>
&lt;h2 id="issues-with-above">Issues with above?&lt;/h2>
&lt;p>Yes! Error codes should come from the Service as well. How does the controller know a 422?&lt;/p>
&lt;h3 id="service-then-does-what">Service then does what?&lt;/h3>
&lt;p>As defined above&lt;/p>
&lt;p>&amp;ldquo;The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Validation&lt;/li>
&lt;li>Business Logic&lt;/li>
&lt;li>Calling Repositories&lt;/li>
&lt;li>Transform Data in and out&lt;/li>
&lt;li>Lastly returns the results with a know error code.&lt;/li>
&lt;/ul>
&lt;p>Since 422 is an HTTP Response&lt;/p>
&lt;pre>&lt;code>vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Response.php:64
&lt;/code>&lt;/pre>&lt;p>We should have possible a response transformer class to consider the non HTTP response. Then let the Controller pick from that to find its related HTTP response. See the &lt;a href="https://leanpub.com/build-apis-you-wont-hate">Build API&amp;rsquo;s You Wont&amp;rsquo;t Hate&lt;/a> for more on that. Covered in the other guide shortly too.&lt;/p></description><category>ioc</category><category>style guides</category></item><item><title>Multi Threaded Queue Processing</title><link>https://alfrednutile.info/posts/106/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/106/</guid><description>&lt;p>I needed a way to run a bunch of jobs in parallel and I am use to using the Symfony Process Component for that.&lt;/p>
&lt;p>So this post will show how I did this in Laravel 4.3 via the Queue so I can remember next time.&lt;/p>
&lt;p>What will come out of this is a workflow as seen here&lt;/p>
&lt;div markdown=0>
&lt;img src=https://dl.dropboxusercontent.com/s/url0i1ibk40u5o7/Screenshot%202014-09-10%2007.59.23.png?dl=0 width=700>
&lt;/div>
&lt;p>We will create two Artisan Commands. This allows us to use Symfony Process to run numerous &lt;strong>console commands&lt;/strong> in the background.&lt;/p>
&lt;p>I will not go over how to add a job to the queue there is plenty on that. I will show the class I used for the Queue and it&amp;rsquo;s attributes.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;job&amp;quot;:&amp;quot;Foo\\\\Reporting\\\\RequestsCommandQueueRunner&amp;quot;,
&amp;quot;data&amp;quot;:{
&amp;quot;results_uuid&amp;quot;:&amp;quot;4a13aaee-4289-4f95-afe5-ea5abaaed869&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>This gets pushed into the Queue. It is the &amp;ldquo;Parent&amp;rdquo; that will run x number of children commands. The x is defined in my .env.local.php or .env.production.php files. This way I can increase or decrease the number of threads it will run as needed.&lt;/p>
&lt;p>The results_uuid is the data I need to get the children. In this case the children have that uuid in their table as belongsTo that parent.&lt;/p>
&lt;h2 id="requestscommandqueuerunner">RequestsCommandQueueRunner&lt;/h2>
&lt;p>This Artisan command is quite simple&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
#app/Foo/RequestsCommandQueueRunner.php
namespace Foo\Reporting;
use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\QueueServices\QueueInterface;
class RequestsCommandQueueRunner implements QueueInterface {
protected $job_limit;
protected $results_uuid;
public function __construct()
{
$this-&amp;gt;job_limit = $_ENV['RESULTS_QUEUE_LIMIT'];
}
public function fire($job, $params)
{
$this-&amp;gt;results_uuid = $params['results_uuid'];
exec(&amp;quot;php artisan request:trigger $this-&amp;gt;results_uuid&amp;quot;, $results);
$job-&amp;gt;delete(); //@TODO make delete if all goes well catch error though and fail it
}
}
&lt;/code>&lt;/pre>&lt;p>All it does is passes the parent id to the trigger command. Below is the trigger command.&lt;/p>
&lt;p>Note too I am not using the job limit yet. Later I will make x number of Queue jobs as I divide the number of children that parent has by the limit set.&lt;/p>
&lt;h2 id="requestsqueuecommand">RequestsQueueCommand&lt;/h2>
&lt;pre>&lt;code>&amp;lt;?php namespace Foo\Console;
#app/Foo/Console/RequestsQueueCommand.php
use Foo\Models\ReportingOverviewBatchRequestJob;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Process\Process;
class RequestsQueueCommand extends Command {
protected $name = 'request:trigger';
protected $run = [];
protected $description = 'Trigger the running of related jobs';
protected $request_uuid;
protected $projects;
/**
* @var \Foo\Models\ReportingOverviewBatchRequestJob
*/
private $reporting_overview_batch_request_jobs;
public function __construct(
ReportingOverviewBatchRequestJob $reporting_overview_batch_request_jobs
)
{
parent::__construct();
$this-&amp;gt;reporting_overview_batch_request_jobs = $reporting_overview_batch_request_jobs;
}
public function fire()
{
$this-&amp;gt;request_uuid = $this-&amp;gt;argument('request_uuid');
$this-&amp;gt;setRelatedProjects();
$this-&amp;gt;setRun();
$this-&amp;gt;runRelatedProjectsCommand();
return &amp;quot;Fired&amp;quot;;
}
protected function getArguments()
{
return array(
array('request_uuid', InputArgument::REQUIRED, 'The uuid of the Request to trigger the jobs for'),
);
}
protected function setRelatedProjects()
{
$projects =
$this-&amp;gt;reporting_overview_batch_request_jobs-&amp;gt;getAllJobsForReportOverviewBatchRequestUuid($this-&amp;gt;request_uuid);
$this-&amp;gt;projects = $projects-&amp;gt;toArray();
return $this-&amp;gt;projects;
}
protected function setRun()
{
foreach($this-&amp;gt;projects as $project)
{
$this-&amp;gt;addToRun($project['id']);
}
}
protected function runRelatedProjectsCommand()
{
foreach($this-&amp;gt;run as $process)
{
$process-&amp;gt;start();
}
while(count($this-&amp;gt;run) &amp;gt; 0)
{
foreach($this-&amp;gt;run as $key =&amp;gt; $process)
{
if(!$process-&amp;gt;isRunning())
{
\Log::info(&amp;quot;Done running process&amp;quot;);
unset($this-&amp;gt;run[$key]);
}
}
}
}
protected function addToRun($project_id)
{
$this-&amp;gt;run[] = new Process(&amp;quot;php artisan request:run $project_id&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;p>Here is where things get interesting. I begin the work of finding the children Ids then making an array of &lt;strong>console commands&lt;/strong> to run using the children id as the argument I pass.&lt;/p>
&lt;p>The Process Component allows me to &lt;strong>start them in the background&lt;/strong> and then check on them while they are running.&lt;/p>
&lt;p>Now for the command it runs &amp;ldquo;php artisan request:run $project_id&amp;rdquo;&lt;/p>
&lt;h2 id="requestsjobruncommand">RequestsJobRunCommand&lt;/h2>
&lt;p>This is the process that does the long running work. In this case logs into Github, get some info and reports on it.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace Foo\Console;
use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\Services\RequestJobRunService;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
class RequestsJobRunCommand extends Command {
protected $name = 'request:run';
protected $description = 'Run the related job';
protected $job_uuid;
/**
* @var RequestJobRunService
*/
private $requestJobRunService;
/**
* Id of the job we will run
* @var
*/
protected $related_job;
public function __construct(RequestJobRunService $requestJobRunService)
{
parent::__construct();
$this-&amp;gt;requestJobRunService = $requestJobRunService;
}
public function fire()
{
$this-&amp;gt;job_uuid = $this-&amp;gt;argument('job_uuid');
$this-&amp;gt;loadTheJobsInfo();
$this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()-&amp;gt;authenticate();
$this-&amp;gt;getJobsAndCount();
return &amp;quot;Fired&amp;quot;;
}
protected function getJobsAndCount()
{
try {
$tests = $this-&amp;gt;getRelatedTests();
$tests_count = count($tests);
\Log::info(sprintf(&amp;quot;Updating ReportingOverviewRequest with uuid %s&amp;quot;, $this-&amp;gt;job_uuid));
$this-&amp;gt;related_job-&amp;gt;status = 1;
$this-&amp;gt;related_job-&amp;gt;number_of_tests = $tests_count;
$this-&amp;gt;related_job-&amp;gt;save();
} catch(\Exception $e) {
$this-&amp;gt;related_job-&amp;gt;status = 1; // mark done for now though a fail noted in message box
$this-&amp;gt;related_job-&amp;gt;message = $e-&amp;gt;getMessage();
$this-&amp;gt;related_job-&amp;gt;save();
\Log::error(sprintf(&amp;quot;Error processing job %s for request job request parent uuid %s error &amp;quot;, $this-&amp;gt;related_job-&amp;gt;id, $this-&amp;gt;related_job-&amp;gt;reporting_overview_batch_request_id, $e-&amp;gt;getMessage()));
}
}
protected function getRelatedTests()
{
try {
return $this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()
-&amp;gt;setReponame($this-&amp;gt;related_job-&amp;gt;repo_name)
-&amp;gt;setAccountName($this-&amp;gt;related_job-&amp;gt;account_name)
-&amp;gt;setBranch($this-&amp;gt;related_job-&amp;gt;branch)
-&amp;gt;index($this-&amp;gt;related_job-&amp;gt;folder);
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting index of github &amp;quot; . $e-&amp;gt;getMessage());
}
}
protected function loadTheJobsInfo()
{
$this-&amp;gt;related_job = $this-&amp;gt;requestJobRunService-&amp;gt;getReportingOverviewBatchRepository()-&amp;gt;getReportingOverviewBatchRequestJobsModelInterface()
-&amp;gt;findOrFail($this-&amp;gt;job_uuid);
}
protected function getArguments()
{
return array(
array('job_uuid', InputArgument::REQUIRED, 'The uuid of the related request job to run'),
);
}
}
&lt;/code>&lt;/pre>&lt;p>There still is some work to do. I have to set the limit so my initial run does not timeout. I also need to clean up some code so that these classes are digging so deep into the other classes.&lt;/p>
&lt;p>But this was just to show how to use Symfony Process Component, Laravel Queue, and Laravel Artisan to run a multi threaded task.&lt;/p></description><category>laravel</category><category>php</category><category>note2self</category><category>4.3</category></item><item><title>Team Style Guides and Mind Set</title><link>https://alfrednutile.info/posts/105/</link><pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/105/</guid><description>&lt;p>Been sharing this info with team members a bit lately and want to post it here for reference.
Though there is no ONE way to do any of this there are ways that scale better than others. But more importantly having one way as a team to do things can be key to projects from beginning to end (eg the rest of the projects life!)&lt;/p>
&lt;h1 id="project-style-guides">Project Style Guides&lt;/h1>
&lt;p>&lt;a href="https://kindle.amazon.com/work/the-clean-coder-professional-programmers-ebook/B004SJU478/B0050JLC9Y">The Clean Coder&lt;/a> by Robert Martin book is a look at being a &amp;ldquo;Professional&amp;rdquo; coder and all that comes with it.
It is a great look at not only how one should be in the role of a Programmer but what to expect of each other as a team.&lt;/p>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51MoTaVrS7L._SS130_.jpg" alt="clean code">&lt;/p>
&lt;p>&lt;a href="https://kindle.amazon.com/work/domain-driven-design-tackling-complexity-software-ebook/B001KBG6RO/B00794TAUG">Domain Driven Deisgn&lt;/a>
A great look at being a programmer that not only makes code but more importantly bridges the gap between the vision of the business with the goals of the code.&lt;/p>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51WLtI-uLcL._SS130_.jpg" alt="ddd">&lt;/p>
&lt;hr>
&lt;h1 id="php-style-guides">PHP Style Guides&lt;/h1>
&lt;p>Back to Robert Martin again on this to start &lt;a href="https://kindle.amazon.com/work/clean-code-handbook-software-craftsmanship-ebook/B001GTWCJG/B001GSTOAM">Clean Code&lt;/a>&lt;/p>
&lt;p>It is not about PHP directly but it all applies to good Oo PHP design patterns and thinking. There are so many classics he quotes that could be added here as well.&lt;/p>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/41XojFFhYlL._SS130_.jpg" alt="clean code">&lt;/p>
&lt;hr>
&lt;h1 id="angular-style-guides">Angular Style Guides&lt;/h1>
&lt;p>I use to start with Angular Seed but always thought it fell short when the project grew and this guide made it clear to me why. IMO it is a much better approach to Angular &lt;a href="https://github.com/johnpapa/angularjs-styleguide">John Papa&lt;/a>. This guide includes examples which is great.&lt;/p>
&lt;hr>
&lt;h1 id="api-guides">API Guides&lt;/h1>
&lt;p>There are a number of great books on this as well. Right now a short and simple look at how to make an API, I think, is &lt;a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&amp;rsquo;t Hate&lt;/a> by Phil Sturgeon. Great code example too on Behat and API testing&lt;/p>
&lt;p>&lt;img src="https://s3.amazonaws.com/titlepages.leanpub.com/build-apis-you-wont-hate/small?1408731468" alt="apis">&lt;/p>
&lt;hr>
&lt;h1 id="uml-20">UML 2.0&lt;/h1>
&lt;p>A unified means to communicate ideas to each other and to product owners. Before digging into code this is a great way for teams to communicate all the way from higher level overview down to the classes and constructors.&lt;/p>
&lt;p>Seems the Gang of Four book, Robert Martin books and Domain Driven Design all point to this as a way to sketch out ideas or even use it as a long term blueprint to go hand and hand with deployed code. The &lt;a href="http://www.amazon.com/UML-2-0-Nutshell-OReilly-ebook/dp/B0026OR2L8/ref=tmm_kin_title_0?_encoding=UTF8&amp;amp;sr=8-1&amp;amp;qid=1410697423">UML 2.0 in a Nutshell&lt;/a> along with the more in depth O&amp;rsquo;Reilly book UML 2.0 second edition.&lt;/p>
&lt;p>&lt;img src="http://ecx.images-amazon.com/images/I/41FVsizkpIL._BO2,204,203,200_PIsitb-sticker-v3-big,TopRight,0,-55_SX278_SY278_PIkin4,BottomRight,1,22_AA300_SH20_OU01_.jpg" alt="nutshell">&lt;/p>
&lt;hr>
&lt;h1 id="bdd--tdd">BDD / TDD&lt;/h1>
&lt;p>Testing is really key I think know one anymore doubts that. What you end up with is Code that you can refactor and make better over time with confidence. And as a team that is important. It also leads to one of the best sources of documentation. This presentation talks about &lt;a href="https://amsterdam2014.drupal.org/session/doing-behaviour-driven-development-behat">BDD&lt;/a> and &lt;a href="http://everzet.com/post/99045129766/introducing-modelling-by-example">article&lt;/a> really take it to the next level. As the test become the glue between the goals of the business and the code of the developers.&lt;/p>
&lt;h1 id="final-notes">Final Notes&lt;/h1>
&lt;p>Robert Martin really hones in for me why testing is so important. It is not about TDD in the end &lt;strong>but maintainable and changeable code&lt;/strong>. And so even though much of the above seems like more work upfront it really leads to better code and better experiences as a coder and more importantly as a team.&lt;/p>
&lt;p>Also Pair programming is a great use of time and should not be feared. Too much of it wears me out but just the right amount can be a powerful way to get a team member up to speed on a new part to a project or just to check in with each other and spend some time coding and growing as a team. It is scary to share in something as personal as coding but in the end we all can learn from each other.&lt;/p>
&lt;hr>
&lt;h1 id="misc-reads">Misc Reads&lt;/h1>
&lt;p>Not as key as the ones above imo but still super helpful. Though POODR could easily be moved above.&lt;/p>
&lt;h2 id="practical-object-oriented-design-in-ruby-an-agile-primerhttpskindleamazoncomworkpractical-object-oriented-design-ruby-addison-wesley-ebookb0096gequeb0096byg7c">&lt;a href="https://kindle.amazon.com/work/practical-object-oriented-design-ruby-addison-wesley-ebook/B0096GEQUE/B0096BYG7C">Practical Object-Oriented Design in Ruby: An Agile Primer&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51lFbn3LPCL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51lFbn3LPCL.SS130.jpg">&lt;/p>
&lt;h2 id="php-objects-patterns-and-practicehttpskindleamazoncomworkobjects-patterns-practice-experts-source-ebookb003xrx1qmb003xqf3nw">&lt;a href="https://kindle.amazon.com/work/objects-patterns-practice-experts-source-ebook/B003XRX1QM/B003XQF3NW">PHP Objects, Patterns and Practice&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51bJaFjTZnL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51bJaFjTZnL.SS130.jpg">&lt;/p>
&lt;h2 id="laravel-from-apprentice-to-artisanhttpsleanpubcomlaravel">&lt;a href="https://leanpub.com/laravel">Laravel: From Apprentice To Artisan&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://s3.amazonaws.com/titlepages.leanpub.com/laravel/small?1387959278" alt="https://s3.amazonaws.com/titlepages.leanpub.com/laravel/small?1387959278">&lt;/p>
&lt;h2 id="eloquent-javascript-a-modern-introduction-to-programminghttpskindleamazoncomworkeloquent-javascript-modern-introduction-programming-ebookb00409onimb004oejnq0">&lt;a href="https://kindle.amazon.com/work/eloquent-javascript-modern-introduction-programming-ebook/B00409ONIM/B004OEJNQ0">Eloquent JavaScript: A Modern Introduction to Programming&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/519WDGN-9DL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/519WDGN-9DL.SS130.jpg">&lt;/p>
&lt;h2 id="nodejs-the-right-way-practical-server-side-javascript-that-scaleshttpskindleamazoncomworknode-js-right-way-server-side-javascript-ebookb00hsocscyb00hso6yd8">&lt;a href="https://kindle.amazon.com/work/node-js-right-way-server-side-javascript-ebook/B00HSOCSCY/B00HSO6YD8">Node.js the Right Way: Practical, Server-Side JavaScript That Scales&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51%2BVjuSvKJL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51%2BVjuSvKJL.SS130.jpg">&lt;/p>
&lt;h2 id="the-pragmatic-programmer-from-journeyman-to-masterhttpskindleamazoncomworknode-js-right-way-server-side-javascript-ebookb00hsocscyb00hso6yd8">&lt;a href="https://kindle.amazon.com/work/node-js-right-way-server-side-javascript-ebook/B00HSOCSCY/B00HSO6YD8">The Pragmatic Programmer: From Journeyman to Master&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/41oqLxoTYsL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/41oqLxoTYsL.SS130.jpg">&lt;/p>
&lt;h2 id="restful-web-apishttpskindleamazoncomworkrestful-web-apis-leonard-richardson-ebookb00dduvtr2b00f5bs966">&lt;a href="https://kindle.amazon.com/work/restful-web-apis-leonard-richardson-ebook/B00DDUVTR2/B00F5BS966">RESTful Web APIs&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/51KhFuo-5%2BL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51KhFuo-5%2BL.SS130.jpg">&lt;/p></description><category>php</category><category>angular.js</category><category>coder</category></item><item><title>Sorting related models in Laravel</title><link>https://alfrednutile.info/posts/104/</link><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/104/</guid><description>&lt;p>There are a number of related models to this one model that I store in the Models $relations property&lt;/p>
&lt;pre>&lt;code> protected static $relations = [
'owner',
'apns',
'zoning_urls',
'structures.address',
'structures.comments.user.profiles',
'listings',
'attachments',
'structures.structure_type',
'property_owner',
'primary_property_type',
'address',
'property_specialist.profiles',
'listings.team'
];
&lt;/code>&lt;/pre>&lt;p>This allows me to easily reuse this for each query&lt;/p>
&lt;pre>&lt;code>$found = $found-&amp;gt;load(static::$relations);
&lt;/code>&lt;/pre>&lt;p>But there is one model I removed from that list to do a dynamic query/sorting on it&lt;/p>
&lt;pre>&lt;code> $found = $this-&amp;gt;property-&amp;gt;with([
'verifiers' =&amp;gt; function($query) {
$query-&amp;gt;with('user.profiles')-&amp;gt;orderBy('id', 'DESC');
},
])-&amp;gt;findOrFail($id);
$found = $found-&amp;gt;load(static::$relations);
&lt;/code>&lt;/pre>&lt;p>veifiers was part of the protected static $relations list but I moved it out since, for each query, I need to sort them from last to first.&lt;/p></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Behat for testing RESTful APIs</title><link>https://alfrednutile.info/posts/103/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/103/</guid><description>&lt;p>The code for behat&amp;rsquo;s FeatureContext comes from this repo and book &lt;a href="https://github.com/philsturgeon/build-apis-you-wont-hate">https://github.com/philsturgeon/build-apis-you-wont-hate&lt;/a>&lt;/p>
&lt;p>I will bring it together so before long you can run tests like this&lt;/p>
&lt;p>&lt;a href="http://youtu.be/K4DoYv9X-bQ">&lt;img src="https://dl.dropboxusercontent.com/s/u7v2uw6ged5uz9g/behat_api_youtube.png?dl=0" alt="test">&lt;/a>&lt;/p>
&lt;p>The road map will be&lt;/p>
&lt;ul>
&lt;li>Quick Setup Notes&lt;/li>
&lt;li>GET requests&lt;/li>
&lt;li>POST request&lt;/li>
&lt;li>Tie into your framework&lt;/li>
&lt;li>Seeding step&lt;/li>
&lt;li>Query your db step&lt;/li>
&lt;li>PUT request&lt;/li>
&lt;/ul>
&lt;h2 id="quick-setup-notes">Quick Setup Notes&lt;/h2>
&lt;p>Setting up behat is beyond the scope of this. If you want try &lt;a href="https://github.com/alnutile/behat-seed">alnutile/behat-seed&lt;/a> to get going on testing since it can be used to hit any API. But using the FeatureContext file from the &lt;a href="https://github.com/philsturgeon/build-apis-you-wont-hate">https://github.com/philsturgeon/build-apis-you-wont-hate&lt;/a> instead. So with that and his composer.json info we are ready to build out our testing environment.&lt;/p>
&lt;p>With that setup we are using composer to pull in all the packages and now have guzzle at our disposal.&lt;/p>
&lt;p>Also the behat.yml file needs the default context parameters setup.&lt;/p>
&lt;pre>&lt;code>default:
paths:
features: behat/features
bootstrap: features/bootstrap
context:
parameters:
base_url: http://local.dev
&lt;/code>&lt;/pre>&lt;p>Sometimes I would not set this since I do mostly selenium work.&lt;/p>
&lt;h2 id="get-request">GET Request&lt;/h2>
&lt;p>To start with we will test using GET, a very simple start.&lt;/p>
&lt;pre>&lt;code>Feature: Projects
This projects data
As an authenticated user
I should be able to see all the projects of my team
Scenario: I should see projects output
Given I reseed the database
When I request &amp;quot;GET /api/v1/projects&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
And data has 5 items
&lt;/code>&lt;/pre>&lt;p>That is it! Behat will not hit that endpoint using Guzzle and do a get request. We test the response and then count the results.&lt;/p>
&lt;p>Here is the count code&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^data has (\d+) items/
*/
public function dataHasItems($arg)
{
$results = $this-&amp;gt;getResponsePayload();
assertCount($arg, $results-&amp;gt;data);
}
&lt;/code>&lt;/pre>&lt;h2 id="post-request">POST Request&lt;/h2>
&lt;p>This got a bit trickier&lt;/p>
&lt;p>The final result looked like this&lt;/p>
&lt;pre>&lt;code>Scenario: Creating a new Project and new Site
Given I reseed the database
Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{ &amp;quot;data&amp;quot;:
{
&amp;quot;name&amp;quot;: &amp;quot;test foo&amp;quot;,
&amp;quot;branch&amp;quot;: &amp;quot;test&amp;quot;,
&amp;quot;folder&amp;quot;: &amp;quot;foo&amp;quot;,
&amp;quot;active&amp;quot;: 1,
&amp;quot;team_id&amp;quot;: &amp;quot;foo-bar-foo-baz-5&amp;quot;,
&amp;quot;site_id&amp;quot;: &amp;quot;test-foo-site-id-test-new&amp;quot;,
&amp;quot;urls&amp;quot;: [
{&amp;quot;name&amp;quot;: &amp;quot;Url 1 Behat&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;http://foo1.behat&amp;quot; },
{&amp;quot;name&amp;quot;: &amp;quot;Url 2 Behat&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;http://foo2.behat&amp;quot; }
],
&amp;quot;site_object&amp;quot;: {
&amp;quot;id&amp;quot;: &amp;quot;test-foo-site-id-test-new&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Site via Behat&amp;quot;,
&amp;quot;repo_name&amp;quot;: &amp;quot;foo_repo&amp;quot;,
&amp;quot;active&amp;quot;: 1
},
&amp;quot;team_object&amp;quot;: {
&amp;quot;id&amp;quot;: &amp;quot;foo-bar-foo-baz-5&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Team 5&amp;quot;
}
}
}
&amp;quot;&amp;quot;&amp;quot;
When I request &amp;quot;POST /api/v1/projects&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
When I request &amp;quot;GET /api/v1/projects&amp;quot;
And data has 6 items
And there are 6 rows of &amp;quot;\BehatEditor\Models\Site&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Lets cover it one line or so at a time&lt;/p>
&lt;pre>&lt;code>Given I reseed the database
&lt;/code>&lt;/pre>&lt;p>Sometimes I want to start with a new data set and this is what triggers it. I will cover this more in the sections below &amp;ldquo;Tie into your framework&amp;rdquo; and &amp;ldquo;Seeding step&amp;rdquo;&lt;/p>
&lt;p>Now the payload&lt;/p>
&lt;pre>&lt;code>Given I have the payload:
&amp;quot;&amp;quot;&amp;quot;
{ &amp;quot;data&amp;quot;:
{
&amp;quot;name&amp;quot;: &amp;quot;test foo&amp;quot;,
&amp;quot;branch&amp;quot;: &amp;quot;test&amp;quot;,
&amp;quot;folder&amp;quot;: &amp;quot;foo&amp;quot;,
&amp;quot;active&amp;quot;: 1,
&amp;quot;team_id&amp;quot;: &amp;quot;foo-bar-foo-baz-5&amp;quot;,
&amp;quot;site_id&amp;quot;: &amp;quot;test-foo-site-id-test-new&amp;quot;,
&amp;quot;urls&amp;quot;: [
{&amp;quot;name&amp;quot;: &amp;quot;Url 1 Behat&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;http://foo1.behat&amp;quot; },
{&amp;quot;name&amp;quot;: &amp;quot;Url 2 Behat&amp;quot;, &amp;quot;path&amp;quot;: &amp;quot;http://foo2.behat&amp;quot; }
],
&amp;quot;site_object&amp;quot;: {
&amp;quot;id&amp;quot;: &amp;quot;test-foo-site-id-test-new&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Site via Behat&amp;quot;,
&amp;quot;repo_name&amp;quot;: &amp;quot;foo_repo&amp;quot;,
&amp;quot;active&amp;quot;: 1
},
&amp;quot;team_object&amp;quot;: {
&amp;quot;id&amp;quot;: &amp;quot;foo-bar-foo-baz-5&amp;quot;,
&amp;quot;name&amp;quot;: &amp;quot;Team 5&amp;quot;
}
}
}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code>&lt;/pre>&lt;p>The API expects the payload to be in the data object. From there it is just a object of data relative to the Project endpoint. We will see too this gets pretty cool cause we will make sure new sites are made, new urls are made etc as needed.&lt;/p>
&lt;pre>&lt;code>When I request &amp;quot;POST /api/v1/projects&amp;quot;
Then I get a &amp;quot;200&amp;quot; response
&lt;/code>&lt;/pre>&lt;p>Then we post it. Phil&amp;rsquo;s code was modified a bit here&lt;/p>
&lt;pre>&lt;code> /**
* @When /^I request &amp;quot;(GET|PUT|POST|DELETE) ([^&amp;quot;]*)&amp;quot;$/
*/
public function iRequest($httpMethod, $resource)
{
$this-&amp;gt;resource = $resource;
$method = strtolower($httpMethod);
try {
switch ($httpMethod) {
case 'PUT':
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource, null, $this-&amp;gt;requestPayload);
break;
case 'POST':
$post = \GuzzleHttp\json_decode($this-&amp;gt;requestPayload, true);
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource, array('body' =&amp;gt; $post));
break;
default:
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource);
}
} catch (BadResponseException $e) {
$response = $e-&amp;gt;getResponse();
// Sometimes the request will fail, at which point we have
// no response at all. Let Guzzle give an error here, it's
// pretty self-explanatory.
if ($response === null) {
throw $e;
}
$this-&amp;gt;response = $e-&amp;gt;getResponse();
}
}
&lt;/code>&lt;/pre>&lt;p>I added the post line (hmm need to pull out the json_decode just noticed that) anyways we send this off to Guzzle&amp;rsquo;s post method to send to the API.&lt;/p>
&lt;p>Basically I added this&lt;/p>
&lt;pre>&lt;code>case 'POST':
$post = \GuzzleHttp\json_decode($this-&amp;gt;requestPayload, true);
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource, array('body' =&amp;gt; $post));
break;
&lt;/code>&lt;/pre>&lt;p>As you see above.&lt;/p>
&lt;pre>&lt;code>When I request &amp;quot;GET /api/v1/projects&amp;quot;
And data has 6 items
And there are 6 rows of &amp;quot;\BehatEditor\Models\Site&amp;quot;
&lt;/code>&lt;/pre>&lt;p>This is to verify new items where made. The last line is to verify that a new Site was made since it does not have a restful endpoint to GET a count nor POST since it is only part of the Project and from an external API. The step for that is&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^there are (\d+) rows of &amp;quot;([^&amp;quot;]*)&amp;quot;$/
*/
public function thereAreRowsOf($arg1, $arg2)
{
$count = $arg2::all()-&amp;gt;count();
if($count != $arg1) {
throw new Exception(
&amp;quot;Actual count is:\n&amp;quot; . $count
);
}
}
&lt;/code>&lt;/pre>&lt;p>We pass in the namespace of the Model and the expected count and then run the query. More on that in the integration area.&lt;/p>
&lt;h2 id="tie-into-your-framework">Tie into your framework&lt;/h2>
&lt;p>For this project, Silex, it was quite easy. In the FeatureContext class I do this following making $this-&amp;gt;core the app.&lt;/p>
&lt;pre>&lt;code> public function __construct(array $parameters)
{
$config = isset($parameters['guzzle']) &amp;amp;&amp;amp; is_array($parameters['guzzle']) ? $parameters['guzzle'] : [];
$config['base_url'] = $parameters['base_url'];
$this-&amp;gt;client = new Client($config);
$this-&amp;gt;core = require_once __DIR__.'/../../../../bootstrap/start.php';
}
&lt;/code>&lt;/pre>&lt;p>I basically pull in the boostrap file with all the info to setup the database, methods etc used by the index.php and command line tools.
Then later on I can do queries of the db and other things that really need to tie into the framework. Like&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^there are (\d+) rows of &amp;quot;([^&amp;quot;]*)&amp;quot;$/
*/
public function thereAreRowsOf($arg1, $arg2)
{
$count = $arg2::all()-&amp;gt;count();
if($count != $arg1) {
throw new Exception(
&amp;quot;Actual count is:\n&amp;quot; . $count
);
}
}
&lt;/code>&lt;/pre>&lt;p>This takes the request&lt;/p>
&lt;pre>&lt;code>And there are 6 rows of &amp;quot;\BehatEditor\Models\Site&amp;quot;
&lt;/code>&lt;/pre>&lt;p>And queries the db using the Model class to do a simple all()-&amp;gt;count() on the results.&lt;/p>
&lt;h2 id="seeding">Seeding&lt;/h2>
&lt;p>Now that things are tied in I made a simple step for this&lt;/p>
&lt;pre>&lt;code> /**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
if($this-&amp;gt;core-&amp;gt;getEnv() != 'production') {
$path = __DIR__.'/../../../../' . 'setup/seed.php';
exec(&amp;quot;php $path&amp;quot;);
}
}
&lt;/code>&lt;/pre>&lt;h2 id="put-coming-soon">PUT Coming soon&lt;/h2>
&lt;h2 id="delete-coming-soon">Delete Coming Soon&lt;/h2>
&lt;h2 id="auth-coming-soon">Auth Coming soon&lt;/h2></description><category>behat</category><category>php</category></item><item><title>Boris REPL and you Applicatoin (Silex in this case)</title><link>https://alfrednutile.info/posts/102/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/102/</guid><description>&lt;p>This video will cover the details &lt;a href="http://youtu.be/RHdxSsCDmNQ">http://youtu.be/RHdxSsCDmNQ&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://camo.githubusercontent.com/18c23fa613beeb044a7ba1ba58a5dfefe120ca6f/687474703a2f2f646c2e64726f70626f782e636f6d2f752f3530383630372f426f72697344656d6f2d76342e676966" alt="boris">&lt;/p>
&lt;p>Just a few notes though &lt;a href="https://github.com/d11wtq/boris">https://github.com/d11wtq/boris&lt;/a> is a better place for getting started overall.&lt;/p>
&lt;h2 id="borisrc">Borisrc&lt;/h2>
&lt;p>This lives in the root of my application which includes the startup file for the application.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
#.borisrc
$core = require_once(__DIR__.'/bootstrap/start.php');
$boris = new \Boris\Boris('base_app&amp;gt; ');
$boris-&amp;gt;setLocal(array('core' =&amp;gt; $core));
$boris-&amp;gt;start();
&lt;/code>&lt;/pre>&lt;p>The start.php file I am using for the core startup needed by index.php, this and later a command line class to run the queue daemon and other things&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
#bootstrap/start.php
require __DIR__.'/../bootstrap/autoload.php';
$core = new \App\Core();
$core-&amp;gt;getApp();
if (file_exists(__DIR__ . '/../.env')) {
\Dotenv::load(__DIR__.'/../');
}
$paths = include(__DIR__.'/paths.php');
$core-&amp;gt;setUpPaths($paths);
$core-&amp;gt;setEnv();
$core-&amp;gt;setDatabaseConnection();
$core-&amp;gt;getApp()-&amp;gt;register(new Silex\Provider\MonologServiceProvider(), array(
'monolog.logfile' =&amp;gt; $core-&amp;gt;getStoragePath() . '/logs/core.log',
));
require_once(__DIR__.'/../custom_start.php');
return $core;
&lt;/code>&lt;/pre>&lt;p>So index.php like .borisrc calls to this&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
#public/index.php
$core = require_once __DIR__.'/../bootstrap/start.php';
$core = require_once __DIR__.'/../app/routes.php';
$core-&amp;gt;getApp()-&amp;gt;run();
&lt;/code>&lt;/pre>&lt;p>At this point, as seen in the video we can interact with the core app and other methods!&lt;/p></description><category>boris</category><category>php</category><category>silex</category></item><item><title>Drush and Homestead Vagrant Box</title><link>https://alfrednutile.info/posts/100/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/100/</guid><description>&lt;p>Had some trouble doing the normal composer install so I went with the manual install noted here &lt;a href="https://github.com/drush-ops/drush">https://github.com/drush-ops/drush&lt;/a>&lt;/p>
&lt;p>Basically I downloaded and unzipped the repo to /usr/local/sbin. Then I did a symlink to /usr/bin&lt;/p>
&lt;pre>&lt;code>cd /usr/bin
sudo ln -s /usr/local/sbin/drush/drush .
&lt;/code>&lt;/pre>&lt;p>Then in /usr/local/sbin/drush I ran&lt;/p>
&lt;pre>&lt;code>sudo composer install
&lt;/code>&lt;/pre></description><category>drush</category><category>drupal</category><category>laravel</category><category>homestead</category></item><item><title>Polymorphic relationship Laravel</title><link>https://alfrednutile.info/posts/99/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/99/</guid><description>&lt;p>This example will show a typical &amp;ldquo;Attachment&amp;rdquo; need. The Laravel docs really do cover alot as seen &lt;a href="http://laravel.com/docs/eloquent#polymorphic-relations">here&lt;/a> especially &lt;strong>&amp;ldquo;Polymorphic Relation Table Structure”&lt;/strong>. I cover many to many polymorphic relationships &lt;a href="http://www.alfrednutile.info/posts/95">here&lt;/a>&lt;/p>
&lt;p>I will cover an example of an Attachment that has some fields. And it is related to a model, in this example &amp;ldquo;Post&amp;rdquo;&lt;/p>
&lt;p>Using the &lt;a href="https://github.com/JeffreyWay/Laravel-4-Generators">Way Generators&lt;/a> to make this resource.&lt;/p>
&lt;pre>&lt;code>php artisan generate:resource attachment --fields=&amp;quot;attachable_type:string, attachable_id:integer, name:string, file_name:string, note:text, tag:string”
&lt;/code>&lt;/pre>&lt;p>As noted in the laravel docs our table for Attachments would look something like this&lt;/p>
&lt;pre>&lt;code>post
id - integer
name - string
body - text
attachments
id - integer
file_name - string
attachable_id - integer
attachable_type - string
&lt;/code>&lt;/pre>&lt;p>So we are making a table/model Attachment. The model will use the &amp;ldquo;attachable&amp;rdquo; syntax to dynamically reference another model and model id.&lt;/p>
&lt;p>In the Post model I set that this relationship exists&lt;/p>
&lt;pre>&lt;code>#app/models/Post.php
public function attachments()
{
return $this-&amp;gt;morphTo(&amp;quot;Attachment&amp;quot;, &amp;quot;attachable&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>The Attachment model file is this&lt;/p>
&lt;pre>&lt;code>
&amp;lt;?php
#app/models/Attachment.php
class Attachment extends \Eloquent {
protected $fillable = [
&amp;quot;attachable_type&amp;quot;,
&amp;quot;attachable_id&amp;quot;,
&amp;quot;name”,
“file_name”,
&amp;quot;note&amp;quot;,
&amp;quot;tag&amp;quot;
];
public function attachable()
{
return $this-&amp;gt;morphTo();
}
}
&lt;/code>&lt;/pre>&lt;p>Finally if we where to seed the db or add content the table for Attachments would look like this&lt;/p>
&lt;p>&lt;img src="https://photos-1.dropbox.com/t/0/AADRAfBTNcMG8puEahtElixkH6F6rsoCXD1zgM_aFoUiRQ/12/54803135/png/1024x768/3/1405868400/0/2/Screenshot%202014-07-20%2009.12.12.png/bA938wfNJbWkPlOIKMlD5gJKsBGGGJCH-RTweCGQqwk" alt="example">&lt;/p>
&lt;p>the attachable_type is the model class so if the namespace was Acme\Post then that would be &amp;ldquo;Acme\Post&lt;/p>
&lt;p>That is it. As long as you include it in your results you will see it in your output.&lt;/p></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>SSL and Homestead</title><link>https://alfrednutile.info/posts/101/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/101/</guid><description>&lt;p>This is like most nginx the only trick was adding the port forward on Homestead&lt;/p>
&lt;pre>&lt;code>#scripts/homestead.rb
# Configure Port Forwarding To The Box
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8000
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 443, host: 44300
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 3306, host: 33060
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 5432, host: 54320
config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 11300, host: 11300
&lt;/code>&lt;/pre>&lt;p>I set it to 44300&lt;/p>
&lt;p>Then just follow along here&lt;/p>
&lt;p>&lt;a href="http://laravel.io/forum/07-06-2014-enabling-ssl-on-a-homestead-vm">http://laravel.io/forum/07-06-2014-enabling-ssl-on-a-homestead-vm&lt;/a> which leads to here &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-ssl-certificate-on-nginx-for-ubuntu-12-04">https://www.digitalocean.com/community/tutorials/how-to-create-a-ssl-certificate-on-nginx-for-ubuntu-12-04&lt;/a> for the rest&lt;/p></description><category>homestead</category><category>nginx</category></item><item><title>Quick way to traverse a nested php arrray</title><link>https://alfrednutile.info/posts/98/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/98/</guid><description>&lt;p>The &lt;a href="http://php.net/manual/en/class.recursiveiteratoriterator.php">RecursiveIteratorIterator&lt;/a> makes it super easy to traverse a nested array.&lt;/p>
&lt;p>Here is an example though the docs are pretty clear there. For me it was in a class so I defined the array keys at the top of the Class&lt;/p>
&lt;pre>&lt;code> protected $merged_profile_options = [];
protected $data_values = [
'browser' =&amp;gt; null,
'name' =&amp;gt; null,
'version' =&amp;gt; null,
'platform' =&amp;gt; null,
'base_url' =&amp;gt; null,
'repo' =&amp;gt; null,
'filename' =&amp;gt; null,
'branch' =&amp;gt; null,
'status' =&amp;gt; null,
'user_uuid' =&amp;gt; null,
'remote_job_id' =&amp;gt; null,
'job_id' =&amp;gt; null,
];
&lt;/code>&lt;/pre>&lt;p>Then later on iterated over that array.&lt;/p>
&lt;pre>&lt;code> protected function setAllDataValues() {
$traverse = new \RecursiveIteratorIterator(
new \RecursiveArrayIterator($this-&amp;gt;merged_profile_options));
foreach($traverse as $key=&amp;gt;$value)
{
if(array_key_exists($key, $this-&amp;gt;data_values))
{
$this-&amp;gt;setDataValues($key, $value);
}
}
}
public function setDataValues($key, $value)
{
$this-&amp;gt;data_values[$key] = $value;
}
&lt;/code>&lt;/pre>&lt;p>Super easy. This array was 4 levels deep.&lt;/p></description><category>php</category><category>note2self</category></item><item><title>Using VCR for PHP API Testing</title><link>https://alfrednutile.info/posts/97/</link><pubDate>Wed, 16 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/97/</guid><description>&lt;p>Testing that your code works against an API can take up lots of un-needed time. With this &lt;a href="https://github.com/php-vcr/php-vcr">php-vcr&lt;/a> library you can do ONE real request that saves a fixture file that will automatically be used with each additional requests!&lt;/p>
&lt;p>They have decent docs on setting up but I will walk through them here.&lt;/p>
&lt;p>I will base this off a seed phpunit repo I have &lt;a href="https://github.com/alnutile/base_library_repo">https://github.com/alnutile/base_library_repo&lt;/a>&lt;/p>
&lt;p>You will need to add to the composer.json the packages for this library&lt;/p>
&lt;pre>&lt;code> &amp;quot;require&amp;quot;: {
&amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.4.0&amp;quot;,
&amp;quot;ext-curl&amp;quot;: &amp;quot;*&amp;quot;,
&amp;quot;symfony/process&amp;quot;: &amp;quot;&amp;gt;=2.3&amp;quot;,
&amp;quot;symfony/event-dispatcher&amp;quot;: &amp;quot;&amp;gt;=2.3&amp;quot;,
&amp;quot;guzzle/guzzle&amp;quot;: &amp;quot;~3.7&amp;quot;,
&amp;quot;vlucas/phpdotenv&amp;quot;: &amp;quot;1.0.6&amp;quot;
},
&amp;quot;require-dev&amp;quot;: {
&amp;quot;phpunit/phpunit&amp;quot;: &amp;quot;~3.0&amp;quot;,
&amp;quot;mockery/mockery&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;php-vcr/php-vcr&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;php-vcr/phpunit-testlistener-vcr&amp;quot;: &amp;quot;dev-master&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>I have another post that talks about the dotenv package &lt;a href="http://www.alfrednutile.info/posts/76">here&lt;/a>&lt;/p>
&lt;p>Then if you test folder make a a fixtures folder. So you layout is&lt;/p>
&lt;pre>&lt;code>.
--test
-----fixtures
&lt;/code>&lt;/pre>&lt;p>And open your phpunit.xml file to add the code to intercept your requests.&lt;/p>
&lt;pre>&lt;code>#/phpunit.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;phpunit backupGlobals=&amp;quot;false&amp;quot;
backupStaticAttributes=&amp;quot;false&amp;quot;
bootstrap=&amp;quot;test/bootstrap.php&amp;quot;
colors=&amp;quot;true&amp;quot;
convertErrorsToExceptions=&amp;quot;true&amp;quot;
convertNoticesToExceptions=&amp;quot;true&amp;quot;
convertWarningsToExceptions=&amp;quot;true&amp;quot;
processIsolation=&amp;quot;false&amp;quot;
stopOnFailure=&amp;quot;false&amp;quot;
syntaxCheck=&amp;quot;false&amp;quot;
&amp;gt;
&amp;lt;listeners&amp;gt;
&amp;lt;listener class=&amp;quot;PHPUnit_Util_Log_VCR&amp;quot; file=&amp;quot;vendor/php-vcr/phpunit-testlistener-vcr/PHPUnit/Util/Log/VCR.php&amp;quot; /&amp;gt;
&amp;lt;/listeners&amp;gt;
&amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;test&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Lastly edit your phpunit bootstrap file to setup VCR&lt;/p>
&lt;pre>&lt;code>#test/bootstrap.php
&amp;lt;?php
function includeIfExists($file)
{
if (file_exists($file)) {
return include $file;
}
}
if ((!$loader = includeIfExists(__DIR__.'/../vendor/autoload.php')) &amp;amp;&amp;amp; (!$loader = includeIfExists(__DIR__.'/../../../.composer/autoload.php'))) {
die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
'php composer.phar install'.PHP_EOL);
}
\VCR\VCR::configure()-&amp;gt;setCassettePath(__DIR__ .'/../test/fixtures');
$loader-&amp;gt;add('Foo\SauceLabs', __DIR__);
return $loader;
&lt;/code>&lt;/pre>&lt;p>Now you are ready to use the API. This repo has a ton of tests using the api &lt;a href="https://github.com/alnutile/saucelabs_client">https://github.com/alnutile/saucelabs_client&lt;/a>&lt;/p>
&lt;p>You will see in this file for example how it is called in the doc blocks&lt;/p>
&lt;pre>&lt;code>#test/SauceLabs/Tests/JobsTest.php
use SauceLabs\Client;
use VCR\VCR;
use SauceLabs\Tests\BaseTest as Base;
class JobsTest extends Base {
protected function tearDown()
{
m::close();
}
/**
* @test
* @@vcr get_jobs
*/
public function get_jobs()
{
$username = $_ENV['USERNAME_KEY'];
VCR::turnOn();
//VCR::insertCassette('authenticate');
VCR::insertCassette('get_jobs');
//Arrange
$sauce_api = new Client();
$sauce_api-&amp;gt;authenticate($username, $_ENV['TOKEN_PASSWORD'], Client::AUTH_HTTP_PASSWORD);
//Act
$response = $sauce_api-&amp;gt;api('jobs')-&amp;gt;getJobs($username);
//Assert
$this-&amp;gt;assertGreaterThan(15, count($response));
// To stop recording requests, eject the cassette
VCR::eject();
// Turn off VCR to stop intercepting requests
VCR::turnOff();
}
&lt;/code>&lt;/pre>&lt;p>After the first time you run that you will have a new &amp;ldquo;cassette&amp;rdquo; in the test/fixtures folder that you can use as needed&lt;/p>
&lt;pre>&lt;code>#test/fixtures/get_jobs
-
request:
method: GET
url: 'https://saucelabs.com/rest/v1/api-test-user/jobs'
headers:
Host: saucelabs.com
Accept: application/vnd.SauceLabs.beta+json
User-Agent: 'php-github-api (http://github.com/alnutile/saucelabs_client)'
Authorization: 'Basic YmVoYXQtc2VlZDpmYzViNjg4YS1mMjdjLTRjNzMtYTkxNC1lYjVkN2UyY2RmMWU='
Content-Length: '0'
response:
status: 200
headers:
Server: nginx
Date: 'Fri, 11 Jul 2014 11:03:19 GMT'
Content-Type: 'application/json; charset=utf-8'
Transfer-Encoding: chunked
Connection: keep-alive
X-Backend: mix
body: '[{&amp;quot;id&amp;quot;: &amp;quot;79bd34f42d584da6ad59c051388134d9&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;d75177a863ec4a458c7222813e10ee84&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;67591976001c4c5a9522b93281e0e8ef&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;ada6876f799d4b589ef0e2c4069c7438&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3e676ac921aa43f5a5628d231ca7115d&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;222cdddafb9e4c3fb0722bccc9891a15&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;6393dc7ca1ea447eb509b5e1dd6821ac&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;789004fc2ec34d0d8e03945759fc25b0&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3331badd2da140d08613a786257d177d&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;9437a50a354e4fca8252447b03d21348&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;dec07ca1c30e40f4a693de7f7a102eab&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3a1a0fb2d4be4580b00a3e35b86aa6fa&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;55de27651bf14c92b901cbd0a62b1603&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;7e12ec786ad544008c5f4e3e4340d5a8&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;a8edb7ab8a8f408a9b0829cc45ca4563&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;b67a4d7187cc4dc8ad661ef7045d15e9&amp;quot;}]'
-
request:
method: GET
url: 'https://saucelabs.com/rest/v1/behat-seed/jobs'
headers:
Host: saucelabs.com
Accept: application/vnd.SauceLabs.beta+json
User-Agent: 'php-github-api (http://github.com/alnutile/saucelabs_client)'
Authorization: 'Basic YmVoYXQdtc2VlZssDpmYzViNjdfasdfg4YS1mMjdrerjLTRjNzMtYTkxNC1l3eYjVkN2UyY2RmMadsfWUj='
Content-Length: '0'
response:
status: 200
headers:
Server: nginx
Date: 'Fri, 11 Jul 2014 13:41:38 GMT'
Content-Type: 'application/json; charset=utf-8'
Transfer-Encoding: chunked
Connection: keep-alive
X-Backend: mix
body: '[{&amp;quot;id&amp;quot;: &amp;quot;3a4136e1bb6f4f6b8cae6fbd0bf2e6aa&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;1cde7b77e8744ff5b6198489ceffce81&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;79bd34f42d584da6ad59c051388134d9&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;d75177a863ec4a458c7222813e10ee84&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;67591976001c4c5a9522b93281e0e8ef&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;ada6876f799d4b589ef0e2c4069c7438&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3e676ac921aa43f5a5628d231ca7115d&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;222cdddafb9e4c3fb0722bccc9891a15&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;6393dc7ca1ea447eb509b5e1dd6821ac&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;789004fc2ec34d0d8e03945759fc25b0&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3331badd2da140d08613a786257d177d&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;9437a50a354e4fca8252447b03d21348&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;dec07ca1c30e40f4a693de7f7a102eab&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;3a1a0fb2d4be4580b00a3e35b86aa6fa&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;55de27651bf14c92b901cbd0a62b1603&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;7e12ec786ad544008c5f4e3e4340d5a8&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;a8edb7ab8a8f408a9b0829cc45ca4563&amp;quot;}, {&amp;quot;id&amp;quot;: &amp;quot;b67a4d7187cc4dc8ad661ef7045d15e9&amp;quot;}]'
&lt;/code>&lt;/pre>&lt;p>That library should be a big help to try it out. You just need a Saucelabs account and make a file in the root of your folder called .env as noted in the README with your username and token for saucelabs and then run bin/phpunit.&lt;/p></description><category>php</category><category>api</category><category>testing</category></item><item><title>Saucelabs PHP Client</title><link>https://alfrednutile.info/posts/96/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/96/</guid><description>&lt;p>It is built off of the php-github-api client seen &lt;a href="https://github.com/KnpLabs/php-github-api">here&lt;/a> by KnpLabs . They made a really nice client that uses Guzzle and an AbstractionAPI to make it easy to code out different classes around the API endpoints.&lt;/p>
&lt;p>Anyways I have had such a good experience with github one I figured it would be nice to have one for the Saucelabs work I do.&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/saucelabs_client">https://github.com/alnutile/saucelabs_client&lt;/a> more features will be added shortly as it is being used in a couple of decent size projects.&lt;/p>
&lt;p>There are plenty of Tests to show how to use it.&lt;/p></description><category>bdd</category><category>testing</category><category>php</category></item><item><title>Many to Many Polymorphic Relations from Laravel to Angular and back</title><link>https://alfrednutile.info/posts/95/</link><pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/95/</guid><description>&lt;p>This will cover having a polymorphic relationship in Laravel, showing it on a form in Angular and saving it back to Laravel. Overall it is well documented &lt;a href="http://laravel.com/docs/eloquent#many-to-many-polymorphic-relations">here&lt;/a> at the great docs at Laravel but this post might help in a few areas.&lt;/p>
&lt;p>As someone defines Polymorphic Relationships there&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model. &amp;quot;&lt;/p>
&lt;/blockquote>
&lt;h2 id="output-the-data-to-angular">Output the data to Angular&lt;/h2>
&lt;p>Taking the User Model as an example I query the user but then before returning the data to Angular I append the polymorphic results. In this case we will call it Specialties&lt;/p>
&lt;pre>&lt;code>protected function transformOutgoingData($data)
{
$data-&amp;gt;specialties = $data-&amp;gt;specialties()-&amp;gt;getResults()-&amp;gt;lists('id');
return $data;
}
&lt;/code>&lt;/pre>&lt;p>This returns just an array to Angular to deal with. When sending it an Object trouble getting Angular to set the selected options. The hard part, since by default it just worked, was to send not only the 2 selected Specialties but the 20 other possible ones and make the list out of that.&lt;/p>
&lt;pre>&lt;code>#angular html file
&amp;lt;div class=&amp;quot;form-group&amp;quot; ng-if=&amp;quot;userHasAdminRole(user)&amp;quot; markdown=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;label&amp;gt;Specialties:&amp;lt;/label&amp;gt;
&amp;lt;select ng-options=&amp;quot;specialty.id as specialty.name for specialty in user.specialties_all&amp;quot;
name=&amp;quot;specialty&amp;quot;
multiple
ng-model=&amp;quot;user.specialties&amp;quot;
ng-required=&amp;quot;true&amp;quot;
class=&amp;quot;form-control&amp;quot;&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>The specialties_all comes from the method I run on the data before output it which I do anyways on many data models. This comes right before the transformOutgoingData.&lt;/p>
&lt;pre>&lt;code> protected function addDataToOutGoingModel($user)
{
$user = $this-&amp;gt;addAllSpecialtiesToModel($user);
return $user;
}
&lt;/code>&lt;/pre>&lt;p>This way all my select lists on that page and other data lists, checkboxes etc have the data they need.&lt;/p>
&lt;p>Finally when the person clicks Submit it is sent back to Laravel. So far I could not just save or update the user with this info. For example&lt;/p>
&lt;pre>&lt;code>#app/models/User.php
public function update($user_id, $all)
{
$all = $this-&amp;gt;transformIncomingData($all);
try {
$user = \User::findOrFail($user_id);
}
catch(\Expection $e){
throw new \Exception(&amp;quot;User not found&amp;quot;);
}
$user-&amp;gt;update($all);
$user = $this-&amp;gt;saveDataToModel($user);
return $user;
}
&lt;/code>&lt;/pre>&lt;p>The $user-&amp;gt;update($all); will crash with this extra &amp;ldquo;specialties&amp;rdquo; data coming in with this error.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;preg_replace(): Parameter mismatch, pattern is a string while replacement is an array&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>So instead I do a step before and after&lt;/p>
&lt;p>Before I run transformIncomingData and unset the $all[&amp;lsquo;specialties&amp;rsquo;] key I get from Input::all() and save that to a property&lt;/p>
&lt;pre>&lt;code> protected function transformIncomingData($data)
{
$data = ( isset($data['specialties'])) ? $this-&amp;gt;transformSpecialtiesIncoming($data) : $data;
return $data;
}
&lt;/code>&lt;/pre>&lt;p>which goes to&lt;/p>
&lt;pre>&lt;code> protected function transformSpecialtiesIncoming($data)
{
$this-&amp;gt;original_specialities = $data['specialties'];
unset($data['specialties']);
return $data;
}
&lt;/code>&lt;/pre>&lt;p>Then after I update the User I run saveDataToModel($user) which triggers this method&lt;/p>
&lt;pre>&lt;code> protected function setSpecialties($user)
{
$user-&amp;gt;specialties()-&amp;gt;sync($this-&amp;gt;original_specialities);
return $user;
}
&lt;/code>&lt;/pre>&lt;p>Finally back to Angular with the results.&lt;/p>
&lt;p>Another good way to tie all this together is the Model Observer Pattern noted here &lt;a href="http://laravel.com/docs/eloquent#model-observers">http://laravel.com/docs/eloquent#model-observers&lt;/a>&lt;/p></description><category>laravel</category><category>php</category><category>angular.js</category></item><item><title>Laravel Homestead and MailCatcher</title><link>https://alfrednutile.info/posts/93/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/93/</guid><description>&lt;p>Using MailCatcher &lt;a href="http://mailcatcher.me/">http://mailcatcher.me/&lt;/a> I can see the emails sent by the website.&lt;/p>
&lt;p>First checkout &lt;a href="https://github.com/fideloper/Vaprobash/pull/348">https://github.com/fideloper/Vaprobash/pull/348&lt;/a> to get your box ready
All I did was&lt;/p>
&lt;h2 id="log-into-the-vagrant-box-and-run">Log into the vagrant box and run&lt;/h2>
&lt;pre>&lt;code>sudo apt-get install libsqlite3-dev
&lt;/code>&lt;/pre>&lt;p>Then&lt;/p>
&lt;pre>&lt;code>sudo apt-get install ruby1.9.1-dev -y
sudo gem install mailcatcher
&lt;/code>&lt;/pre>&lt;p>Then&lt;/p>
&lt;pre>&lt;code>sudo gem install mailcatcher -V
&lt;/code>&lt;/pre>&lt;h2 id="set-your-mailphp-config">Set your mail.php config&lt;/h2>
&lt;p>This is found in app/config and should be copied to app/config/local so it only applies to local&lt;/p>
&lt;pre>&lt;code>#app/config/local/mail.php
&amp;lt;?php
return array(
'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; '192.168.33.10',
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'admin@test.com', 'name' =&amp;gt; 'Foo Bar'),
'encryption' =&amp;gt; '',
// 'username' =&amp;gt; null,
// 'password' =&amp;gt; null,
);
&lt;/code>&lt;/pre>&lt;p>Finally reload vagrant&lt;/p>
&lt;pre>&lt;code>vagrant reload
&lt;/code>&lt;/pre>&lt;p>And start up mailcatcher inside of vagrant.&lt;/p>
&lt;pre>&lt;code>mailcatcher --ip=192.168.33.10
&lt;/code>&lt;/pre>&lt;p>And you are set. http://192.168.33.10:1080 works&lt;/p>
&lt;h3 id="links">Links&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0">https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0&lt;/a>&lt;/li>
&lt;/ul></description><category>laravel</category><category>php</category><category>homestead</category></item><item><title>Laravel Sentry and UUID</title><link>https://alfrednutile.info/posts/94/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/94/</guid><description>&lt;h2 id="update-october-10-1007">Update October 10 10:07&lt;/h2>
&lt;p>Have hit a few issues with this model but still working okay.&lt;/p>
&lt;p>To start this trait does some of the work to manage incoming POST data.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php namespace BehatEditor\Helpers;
use Rhumsaa\Uuid\Uuid;
trait UuidHelper {
protected $uuid;
protected $saved;
public function getUuid()
{
return $this-&amp;gt;uuid;
}
public function setUuid($uuid = null)
{
if($uuid === null)
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
}
$this-&amp;gt;uuid = $uuid;
return $this;
}
/**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}
protected function setModelParamsIdWithUuid($params)
{
if(!isset($params['id'])) {
$this-&amp;gt;setUuid($this-&amp;gt;generateNewId()-&amp;gt;toString());
$params['id'] = $this-&amp;gt;getUuid();
}
$this-&amp;gt;uuid = $params['id'];
return $params;
}
public function dealWithUsingUuidNotReturningIdFromCreate($model)
{
$this-&amp;gt;saved = $model-&amp;gt;find($this-&amp;gt;uuid);
}
}
&lt;/code>&lt;/pre>&lt;p>Here is an example of me using it.&lt;/p>
&lt;pre>&lt;code>
/**
* Incoming Post request from the Controller to a Service and finally to this Repository Class.
*/
public function createNewBatch($batch)
{
try {
$this-&amp;gt;post = $batch; //Incoming post data
$this-&amp;gt;setRelatedObjectsFromPost(); //I deal with some of the related data or incoming data before hand
$setUuid = $this-&amp;gt;setModelParamsIdWithUuid($batch); //this is the traits setting the UUID on the incoming POST data.
$this-&amp;gt;batch-&amp;gt;create($setUuid); //Finally I create using the auto-generated UUID OR the id/uuid that came in via the post
/**
* Again the trait takes care of this ONE issue I can not get around is returning the results of Create with the an ID
* It works and saves the data but the ID is missing. Though looking at Eloquent this most likely is because I need to be using save.
* Any ways I load it back up again for further processing.
* Also some of this work started when I was using Eloquent outside of Laravel so it may need to be refactored since we are back in Laravel.
*/
$this-&amp;gt;dealWithUsingUuidNotReturningIdFromCreate($this-&amp;gt;batch);
$this-&amp;gt;extractAndSyncRelatedObjects(); //This is the further processing I do not really related to this post
return $this-&amp;gt;uuid; //This was set in the Trait see the trait class for this uuid field.
} catch (\Exception $e) {
throw new \Exception('The batch could not be created ' . $e-&amp;gt;getMessage());
}
}
&lt;/code>&lt;/pre>&lt;p>Also note the model class needs this property set&lt;/p>
&lt;pre>&lt;code>public $incrementing = false;
&lt;/code>&lt;/pre>&lt;h2 id="end-updates">END UPDATES&lt;/h2>
&lt;hr>
&lt;p>I needed to have UUID setup for users since we will be syncing users from site to site. I also wanted to use sentry as a starting point for user auth, roles and groups.&lt;/p>
&lt;p>Using this starter package for a demo &lt;a href="https://github.com/alnutile/L4withSentry/tree/uuid">https://github.com/alnutile/L4withSentry/tree/uuid&lt;/a> which is a fork of &lt;a href="https://github.com/rydurham/L4withSentry">https://github.com/rydurham/L4withSentry&lt;/a>&lt;/p>
&lt;p>A lot of this comes from &lt;a href="http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/">http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba">The repo will show the changes&lt;/a>&lt;/p>
&lt;h2 id="add-the-method-and-class-to-the-base-controllerhttpsgithubcomalnutilel4withsentrycommit8584933cda24e4101ed96cd5c3e8547b8fe249badiff-672d7136f99d93d53f1316b3fc946826r3">&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-672d7136f99d93d53f1316b3fc946826R3">Add the method and class to the base controller&lt;/a>&lt;/h2>
&lt;p>This way we can call to it from other controllers as needed&lt;/p>
&lt;p>##&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-0ad2286fb1ab9c8b1ec84d26853bf8f1L117">Update the UserController&lt;/a>&lt;/p>
&lt;p>There are lots of changes in here to replace is_numeric wtih $this-&amp;gt;isValue($id) to check the uuid&lt;/p>
&lt;p>##&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-31ad8f46f16744031d2d9092c100ffc1R3">Update the seeder&lt;/a>&lt;/p>
&lt;p>This will setup our seed data to work as well&lt;/p>
&lt;p>##&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b7b60617536fe5447b0ab052b1878990R5">Update the user model&lt;/a>&lt;/p>
&lt;p>We call the boot method to generate a uuid if there is none being passed in.&lt;/p>
&lt;h2 id="update-october-10-1018">Update October 10 10:18&lt;/h2>
&lt;p>This below setup for the model has not worked which is why I have the update at the start of this article&lt;/p>
&lt;h2 id="end-update">End update&lt;/h2>
&lt;pre>&lt;code>/**
* The &amp;quot;booting&amp;quot; method of the model.
*
* @return void
*/
public static function boot()
{
parent::boot();
/**
* Attach to the 'creating' Model Event to provide a UUID
* for the `id` field (provided by $model-&amp;gt;getKeyName())
*/
static::creating(function ($model) {
$model-&amp;gt;id = (string)$model-&amp;gt;generateNewId();
});
}
&lt;/code>&lt;/pre>&lt;p>and then generateNewId method down below&lt;/p>
&lt;pre>&lt;code> /**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}
&lt;/code>&lt;/pre>&lt;p>##&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-4a87548edb6f75cbf33358b912d43775L22">Update Route file&lt;/a>&lt;/p>
&lt;p>Replace the regular expressions to allow uuid&lt;/p>
&lt;pre>&lt;code>+Route::get('users/{id}/reset/{code}', 'UserController@reset')-&amp;gt;where('id', '[a-z0-9\-]+');
Route::get('users/{id}/suspend', array('as' =&amp;gt; 'suspendUserForm', function($id)
{
return View::make('users.suspend')-&amp;gt;with('id', $id);
}));
&lt;/code>&lt;/pre>&lt;p>There are a number of them in there&lt;/p>
&lt;p>##&lt;a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780R5">Composer&lt;/a>&lt;/p>
&lt;p>Of course you need it in your composer file&lt;/p>
&lt;pre>&lt;code> &amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.2.*&amp;quot;,
&amp;quot;cartalyst/sentry&amp;quot;: &amp;quot;~2.1&amp;quot;,
&amp;quot;r15ch13/peculiar&amp;quot;: &amp;quot;1.0.*@dev&amp;quot;
},
&lt;/code>&lt;/pre>&lt;p>##User Migration file&lt;/p>
&lt;p>This repo the sentry migration files are copied into app/database/migrations&lt;/p>
&lt;p>This being key&lt;/p>
&lt;pre>&lt;code>$table-&amp;gt;string('id', '36')-&amp;gt;primary();
&lt;/code>&lt;/pre>&lt;pre>&lt;code>#app/database/migrations/2012_12_06_225921_migration_cartalyst_sentry_install_users.php
&amp;lt;?php
use Illuminate\Database\Migrations\Migration;
class MigrationCartalystSentryInstallUsers extends Migration {
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::create('users', function($table)
{
$table-&amp;gt;string('id', '36')-&amp;gt;primary();
$table-&amp;gt;string('email');
$table-&amp;gt;string('password');
$table-&amp;gt;text('permissions')-&amp;gt;nullable();
$table-&amp;gt;boolean('activated')-&amp;gt;default(0);
$table-&amp;gt;string('activation_code')-&amp;gt;nullable();
$table-&amp;gt;timestamp('activated_at')-&amp;gt;nullable();
$table-&amp;gt;timestamp('last_login')-&amp;gt;nullable();
$table-&amp;gt;string('persist_code')-&amp;gt;nullable();
$table-&amp;gt;string('reset_password_code')-&amp;gt;nullable();
$table-&amp;gt;string('first_name')-&amp;gt;nullable();
$table-&amp;gt;string('last_name')-&amp;gt;nullable();
$table-&amp;gt;timestamps();
// We'll need to ensure that MySQL uses the InnoDB engine to
// support the indexes, other engines aren't affected.
$table-&amp;gt;engine = 'InnoDB';
$table-&amp;gt;unique('email');
$table-&amp;gt;index('activation_code');
$table-&amp;gt;index('reset_password_code');
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('users');
}
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category></item><item><title>Laravel Homestead and Beanstalkd Console</title><link>https://alfrednutile.info/posts/92/</link><pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/92/</guid><description>&lt;p>I am doing some queue work and wanted beanstalkd console installed so I can see the status of the queue&lt;/p>
&lt;p>&lt;img src="https://camo.githubusercontent.com/1465416717c26b64eb6bc2647a2e8def90ee6da0/68747470733a2f2f7261772e6769746875622e636f6d2f7074726f66696d6f762f6265616e7374616c6b5f636f6e736f6c652f6d61737465722f636f7665722f6274636f6e736f6c652e706e67" alt="beanstalkd_console">&lt;/p>
&lt;p>Using Laravel Homestead as the vagrant box &lt;a href="http://laravel.com/docs/homestead">http://laravel.com/docs/homestead&lt;/a> I needed to&lt;/p>
&lt;ul>
&lt;li>Download beanstalkd console &lt;a href="https://github.com/ptrofimov/beanstalk_console">https://github.com/ptrofimov/beanstalk_console&lt;/a>&lt;/li>
&lt;li>Setup Homesteads yml file&lt;/li>
&lt;li>Provision the box&lt;/li>
&lt;li>Setup my local hosts file to a url&lt;/li>
&lt;li>Finally run php artisan queue:listen to have my app call to the queue.&lt;/li>
&lt;/ul>
&lt;p>And that was about it.&lt;/p>
&lt;h3 id="download-beanstalkd-console">Download Beanstalkd Console&lt;/h3>
&lt;p>&lt;a href="https://github.com/ptrofimov/beanstalk_console">https://github.com/ptrofimov/beanstalk_console&lt;/a>
have it stored in the&lt;/p>
&lt;pre>&lt;code>/home/vagrant/Code/
vagrant@homestead:~/Code/
&lt;/code>&lt;/pre>&lt;h3 id="homestead-yml-file">Homestead YML file&lt;/h3>
&lt;pre>&lt;code>//Homestead.yaml in root of your Homestead Vagrant install
sites:
- map: beanstalkd.dev
to: /home/vagrant/Code/beanstalk_console/public
&lt;/code>&lt;/pre>&lt;h3 id="provision-the-new-site">Provision the new site&lt;/h3>
&lt;p>With Vagrant running do&lt;/p>
&lt;pre>&lt;code>#on my local box not in vagrant
&amp;gt; vagrant provision
&lt;/code>&lt;/pre>&lt;h3 id="host-file">Host file&lt;/h3>
&lt;p>Just make sure to match 127.0.0.1 to what the domain above or what ever you want&lt;/p>
&lt;pre>&lt;code>#/etc/hosts
127.0.0.1 beanstalkd.dev
&lt;/code>&lt;/pre>&lt;p>Then in the vagrant box make sure beanstalkd is running ideally every time you start the box. Which by default the box does this.&lt;/p>
&lt;p>Finally you should be able to go to &lt;a href="http://beanstalkd.dev">http://beanstalkd.dev&lt;/a>:8000/
and see
&lt;img src="https://photos-5.dropbox.com/t/0/AACD6vphteXY02OPF-VQUHG2lqRAXmp9UM4eLAltF-yRmQ/12/54803135/png/1024x768/3/1404136800/0/2/Screenshot%202014-06-30%2008.13.36.png/MO7OiL6camSR4kN6RVakDKfDYAwXCatCA5R1x00sCT4" alt="done">&lt;/p>
&lt;h3 id="queue-listen">Queue Listen&lt;/h3>
&lt;pre>&lt;code>#folder of project
php artisan queue:listen
&lt;/code>&lt;/pre>&lt;p>Now as you put things in the queue you can see them come and go at &lt;a href="http://beanstalkd.dev">http://beanstalkd.dev&lt;/a>:8000/&lt;/p></description><category>laravel</category><category>beanstalkd</category><category>vagrant</category><category>homestead</category></item><item><title>Restangular and nested responses</title><link>https://alfrednutile.info/posts/91/</link><pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/91/</guid><description>&lt;p>&lt;a href="https://github.com/mgonto/restangular#my-response-is-actually-wrapped-with-some-metadata-how-do-i-get-the-data-in-that-case">this was key&lt;/a> to dealing with this type of results&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;data&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;Foo&amp;quot;
},
&amp;quot;message&amp;quot;: {
&amp;quot;Post Updated&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>So I had to set this in a app.js config area&lt;/p>
&lt;pre>&lt;code>//app,js
app.config(function(RestangularProvider) {
// add a response intereceptor
RestangularProvider.addResponseInterceptor(function(data, operation, what, url, response, deferred) {
var extractedData;
extractedData = data.data;
return extractedData;
});
});
&lt;/code>&lt;/pre></description><category>angular.js</category><category>note2self</category></item><item><title>Behat Test more than number of elements</title><link>https://alfrednutile.info/posts/90/</link><pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/90/</guid><description>&lt;p>There is a Mink step to check for the number of elements&lt;/p>
&lt;pre>&lt;code>//MinkDictionary.php
/**
* Checks, that (?P&amp;lt;num&amp;gt;\d+) CSS elements exist on the page
*
* @Then /^(?:|I )should see (?P&amp;lt;num&amp;gt;\d+) &amp;quot;(?P&amp;lt;element&amp;gt;[^&amp;quot;]*)&amp;quot; elements?$/
*/
public function assertNumElements($num, $element)
{
$this-&amp;gt;assertSession()-&amp;gt;elementsCount('css', $element, intval($num));
}
&lt;/code>&lt;/pre>&lt;p>But I needed one just to make sure there are some elements on the page, more than 1 for example on a reports page. I guess I could have checked for just 1 eg &amp;ldquo;#behat ol li&amp;rdquo; but I think this can come in handy for our reporting tests.&lt;/p>
&lt;pre>&lt;code>//FeatureContext.php
/**
* Check that there are more than or = to a number of elements on a page
*
* @Then /^I should see more &amp;quot;([^&amp;quot;]*)&amp;quot; or more &amp;quot;([^&amp;quot;]*)&amp;quot; elements$/
*/
public function iShouldSeeMoreOrMoreElements($num, $element)
{
$container = $this-&amp;gt;getSession()-&amp;gt;getPage();
$nodes = $container-&amp;gt;findAll('css', $element);
if (intval($num) &amp;gt; count($nodes)) {
$message = sprintf('%d elements less than %s &amp;quot;%s&amp;quot; found on the page, but should be %d.', count($nodes), $selectorType, $selector, $count);
throw new ExpectationException($message, $this-&amp;gt;session);
}
}
&lt;/code>&lt;/pre></description><category>behat</category><category>php</category></item><item><title>When you have to use Angular inside of Drupal</title><link>https://alfrednutile.info/posts/89/</link><pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/89/</guid><description>&lt;p>The angularjs module for drupal will direct you to setup a menu path for Angular.js to get it&amp;rsquo;s template files.&lt;/p>
&lt;p>So the Angular route would look like this&lt;/p>
&lt;pre>&lt;code>//app.js
behat_reports.config(['$routeProvider',
function ($routeProvider) {
$routeProvider.
when('/', {
templateUrl: '/behat_editor_reports_service_v2/tpl/behat_editor_reports_service_reports_tpl',
controller: 'ReportsAll'
}).
otherwise({
redirectTo: '/'
});
}]);
&lt;/code>&lt;/pre>&lt;p>What I am suggesting is that when bootstraping Angular is to set the path to the &amp;ldquo;html&amp;rdquo; template folder. Then your Angular app route can look like this&lt;/p>
&lt;pre>&lt;code>//app.js
behat_reports.config(['$routeProvider',
function ($routeProvider) {
//Getting the path we set during our drupal modules function
var path = Drupal.settings.behat_reporting_v2.path;
$routeProvider.
when('/', {
templateUrl: '/' + path + '/templates/reports-all.html',
controller: 'ReportsAll'
}).
otherwise({
redirectTo: '/'
});
}]);
&lt;/code>&lt;/pre>&lt;p>It gets the path from a setting I set below, which is the path that renders this drupal url and setups up Angular in your module.&lt;/p>
&lt;pre>&lt;code>//some drupal module you are making
function behat_reporting_v2_api_reports_ui() {
angularjs_init_application('behat_reports_v2');
$path = drupal_get_path('module', 'behat_reporting_v2');
//Set the drupal path
drupal_add_js(array('behat_reporting_v2' =&amp;gt; array('path' =&amp;gt; $path)), 'setting');
drupal_add_js($path . '/js/services.js');
drupal_add_js($path . '/js/reportsController.js');
drupal_add_js($path . '/js/app.js');
return theme('behat_reports_v2');
}
&lt;/code>&lt;/pre>&lt;p>You are basically allowing Angular to get the html files it needs without bootstrapping the template system in drupal. Yeah!&lt;/p></description><category>angular.js</category><category>drupal</category></item><item><title>Transforming Output from the Database to the View/REST layer</title><link>https://alfrednutile.info/posts/88/</link><pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/88/</guid><description>&lt;p>Having watched the screen cast &lt;a href="https://laracasts.com/series/incremental-api-development/episodes/4">here&lt;/a> by Jeffery Way and reading Phil Sturgeon&amp;rsquo;s &lt;a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&amp;rsquo;t Hate&lt;/a> I used this approach on a recent project.&lt;/p>
&lt;p>Basically, and they both cover it really well, instead of returning the data right to the ui/rest endpoint from the database I pass it through a class to transform the data formats, field name etc. This has been extremely helpful as we also work out some wording of fields that I can not do easily in this one class.&lt;/p>
&lt;p>Also I can do output alterations using this Class and replace text depending on say a users permission level or maybe just to set a default image if there is none. So that user gets and Address Value Object that only shows the State.&lt;/p>
&lt;p>Another good example was one server was LAMP and the other Nginx. Same db, etc but one has a setting to output a boolean as &amp;ldquo;1&amp;rdquo; and the other 1 so again I could verify and set these as needed as I built out the output. (yes I could have just Google the setting or better yet use a Vagrant box running Nginx to dev on)&lt;/p>
&lt;p>Anyways just a really simple layer to add to a project.&lt;/p>
&lt;p>Some good learning&lt;/p>
&lt;ul>
&lt;li>Incremental API &lt;a href="https://laracasts.com/series/incremental-api-development/episodes/4">https://laracasts.com/series/incremental-api-development/episodes/4&lt;/a>&lt;/li>
&lt;li>Build APIs You Won&amp;rsquo;t Hate &lt;a href="https://leanpub.com/build-apis-you-wont-hate">https://leanpub.com/build-apis-you-wont-hate&lt;/a>&lt;/li>
&lt;li>Fractal &lt;a href="http://fractal.thephpleague.com/simple-example/">http://fractal.thephpleague.com/simple-example/&lt;/a>&lt;/li>
&lt;li>Fractal Class &lt;a href="https://github.com/thephpleague/fractal">https://github.com/thephpleague/fractal&lt;/a>&lt;/li>
&lt;/ul></description><category>REST</category><category>php</category><category>patterns</category></item><item><title>Showing nested relationships details</title><link>https://alfrednutile.info/posts/87/</link><pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/87/</guid><description>&lt;p>This is soooo easy but this is always something this easy can be missed.
In this example we have a Property Model with Buildings that have an address.&lt;/p>
&lt;p>So the model files look like this&lt;/p>
&lt;pre>&lt;code>//Property.php
//structures = buildings
public function structures()
{
return $this-&amp;gt;hasMany('Structure');
}
&lt;/code>&lt;/pre>&lt;pre>&lt;code>//Structure.php
public function address()
{
return $this-&amp;gt;belongsTo(&amp;quot;Address&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>So when I query a property I now get&lt;/p>
&lt;pre>&lt;code> {
&amp;quot;id&amp;quot;: 1,
&amp;quot;structures&amp;quot;: [
{
&amp;quot;id&amp;quot;: 6,
&amp;quot;address_id&amp;quot;: 9,
&amp;quot;address&amp;quot;: {
&amp;quot;id&amp;quot;: 9,
&amp;quot;city&amp;quot;: &amp;quot;Melvinport&amp;quot;,
&amp;quot;state&amp;quot;: &amp;quot;MT&amp;quot;,
&amp;quot;zip&amp;quot;: &amp;quot;75182&amp;quot;,
&amp;quot;lat&amp;quot;: -18.370000839233,
&amp;quot;lng&amp;quot;: 36.270000457764,
&amp;quot;created_at&amp;quot;: &amp;quot;2014-06-09 16:18:40&amp;quot;,
&amp;quot;updated_at&amp;quot;: &amp;quot;2014-06-09 16:18:40&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>Then in my query for properties I just included this with statement.&lt;/p>
&lt;pre>&lt;code>
public function search($args)
{
$term = $args['terms'];
$found = $this-&amp;gt;property-&amp;gt;with('structures.address')
-&amp;gt;where(&amp;quot;name&amp;quot;, &amp;quot;LIKE&amp;quot;, &amp;quot;%{$term}%&amp;quot;)
-&amp;gt;get();
return $found;
}
&lt;/code>&lt;/pre>&lt;p>the dot notation basically showing load Structures and the Address data related to those.&lt;/p></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Simple Laravel CMS Example</title><link>https://alfrednutile.info/posts/86/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/86/</guid><description>&lt;h2 id="quick-intro-to-laravel-using-a-custom-cms-app-i-made">Quick intro to Laravel using a custom CMS app I made&lt;/h2>
&lt;p>The repo is &lt;a href="https://github.com/alnutile/l4cms">here&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://dl-web.dropbox.com/get/Screenshots/intro_image.png?_subject_uid=54803135&amp;amp;w=AADdI8YLw5iRjK91_3LjSHq7b7z0ibM8KY4P7MicRH9UFA" alt="intro">&lt;/p>
&lt;p>This is mainly to show an example of a small CMS being built in Laravel. CMS (Content Management System) that is at it&amp;rsquo;s most basic level, Authentication, Simple Content Types etc.&lt;/p>
&lt;p>What we will cover.&lt;/p>
&lt;ul>
&lt;li>Installing the &amp;ldquo;CMS&amp;rdquo; and what Page Types it comes with&lt;/li>
&lt;li>Looking at the folder layout &amp;ldquo;Where is&amp;hellip;.&amp;rdquo;&lt;/li>
&lt;li>App config setting up the site&lt;/li>
&lt;li>PHP Artisan command to migrate the site&lt;/li>
&lt;li>Routes&lt;/li>
&lt;li>Page example looking at the wysiwyg, Controller, View etc&lt;/li>
&lt;li>Tags - lets add a many to many relationship&lt;/li>
&lt;/ul>
&lt;p>This is NOT the end all setup just an example. There are links below to quality videos, blogs posts docs etc to take you to the next level, not only in Laravel but just Object Oriented Design and good Architecture in general.&lt;/p>
&lt;p>Note the theme has it&amp;rsquo;s own license and you need to purchase it &lt;a href="https://wrapbootstrap.com/theme/colorfrog-WB01PG0H4">here&lt;/a> in order to use it.&lt;/p>
&lt;h2 id="install-the-cms-and-what-page-types-it-comes-with">Install the &amp;ldquo;CMS&amp;rdquo; and what Page Types it comes with&lt;/h2>
&lt;p>The repo is here &lt;a href="https://github.com/alnutile/cms">https://github.com/alnutile/cms&lt;/a>&lt;/p>
&lt;p>In time I will add more features but it really is an app that was made for a client that the base of it I wanted to fork off for later use.&lt;/p>
&lt;p>Run the basic laravel install steps noted on their site &lt;a href="http://laravel.com/docs/quick">http://laravel.com/docs/quick&lt;/a>&lt;/p>
&lt;h2 id="what-page-types">What Page Types&lt;/h2>
&lt;ul>
&lt;li>Pages are the main landing pages for most of the site with a slug to manage the url [1]. More on Pages shortly.&lt;/li>
&lt;li>Portfolios was how this project started. Basically you make One and then make projects that reference it.&lt;/li>
&lt;li>Projects are just that. They fit in a Portfolio&lt;/li>
&lt;li>Menu Sorting there is an admin area for menu sorting as well. Right now it is just for the top left menu. (not the black top nav)&lt;/li>
&lt;/ul>
&lt;p>All these &amp;ldquo;Admin&amp;rdquo; links can be seen below&lt;/p>
&lt;p>&lt;img src="https://dl-web.dropbox.com/get/Screenshots/admin_link.png?_subject_uid=54803135&amp;amp;w=AAAXvu_aZZUUGLFbgByRli-WjFgDpVmUDnQxverzi5_ISg" alt="admin_bar">&lt;/p>
&lt;h3 id="every-landing-page-is-a-page">Every landing page is a Page&lt;/h3>
&lt;p>Every URLs is Page, Project or Portfolio so the editor can always edit the description of the page even if there is a &amp;ldquo;collection&amp;rdquo; under it. For example /all_projects is a Page that just happens to also show a collection of &amp;ldquo;Projects&amp;rdquo; under it. Ideally this will be a less hard coded relationship BUT this particular example just needed a simple data set.&lt;/p>
&lt;p>There are Portfolio and Project pages as well that the edit can edit the description on etc.&lt;/p>
&lt;h2 id="looking-at-the-folder-layout">Looking at the folder layout&lt;/h2>
&lt;p>This is a standard Laravel App. The one key folder is &lt;strong>app/CMS&lt;/strong> for some items. But otherwise the Controllers, Models etc have all the needed data. [2]&lt;/p>
&lt;p>In app/CMS there is the Menu Facade, and the MenuService to make managing the menu system easier. [3]&lt;/p>
&lt;p>The system puts it&amp;rsquo;s uploaded files under public/img in settings, banners etc&lt;/p>
&lt;h2 id="app-config-setting-up-the-site">App config setting up the site&lt;/h2>
&lt;p>The app default to sqlite and the bootstrap/start.php will default to local without you needing to set anything.&lt;/p>
&lt;p>Running migrations will get you a good sample set of data. You can always turn this off in app/database/seeds&lt;/p>
&lt;p>In the app/database/seeds/UsersTableSeeder.php file is the admin and test user emails and passwords to login.&lt;/p>
&lt;h2 id="routes">Routes&lt;/h2>
&lt;p>The app/routes.php is where you can manage routes and see what is there right now.&lt;/p>
&lt;h2 id="page-example">Page Example&lt;/h2>
&lt;p>You can edit a page or add a page.&lt;/p>
&lt;p>Once in there you will see this&lt;/p>
&lt;p>&lt;img src="https://dl-web.dropbox.com/get/Screenshots/edit.png?_subject_uid=54803135&amp;amp;w=AADonXAFhGpiKY5JL9u6d248TPQKJMPCDcHTwUi2s2Hk5Q" alt="image_page_edit">&lt;/p>
&lt;p>You can give the page a title, SEO title, upload images and files via the wysiwyg and set the slug (Published coming soon so there can be a workflow)&lt;/p>
&lt;h2 id="tags">Tags&lt;/h2>
&lt;p>There is a tagging feature that does not yet have the UI setup. (coming soon). The resource is setup but needs to be placed in the view&lt;/p>
&lt;p>In php artisan tinker we can mess around with tags thought&lt;/p>
&lt;pre>&lt;code>
php artisan tinker
$tag = new Tag(['name' =&amp;gt; &amp;quot;Test 4&amp;quot;]);
Portfolio::find(1)-&amp;gt;tags()-&amp;gt;save($tag);
Portfolio::find(1)-&amp;gt;tags-&amp;gt;toArray();
Tag::find(1)-&amp;gt;portfolios-&amp;gt;toArray();
Portfolio::find(1)-&amp;gt;tags()-&amp;gt;detach(1);
Portfolio::find(1)-&amp;gt;tags()-&amp;gt;attach(1);
&lt;/code>&lt;/pre>&lt;p>So we are making a tag, saving it to Portfolio 1. Seeing it attached to Portfolio 1 and Seeing Portfolios attached to it.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>Great videos on Laravel, Oop and design patters &lt;a href="https://laracasts.com/">https://laracasts.com/&lt;/a>&lt;/li>
&lt;li>Laravel own docs are great &lt;a href="http://laravel.com/docs">http://laravel.com/docs&lt;/a>&lt;/li>
&lt;li>Forums and Chat room &lt;a href="http://laravel.io/forum">http://laravel.io/forum&lt;/a>&lt;/li>
&lt;li>Great overview of Laravel app building &lt;a href="http://culttt.com/2013/04/29/getting-started-with-laravel-4/">http://culttt.com/2013/04/29/getting-started-with-laravel-4/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="footnotes">Footnotes&lt;/h2>
&lt;ul>
&lt;li>[1] This will be refactored shortly&lt;/li>
&lt;li>[2] This will be moved shortly to make it way more extendable but leaving the core easy to manage.&lt;/li>
&lt;li>[3] Refactor this out so menu is a manyToMany relationship with the models that will use it.&lt;/li>
&lt;/ul></description><category>laravel</category><category>php</category><category>cms</category></item><item><title>Quick Gulp file to run php-unit tests</title><link>https://alfrednutile.info/posts/85/</link><pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/85/</guid><description>&lt;p>&lt;strong>MUCH BETTER WAY &lt;a href="https://gist.github.com/laracasts/8659865">HERE&lt;/a>&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>This is setup for Laravel but can work for any app. Most of this is due to the great &lt;a href="https://laracasts.com/lessons/gulp-this">Laracasts on Gulp&lt;/a>&lt;/p>
&lt;p>Download and setup gulp&lt;/p>
&lt;p>First make a package.json file in the root of your app and just put curly brackets in it.&lt;/p>
&lt;pre>&lt;code>touch package.json
vim package.json
&lt;/code>&lt;/pre>&lt;pre>&lt;code>//package.json
{
}
&lt;/code>&lt;/pre>&lt;p>Then run the needed node commands&lt;/p>
&lt;pre>&lt;code>npm install -g gulp
npm install gulp --save-dev
npm install gulp-notify --save-dev
npm install gulp-phpunit --save-dev
&lt;/code>&lt;/pre>&lt;p>Now the package.json should look like this thanks to the save switch.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;devDependencies&amp;quot;: {
&amp;quot;gulp&amp;quot;: &amp;quot;^3.6.2&amp;quot;,
&amp;quot;gulp-phpunit&amp;quot;: &amp;quot;^0.5.3&amp;quot;,
&amp;quot;gulp-notify&amp;quot;: &amp;quot;^1.3.0&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;p>Now to setup the gulpfile, again in the root of your app&lt;/p>
&lt;pre>&lt;code>//gulpfile.js
var phpunit = require('gulp-phpunit');
var gulp = require('gulp'),
notify = require('gulp-notify'),
phpunit = require('gulp-phpunit');
gulp.task('phpunit', function() {
var options = {debug: false, notify: true};
gulp.src('app/tests/*.php')
.pipe(phpunit('', options))
.on('error', notify.onError({
title: &amp;quot;Failed Tests!&amp;quot;,
message: &amp;quot;Error(s) occurred during testing...&amp;quot;
}));
});
gulp.task('default', function(){
gulp.run('phpunit');
gulp.watch('app/**/*.php', function(){
gulp.run('phpunit');
});
});
&lt;/code>&lt;/pre>&lt;p>Basically we are saying watch the app folder recursively for file changes to files ending in php then run all the tests in app/tests/*.php.&lt;/p>
&lt;p>Finally run gulp at the command line and it will run keeping an eye on changes.&lt;/p>
&lt;pre>&lt;code>gulp
&lt;/code>&lt;/pre>&lt;p>That is it. From here you will get typically phpunit output as you work BUT also a notice if you break something.&lt;/p></description><category>gulp</category><category>phpunit</category><category>laravel</category></item><item><title>Laravel and non email authentication</title><link>https://alfrednutile.info/posts/84/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/84/</guid><description>&lt;p>Note to self. The Laravel docs are here that cover Authentication. But when it came time to use a filter and a non email based user name I had to modify the auth.basic filter, or any filter you want to use.&lt;/p>
&lt;p>It ended up looking like this since I wanted user_account and not email to be the username for authentication.&lt;/p>
&lt;pre>&lt;code>//app/filters.php
Route::filter('auth.basic', function()
{
return Auth::basic('user_account');
});
&lt;/code>&lt;/pre>&lt;p>You can see this option here&lt;/p>
&lt;pre>&lt;code>//vendor/laravel/framework/src/Illuminate/Auth/Guard.php
public function basic($field = 'email', Request $request = null)
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Behat Seed Repo</title><link>https://alfrednutile.info/posts/77/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/77/</guid><description>&lt;p>The aim of this repo is to make it super easy to get going with behat. All you will need to get outside of this repo is&lt;/p>
&lt;ul>
&lt;li>Selenium Jar file download&lt;/li>
&lt;li>Composer&lt;/li>
&lt;li>Saucelabs Account (Optional)&lt;/li>
&lt;/ul>
&lt;p>After you install and setup those items you will be able to run tests locally or via Saucelabs and have a base setup to add new/custom steps as needed.&lt;/p>
&lt;h3 id="selenium-easy">Selenium Easy&lt;/h3>
&lt;p>This is the one jar file you need&lt;/p>
&lt;p>&lt;a href="https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;amp;can=2&amp;amp;q=">https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;amp;can=2&amp;amp;q=&lt;/a>&lt;/p>
&lt;p>The trick though is getting Java for your OS. For me, a Mac, I had to go here &lt;a href="http://support.apple.com/kb/DL1572">http://support.apple.com/kb/DL1572&lt;/a> ie avoid Oracles horrible download process at all costs. Linux is easy and Windows I am not sure about.&lt;/p>
&lt;p>Once you have Java and Selenium open a terminal and go to the folder you will be keeping selenium and type&lt;/p>
&lt;pre>&lt;code>java -jar selenium-server-standalone-2.39.0.jar
&lt;/code>&lt;/pre>&lt;p>This will output a lot of info to the screen and will remain running as you work. This line shows it is running&lt;/p>
&lt;pre>&lt;code>14:21:08.171 INFO - Started SocketListener on 0.0.0.0:4444
&lt;/code>&lt;/pre>&lt;p>So now we can connect to that port later on.&lt;/p>
&lt;h3 id="composer">Composer&lt;/h3>
&lt;p>This is a great way to manage PHP dependencies and just enjoy the numerous libraries out there.&lt;/p>
&lt;p>The install is pretty easy just type&lt;/p>
&lt;pre>&lt;code>$ php composer.phar install
&lt;/code>&lt;/pre>&lt;p>And then move that into /use/bin on your machine so you can now run it from anywhere. (this may take sudo powers)&lt;/p>
&lt;h3 id="behat-install">Behat Install&lt;/h3>
&lt;p>Finally download the repo &lt;a href="https://github.com/alnutile/behat-seed">https://github.com/alnutile/behat-seed&lt;/a>
to a folder that you will store tests for a site or many sites.&lt;/p>
&lt;p>For example&lt;/p>
&lt;pre>&lt;code>cd /opt
git clone https://github.com/alnutile/behat-seed
&lt;/code>&lt;/pre>&lt;p>Then cd into behat-seed and lets start the composer install&lt;/p>
&lt;pre>&lt;code>cd behat-seed
composer install --prefer-dist
&lt;/code>&lt;/pre>&lt;p>Comeback in 20 minutes (or less hopefully)&lt;/p>
&lt;p>After that you should be able to run&lt;/p>
&lt;pre>&lt;code>bin/behat --help
&lt;/code>&lt;/pre>&lt;h4 id="layout-of-files-and-folders">Layout of files and folders&lt;/h4>
&lt;p>This download and build of composer will leave you with this layout.&lt;/p>
&lt;hr>
&lt;pre>&lt;code>/opt/behat-seed
|-tests
|--behat.yml
|--features
| --bootstrap
| FeatureContext.php
| wikipedia.feature
| wikipedia_tokens.feature
|-files
|-vendor
|-composer.json
|-composer.lock
|-bin
| behat
|-dummy-site
&lt;/code>&lt;/pre>&lt;p>Tests will be where we store the behat.yml file and tests files. We will explore that more in a moment.&lt;/p>
&lt;p>Tests has a folder called features. In here we store our actual tests called *.feature. Example wikipedia.feature.&lt;/p>
&lt;p>Files is for storing files for a vanilla behat example.&lt;/p>
&lt;p>Vendor is for composer as well as composer.lock and composer.json&lt;/p>
&lt;p>Bin which stores behat only for now (really a symlink to the right area).&lt;/p>
&lt;p>Finally dummy-site to run a php server for use to quickly test against.&lt;/p>
&lt;h4 id="exploring-our-configuration">Exploring our configuration&lt;/h4>
&lt;p>To start we are going to look at behat.yml so open up that file and you should see this in your editor. Keep in mind it is YAML format. So if you get errors then look for tabs and other formats that break YAML. Stick to spaces.&lt;/p>
&lt;p>Looking at the file&lt;/p>
&lt;pre>&lt;code>default:
paths:
features: /opt/behat-seed/tests/features
bootstrap: /opt/behat-seed/tests/features/bootstrap
formatter:
name: pretty
extensions:
OrangeDigital\BusinessSelectorExtension\Extension:
urlFilePath: tests/urls.yml
selectorFilePath: tests/selectors.yml
assetPath: path
timeout: 30
contexts:
UIBusinessSelector: ~
Behat\MinkExtension\Extension:
default_session: selenium2
goutte: null
selenium2: ~
base_url: 'http://localhost:8080'
browser_name: safari
saucelabs:
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
base_url: 'http://en.wikipedia.org/wiki/'
selenium2:
browser: chrome
wd_host: 'behat-seed:fc5b688a-f27c-4c73-a914-eb5d7e2cdf1e@ondemand.saucelabs.com/wd/hub'
capabilities:
platform: 'Windows 2012'
browser: chrome
version: '26'
name: 'Behat See'
command-timeout: '600'
max-duration: '600'
&lt;/code>&lt;/pre>&lt;p>We will cover the details shortly.&lt;/p>
&lt;h4 id="running-the-local-server">Running the local server&lt;/h4>
&lt;p>I included a simple php server and some test pages to try this out against
To get it going&lt;/p>
&lt;pre>&lt;code>cd dummy-site
php -S 127.0.0.1:8080
&lt;/code>&lt;/pre>&lt;p>And you now can visit that url to see a site with numerous things to click and move.&lt;/p>
&lt;h2 id="now-what">Now What&lt;/h2>
&lt;p>With all of this setup, selenium running then you can just run, for example, this command&lt;/p>
&lt;pre>&lt;code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/local_tokens.feature
&lt;/code>&lt;/pre>&lt;p>To see tokens in action. Or&lt;/p>
&lt;pre>&lt;code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/local.feature
&lt;/code>&lt;/pre>&lt;p>To see basic behat/mink Or to see it run but where? On Saucelabs.&lt;/p>
&lt;pre>&lt;code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/wikipedia.feature
&lt;/code>&lt;/pre>&lt;p>Even just testing linux/Mac so you can see that level of work.&lt;/p>
&lt;pre>&lt;code>bin/behat --config tests/behat.yml tests/features/pure_behat.feature
&lt;/code>&lt;/pre>&lt;h2 id="roadmap">RoadMap&lt;/h2>
&lt;ul>
&lt;li>Some more steps included.&lt;/li>
&lt;li>Base Vagrant install file&lt;/li>
&lt;/ul>
&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>OrangeDigital &lt;a href="https://github.com/orangedigital/business-selector-extension">https://github.com/orangedigital/business-selector-extension&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Saucelabs &lt;a href="https://saucelabs.com/">https://saucelabs.com/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Some Code From&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/philsturgeon/build-apis-you-wont-hate/blob/master/chapter8/app/tests/behat/features/bootstrap/FeatureContext.php">build apis you wont hate&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Slim PHP &lt;a href="http://www.slimframework.com/">http://www.slimframework.com/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description><category>behat</category><category>bdd</category></item><item><title>Using Beanstalkd to Schedule the release of a post in Laravel</title><link>https://alfrednutile.info/posts/78/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/78/</guid><description>&lt;p>Phase 1 of my master plan is to regularly write more posts on misc web and coding in general related topics. And sometimes I can sit and write a few of them but it would be best not to release them all at once for a lot of reason.&lt;/p>
&lt;p>So this will cover the way I setup a schedule feature to my post creation process. Yes there are libraries for this but I just wanted to have fun making this feature. There are three key posts that helped me get through this.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://laravel.com/docs/queues">Laravel Docs&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://laracasts.com/search?q=beanstalkd">Laracasts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://help.ubuntu.com/community/UFW">Ubuntu Firewall Rules&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I will not repeat what they offer but link to them as needed.&lt;/p>
&lt;h4 id="we-will-cover">We will cover&lt;/h4>
&lt;ul>
&lt;li>Setup up a schedule field&lt;/li>
&lt;li>Setting up a Beanstalkd server&lt;/li>
&lt;/ul>
&lt;h4 id="setting-up-the-field">Setting up the field&lt;/h4>
&lt;p>My Post model has a published or active field and now a scheduled field. It is just a timestamp format field. I could have done other solutions and tighten this up a bit so any feedback is welcome below. When making a post I have two options at the bottom.&lt;/p>
&lt;p>I also use the &lt;a href="http://trentrichardson.com/examples/timepicker">Timepicker addon&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://photos-1.dropbox.com/t/0/AAAsUCPPbu9uo1HSy-yLiCUzN2lytkbgUtaef0dYAGMUyg/12/54803135/png/2048x1536/3/1400529600/0/2/Screenshot%202014-05-19%2014.44.00.png/xW1tZgTGBYh1YDH0M1ThFzeg7PnA1tegBAscZQDwM6E" alt="Schedule Options">&lt;/p>
&lt;p>If the new post is not Active &amp;amp;&amp;amp; has a Scheduled date then this method kicks into place in my Posts controller during the creation process. I will most likely move this to a Service or Model since it really is not the job of the Controller but this is v1 of my idea.&lt;/p>
&lt;pre>&lt;code>//app/controllers/PostsController.php
public function __construct(MarkdownExtraParser $mk = null, SchedulerAls $scheduler = null)
{
//other code here
$this-&amp;gt;scheduler = ($scheduler == null) ? new SchedulerAls() : $scheduler;
}
/**
* Store a newly created post in storage.
*
* @return Response
*/
public function store()
{
//basic code here for laravel
$this-&amp;gt;scheduler-&amp;gt;sendToQueue($post);
&lt;/code>&lt;/pre>&lt;h4 id="first">First&lt;/h4>
&lt;p>The &lt;strong>SchedulerAls Class&lt;/strong> is pretty simple, using the &lt;a href="http://laravel.com/docs/queues">Laravel Queue&lt;/a>&lt;/p>
&lt;p>The sendToQueue($post) method just does that&lt;/p>
&lt;pre>&lt;code>//app/Als/Services/SchedulerAls.php
class SchedulerAls
public function sendToQueue($post) {
if(!empty($post-&amp;gt;scheduled)) {
\Log::info(&amp;quot;Testing: PushJob {$post-&amp;gt;id}&amp;quot;);
\Queue::push('Als\Services\SchedulerAls', array('post' =&amp;gt; $post-&amp;gt;id));
}
}
&lt;/code>&lt;/pre>&lt;p>This adds a row to the queue to check the &amp;ldquo;Als\Services|SchedulerAls&amp;rdquo; class and trigger the fire method (more on that below) passing it the $post-&amp;gt;id.&lt;/p>
&lt;p>I make my fire method call to a &lt;strong>processPost&lt;/strong> method that decides if this post is not active and if it has a date set. If so and that date is not greater than today make it active else release it for 30 minutes and the next command needed into the queue.&lt;/p>
&lt;p>Eg if I post 1 for tomorrow (#100) and after that one for today (#101), it will see #100 is not ready and move on to #101.&lt;/p>
&lt;p>Here is that the fire method and the processPost. Really it can all be in the fire method.&lt;/p>
&lt;pre>&lt;code>//app/Als/Facades/Services/SchedulerAls.php
class SchedulerAls {
public function fire($job, $data)
{
$this-&amp;gt;processPost($job, $data);
}
protected function processPost($job, $data)
{
$id = $data['post'];
$post = \Post::find($id);
$scheduled = Carbon::createFromFormat('Y-m-d H:i:s', $post-&amp;gt;scheduled);
$now = Carbon::create();
if($scheduled-&amp;gt;lt($now)) {
$post-&amp;gt;active = 1;
$post-&amp;gt;save();
$job-&amp;gt;delete();
} else {
$job-&amp;gt;release(30);
}
}
&lt;/code>&lt;/pre>&lt;p>So that is it really. Set to active or not. Delete job or release it back to the queue with a 30 minute delay etc.&lt;/p>
&lt;h3 id="setting-up-the-server">Setting up the server.&lt;/h3>
&lt;p>This was really not bad. I ended up using the existing server but will move to another server shortly. One thing to keep in mind is your firewall. You really want to make sure that you are only allowing certain IPs to visit this server or limit beanstalkd to localhost.&lt;/p>
&lt;p>As noted this tutorial handles most of this really well &lt;a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper&lt;/a>&lt;/p>
&lt;p>Finally &lt;a href="https://github.com/ptrofimov/beanstalk_console">beanstalk console&lt;/a> is a great way, especially locally if you are not using &amp;ldquo;sync&amp;rdquo; driver to see what is going on. Just make sure to block it with htaccess so no one can just visit it on your server.&lt;/p>
&lt;p>That is about it. Later I will add an even to allow other things to be triggered maybe via IFTT!&lt;/p></description><category>laravel</category><category>php</category><category>queue</category></item><item><title>Using Dot Env files to manage settings</title><link>https://alfrednutile.info/posts/76/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/76/</guid><description>&lt;p>Wow. Included in Laravel &lt;a href="http://laravel.com/docs/configuration#protecting-sensitive-configuration">http://laravel.com/docs/configuration#protecting-sensitive-configuration&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>removed due to old news&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/">http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="update">Update&lt;/h2>
&lt;p>I really like the second link and how it sets up a .env file first to just return a simple string. After that you can have the .env.production.php or .env.local.php that laravel can look for.&lt;/p>
&lt;pre>&lt;code>//bootstrap/start.php
$env = $app-&amp;gt;detectEnvironment(function()
{
if (file_exists(__DIR__ . '/../.env')) {
return include(__DIR__ . '/../.env');
} else {
return 'production';
}
});
&lt;/code>&lt;/pre>&lt;p>Quite simple at that point to separate all of the environments.&lt;/p></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Using Scopes in Laravel</title><link>https://alfrednutile.info/posts/69/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/69/</guid><description>&lt;p>I have about 4 models that all share 2 common queries. I want all of them that are &amp;ldquo;Published&amp;rdquo; and or Ordered by a field called Order.&lt;/p>
&lt;p>This does help with some &lt;a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY&lt;/a> goals, but you could easily change or add to a scope as needed to update all the queries involved etc. Especially if at a later point you break this out into a Repository Patter to use a different ORM.&lt;/p>
&lt;p>So using &lt;a href="http://laravel.com/docs/eloquent#query-scopes">Scopes&lt;/a> I can make one shared query. All my Model classes extend a BaseModel class I made that looks like this&lt;/p>
&lt;pre>&lt;code>//app/models/BaseModel.php
&amp;lt;?php
class BaseModel extends \Eloquent {
public function scopePublished($query)
{
return $query-&amp;gt;where(&amp;quot;published&amp;quot;, &amp;quot;=&amp;quot;, 1);
}
public function scopeOrderByOrder($query)
{
return $query-&amp;gt;orderBy('order');
}
}
&lt;/code>&lt;/pre>&lt;p>So with any of the three class all I have to do is use these scopes.&lt;/p>
&lt;pre>&lt;code>//app/controllers/PortfoliosController.php
public function adminIndex()
{
$portfolios = Portfolio::OrderByOrder()-&amp;gt;get();
return View::make('portfolios.admin_index', compact('portfolios'));
}
&lt;/code>&lt;/pre>&lt;p>or even a Models relationships&lt;/p>
&lt;pre>&lt;code>//app/models/Portfolio.php
public function projects()
{
return $this-&amp;gt;hasMany('Project')-&amp;gt;Published()-&amp;gt;OrderByOrder();
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Quick way to add text to a hidden ckeditor field</title><link>https://alfrednutile.info/posts/68/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/68/</guid><description>&lt;p>Since I am not testing ckeditor this is a way to get text into a sometimes required field.&lt;/p>
&lt;pre>&lt;code>//FeaturesContext.php
/**
* @Then /^I fill in wysiwyg on field &amp;quot;([^&amp;quot;]*)&amp;quot; with &amp;quot;([^&amp;quot;]*)&amp;quot;$/
*/
public function iFillInWysiwygOnFieldWith($arg, $arg2)
{
$js = &amp;lt;&amp;lt;&amp;lt;HEREDOC
jQuery(&amp;quot;textarea[name='$arg']&amp;quot;).css('visibility', 'visible');
jQuery(&amp;quot;textarea[name='$arg']&amp;quot;).show();
HEREDOC;
$this-&amp;gt;getSession()-&amp;gt;executeScript($js);
$this-&amp;gt;fillField($arg, $arg2);
}
&lt;/code>&lt;/pre>&lt;p>This will go into FeaturesContext.php. Then to you test you can pass the name and text to place into the field&lt;/p>
&lt;pre>&lt;code> Then I fill in wysiwyg on field &amp;quot;body&amp;quot; with &amp;quot;Project via Test 1&amp;quot;
&lt;/code>&lt;/pre>&lt;p>If you want to test Ckeditor then just look for a class that it applies to your text editor to know it is showing. Otherwise assume it is tested and working if it is there.&lt;/p></description><category>behat</category><category>php</category></item><item><title>Github CLI to get Teams and Members of an Org</title><link>https://alfrednutile.info/posts/67/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/67/</guid><description>&lt;p>Needed to make a quick library for pulling down this info and making it a CSV file.&lt;/p>
&lt;p>The libraries made this super easy. But it was hard to get all the emails since these can only been seen if in the users profile.&lt;/p>
&lt;h3 id="the-link">the link&lt;/h3>
&lt;p>&lt;a href="https://github.com/alnutile/org_reports">https://github.com/alnutile/org_reports&lt;/a>&lt;/p></description><category>github</category><category>tools</category><category>apis</category><category>php</category></item><item><title>Mink Assertions</title><link>https://alfrednutile.info/posts/66/</link><pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/66/</guid><description>&lt;p>Just a reminder this file as a good list of steps I can use. (will post more here shortly)&lt;/p>
&lt;h3 id="mink-13">Mink 1.3&lt;/h3>
&lt;pre>&lt;code>[behat/mink-extension/src/Behat/MinkExtension/Context/MinkDictionary.php](https://github.com/Behat/MinkExtension/blob/1.3/src/Behat/MinkExtension/Context/MinkDictionary.php)
&lt;/code>&lt;/pre></description><category>note2self</category><category>behat</category></item><item><title>Adding Column using sqlite caused error 'Cannot add a NOT NULL column with default value NULL'</title><link>https://alfrednutile.info/posts/64/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/64/</guid><description>&lt;p>After the &lt;a href="http://laravel.com/docs/upgrade#upgrade-4.1.26">security update&lt;/a> I had to add a remember_token to my user table.
&lt;a href="">security update&lt;/a>&lt;/p>
&lt;p>Since I am using sqllite locally I ended up with this error&lt;/p>
&lt;pre>&lt;code>&amp;gt;php artisan migrate
[Illuminate\Database\QueryException]
SQLSTATE[HY000]: General error: 1 Cannot add a NOT NULL column with default value NULL (SQL: alter table &amp;quot;users&amp;quot; add column &amp;quot;remember_token&amp;quot; text not null)
&lt;/code>&lt;/pre>&lt;p>Finally &lt;a href="http://forumsarchive.laravel.io/viewtopic.php?id=13320">this post&lt;/a> made it clear I had to make this nullable&lt;/p>
&lt;pre>&lt;code>//migration file
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;text('remember_token')-&amp;gt;nullable();
});
}
&lt;/code>&lt;/pre></description><category>laravel</category><category>php</category><category>note2self</category></item><item><title>Drupal and Composer install or update</title><link>https://alfrednutile.info/posts/65/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/65/</guid><description>&lt;p>Using composer and drupal, even d7, is great.
But an update or install can leave you with a broken drupal registry.&lt;/p>
&lt;p>So here is a workflow that is pretty bullet proof.&lt;/p>
&lt;p>In this example drupal&amp;rsquo;s composer folder where composer.json lives is located in /var/www/drupal/sites/default/files/composer&lt;/p>
&lt;p>So in there is composer.json and composer.lock&lt;/p>
&lt;p>So when you need to install a new composer library and you updated your json file you can run&lt;/p>
&lt;pre>&lt;code>cd /var/www/drupal/
drush composer-rebuild-file
composer --working-dir=/var/www/drupal/sites/default/files/composer update
&lt;/code>&lt;/pre>&lt;p>If you get an broken registry issue the typically happens when you run&lt;/p>
&lt;pre>&lt;code>drush composer-manager update
&lt;/code>&lt;/pre>&lt;p>You can clear that up with&lt;/p>
&lt;pre>&lt;code>drush rr
&lt;/code>&lt;/pre>&lt;p>And then use composer directly as I did above to update/install your composer related files.&lt;/p></description><category>composer</category><category>drupal</category><category>php</category></item><item><title>php artisan migrate:reset not working</title><link>https://alfrednutile.info/posts/63/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/63/</guid><description>&lt;p>This was an issue for me using sqlite. There was a simple fix noted in the &lt;a href="http://irclogs.laravel.io/2014-03-02/04:41#log-5312b66d1937b8f547005cde">irclogs&lt;/a> of Laravel!&lt;/p>
&lt;p>So under my require-dev or require I placed&lt;/p>
&lt;pre>&lt;code>//composer.json
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.1.*&amp;quot;,
&amp;quot;way/generators&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;doctrine/dbal&amp;quot;: &amp;quot;~2.3&amp;quot;
},
&lt;/code>&lt;/pre>&lt;p>ran composer update and all was well again!&lt;/p></description><category>laravel</category><category>php</category></item><item><title>Angular and Scope - or - How not to waste time figuring out why a scope value is not 'working'</title><link>https://alfrednutile.info/posts/62/</link><pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/62/</guid><description>&lt;p>The creator of Angular notes it in this &lt;a href="https://www.youtube.com/watch?v=ZhfUv0spHCY&amp;amp;list=FLZa3QWzy1z1G9FIw02pytdA&amp;amp;index=2">video&lt;/a> which is well worth the watch.&lt;/p>
&lt;p>Basically when using includes or directives etc you may not be getting a scope value as easily because it is child scope and you may be looking in the parent scope.&lt;/p>
&lt;h3 id="for-example">For example&lt;/h3>
&lt;p>This include if I have an include and it references a model attribute like this&lt;/p>
&lt;pre>&lt;code>//Some include
&amp;lt;input ng-model=&amp;quot;firstname&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>I may not get the results from that input that I expect. I may not get any. So to be safe it is best to make an Object for your data that then has keys to get the value from. For example&lt;/p>
&lt;pre>&lt;code>//Some controller
$scope.person = {};
$scope.person.firstname = &amp;quot;Bob&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Then back in that include&lt;/p>
&lt;pre>&lt;code>//Some include
&amp;lt;input ng-model=&amp;quot;person.firstname&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Tends to work better than fighting with $parent prefixes as such&lt;/p>
&lt;pre>&lt;code>//Some include
&amp;lt;input ng-model=&amp;quot;$parent.firstname&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Anyways glad I watched the video which meant I only wasted under an hour one this head scratcher.&lt;/p></description><category>angular.js</category><category>note2self</category></item><item><title>Behat Checkbox</title><link>https://alfrednutile.info/posts/61/</link><pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/61/</guid><description>&lt;p>Just a reminder to check if a checkbox is checked or not.&lt;/p>
&lt;pre>&lt;code>Feature: Behat bug
Scenario:
Given I am on &amp;quot;/bug.html&amp;quot;
When I check &amp;quot;foo&amp;quot;
Then the &amp;quot;foo&amp;quot; checkbox should be checked
&lt;/code>&lt;/pre>&lt;p>or&lt;/p>
&lt;pre>&lt;code>Feature: Behat bug
Scenario:
Given I am on &amp;quot;/bug.html&amp;quot;
When I check &amp;quot;foo&amp;quot;
Then the &amp;quot;foo&amp;quot; checkbox should not be checked
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://github.com/Behat/Behat/issues/298">https://github.com/Behat/Behat/issues/298&lt;/a>&lt;/p></description><category>behat</category><category>note2self</category></item><item><title>Adding Markdown Editor to your Blog/CMS</title><link>https://alfrednutile.info/posts/60/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/60/</guid><description>&lt;p>In this case it is Laravel but any PHP framework could use this.&lt;/p>
&lt;h2 id="get-the-library">Get the Library&lt;/h2>
&lt;p>I used the &lt;a href="https://github.com/dflydev/dflydev-markdown">dflydev-markdown&lt;/a> library which uses &lt;a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown&lt;/a> as it&amp;rsquo;s base. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>As it notes I load it up with composer.json and I am ready to use it.&lt;/p>
&lt;h2 id="inject-the-class-into-your-controller">Inject the class into your controller&lt;/h2>
&lt;p>At the controller level I inject it like this&lt;/p>
&lt;pre>&lt;code>//BaseController.php
use dflydev\markdown\MarkdownExtraParser;
class BaseController {
public $mk;
public function __construct(MarkdownExtraParser $mk = null)
{
$this-&amp;gt;mk = ($mk == null) ? new MarkdownExtraParser() : $mk;
}
&lt;/code>&lt;/pre>&lt;p>Later on I call to it on both update and store on any of my Controllers that extend this class.&lt;/p>
&lt;h2 id="add-a-new-field-to-your-posts-or-other-content-type">Add a new field to your Posts or other content type&lt;/h2>
&lt;p>But the other step here is to add a rendered_body field to my models/tables. Then on store and update I write to these but on edit I am working on the body field which is markdown.&lt;/p>
&lt;pre>&lt;code>$data['rendered_body'] = $this-&amp;gt;mk-&amp;gt;transformMarkdown($data['body']);
&lt;/code>&lt;/pre>&lt;h2 id="render-it-in-the-view">Render it in the View&lt;/h2>
&lt;p>And in my Views I render the rendered_body field and NOT the body field which stores the raw text. This idea I got from &lt;a href="http://www.danneu.com/posts/9-rails-3-2-markdown-pygments-redcarpet-heroku/">danneu.com&lt;/a>&lt;/p>
&lt;p>Now with the help of the docs on &lt;a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown&lt;/a> I can do most of the work I need to make a post, embed video, images etc.&lt;/p>
&lt;h2 id="thoughts">Thoughts&lt;/h2>
&lt;p>As far as uploading &lt;strong>images&lt;/strong> I use Dropbox for that so it is really not part of my needs. With dropbox I just take a snapshot and it auto uploads the image and I get the url in my clipboard. Though I then have to go to the URL and get the real URL. Still working on that.&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;name&amp;quot;: &amp;quot;laravel/laravel&amp;quot;,
&amp;quot;description&amp;quot;: &amp;quot;The Laravel Framework.&amp;quot;,
&amp;quot;keywords&amp;quot;: [&amp;quot;framework&amp;quot;, &amp;quot;laravel&amp;quot;],
&amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
&amp;quot;repositories&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/alnutile/dflydev-markdown&amp;quot;
}
],
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.1.*&amp;quot;,
&amp;quot;dflydev/markdown&amp;quot;: &amp;quot;dev-master&amp;quot;
},
&amp;quot;autoload&amp;quot;: {
&amp;quot;classmap&amp;quot;: [
&amp;quot;app/commands&amp;quot;,
&amp;quot;app/controllers&amp;quot;,
&amp;quot;app/models&amp;quot;,
&amp;quot;app/database/migrations&amp;quot;,
&amp;quot;app/database/seeds&amp;quot;,
&amp;quot;app/tests/TestCase.php&amp;quot;
]
},
&amp;quot;require-dev&amp;quot;: {
&amp;quot;way/generators&amp;quot;: &amp;quot;2.*&amp;quot;,
&amp;quot;schickling/backup&amp;quot;: &amp;quot;dev-master&amp;quot;
},
&amp;quot;scripts&amp;quot;: {
&amp;quot;post-install-cmd&amp;quot;: [
&amp;quot;php artisan clear-compiled&amp;quot;,
&amp;quot;php artisan optimize&amp;quot;
],
&amp;quot;post-update-cmd&amp;quot;: [
&amp;quot;php artisan clear-compiled&amp;quot;,
&amp;quot;php artisan optimize&amp;quot;
],
&amp;quot;post-create-project-cmd&amp;quot;: [
&amp;quot;php artisan key:generate&amp;quot;
]
},
&amp;quot;config&amp;quot;: {
&amp;quot;preferred-install&amp;quot;: &amp;quot;dist&amp;quot;
},
&amp;quot;minimum-stability&amp;quot;: &amp;quot;stable&amp;quot;
}
&lt;/code>&lt;/pre>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I may start using this &lt;a href="https://github.com/michelf/php-markdown">michelf&lt;/a> since the one I am using now is marked depreciated. But I have already made a change to this one so it works a little better with my settings. My fork is here &lt;a href="https://github.com/alnutile/dflydev-markdown">my fork&lt;/a> and my composer.json looks below &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/li>
&lt;/ol>
&lt;/section></description><category>laravel</category><category>php</category></item><item><title>Ng-if and Scope</title><link>https://alfrednutile.info/posts/47/</link><pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/47/</guid><description>&lt;p>Scratched my head on this one for a few.&lt;/p>
&lt;p>Inside of ng-if is a new scope. So a model on $scope.modelName will have to be referenced as $parent.modelName in the view.&lt;/p>
&lt;p>&lt;img alt="" src="https://dl.dropboxusercontent.com/s/3rkj4et733pha3x/Screenshot%202014-04-26%2009.01.58.png" style="width: 869px; height: 262px;" />&lt;/p>
&lt;p>Basically it worked on another page so I knew it should work here. When I moved it out of ng-if it worked so it had to be related to that. Finally this &lt;a href="http://stackoverflow.com/questions/18342917/angularjs-ng-model-doesnt-work-inside-ng-if" target="_blank">post&lt;/a> made some sense of it&lt;/p>
&lt;p>So now my filter works.&lt;/p>
&lt;p>&lt;img alt="" src="https://photos-3.dropbox.com/t/0/AADIDwZp5vivK9ZGPUjRqT9-x6kuPteqCYXMRz_CfqRKLA/12/54803135/png/1024x768/3/1398657600/0/2/Screenshot%202014-04-26%2009.06.02.png/6qNuz9X5KcY5BZxJgTousavMbnCnmA755dLXMGaNdM0" style="width: 955px; height: 67px;" />&lt;/p></description><category>note2self</category></item><item><title>Running multiple tasks asynchronously with Drush, Drupal and MT</title><link>https://alfrednutile.info/posts/59/</link><pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/59/</guid><description>&lt;p>I will not even try to write about this but instead share the most well written technical page I have read in a long time&amp;nbsp;&lt;a href="http://deeson-online.co.uk/labs/multi-processing-part-1-how-make-drush-rush" target="_blank">http://deeson-online.co.uk/labs/multi-processing-part-1-how-make-drush-rush&lt;/a>&lt;/p>
&lt;p>He covers how to make a drush command run multiple processes in parallel&amp;nbsp;depending on how many threads you give it. I show in the image below me starting up the command to run 9 behat tests sent to Saucelabs with 4&amp;nbsp;threads (could not go over that)&lt;/p>
&lt;p>This reduced my testing time quite a bit for each cron job that runs these @critical tests.&lt;/p>
&lt;p>Which is great. The next step will be to read up about the mtq where he integrates this in the DrupalQueue system!&lt;/p>
&lt;p>now if only I had the Saucelabs account with unlimited threads!&lt;/p>
&lt;p>Takes 10 seconds to start the jobs but this is &amp;quot;normal&amp;quot; for my behat to Saucelabs startup.&lt;/p>
&lt;p>&lt;img alt="" src="https://dl.dropboxusercontent.com/u/54803135/mt_drush2.gif" style="width: 600px; height: 288px;" />&lt;/p></description><category>behat</category></item><item><title>Angular.js, CKEditor, and REST including file uploads</title><link>https://alfrednutile.info/posts/50/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/50/</guid><description>&lt;h2 id="i-wanted-to-share-the-steps-i-followed-to-get-this-wysiwyg-editor-working-with-angular-and-to-allow-uploads-by-the-end-of-it-you-will-see-how-to">I wanted to share the steps I followed to get this WYSIWYG editor working with Angular and to allow uploads. By the end of it you will see how to&lt;/h2>
&lt;ol>
&lt;li>Plug CKeditor into your Angular app&lt;/li>
&lt;li>Setup the config options in your Angular Controller and your view&lt;/li>
&lt;li>Setup your REST endpoints to take the needed requests&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Show image gallery&lt;/li>
&lt;li>Upload image&lt;/li>
&lt;li>Show Files to link to&lt;/li>
&lt;li>Upload file to link to&lt;/li>
&lt;/ul>
&lt;p>This can work for really any backend, Laravel, Drupal, Node etc. It is mostly to share some of the undocumented settings I needed. Though ckeditor does have a good api page here &lt;a href="http://docs.ckeditor.com/">ckdocs&lt;/a>&lt;/p>
&lt;p>Also what I hope for you to see how much you can really do with this. Your endpoints can easily be showing files from Dropbox, Evernote etc and offering those up in the interface for CKEditor.&lt;/p>
&lt;p>###Plug in the CKEditor module&lt;/p>
&lt;p>I downloaded this module &lt;a href="https://github.com/esvit/ng-ckeditor">ng-ckeditor&lt;/a>&lt;/p>
&lt;p>for me I store it in&lt;/p>
&lt;pre>&lt;code>/app/lib/ng-ckeditor
&lt;/code>&lt;/pre>&lt;p>I also placed into the folder the &lt;a href="http://ckeditor.com/download">ckeditor download&lt;/a>.&lt;/p>
&lt;p>That download will have a plugin folder in there I downloaded 2 plugins we will use.&lt;/p>
&lt;p>&lt;a href="http://ckeditor.com/addon/imagebrowser">Imagebrowser&lt;/a> to get an easier api to JSON and &lt;a href="http://ckeditor.com/addon/mediaembed">MediaEmbed&lt;/a> which may show up in my code examples and is totally optional.&lt;/p>
&lt;p>###Your Angular Controller&lt;/p>
&lt;p>Depending on your framework you need to inject the module and then apply some settings.&lt;/p>
&lt;h4 id="injecting-the-module">Injecting the module&lt;/h4>
&lt;p>Of course you need to include the js files and css file in your &amp;ldquo;index.html&amp;rdquo; file.&lt;/p>
&lt;ol>
&lt;li>ng-ckeditor/ng-ckeditor.css&lt;/li>
&lt;li>ng-ckeditor/libs/ckeditor/ckeditor.js&lt;/li>
&lt;li>ng-ckeditor/ng-ckeditor.js&lt;/li>
&lt;/ol>
&lt;p>item #2 being the actual ckeditor library.&lt;/p>
&lt;p>Finally inject it into your app.js file &amp;lsquo;ngCkeditor&amp;rsquo; so Angular makes it available to your controller.&lt;/p>
&lt;h4 id="the-controller">The Controller####&lt;/h4>
&lt;p>It is here I finally get to configure the editor&lt;/p>
&lt;pre>&lt;code> $scope.editorOptions = {
language: 'en',
'skin': 'moono',
'extraPlugins': &amp;quot;imagebrowser,mediaembed&amp;quot;,
imageBrowser_listUrl: '/api/v1/ckeditor/gallery',
filebrowserBrowseUrl: '/api/v1/ckeditor/files',
filebrowserImageUploadUrl: '/api/v1/ckeditor/images',
filebrowserUploadUrl: '/api/v1/ckeditor/files',
toolbarLocation: 'bottom',
toolbar: 'full',
toolbar_full: [
{ name: 'basicstyles',
items: [ 'Bold', 'Italic', 'Strike', 'Underline' ] },
{ name: 'paragraph', items: [ 'BulletedList', 'NumberedList', 'Blockquote' ] },
{ name: 'editing', items: ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock' ] },
{ name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },
{ name: 'tools', items: [ 'SpellChecker', 'Maximize' ] },
{ name: 'clipboard', items: [ 'Undo', 'Redo' ] },
{ name: 'styles', items: [ 'Format', 'FontSize', 'TextColor', 'PasteText', 'PasteFromWord', 'RemoveFormat' ] },
{ name: 'insert', items: [ 'Image', 'Table', 'SpecialChar', 'MediaEmbed' ] },'/',
]
};
&lt;/code>&lt;/pre>&lt;p>Can also be seen as a gist &lt;a href="https://gist.github.com/10678198">here&lt;/a>&lt;/p>
&lt;p>So of course you can do no settings but this is where the fun is. I am telling CKEditor where the endpoints are that it needs to talk to to GET and POST data.&lt;/p>
&lt;pre>&lt;code>filebrowserUploadUrl: '/api/v1/ckeditor/files',
&lt;/code>&lt;/pre>&lt;p>Is telling it to POST the uploaded file to that url.&lt;/p>
&lt;pre>&lt;code>filebrowserBrowseUrl: '/api/v1/ckeditor/files',
&lt;/code>&lt;/pre>&lt;p>Is telling it to GET the files available from that url.&lt;/p>
&lt;h4 id="the-view">The View&lt;/h4>
&lt;p>The html for this to work is simple.&lt;/p>
&lt;p>All I need to do is to tell the text area field to use this &amp;lsquo;directive&amp;rsquo;&lt;/p>
&lt;pre>&lt;code>&amp;lt;textarea cols=&amp;quot;30&amp;quot; rows=&amp;quot;40&amp;quot;
ng-model=&amp;quot;page.body&amp;quot;
name=&amp;quot;pageBody&amp;quot;
ckeditor=&amp;quot;editorOptions&amp;quot; rows=&amp;quot;100&amp;quot; required=&amp;quot;required&amp;quot;&amp;gt;
&amp;lt;/textarea&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Here I am using the &lt;strong>ckeditor&lt;/strong> directive to take over this textarea and pass the &amp;lsquo;editorOptions&amp;rsquo; info here as well.&lt;/p>
&lt;p>That is it!&lt;/p>
&lt;p>Now your ui in Angular has the editor.&lt;/p>
&lt;p>##The REST endpoints&lt;/p>
&lt;p>This was pretty hard to find in the documentations. Googling helped for sure but I figured it would good to put it here as well.&lt;/p>
&lt;p>###GET&lt;/p>
&lt;p>For getting/displaying the gallery of images I used that Imagebrowser plugin so when the GET request was made to the endpoint &amp;lsquo;/api/v1/ckeditor/gallery&amp;rsquo; it just had to respond with a certain format.&lt;/p>
&lt;p>My Images Controller method looks like this&lt;/p>
&lt;pre>&lt;code>
$rel = '/assets/img/wysiwyg';
$dir = public_path() . '/assets/img/wysiwyg';
$iterator = $this-&amp;gt;finder-&amp;gt;in($dir)-&amp;gt;name('*.png')-&amp;gt;name('*.jpg');
$files = [];
$count = 0;
foreach($iterator as $file) {
$files[$count]['thumb'] = $rel . '/' . $file-&amp;gt;getFilename();
$files[$count]['image'] = $rel . '/' . $file-&amp;gt;getFilename();
$files[$count]['title'] = $file-&amp;gt;getFilename();
$count ++;
}
return Response::json($files);
&lt;/code>&lt;/pre>&lt;p>gist is &lt;a href="https://gist.github.com/alnutile/10678198#file-images-php">here&lt;/a>&lt;/p>
&lt;p>Since I pulled in the Imagebrowser plugin I did not have to output html.&lt;/p>
&lt;p>The file viewer work though (eg the non image gallery) one I had to output html but maybe I could have found a JSON method. Here is what my endpoint returns.&lt;/p>
&lt;pre>&lt;code> $funcNum = $_GET['CKEditorFuncNum'];
$message = &amp;quot;File chosen&amp;quot;;
$script = &amp;quot;
&amp;lt;script type='text/javascript' src='https://alfrednutile.info/assets/js/jquery.1.10.2.min.js'&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type='text/javascript'&amp;gt;
var sendLink = function(event, url) {
event.preventDefault();
window.opener.CKEDITOR.tools.callFunction(\&amp;quot;$funcNum\&amp;quot;, url, \&amp;quot;$message\&amp;quot;);
window.close();
};
&amp;lt;/script&amp;gt;&amp;quot;;
$rel = '/assets/files/wysiwyg';
$dir = public_path() . '/assets/files/wysiwyg/';
$iterator = $this-&amp;gt;finder-&amp;gt;in($dir)-&amp;gt;name('*.pdf')-&amp;gt;name('*.doc');
$files = [];
$count = 0;
foreach($iterator as $file) {
$f = $rel . '/' . $file-&amp;gt;getFileName();
$name = $file-&amp;gt;getFileName();
$files[$count]['name'] = &amp;quot;&amp;lt;a href='&amp;quot; . $f . &amp;quot;' onclick='sendLink(event, \&amp;quot;$f\&amp;quot;)'&amp;gt;{$name}&amp;lt;/a&amp;gt;&amp;quot;;
$files[$count]['choose'] =
&amp;quot;&amp;lt;a href='&amp;quot; . $f . &amp;quot;' onclick='sendLink(event, \&amp;quot;$f\&amp;quot;)'&amp;gt;&amp;lt;i class='glyphicon glyphicon-new-window'&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&amp;quot;;
$count++;
}
return View::make('files.index', compact('files', 'script'));
&lt;/code>&lt;/pre>&lt;p>The View::make is just a template file that goes through the array and makes a bootstrap formatted table. Nothing fancy. But the $script, though it could have been better, was the only way I could figure to pass back the chosen file to the editor.&lt;/p>
&lt;p>&lt;strong>Keep in mind this is the html/output on the popup window you get when you click &amp;ldquo;Upload File&amp;rdquo; In CKEditor.&lt;/strong>&lt;/p>
&lt;p>That takes care of GET so the user will see buttons in CKEditor and browse images and files to insert as we all know.&lt;/p>
&lt;p>##POST / Uploading##&lt;/p>
&lt;p>These 2 endpoints are the same. They are POST endpoints that process the data like this&lt;/p>
&lt;pre>&lt;code> $rel = '/assets/files/wysiwyg';
$dir = public_path() . $rel;
$_FILES['upload']['type'] = strtolower($_FILES['upload']['type']);
if ($_FILES['upload']['type'] == 'application/pdf'
|| $_FILES['upload']['type'] == 'image/jpg'
|| $_FILES['upload']['type'] == 'image/gif'
|| $_FILES['upload']['type'] == 'image/jpeg'
|| $_FILES['upload']['type'] == 'application/doc')
{
$tmp = $_FILES['upload']['tmp_name'];
$dest = $dir . '/' . $_FILES['upload']['name'];
$this-&amp;gt;filesystem-&amp;gt;copy($tmp, $dest, $override = TRUE);
$file = '/assets/files/wysiwyg/'.$_FILES['upload']['name'];
}
$funcNum = $_GET['CKEditorFuncNum'];
$message = &amp;quot;File uploaded&amp;quot;;
$script = &amp;quot;&amp;lt;script type='text/javascript'&amp;gt;window.parent.CKEDITOR.tools.callFunction(\&amp;quot;$funcNum\&amp;quot;, \&amp;quot;$file\&amp;quot;, \&amp;quot;$message\&amp;quot;);&amp;lt;/script&amp;gt;&amp;quot;;
return $script;
&lt;/code>&lt;/pre>&lt;p>gist is &lt;a href="https://gist.github.com/alnutile/10678198#file-post-php">here&lt;/a>&lt;/p>
&lt;p>Basically I take the input of $_FILES and make sure it is what I expected and save it to the folder. The tricky part was to switch the user back to the interface, closing the parent window so they now can finish linking their file.&lt;/p>
&lt;p>##Final notes&lt;/p>
&lt;p>This is a first draft of this working deployed system. So it may have changes to it. I will try to comment here as I learn more.&lt;/p>
&lt;p>When getting info from CKEDITOR I would do a var_dump at the endpoint to see what it was sending me for data. You can always see this output in your Chrome Console under Networking.&lt;/p>
&lt;p>##Some links&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spantaleev/ckeditor-imagebrowser#usage">https://github.com/spantaleev/ckeditor-imagebrowser#usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://devture.com/projects/ckeditor-imagebrowser/demo/">http://devture.com/projects/ckeditor-imagebrowser/demo/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ckeditor.com/addon/imagebrowser">http://ckeditor.com/addon/imagebrowser&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spantaleev/ckeditor-imagebrowser#usage">https://github.com/spantaleev/ckeditor-imagebrowser#usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html">http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://docs.cksource.com/CKEditor_3.x/Developers_Guide/File_Browser_(Uploader)">http://docs.cksource.com/CKEditor_3.x/Developers_Guide/File_Browser_(Uploader)&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.paulfp.net/blog/2010/10/how-to-add-and-upload-an-image-using-ckeditor/">http://www.paulfp.net/blog/2010/10/how-to-add-and-upload-an-image-using-ckeditor/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.mixedwaves.com/2010/02/integrating-fckeditor-filemanager-in-ckeditor/">http://www.mixedwaves.com/2010/02/integrating-fckeditor-filemanager-in-ckeditor/&lt;/a>&lt;/li>
&lt;/ul></description><category>angular.js</category></item><item><title>Saucelabs Timeout</title><link>https://alfrednutile.info/posts/49/</link><pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/49/</guid><description>&lt;p>There are two settings I add to my yml file to prevent a timeout, command-timeout and max-duration.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/10364693.js?file=behat.yml">&lt;/script>
&lt;p>Last I checked though I had to add a different repo to my composer.json&lt;/p>
&lt;script src="https://gist.github.com/alnutile/10364693.js?file=composer.json">&lt;/script>
&lt;p>Now you get 10 minutes on both&lt;/p></description><category>saucelabs</category></item><item><title>Building the UI first with Angular, Mocked Data and REST</title><link>https://alfrednutile.info/posts/58/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/58/</guid><description>&lt;p>&lt;span style="line-height: 1.6em;">Lately I have had a few projects using a RESTful backend to output JSON formatted data and a javascript front end. All of them are different technologies but the front end is in Angular.js.&lt;/span>&lt;/p>
&lt;p>So using the Angular mock module I have been able to build out the front end with no backend. I started to do this for speed reasons but realized a number of huge benefits.&lt;/p>
&lt;p>Angular has some good docs on how to mock this data and use this &lt;a href="http://docs.angularjs.org/api/ngMockE2E/service/$httpBackend" target="_blank">$httpbackend&lt;/a> module here.&lt;/p>
&lt;p>Also I posted a quick video here on getting the json data from your app or from this great site &lt;a href="http://www.json-generator.com/" target="_blank">JsonGenerator&lt;/a>.&lt;/p>
&lt;p>You can see the video &lt;a href="https://www.youtube.com/watch?v=jMJAfGX2Qak&amp;feature=youtu.be" target="_blank">here&lt;/a>&lt;/p>
&lt;p>## User interfaces change&lt;/p>
&lt;p>No matter what the mock up show the ui will change. By having such a quick interface to try out widgets and workflows I can easily change with the clients needs.&lt;/p>
&lt;p>Also use &lt;a href="http://www.layoutit.com/">Layitout&lt;/a> to crank out the UI&lt;/p>
&lt;p>## The UI building process helps me to really understand the data goals&lt;/p>
&lt;p>If the ui is coming before the data end points are built then this really gives you time to rethink some assumptions on the data goals.&lt;/p>
&lt;p>## Speed and Testing&lt;/p>
&lt;p>Local testing is super fast.  Also the infamous page reload for viewing the latest change is instantaneous. &lt;/p>
&lt;p>## UI fixes are separate from backend fixes and changes&lt;/p>
&lt;p>A bug or feature added to the ui does not get tangled with the backend making for quick fixes and deployments. &lt;/p>
&lt;p>## Lastly it is real code&lt;/p>
&lt;p>The mocked routing code is pretty much a drop in for the final front end product. Just one file and it's one call to the mock module and run settings and it will call the real end points! And my data is structured to help guide me in building the RESTful part of the app&lt;/p>
&lt;p>I will do a quick series on using Angula mock and in general a workflow for building like this that can be applied to different javascript front ends and back ends.&lt;/p>
&lt;p> &lt;/p>
&lt;h2>Links&lt;/h2>
&lt;h3>Supports wildcard&lt;/h3>
&lt;p>&lt;a href="http://docs.angularjs.org/api/ngMock/service/$httpBackend" target="_blank">http://docs.angularjs.org/api/ngMock/service/$httpBackend&lt;/a> and &lt;a href="http://stackoverflow.com/questions/18618532/is-it-possible-to-use-wild-cards-in-angularjs-mocks" target="_blank">http://stackoverflow.com/questions/18618532/is-it-possible-to-use-wild-cards-in-angularjs-mocks&lt;/a>&lt;/p>
&lt;p>UPDATE: June 17 13:54 a friend just posted a link to http://jsonstub.com/ which looks really interesting&lt;/p></description><category>angular.js</category></item><item><title>Angular Watching a model and it's filters</title><link>https://alfrednutile.info/posts/43/</link><pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/43/</guid><description>&lt;p>I had to update other items on the page including an CSV export as the user made filter changes on the site.&lt;/p>
&lt;p>I had to pass the results of ng-repeat into a model and then the filters as seen here&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/9673298.js?file=index.html">&lt;/script>&lt;/p>
&lt;p>And in my controller I added a watcher to process the new results as needed.&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/9673298.js?file=reportController.js">&lt;/script>&lt;/p>
&lt;p>This simple solution I had some trouble grasping.&lt;/p></description><category>angular.js</category></item><item><title>Behat Resources</title><link>https://alfrednutile.info/posts/42/</link><pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/42/</guid><description>&lt;p>I&amp;#39;ve been working on behat related work for some time now and here is a list of things I would like to centralize and share&lt;/p>
&lt;ol>
&lt;li>Vagrant install of behat and behatEditor &lt;a href="https://github.com/alnutile/behat-vagrant" target="_blank">https://github.com/alnutile/behat-vagrant&lt;/a>&lt;/li>
&lt;li>BehatEditor &lt;a href="https://github.com/alnutile/behat_editor" target="_blank">https://github.com/alnutile/behat_editor&lt;/a> it will link off to serveral projects
&lt;ol>
&lt;li>Github Integration&lt;/li>
&lt;li>Saucelabs Integration&lt;/li>
&lt;li>Angular Reporting tool&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="http://https://docs.google.com/document/d/1YnaMd7BCugayNkEwLGDlXZtF7lG0VEUWJN2RvsCH_A8/edit?usp=sharing" target="_blank">Google doc that goes over how to get started &lt;/a>&lt;/li>
&lt;li>There is a new version of the tool coming out soon and a service you can see that starts of it here &lt;a href="http://angular.behateditor.io/#/" target="_blank">http://angular.behateditor.io/#/&lt;/a>&lt;/li>
&lt;li>Some links on the blog here &lt;a href="http://www.alfrednutile.info/tags/behat">http://www.alfrednutile.info/tags/behat&lt;/a>&lt;/li>
&lt;li>Some youtube videos are linked in all the above docs for setting up, testing etc.&lt;/li>
&lt;/ol></description><category>behat</category></item><item><title>Angular Seed Testing Setup</title><link>https://alfrednutile.info/posts/19/</link><pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/19/</guid><description>&lt;p>This took a few settings to get it working.&lt;/p>
&lt;p>For one I put the correct paths in for karma and webdriver&lt;/p>
&lt;script src="https://gist.github.com/alnutile/9518483.js">&lt;/script>
&lt;p>I then had to download mocks http://code.angularjs.org/1.2.14/angular-mocks.js even though I used angular-seed and setup my module to include this &amp;#39;ngMockE2E&amp;#39;&lt;/p>
&lt;p>This page was a good starting point http://docs.angularjs.org/api/ngMockE2E/service/$httpBackend&lt;/p>
&lt;p>Then there is the testing end 2 end frame work https://github.com/angular/protractor/tree/master/docs/ that allowed me to easily write non-unit tests&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>angular.js</category></item><item><title>Angular Drupal and CSRF</title><link>https://alfrednutile.info/posts/48/</link><pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/48/</guid><description>&lt;p>quick tip on getting and setting your token for drupal when doing a put, post, destroy against a drupal site.&amp;Acirc;&amp;nbsp;&lt;/p>
&lt;p>Mostly gotten from &lt;a href="http://angularjs-best-practices.blogspot.com/2013/07/angularjs-and-xsrfcsrf-cross-site.html" target="_blank">here&lt;/a>&lt;/p>
&lt;p>Might even be better to reset the formant for X-CSRF-Token to the default one Angular is looking for X-CSRFToken&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/9484320.js">&lt;/script>&lt;/p></description><category>angular.js</category></item><item><title>Mocking drupal database queries</title><link>https://alfrednutile.info/posts/46/</link><pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/46/</guid><description>&lt;p>&lt;b>formatting issue will update the code examples soon&lt;/b>&lt;/p>
&lt;p>&lt;span style="line-height: 1.6em;">I have a Class I want to test with phpunit but it makes several queries to a drupal database. I rather not bootstrapdrupal just to make sure this Class is returning the results as expected.&lt;/span>&lt;/p>
&lt;p>For example the SiteClass has a method called index. That method takes the uuid for a user and finds all the sites related to that user. Then using that uuid I have some other non drupal data that relates to it. So my class might look like this&lt;/p>
&lt;div class="code prettify" style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>//Foo.php&lt;br />
public function getSitesAndOtherDataForUser($uuid) {&lt;br />
$output = db_query(some query here);&lt;br />
return array(&amp;#39;data&amp;#39; =&amp;gt; $output)&lt;br />
&lt;span style="line-height: 1.6em;">}&lt;/span>&lt;/p>
&lt;/div>
&lt;p>&lt;span style="line-height: 1.6em;">But this is hard to test quickly in phpunit without touching the database. But I do not want to test the database. I know db_query works. I know the database layer works. I just want to verify this class is getting the request, getting information and then passing me back the right data format.&lt;/span>&lt;/p>
&lt;p>&lt;span style="line-height: 1.6em;">One way to do that is to make a Repository class that wraps all your database queries into methods.&lt;/span>&lt;/p>
&lt;p>&lt;span style="line-height: 1.6em;">So the class SiteClass has a constructor that allows the injection of the repository class for example&lt;/span>&lt;/p>
&lt;div class="code prettify" style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>&lt;span style="line-height: 1.6em;">//Foo.php&lt;br />
public function __construct(SiteRepository $repo = null)&lt;/span>&lt;/p>
&lt;p>{&lt;br />
$this-&amp;gt;repo = ($repo == null) ? new SiteRepository() : $repo;&lt;br />
}&lt;/p>
&lt;/div>
&lt;p>This then turns the above function into&lt;/p>
&lt;div class="code prettify" style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>&lt;span style="background-color: rgb(238, 238, 238);">//Foo.php&lt;/span>&lt;br style="background-color: rgb(238, 238, 238);" />
public function getSitesAndOtherDataForUser($uuid) {&lt;br />
$output = $this-&amp;gt;repo-&amp;gt;getSitesForUserUuid($uuid)&lt;br />
return array(&amp;#39;data&amp;#39; =&amp;gt; $output)&lt;br />
&lt;span style="line-height: 1.6em;">}&lt;/span>&lt;/p>
&lt;/div>
&lt;p>And this then allows me to instantiate in a phpunit test the same Repo but using Mockery so my unit test would look like this&lt;/p>
&lt;div class="code prettify" style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>&lt;span style="background-color: rgb(238, 238, 238);">//FooTest.php&lt;/span>&lt;br style="background-color: rgb(238, 238, 238);" />
&lt;span style="line-height: 1.6em;">public function setUp()&lt;/span>&lt;/p>
&lt;p>{&lt;br />
$this-&amp;gt;repo = Mockery::mock(&amp;#39;SiteRepository&amp;#39;)&lt;br />
}&lt;/p>
&lt;/div>
&lt;p>And later call to that method in the mocked class&lt;/p>
&lt;div class="code prettify" style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>//&lt;span style="background-color: rgb(238, 238, 238);">FooTest.php&lt;/span>&lt;br />
&lt;span style="line-height: 1.6em;">public function test_getSitesAndOtherDataForUser()&lt;/span>&lt;/p>
&lt;p>{&lt;br />
$this-&amp;gt;repo-&amp;gt;shouldReceive(&amp;#39;getSitesForUserUuid&amp;#39;)-&amp;gt;once()-&amp;gt;andReturn(array(1,2,3));&lt;br />
}&lt;/p>
&lt;/div>
&lt;p>This then allows me to quickly test how my code is dealing with the output. Maybe there is a filter, or other relations I am trying to pull in. As far as testing that the data structure is correct etc I save that for a test for that.&lt;/p>
&lt;p>The Repository Class can look like this if using EntityQuery&lt;/p>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>//SiteRepository.php&lt;/p>
&lt;p>public $eq;&lt;/p>
&lt;p>function __construct(\EntityFieldQuery $eq = null) {&lt;/p>
&lt;p>$this-&amp;gt;eq = ($eq == null) ? new \EntityFieldQuery() : $eq;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//Later on I can offer a method&lt;/p>
&lt;p>function&lt;span style="background-color: rgb(238, 238, 238);">getSitesForUserUuid($uuid){&lt;/span>&lt;/p>
&lt;p>$this-&amp;gt;eq = do some query&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//if we are not using EQ then just do your db_query in there&lt;/p>
&lt;p>function getSitesForUserUuid($uudi) {&lt;/p>
&lt;p>$results = db_query(foo);&lt;/p>
&lt;p>return $results;&lt;/p>
&lt;p>}&lt;/p>
&lt;/div></description><category>testing</category></item><item><title>CORS and Laravel</title><link>https://alfrednutile.info/posts/4/</link><pubDate>Thu, 06 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/4/</guid><description>&lt;p>When doing some API work using Laravel as the REST server I was getting a common error &amp;quot;No &amp;#39;Access-Control-Allow-Origin&amp;#39; header is present on the requested resource.&amp;quot; which happens when the REST server is on a different domain than the client server.&lt;/p>
&lt;p>I installed this package&amp;nbsp;&lt;a href="https://github.com/barryvdh/laravel-cors" target="_blank">https://github.com/barryvdh/laravel-cors&lt;/a>&amp;nbsp;and it now works fine.&lt;/p></description><category>api</category></item><item><title>Behat Vagrant install and local testing</title><link>https://alfrednutile.info/posts/57/</link><pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/57/</guid><description>&lt;div id="header">Setting up Vagrant for Behat&lt;/div>
&lt;div id="contents">
&lt;style type="text/css">ol.lst-kix_xa82982e1krb-7.start{counter-reset:lst-ctn-kix_xa82982e1krb-7 0}.lst-kix_xa82982e1krb-4>li{counter-increment:lst-ctn-kix_xa82982e1krb-4}ol.lst-kix_xa82982e1krb-5.start{counter-reset:lst-ctn-kix_xa82982e1krb-5 0}.lst-kix_xa82982e1krb-1>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-1,lower-latin) ". "}.lst-kix_xa82982e1krb-0>li{counter-increment:lst-ctn-kix_xa82982e1krb-0}.lst-kix_xa82982e1krb-3>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-3,decimal) ". "}.lst-kix_xa82982e1krb-3>li{counter-increment:lst-ctn-kix_xa82982e1krb-3}ol.lst-kix_xa82982e1krb-8{list-style-type:none}ol.lst-kix_xa82982e1krb-0.start{counter-reset:lst-ctn-kix_xa82982e1krb-0 0}.lst-kix_xa82982e1krb-6>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-6,decimal) ". "}.lst-kix_xa82982e1krb-4>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-4,lower-latin) ". "}.lst-kix_xa82982e1krb-1>li{counter-increment:lst-ctn-kix_xa82982e1krb-1}.lst-kix_xa82982e1krb-0>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-0,decimal) ". "}.lst-kix_xa82982e1krb-7>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-7,lower-latin) ". "}ol.lst-kix_xa82982e1krb-3.start{counter-reset:lst-ctn-kix_xa82982e1krb-3 0}ol.lst-kix_xa82982e1krb-6.start{counter-reset:lst-ctn-kix_xa82982e1krb-6 0}ol.lst-kix_xa82982e1krb-1{list-style-type:none}ol.lst-kix_xa82982e1krb-0{list-style-type:none}.lst-kix_xa82982e1krb-7>li{counter-increment:lst-ctn-kix_xa82982e1krb-7}ol.lst-kix_xa82982e1krb-3{list-style-type:none}ol.lst-kix_xa82982e1krb-2{list-style-type:none}ol.lst-kix_xa82982e1krb-5{list-style-type:none}ol.lst-kix_xa82982e1krb-2.start{counter-reset:lst-ctn-kix_xa82982e1krb-2 0}ol.lst-kix_xa82982e1krb-4{list-style-type:none}ol.lst-kix_xa82982e1krb-4.start{counter-reset:lst-ctn-kix_xa82982e1krb-4 0}ol.lst-kix_xa82982e1krb-7{list-style-type:none}ol.lst-kix_xa82982e1krb-6{list-style-type:none}.lst-kix_xa82982e1krb-6>li{counter-increment:lst-ctn-kix_xa82982e1krb-6}.lst-kix_xa82982e1krb-8>li{counter-increment:lst-ctn-kix_xa82982e1krb-8}.lst-kix_xa82982e1krb-5>li{counter-increment:lst-ctn-kix_xa82982e1krb-5}ol.lst-kix_xa82982e1krb-8.start{counter-reset:lst-ctn-kix_xa82982e1krb-8 0}.lst-kix_xa82982e1krb-5>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-5,lower-roman) ". "}ol.lst-kix_xa82982e1krb-1.start{counter-reset:lst-ctn-kix_xa82982e1krb-1 0}.lst-kix_xa82982e1krb-8>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-8,lower-roman) ". "}.lst-kix_xa82982e1krb-2>li{counter-increment:lst-ctn-kix_xa82982e1krb-2}.lst-kix_xa82982e1krb-2>li:before{content:"" counter(lst-ctn-kix_xa82982e1krb-2,lower-roman) ". "}ol{margin:0;padding:0}.c0{widows:2;orphans:2;height:11pt;direction:ltr}.c3{widows:2;orphans:2;direction:ltr;margin-left:36pt}.c10{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c4{widows:2;orphans:2;direction:ltr}.c2{color:#1155cc;text-decoration:underline}.c11{padding-top:10pt;page-break-after:avoid}.c12{margin:0;padding:0}.c6{color:inherit;text-decoration:inherit}.c1{font-weight:bold}.c9{text-decoration:underline}.c13{color:#ff2500}.c8{font-size:10pt}.c5{margin-left:36pt}.c7{padding-left:0pt}.title{widows:2;padding-top:0pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:21pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}.subtitle{widows:2;padding-top:0pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-style:italic;font-size:13pt;font-family:"Trebuchet MS";padding-bottom:10pt;page-break-after:avoid}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{widows:2;padding-top:10pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:16pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h2{widows:2;padding-top:10pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:13pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt;page-break-after:avoid}h3{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:12pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt;page-break-after:avoid}h4{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:11pt;text-decoration:underline;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h5{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h6{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-style:italic;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}
&lt;/style>
&lt;h1 class="c4 c11">&lt;a name="h.uontp0akbwxs">&lt;/a>&lt;span>Vagrant Setup &lt;/span>&lt;/h1>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>You can see the video &lt;a href="https://www.youtube.com/watch?v=PFRnudS_AVI&amp;amp;feature=youtu.be" target="_blank">here&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c4">&amp;nbsp;&lt;/p>
&lt;p class="c4">This is a fork of Steve Power&amp;#39;s work&amp;nbsp;&lt;a href="https://github.com/appnosteev" target="_blank">https://github.com/appnosteev&lt;/a>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>The goal here is to enable you to work locally in either Windows, Mac, Linux but using behat in an environment we can offer support in. After you are done with this install you will &lt;/span>&lt;/p>
&lt;ol class="c12 lst-kix_xa82982e1krb-0 start" start="1">
&lt;li class="c3 c7">&lt;span>Have a working Vagrant install with behat working&lt;/span>&lt;/li>
&lt;li class="c3 c7">&lt;span>A website with the Behat Editor and integrated Report system&lt;/span>&lt;/li>
&lt;li class="c3 c7">&lt;span>Integration with Github so you can synchronize your work via the BehatEditor GUI&lt;/span>&lt;/li>
&lt;li class="c3 c7">&lt;span>Ability to trigger your Desktops browser from tests running in the Vagrant VM vai the website or command line.&lt;/span>&lt;/li>
&lt;/ol>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;h2 class="c4 c11">&lt;a name="h.rfr7f5323aob">&lt;/a>&lt;span>Steps&lt;/span>&lt;/h2>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span class="c9">Download and install Virtualbox&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>See the help info here &lt;/span>&lt;span class="c2">&lt;a class="c6" href="https://www.virtualbox.org/">https://www.virtualbox.org/&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span class="c9">Download and install Vagrant&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>See the help here &lt;/span>&lt;span class="c2 c8">&lt;a class="c6" href="http://docs.vagrantup.com/v2/installation/index.html">http://docs.vagrantup.com/v2/installation/index.html&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span class="c8">You just need to get it installed so the executable works. The next steps will setup the VM&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span class="c9">Download the Git Repo to a directory you will keep it in.&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>We will use this repo for now&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span class="c2">&lt;a class="c6" href="https://github.com/alnutile/behat-vagrant">https://github.com/alnutile/behat-vagrant&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>So go to the command line and type &lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c3">&lt;span>git clone &lt;/span>&lt;span class="c2">&lt;a class="c6" href="https://github.com/alnutile/behat-vagrant.git">https://github.com/alnutile/behat-vagrant.git&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>then go into that folder&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c3">&lt;span>cd into that behat-vagrant directory&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>After you are in there type&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c3">&lt;span>vagrant up&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>And wait for about 5 minutes or so for it to build. It may ask you for a system password along the way.&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Then update your host file for the new IP as seen in these docs&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span class="c2">&lt;a class="c6" href="https://github.com/alnutile/behat-vagrant/blob/master/README.markdown">https://github.com/alnutile/behat-vagrant/blob/master/README.markdown&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Linux and Mac&lt;/span>&lt;/p>
&lt;p class="c3">&lt;span>sudo vim /etc/hosts&lt;/span>&lt;/p>
&lt;p class="c0 c5">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Windows&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span class="c2">&lt;a class="c6" href="http://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/">http://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>For any of these your IP will be &lt;/span>&lt;/p>
&lt;p class="c3">&lt;span>33.33.33.10 drupal.vbox.local &lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Once done you can visit the site http://drupal.vbox.local BUT still a few more steps.&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span class="c9">Setting up your behat.yml file&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>Get your machines IP address&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Then Edit your behat.yml file found in the folder you setup your Vagrant install&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>This file will assist you in running your local tests. Just find the file here &lt;/span>&lt;/p>
&lt;p class="c4">&lt;img alt="files.png" height="671" src="https://docs.google.com/document/d/1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU/pubimage?id=1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU&amp;amp;image_id=150JDHws1xI58bXJWPOw3-VkNgJhKCRTsjjsu6g" width="253" />&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Then edit that file and add the lines seen here &lt;/span>&lt;span class="c2">&lt;a class="c6" href="https://gist.github.com/alnutile/9273691">https://gist.github.com/alnutile/9273691&lt;/a>&lt;/span>&lt;span> in the behat_after.yml&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;img alt="behatyml.png" src="https://docs.google.com/document/d/1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU/pubimage?id=1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU&amp;amp;image_id=13Pm1_dRpDjDXOm9Sz-l2ReRoML5UA_q6jdNvHA" style="width: 624px; height: 282px;" />&lt;/p>
&lt;p class="c4">&lt;span>Set that IP to your IP and set the browser to firefox or safari or chrome as needed.&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span class="c9">Finally run the Selenium Server on your machine (not the vagrant box)&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>Got to &lt;/span>&lt;span class="c2">&lt;a class="c6" href="https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;amp;can=2&amp;amp;q">https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;amp;can=2&amp;amp;q&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Download and run by typing this in the folder you downloaded it to&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c3">&lt;span>java -jar selenium-server-standalone-2.39.0.jar&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Now it will run in the background.&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>So now you can visit the website and run a test (not in Saucelabs yet)&lt;/span>&lt;/p>
&lt;p class="c0">&amp;nbsp;&lt;/p>
&lt;p class="c4">&lt;span>Go to the URL http://drupal.vbox.local &lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>log in admin/admin&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>Visit &lt;/span>&lt;span class="c2">&lt;a class="c6" href="http://drupal.vbox.local/admin/behat/index">http://drupal.vbox.local/admin/behat/index&lt;/a>&lt;/span>&lt;/p>
&lt;p class="c4">&lt;span>Click Add and for now just click &lt;/span>&lt;/p>
&lt;p class="c4">&lt;img alt="Screenshot 2014-02-28 12.53.36.png" src="https://docs.google.com/document/d/1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU/pubimage?id=1AsLmknwkSv5nheziaf6xlSPDxTHy1WbCWKvVw2IP5WU&amp;amp;image_id=1k_XWw4ve8KwIqJJ8zBsRnz-kR5hZzB6X1GD8gA" style="width: 327px; height: 80px;" />&lt;/p>
&lt;p class="c4">&lt;span>to fill in a default wikipedia test. Then click &amp;ldquo;Run Test&amp;rdquo; and a new window should pop up on your computer for Firefox or Safari running the test. &lt;/span>&lt;span class="c1">That is it!&lt;/span>&lt;/p>
&lt;/div></description><category>behat</category></item><item><title>Twig and Drupal 7</title><link>https://alfrednutile.info/posts/53/</link><pubDate>Tue, 25 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/53/</guid><description>&lt;p>This will show how to use Twig in your D7 module&lt;/p>
&lt;p>Setup your composer.json to pull in twig.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/9211403.js?file=composer.json">&lt;/script>
&lt;p>Then setup your template files&lt;/p>
&lt;script src="https://gist.github.com/alnutile/9211403.js?file=table.html">&lt;/script>
&lt;p>Then the buttons I include&lt;/p>
&lt;script src="https://gist.github.com/alnutile/9211403.js?file=buttons.html">&lt;/script>
&lt;p>finally load the template and add your variables&lt;/p>
&lt;script src="https://gist.github.com/alnutile/9211403.js?file=load.php">&lt;/script>
&lt;p>&amp;nbsp;&lt;/p></description><category>twig</category></item><item><title>Angular and Laravel Partials</title><link>https://alfrednutile.info/posts/55/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/55/</guid><description>&lt;p>Blade uses {{ }} so it does not play well with Angular.js but I decided to use partials. I am not using Angular routes so I am just including partials in my controller file.&lt;/p>
&lt;h3>My blade file has this.&lt;/h3>
&lt;div class="code">
&lt;p>&amp;lt;div ng-include=&amp;quot;template.url&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/div&amp;gt;&lt;/p>
&lt;/div>
&lt;h3>Then the partial has this&lt;/h3>
&lt;div class="code">
&lt;p>&amp;lt;div class=&amp;quot;issues-to-get&amp;quot; ng-show=&amp;quot;issues.length &amp;gt; 0&amp;quot;&amp;gt;&lt;br />
&amp;lt;ul&amp;gt;&lt;br />
&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;li&amp;gt;&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; value=&amp;quot;all&amp;quot; /&amp;gt;All&amp;lt;/label&amp;gt;&amp;lt;/li&amp;gt;&lt;br />
&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;li ng-repeat=&amp;quot;issue in issues&amp;quot;&amp;gt;&amp;lt;label&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; value=&amp;quot;{{ issue.id }}&amp;quot; /&amp;gt;{{ issue.title }}&amp;lt;/label&amp;gt;&amp;lt;/li&amp;gt;&lt;br />
&amp;lt;/ul&amp;gt;&lt;br />
&amp;lt;/div&amp;gt;&lt;/p>
&lt;/div>
&lt;h3>The partial lives here&lt;/h3>
&lt;p>/public/assets/js/templates/&lt;/p>
&lt;p>which / is the root of my Laravel app.&lt;/p>
&lt;h3>Finally my controller has this&lt;/h3>
&lt;div class="code">
&lt;p>$scope.template = { name: &amp;#39;project_issues&amp;#39;, url: &amp;#39;/assets/js/templates/project_show.html&amp;#39;};&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;/div></description><category>laravel</category></item><item><title>Using Github Pages for your help docs</title><link>https://alfrednutile.info/posts/54/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/54/</guid><description>&lt;p>Really impressed with how this came out.&lt;/p>
&lt;p>Using Github pages with no theme we can use that repo to then pull in our help files to our local project via a JSON request. This separates documentation from the project so anyone on the team can checkout the git branch for the docs, make an edit and push to that branch which then shows on the site in minutes.&lt;/p>
&lt;p>To start with take the repo you are using to make a new branch called gh-pages as noted here &lt;a href="https://help.github.com/articles/creating-project-pages-manually" target="_blank">Github Docs&lt;/a>&amp;nbsp;&lt;/p>
&lt;p>Once you have that branch start writing your Markdown files.&amp;nbsp;&lt;/p>
&lt;p>I have one index.md that always links to the files in the folder.&lt;/p>
&lt;p>So when I am done the root looks like this&lt;/p>
&lt;p>/index.md&lt;/p>
&lt;p>/images&lt;/p>
&lt;p>/foo.md&lt;/p>
&lt;p>/bar.md&lt;/p>
&lt;p>And if you where to open the index.md you would see this (view the raw version)&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8976685.js?file=index.md">&lt;/script>&lt;/p>
&lt;p>So I am setting up this file to link to the files I am making. This will allow our help page to have an index.&lt;/p>
&lt;p>Then for foo.md I could do something like this (view the raw version)&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8976685.js?file=foo.md">&lt;/script>&lt;/p>
&lt;p>I will show in a moment the javascript to make the youtube link open in a new page.&lt;/p>
&lt;p>When I am done with my markdown I run this at the command line&lt;/p>
&lt;div class="code">for i in ./*.md; do markdown --html4tags $i &amp;gt; ${i%.*}.html; done;&lt;/div>
&lt;p>and I end up with with my html files all made for me. &lt;a href="#mdlibrary">[1]&lt;/a>&lt;/p>
&lt;p>Then I git add, git commit and git push this back to origin gh-pages.&lt;/p>
&lt;p>That is it for docs.&lt;/p>
&lt;p>In the app that uses these docs I just have a link that triggers a library to open and show the content.&lt;/p>
&lt;p>I used this library for the slide out&amp;nbsp;&lt;a href="http://srobbin.com/jquery-plugins/pageslide/" target="_blank">http://srobbin.com/jquery-plugins/pageslide/&amp;nbsp;&lt;/a>&lt;/p>
&lt;p>&lt;img alt="" src="https://photos-2.dropbox.com/t/0/AACODxjK2Mv48iOVCcaSVGPYlYXqWO4lIiaxxwe-osBKCQ/12/54803135/png/1024x768/3/1392310800/0/2/Screenshot%202014-02-13%2010.13.17.png/V8Dl4gLTAVYdmmhc_1z4PuXh7811CRto-qYXCc-5tkI" style="width: 400px; height: 566px;" />&lt;/p>
&lt;p>I am not totally sold on the library.&lt;/p>
&lt;p>Finally the JS code to pull in the Github docs.&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8976685.js?file=help.js">&lt;/script>
&lt;p>Finally I have a route that gets it for me and cleans it up. This could have been done in JS but I did it this way&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8976685.js?file=router.php">&lt;/script>
&lt;p>Note&lt;/p>
&lt;p>&lt;a name="mdlibrary">[1] &lt;/a>I will be using the markdown to html library soon so we can just leave the&amp;nbsp;md&amp;nbsp;as is.&lt;/p></description><category>github</category></item><item><title>GitWrapper Per Page settings KnpLabs / php-github-api</title><link>https://alfrednutile.info/posts/56/</link><pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/56/</guid><description>&lt;p>I need to stash more of these here as I use this &lt;a href="https://packagist.org/packages/knplabs/github-api">API&lt;/a> more&lt;/p>
&lt;p>&amp;Acirc;&amp;Acirc;&amp;#160;&lt;/p>
&lt;h2>Per Page Setting&lt;/h2>
&lt;p>&amp;Acirc;&amp;Acirc;&amp;#160;&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8923998.js">&lt;/script></description><category>githubapi</category></item><item><title>Guard, Laravel and phpunit</title><link>https://alfrednutile.info/posts/51/</link><pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/51/</guid><description>&lt;p>If you already have rvm install this should be easy. Otherwise google that pain.&lt;/p>
&lt;p>I set my rvm to ruby 2.0 but not sure if needed&lt;/p>
&lt;div class="code">
&lt;p>rvm --default use 2.0&lt;/p>
&lt;/div>
&lt;p>&lt;a href="http://rvm.io/rubies/default" target="_blank">http://rvm.io/rubies/default&lt;/a>&lt;/p>
&lt;p>Then I made a Gemfile in the root folder and add this content&lt;/p>
&lt;script src="https://gist.github.com/alnutile/4ce81981e7bfe298de4e.js">&lt;/script>
&lt;p>and run bundle install&lt;/p>
&lt;p>After that was in place I ran guard init to get going and then pasted this code into the Guard file it made.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8831791.js">&lt;/script>
&lt;p>So now my root folder has a guard file and it is looking for changes both in app/tests and app/* If the change happens in app/* other than tests it looks for the related *Test.php for that Controller or Model etc It also pops up a notification so you can see all is green or red as you work.&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>Now you are finally ready to run guard&amp;nbsp;&lt;/p>
&lt;p>bundle exe guard&amp;nbsp;&lt;/p>
&lt;p>and that should start up guard&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>phpunit</category></item><item><title>Drupal Services and Instantiating a Class</title><link>https://alfrednutile.info/posts/52/</link><pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/52/</guid><description>&lt;p>Been using Drupal Services on a project and there are some docs on how to use a Class with this. But to instantiate it I was using a function per class method. Instead I now I have one function that can instantiate the Class and method based on the &amp;#39;callback&amp;#39; and the path 0 arg. Later I would like to just use the $_REQUEST type.&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>You can see the service below starting on line 4&lt;/p>
&lt;p>Note the callback then calls to this function on line 127 which then just instantiates the class for me and calls the method.&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8844092.js">&lt;/script></description><category>note2self</category></item><item><title>Laravel Project Management Site</title><link>https://alfrednutile.info/posts/44/</link><pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/44/</guid><description>&lt;p>Still has some work to be done for sure.&amp;nbsp;&lt;/p>
&lt;p>&lt;a href="https://github.com/alnutile/pml4" target="_blank">https://github.com/alnutile/pml4&lt;/a>&lt;/p>
&lt;p>&lt;img alt="" src="https://photos-6.dropbox.com/t/0/AAA1GCF2mTtb0s1auSN8bHpD-o35nmPWCiaS4tFzyvpV_Q/12/54803135/png/2048x1536/3/1391400000/0/2/Screenshot%202014-02-02%2021.00.03.png/1aYJjmaoGuRzexlxQJFxDzid7urK3GRs-8P0nvQ8SzY" style="width: 600px; height: 254px; margin: 5px; border-width: 1px; border-style: solid;" />&lt;/p>
&lt;p>&lt;img alt="" src="https://photos-1.dropbox.com/t/0/AAA4lWC850wd95jWn1-EynEI5Q46dVP2DESbLQTqMO0PEQ/12/54803135/png/2048x1536/3/1391407200/0/2/Screenshot%202014-02-02%2023.00.10.png/1j3TfBbkROJPsr773gyeXy1mLsVzHnoQxuW-V_07cdM" style="width: 500px; height: 269px; border-width: 1px; border-style: solid; margin: 5px;" />&lt;/p>
&lt;p>The goal will be a PM site that integrates with the github api since I have endless issues with clients getting confused using the Github interface for tickets. So this system will wrap around that.&lt;/p>
&lt;p>In the mean time&lt;/p>
&lt;p>Projects are&amp;nbsp;in place with many to many on Users&lt;/p>
&lt;p>Issues are&amp;nbsp;in place with a one to many on Projects, a One to One User&lt;/p>
&lt;p>Comments are that have one to one relationship to Issues.&lt;/p>
&lt;p>It is use the &lt;a href="https://github.com/Zizaco/confide" target="_blank">Confide&lt;/a> auth system but right now only with an Admin role. Soon there will be Enforce, see notes below.&lt;/p>
&lt;p>Road map&lt;/p>
&lt;p>1. Email message to team on Project with new Issue and Comment&lt;/p>
&lt;p>2. Project links to GithubRepo&lt;/p>
&lt;p>3. Issue links to GithubRepo&lt;/p>
&lt;p>4. Comment links to GithubComment&amp;nbsp;&lt;/p>
&lt;p>5. Freshbook integration&lt;/p>
&lt;p>6. Behat&amp;nbsp;intergration&amp;nbsp;using my &lt;a href="https://github.com/alnutile/behat_editor" target="_blank">Behat Editor&lt;/a> work I did on drupal.&lt;/p>
&lt;p>7. Better user managment&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>laravel</category></item><item><title>Exploring Code and Laravel</title><link>https://alfrednutile.info/posts/40/</link><pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/40/</guid><description>&lt;p>One thing I really enjoy about any of &lt;a href="http://jeffrey-way.com/" target="_blank">Jeffrey Way&amp;#39;s&lt;/a> books or videos is how he emphasizes exploring code. &amp;nbsp;&lt;/p>
&lt;p>Laravel does have great docs but for me it has been best to first dig through the code. Coming from years of another PHP framework, digging though that code could still lead to not being certain about the answer just because it is was a bit different or more abstract than what I am seeing in Laravel or even Rails.&amp;nbsp;&lt;/p>
&lt;p>Here was one nice example, I was trying to figure out how to pass the &amp;quot;PUT&amp;quot; method to my form using Form::model.&amp;nbsp;&lt;/p>
&lt;p>Since I know these are &lt;a href="http://laravel.com/docs/facades" target="_blank">Facades&lt;/a>&amp;nbsp;I quickly could see in config/app.php that this Form method was an alias for this path &amp;quot;Illuminate\Support\Facades\Form&amp;quot;.&lt;/p>
&lt;p>Then when I open that file I see it notes on the start of the file @see &amp;quot;\Illuminate\Html\FormBuilder&amp;quot; so I do that.&lt;/p>
&lt;p>In there I see &amp;quot;public function model&amp;quot;.&lt;/p>
&lt;p>Okay that seems like a lot of work but using PHPStorm I just hold down Command and hover over the method and click on it and it takes me there!&lt;/p>
&lt;p>So now I can look at the model method, see what it does and how it just calls to the open method and easily see what it needs to find my &amp;quot;method&amp;quot; setting.&lt;/p>
&lt;div class="code">
&lt;p>&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;$method = array_get($options, &amp;#39;method&amp;#39;, &amp;#39;post&amp;#39;);&lt;/p>
&lt;p>&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// We need to extract the proper method from the attributes. If the method is&lt;br />
&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// something other than GET or POST we&amp;#39;ll use POST since we will spoof the&lt;br />
&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// actual method since forms don&amp;#39;t support the reserved methods in HTML.&lt;br />
&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;$attributes[&amp;#39;method&amp;#39;] = $this-&amp;gt;getMethod($method);&lt;/p>
&lt;p>&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;$attributes[&amp;#39;action&amp;#39;] = $this-&amp;gt;getAction($options);&lt;/p>
&lt;p>And that was it.&lt;/p>
&lt;p>I also see tricks on how to do things like the &amp;quot;array_get&amp;quot; function they use (once again Command click and I see what it does)&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;/div></description><category>code</category></item><item><title>Nesting Laravel 4 Routes</title><link>https://alfrednutile.info/posts/41/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/41/</guid><description>&lt;p>Make sure your route file is set to show this&lt;/p>
&lt;p>For my example is is projects and they have issues&lt;/p>
&lt;p>So my route looks like this&lt;/p>
&lt;pre>&lt;code>#routes.php
Route::resource('projects', 'ProjectsController');
Route::resource('projects.issues', 'IssuesController');
&lt;/code>&lt;/pre>&lt;p>So now my URLs will look lik this&lt;/p>
&lt;pre>&lt;code>/projects/4/issues &amp;lt;--shows all issues
/projects/4/issues/2 &amp;lt;--shows issue 2 in project 4
&lt;/code>&lt;/pre>&lt;p>Finally on the Project Show page I have these linkRoute&amp;rsquo;s in place&lt;/p>
&lt;pre>&lt;code> &amp;lt;tr&amp;gt;
@endif
&amp;lt;td&amp;gt;{{ $issue['id'] }}&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;{{ HTML::linkRoute('projects.issues.show', $issue['name'], array($project-&amp;gt;id, $issue['id'])) }}&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;{{ $issue['active'] }}&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;{{ $issue['description'] }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;/code>&lt;/pre>&lt;p>and&lt;/p>
&lt;pre>&lt;code>{{ HTML::linkRoute('projects.issues.create', 'Create Issue', $project-&amp;gt;id, array('class' =&amp;gt; 'btn btn-info')) }}
&lt;/code>&lt;/pre>&lt;p>That is it. I will post my Controller shortly for Issues.&lt;/p>
&lt;p>More help&lt;/p>
&lt;p>&lt;a href="https://tutsplus.com/lesson/nested-resources/">https://tutsplus.com/lesson/nested-resources/&lt;/a>&lt;/p></description><category>laravel</category></item><item><title>Using headless tests with Mink and Behat</title><link>https://alfrednutile.info/posts/9/</link><pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/9/</guid><description>&lt;p>Took a bit to find the right setting.&lt;/p>
&lt;p>The yml file should look like&lt;/p>
&lt;blockquote>
&lt;p>default:&lt;br />
&amp;nbsp; paths:&lt;br />
&amp;nbsp; &amp;nbsp; features: &amp;#39;features&amp;#39;&lt;br />
&amp;nbsp; extensions:&lt;br />
&amp;nbsp; &amp;nbsp; Behat\MinkExtension\Extension:&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; goutte:&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; guzzle_parameters:&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; curl.options:&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; CURLOPT_PORT: 8000&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; selenium2: ~&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; base_url: &amp;#39;http://localhost:8000&amp;#39;&lt;br />
&amp;nbsp; &amp;nbsp; &amp;nbsp; browser_name: safari&lt;/p>
&lt;/blockquote>
&lt;p>This way the goutte driver will use the correct port. Where as the base_url setting only seems to apply to that @javascript tag. Thanks to&amp;nbsp;&lt;a href="https://groups.google.com/forum/#!msg/behat/WCalw_TIjpo/FyaOjVfZP8IJ" target="_blank">https://groups.google.com/forum/#!msg/behat/WCalw_TIjpo/FyaOjVfZP8IJ&lt;/a>&lt;/p></description><category>mink</category></item><item><title>Node.js error</title><link>https://alfrednutile.info/posts/39/</link><pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/39/</guid><description>&lt;p>&amp;quot;failed to fetch from registry&amp;quot;&lt;/p>
&lt;p>But it was json endpoint was at that url so it was not a problem with the endpoint.&lt;/p>
&lt;p>http://stackoverflow.com/questions/12913141/installing-from-npm-fails had a command that helped&lt;/p>
&lt;blockquote>
&lt;p>npm config set registry http://registry.npmjs.org/&lt;/p>
&lt;/blockquote>
&lt;p>Now it all worked.&lt;/p>
&lt;p>Though this article may have been a better one to follow&amp;nbsp;&lt;a href="http://shashikantjagtap.net/using-zombie-js-driver-with-behats-minkextension/" target="_blank">http://shashikantjagtap.net/using-zombie-js-driver-with-behats-minkextension/&lt;/a>&lt;/p></description><category>nodejs</category></item><item><title>Behat and bad HTML</title><link>https://alfrednutile.info/posts/38/</link><pubDate>Sat, 11 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/38/</guid><description>&lt;p>Some of the sites we are testing have HTML that has multiple ID that are the same. Or elements that do not really have enough info to get a class, name, label or ID out of.&lt;/p>
&lt;p>This has been a challenge and there are a few custom steps made to help get through this&lt;/p>
&lt;p> &lt;/p>
&lt;hr />
&lt;h2>Switching to an Iframe with no name or id&lt;/h2>
&lt;p>This was hard since the default was to target the ID of the frame or name.&lt;/p>
&lt;p>Thanks to the help of this thread &lt;a href="https://groups.google.com/forum/#!topic/behat/z0z3DscjzhU" target="_blank">https://groups.google.com/forum/#!topic/behat/z0z3DscjzhU&lt;/a> I was able to pull it off.&lt;/p>
&lt;p>First, using jQuery and JavaScript I enable the user to target an Iframe by finding the ID of the div that surrounds it. Second I give the frame a name / id to target.&lt;/p>
&lt;p>Then I the user can choose one of or other custom steps noted below to switch to the frame. The code still needs better error checking e.g. if the element does not exist.&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8365567.js">&lt;/script>&lt;/p>
&lt;hr />
&lt;h2>Finding a Submit button on the page when there are 2 with the same name and ID&lt;/h2>
&lt;p>This snippet allows the user to target a specific element on the page by adding a number. This was done a couple of months ago and at this point I think we have a better way to do it. I will show that below.&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8365581.js">&lt;/script>&lt;/p>
&lt;hr />
&lt;h2>Clicking Submit on a form with no button&lt;/h2>
&lt;p>There are a few ways to do this. So far this one seem to be working best.&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8365610.js">&lt;/script>&lt;/p>
&lt;p>Of course if the form does not have an ID we would be in trouble.&lt;/p>
&lt;hr />
&lt;h2>Switching to a popup window that has no name&lt;/h2>
&lt;p>Finally this was the toughest one. We had to use a different branch of Mink to do this. This thread was key to getting this to work &lt;a href="https://groups.google.com/forum/#!topic/behat/QNhOuGHKEWI" target="_blank">https://groups.google.com/forum/#!topic/behat/QNhOuGHKEWI&lt;/a>&lt;/p>
&lt;p>What we ended up with was basically from that thread&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8365741.js">&lt;/script>&lt;/p>
&lt;hr />
&lt;h2>&lt;span style="line-height: 1.6em;">Dealing with Alerts&lt;/span>&lt;/h2>
&lt;p>Dealing with built in browser alerts was found in those threads as well.&lt;/p>
&lt;p>I then wrote a helper that I use in other methods to do this.&lt;/p>
&lt;p>Since all the steps are called from a web form they user can choose to "Click and Alert" as needed.&lt;/p>
&lt;p> &lt;/p>
&lt;p> &lt;/p>
&lt;p> &lt;/p>
&lt;p> &lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/8365634.js">&lt;/script>&lt;/p>
&lt;p> &lt;/p>
&lt;h2>Comparing the Size of an element to the Window&lt;/h2>
&lt;p>Lastly (really this time) we have to check the size of an element to make sure it meets requirements.&lt;/p>
&lt;p>This custom steps allows the user to enter a class to get the height of and enter the % it should be of the window.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8365794.js">&lt;/script>
&lt;h2>UPDATE &lt;/h2>
&lt;p>Noted in comments this might help as well&lt;/p>
&lt;p>&lt;script src="https://gist.github.com/alnutile/4a112a99c967adffe88b.js">&lt;/script>&lt;/p></description><category>bdd</category></item><item><title>Behat Mink and using Javascript / jQuery to test attributes</title><link>https://alfrednutile.info/posts/37/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/37/</guid><description>&lt;p>Using Behat and Mink I had to make a test that would verify the height of content on the screen compared to the rest of the window size. For example it had to be 30% of the screen or more.&lt;/p>
&lt;p>You can see the code below.&lt;/p>
&lt;p>It allows the user to pass in the expected height % and the element they would like to target. I will optmize it to allow more options than just ID.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/8289033.js">&lt;/script></description><category>bdd</category></item><item><title>Keep it (functions/methods) small and simple</title><link>https://alfrednutile.info/posts/36/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/36/</guid><description>&lt;p>I have been doing some work using&amp;nbsp;Oop and have a lot of re-factoring to do since I did not keep my methods small and simple. Often they use other methods or presume a certain amount of constructed parameters.&lt;/p>
&lt;p>When I was working strictly in procedural programming I would make my functions small and tie them together like the Unix command line tools. But then I had issues with having to pass too many variables all around. So that is the next step for me, figure out the balance of keeping things small but not always passing around or re-constructing numerous variables.&lt;/p>
&lt;p>Pattern:&amp;nbsp;&lt;a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">Single responsibility principle&lt;/a>&lt;/p></description><category>patterns</category></item><item><title>Ubuntu 12.04 and PHP 5.4</title><link>https://alfrednutile.info/posts/45/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/45/</guid><description>&lt;p>Note to self&lt;/p>
&lt;p>Super easy steps to setup PHP 5.4 on Ubuntu 12.04&lt;/p>
&lt;p>&lt;a href="http://www.dev-metal.com/how-to-install-latest-php-5-4-x-on-ubuntu-12-04-lts-precise-pangolin/">http://www.dev-metal.com/how-to-install-latest-php-5-4-x-on-ubuntu-12-04-lts-precise-pangolin/&lt;/a>&lt;/p></description><category>ubuntu</category></item><item><title>Bash History</title><link>https://alfrednutile.info/posts/32/</link><pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/32/</guid><description>&lt;p>This simple command &amp;quot;history&amp;quot; shows a numbered list of your past commands.&lt;/p>
&lt;blockquote>
&lt;p>&amp;nbsp;1720 &amp;nbsp;sudo chgrp -R www-data batch&lt;br />
&amp;nbsp;1721 &amp;nbsp;sudo chmod -R 766 batch&lt;br />
&amp;nbsp;1722 &amp;nbsp;ls -al&lt;br />
&amp;nbsp;1723 &amp;nbsp;sudo chmod -R 776 batch&lt;br />
&amp;nbsp;1724 &amp;nbsp;cd batch/full/&lt;br />
&amp;nbsp;1725 &amp;nbsp;pwd&lt;br />
&amp;nbsp;1726 &amp;nbsp;exit&lt;br />
&amp;nbsp;1727 &amp;nbsp;mv build.xml.ant /var/www/test/site/sites/default/files/behat_yml/batch/full/&lt;br />
&amp;nbsp;1728 &amp;nbsp;cd /var/www/test/site/sites/default/files/behat_yml/batch/full/&lt;/p>
&lt;/blockquote>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>From there you can choose a number from the output and run&lt;/p>
&lt;blockquote>
&lt;p>!1725&lt;/p>
&lt;/blockquote>
&lt;p>To quickly rerun the command&lt;/p></description><category>bash</category></item><item><title>Drupal FAPI Validation Error</title><link>https://alfrednutile.info/posts/31/</link><pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/31/</guid><description>&lt;p>when setting options in an option list dyamically you may run into &amp;quot;An illegal choice has been detected&amp;quot;&amp;nbsp;&lt;/p>
&lt;p>You will have to set those fileds #validate =&amp;gt; TRUE as seen bellow&lt;/p>
&lt;script src="https://gist.github.com/alnutile/7647356.js">&lt;/script>
&lt;p>&amp;nbsp;&lt;/p></description><category>JavaScript</category></item><item><title>Drush and Features-Export</title><link>https://alfrednutile.info/posts/29/</link><pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/29/</guid><description>&lt;p>When at the command line with drush making features keep in mind you may need to use quotes. Example&lt;/p>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">
&lt;p>&lt;span style="line-height: normal; font-family: Arial;">drush features-export --destination=&amp;quot;sites/all/modules/custom&amp;quot; behat_site_settings dependencies:behat menu_custom:main-menu menu_links:main-menu:&amp;quot;&amp;lt;front&amp;gt;&amp;quot; menu_links:main-menu:&amp;quot;user/login&amp;quot; menu_links:main-menu:user menu_links:navigation_:&amp;quot;behat/testarea&amp;quot;&amp;nbsp;&lt;/span>&lt;/p>
&lt;/div>
&lt;p>Without the quotes around the menu links you would get an error from bash.&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>drush</category></item><item><title>PHPSH</title><link>https://alfrednutile.info/posts/35/</link><pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/35/</guid><description>&lt;p>Interactive command line on a Mac. So far this helped out&lt;/p>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">brew tap josegonzalez/php&lt;/div>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">brew install phpsh&lt;/div>
&lt;p>and finally add this to the ~/.bash_profile&lt;/p>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">export PYTHONPATH=/usr/local/lib/python2.7/site-packages&amp;nbsp;&lt;/div>
&lt;p>and then re source your .bash_profile&lt;/p>
&lt;div style="background:#eee;border:1px solid #ccc;padding:5px 10px;">souce ~/.bash_profile&lt;/div>
&lt;p>&lt;span style="line-height: 1.6em;">now phpsh at the command line will give you an interactive shell&amp;nbsp;&lt;/span>&lt;/p></description><category>note2self</category></item><item><title>Quick Script to update Heroku database</title><link>https://alfrednutile.info/posts/33/</link><pubDate>Fri, 11 Oct 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/33/</guid><description>&lt;p>Just need to go from dev to basic on some sites. Later I will fix up the script to pass in the plan type and pg_wait.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/6927783.js">&lt;/script></description><category>heroku</category></item><item><title>Behat and Drupal episode 1</title><link>https://alfrednutile.info/posts/34/</link><pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/34/</guid><description>&lt;p>Intro to Behat and Drupal more coming soon. The goals will be to&amp;nbsp;&lt;/p>
&lt;ol>
&lt;li>Using Behat to run Drupal Selenium&amp;nbsp;tests.&lt;/li>
&lt;li>Introduce an easy language for Project Managers and Product Owners to write a tests&lt;/li>
&lt;li>Using a GUI to write tests.&lt;/li>
&lt;/ol>
&lt;p>....&lt;/p>
&lt;p>Here is the intro video&lt;/p>
&lt;p>&lt;iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/eBe-j6tAsms" width="420">&lt;/iframe>&lt;/p></description><category>behat</category></item><item><title>Bootstrap Generator Gem Ruby on Rails</title><link>https://alfrednutile.info/posts/10/</link><pubDate>Sat, 14 Sep 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/10/</guid><description>&lt;p>This particular gem overrides the default output of scaffold. Making your generated view files bootstrap ready.&lt;/p>
&lt;p>&lt;a href="https://github.com/decioferreira/bootstrap-generators" target="_blank">Bootstrap Generators&lt;/a>&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>bootstrap</category></item><item><title>Heroku in Heroku</title><link>https://alfrednutile.info/posts/30/</link><pubDate>Tue, 03 Sep 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/30/</guid><description>&lt;p>As I build out these sites I had to run heroku commands on heroku since the admin site needs to setup Domains and Subdomain on each new site. I was glad they had the&amp;nbsp;&lt;a href="https://github.com/heroku/heroku.rb" target="_blank">https://github.com/heroku/heroku.rb&lt;/a>&amp;nbsp;gem&amp;nbsp;that made it possible to make an interface for administrators to add domains and subdomains to their heroku site.&amp;nbsp;&lt;/p>
&lt;p>In my controller I included the heroku-api as the node on the github page.&lt;/p>
&lt;script src="https://gist.github.com/alnutile/f487851c7dd0cb01a4fb.js">&lt;/script>
&lt;p>After that, on an update or a create I check if the domain exists.&lt;/p>
&lt;p>There was another post on github in the issue queue to help me figure out how to &lt;strong>rescue out of an error&lt;/strong>. Ideally though I would direct the user back to the edit page with an error message or autocomplete as they type. But right now I save their settings to the Partner model and show the error.&lt;/p>
&lt;p>This allows me to use the &amp;quot;heroku domain:add --app APPNAME domain_name&amp;quot; command from within the app.&lt;/p>
&lt;p>Setting up the ENV variables are explained on setting up heroku pages like this one&amp;nbsp;&lt;a href="https://devcenter.heroku.com/articles/config-vars" target="_blank">https://devcenter.heroku.com/articles/config-vars&lt;/a>&amp;nbsp;so you can do this at the command line and note store it in a file on git.&amp;nbsp;&lt;/p></description><category>rails</category></item><item><title>HerokuApps and Multiple Domains</title><link>https://alfrednutile.info/posts/27/</link><pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/27/</guid><description>&lt;p>There are some great docs online for figuring out how to setup heroku domains.&lt;/p>
&lt;p>&lt;a href="https://devcenter.heroku.com/articles/custom-domains">https://devcenter.heroku.com/articles/custom-domains&lt;/a> as well as others.&lt;/p>
&lt;p>The feature I had to get setup was that for &lt;strong>every new herokuapp&lt;/strong> I spun up under my account/clients account it had to make a sub-domain under that SaaS owners zone/domain.&lt;/p>
&lt;p>For example the owner wanted all of these apps to show up under freesurvey.com (not really but just an example url)&amp;nbsp;so each one they spun up would be, for example yoursite.freesurvey.com but also later the person who &amp;quot;subscribed&amp;quot; for the product&amp;nbsp;can also use their real domain like www.mysite.com or survey.mysite.com so it would be fully branded under their name as well.&lt;/p>
&lt;p>The interface for the owner and the subscriber would allow them to do 2 things. One they could enter the sub-domain they wanted eg &amp;quot;yoursite&amp;quot; as long as it was free to use in the owners domain name spacing eg &amp;quot;freesurvey.com&amp;quot;. Just as you see with basecamp or freshbooks. Second they had a field to enter a full domain they wanted to point here as well eg &amp;quot;survey.mysite.com&amp;quot; to quickly setup the subscriber if they were ready to do that. &amp;nbsp;Keeping in mind each site is a new herokuapp which is really a new IP address. And heroku does not suggest the use of this IP address but to use the herokuapp name as I use below.&lt;/p>
&lt;p>After clicking save a few things took place.&lt;/p>
&lt;ol>
&lt;li>A new herokuapp was spun up from the master git branch&amp;nbsp;&lt;/li>
&lt;li>The herokuapp was given a name that is available from heroku, in my case I ran &amp;quot;heroku create --app NAMEHERE&lt;sup>1&lt;/sup>&amp;quot; using a name the script would produce that I am about 99% sure was available at heroku. But at this point it could just use the one heroku gives it and pass it back to the script.&lt;/li>
&lt;li>During the heroku install the&amp;nbsp;zerigo_dns addon was added.&amp;nbsp;&lt;/li>
&lt;li>The script then adds a domain to heroku via the command &amp;quot;heroku domains:add&amp;nbsp;NAMEHERE.freesurvey.com&amp;quot;&amp;nbsp;this automatically submits that domain via the add on &amp;quot;&lt;a href="http://zerigo_dns" target="_blank">zerigo_dns&lt;/a>&amp;quot; so now my DNS records for that domain &amp;quot;freesurvey.com&amp;quot; includes a CNAME to NAMEHERE.freesurvey.com that points to proxy.heroku.com. The benefit here is that I can do this all in the script at the command line and API to setup the herokuapp so it will respond to the this domain, and the DNS so that it knows of this new subdomain and what to do with it.&lt;br />
&lt;br />
A Wildcard DNS record for freesurvey.com would not have worked since each record points to the herokoapp which is it&amp;#39;s own domain/IP. So NAMEHERE&lt;strong>1&lt;/strong>.herokuapp.com and&amp;nbsp;NAMEHERE&lt;strong>2&lt;/strong>.herokuapp.com&amp;nbsp;are typically&amp;nbsp;a different server and IP. I did not want all of these sites on one server and I wanted to use a Paas provider like heroku for reasons I note &lt;a href="http://www.alfrednutile.info/posts/23" target="_blank">here&lt;/a>&amp;nbsp;.&amp;nbsp;&lt;/li>
&lt;li>Finally when the client who now uses this site is ready to point it to their own domain/zone they enter into the form &amp;quot;survey.mydomain.com&amp;quot; and this registers with the herokuapp via the command &amp;quot;heroku domains:add&amp;nbsp;survey.mydomain.com&amp;quot;&amp;nbsp;to accept requests from this domain and point it to &amp;quot;NAMEHERE.herokuapp.com&amp;quot;.&lt;br />
&lt;br />
So now it works for NAMEHERE.freesurvey.com, survey.mydomain.com and of course the name heroku was give to make the app&amp;nbsp;it&amp;nbsp;NAMEHERE.herokuapp.com. Of course the subscriber has to update their records that ONE time to point their CNAME survey.mydomain.com to ideally&amp;nbsp;NAMEHERE.herokuapp.com&lt;/li>
&lt;/ol>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>Zerigo DNS&amp;nbsp;&lt;a href="https://devcenter.heroku.com/articles/zerigo_dns" target="_blank">https://devcenter.heroku.com/articles/zerigo_dns&lt;/a>&lt;/p>
&lt;p>This was already setup for the client who owns the survey making SaaS site in this case for example &amp;quot;freesurvey.com&amp;quot; (not really this domain just an example)&lt;/p>
&lt;p>So Zerigo was the Name Server&amp;nbsp;provider for this domain. And was linked to heroku account I made for the client.&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>&lt;sup>1&lt;/sup>This name is made by Time.now.to_i via the ruby script prefixed with a consistent string of characters like freesurvey so I would end up with an App Name like freesurvey1234556789 which I could error check and make another until heroku says that was available. But that name is pretty rare so so far they are always available.&lt;/p></description><category>rails</category></item><item><title>Hosting is Dead?</title><link>https://alfrednutile.info/posts/28/</link><pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/28/</guid><description>&lt;p>Hosting is Dead? &lt;a href="https://www.getpantheon.com/resources/hostingisdead">https://www.getpantheon.com/resources/hostingisdead&lt;/a>&lt;/p>
&lt;p>Okay so they have a good reason to say that. But it is still worth a read.&lt;/p>
&lt;p>Some points I have experienced in the past&lt;/p>
&lt;h3>Server and Site Updates&lt;/h3>
&lt;blockquote>
&lt;p>&amp;quot;The person tasked with updating security patches had other priorities, and couldn&amp;rsquo;t stay on top of it. Or, the new developers you just brought in for a site&lt;br />
refresh are constantly requesting SSH keys and passwords. You&amp;rsquo;ve lost track of who had access to what in the past. Now a robot has hijacked or defaced&lt;br />
the site. &amp;quot;&lt;/p>
&lt;/blockquote>
&lt;p>I think this is also a matter of budget and expectations. The client never realized that their choice of Drupal or Wordpress or Joomla is a long term expense. &lt;strong>Server updates&lt;/strong>, if they are not on a shared host, and&lt;strong> Site Updates&lt;/strong>. By removing from the budget the need for spending time on server updates can be a huge help for small business owners, small tech shops and freelancers. Even if you like being a system admin I would still have to wonder is the expense worth it any more?&lt;/p>
&lt;h3>Workflow tools&lt;/h3>
&lt;blockquote>
&lt;p>Professional Drupal developers need to follow best-practices like version control, staging servers, deployment workflows, and&lt;br />
automated backups. Without the proper tooling in place, the development process takes more time and introduces significant risk. Even simple bug fixes&lt;br />
and updates are cumbersome and can take down the live site.&lt;/p>
&lt;/blockquote>
&lt;p>Another great point. To have good workflows is a costly investment for an individual or shop. But it is key to working on a project, as a team and even onboarding new people per job. Sure you can spend a ton of time setting up Vagrant, Chef scripts, the perfect server install and distro but can you really ever recover that cost?&lt;/p>
&lt;h3>Scaling on the fly&lt;/h3>
&lt;p>This is another one I have thought allot about. It seems that Heroko, Pantheon and the APIs Amazon offers are good example of systems I can scale up and down on the fly without a reboot. But others like Rackspace, Linode etc all seem to have downtime to scale the server? This seems so key to a successful site and budget. &lt;/p>
&lt;h3>Backups&lt;/h3>
&lt;p>Backups are another huge one. Providers will offer it but is it good enough? Daily? How far back? How quickly can your recover? And are those rdiff-backup or rsync script I made really still running? ( -:&lt;/p>
&lt;h3>Points of failure &lt;/h3>
&lt;p>Some of these providers have redundancy built in. That I have not researched enough to know for sure how good it is but this would be a killer feature to have that to build on my own. And again be even harder to recoup the cost from my average client. Even over time cause in time you keep making your system &amp;quot;better&amp;quot; or change them to the latest thing.&lt;/p>
&lt;h3>Costs&lt;/h3>
&lt;p>Finally costs. They have some charts in the doc about costs. Some of them are clearly one time costs that a shop could then roll out again and again for less hoping to recap the amount needed to pay for the work they did. But overall I would say that the cost to manage a server monthly are at least 2 hours a month (1 minimum). If I am billing a decent rate of $85 to $125 then already the client is paying to much for me to make sure the server (not even the site updates just server) is up to date and secure. Not to mention update but I am expected to be there to fix the server if anything happens 24/7. Honestly I think the client and I are both the losers when those expectations are on the table. As my wife when I got a phone call while getting dressed for my wedding! ( -:&lt;/p>
&lt;blockquote>
&lt;p> Honestly I think the client and I are both the losers when those expectations are on the table.&lt;/p>
&lt;/blockquote>
&lt;p>Anyways, it is worth reading but more importantly the subject is worth go back and forth on in discussion #hostingisdead to write your thoughts on twitter or link to a post of your own.&lt;/p>
&lt;p>ps&lt;/p>
&lt;p>this site is on A2hosting and I will soon move it to heroku to further test out these ideas.&lt;/p></description><category>heroku</category></item><item><title>Ruby on Rails with CMS and other fun stuff</title><link>https://alfrednutile.info/posts/25/</link><pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/25/</guid><description>&lt;p>Been working about a month now on a Ruby on Rails project. The goal of the product is to make a site that can be spun up numerous times as a Saas product. I has to include&amp;nbsp;&lt;/p>
&lt;ol>
&lt;li>CMS elements&lt;/li>
&lt;li>Settings area to change logo, colors etc.&lt;/li>
&lt;li>Connect to a remote SOAP API to create cloneable content from and users.&lt;/li>
&lt;li>User admin area with Roles&lt;/li>
&lt;li>Reporting&lt;/li>
&lt;li>Ckeditor that integrates with Paperclip on non-cms pages.&lt;/li>
&lt;li>Heroku deployment strategy&lt;/li>
&lt;/ol>
&lt;p>It really has been a fun project as I get to see all the great gems out there that make alot of this possible without a ton of custom work. Though unlike other frameworks I have used it is super easy to customize the MVC parts of the gems as needed which has made my work a ton more enjoyable.&lt;/p>
&lt;p>Some of the gems used so far&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/savonrb/savon" target="_blank">Savon&lt;/a> to talk to the SOAP API&lt;/li>
&lt;li>&lt;a href="https://github.com/thoughtbot/paperclip" target="_blank">Paperclip&lt;/a> Gem to manage images with Amazon S3&amp;nbsp;&lt;/li>
&lt;li>&lt;a href="https://github.com/plataformatec/devise" target="_blank">Devise&lt;/a> to help with authentication and signup&lt;/li>
&lt;li>&lt;a href="http://refinerycms.com/" target="_blank">RefineryCMS&lt;/a> to provide the highly customizable CMS part to this&amp;nbsp;&lt;/li>
&lt;li>&lt;a href="https://github.com/vcr/vcr" target="_blank">VCR&lt;/a> to help mock up the tests&amp;nbsp;&lt;/li>
&lt;li>&lt;a href="https://github.com/galetahub/ckeditor" target="_blank">Ckeditor&lt;/a> with Rails and Paperclip Integration&amp;nbsp;&lt;/li>
&lt;/ol>
&lt;p>I am finalizing the VCR test now. I did not do TDD on that part of the project since the IT on the other end where still working out the endpoints in the API. VCR has been a great help there to speed up the tests. And of course &lt;a href="http://RailsCasts.com" target="_blank">RailsCasts.com&lt;/a> for going over both Savon and VCR!&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>A demo of the project can be seen here as well.&lt;/p>
&lt;p>&lt;iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/UWv1zdB_6N8" width="420">&lt;/iframe>&lt;/p>
&lt;p>&amp;nbsp;&lt;/p>
&lt;p>&amp;nbsp;&lt;/p></description><category>refinerycms</category></item><item><title>Paperclip and S3 and Ckeditor</title><link>https://alfrednutile.info/posts/24/</link><pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/24/</guid><description>&lt;p>&lt;br />
This took a bit. On the first site it was easy. I went through &lt;a href="https://github.com/galetahub/ckeditor" target="_blank">these directions&lt;/a> to get ckeditor setup with paperclip.&lt;br />
And paperclip is easy to setup with S3 but on this site you are reading now the url Amazon used was not &lt;strong>s3&lt;/strong>.amazonaws.com/nutilesblog but &lt;strong>s3-us-west-2&lt;/strong>.amazonaws.com/nutilesblog&amp;nbsp;&lt;/p>
&lt;p>Paperclip was defaulting to s3 and I had trouble getting the combinations for this setting right. Maybe I could have set the bucket to use s3 but in the end I rather deal with the s3-us-west-2 since different clients will have different needs.&lt;/p>
&lt;p>&lt;br />
Finally I setup the development.rb and production.rb like this
&lt;br>
&lt;script src="https://gist.github.com/alnutile/6205464.js">&lt;/script>
&lt;br>
&lt;p>You can see the URL below of the image and the PDF&lt;/p>
&lt;p>&lt;img alt="" src="http://s3-us-west-2.amazonaws.com/nutilesblog/var/www/alsstuff2Cap/releases/20130811161031/public/ckeditor_assets/pictures/7/content_website.jpg" style="height:252px; width:300px" />&lt;/p>
&lt;p>And a PDF&lt;/p>
&lt;p>&lt;a href="http://s3-us-west-2.amazonaws.com/nutilesblog/var/www/alsstuff2Cap/releases/20130811161031/public/ckeditor_assets/pictures/8/original_testpdf.pdf">http://s3-us-west-2.amazonaws.com/nutilesblog/var/www/alsstuff2Cap/releases/20130811161031/public/ckeditor_assets/pictures/8/original_testpdf.pdf&lt;/a>&lt;/p></description><category>paperclip</category></item><item><title>RubyMine and BetterErrors</title><link>https://alfrednutile.info/posts/23/</link><pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/23/</guid><description>&lt;p>&lt;a href="https://github.com/charliesome/better_errors/wiki" target="" rel="">&lt;a href="https://github.com/charliesome/better_errors/wiki">https://github.com/charliesome/better_errors/wiki&lt;/a>&lt;/a>&lt;br>good help here on loading RubyMine from BetterErrors&lt;/p></description><category>rubymine</category></item><item><title>Installing mysql2 on a mac</title><link>https://alfrednutile.info/posts/22/</link><pubDate>Fri, 09 Aug 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/22/</guid><description>&lt;p>&lt;a href="http://stackoverflow.com/questions/5919727/bundle-install-problem-mysql-h-is-missing" target="" rel="">&lt;a href="http://stackoverflow.com/questions/5919727/bundle-install-problem-mysql-h-is-missing">http://stackoverflow.com/questions/5919727/bundle-install-problem-mysql-h-is-missing&lt;/a>&lt;/a>&lt;br>&lt;br>This was key to get this install done.&lt;/p></description><category>note2self</category></item><item><title>Paperclip and S3</title><link>https://alfrednutile.info/posts/17/</link><pubDate>Tue, 16 Jul 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/17/</guid><description>&lt;p>Great gem for attaching images to a rails app (maybe even Laravel). This article made it clear how to set this up&lt;br>&lt;a href="https://devcenter.heroku.com/articles/paperclip-s3" target="" rel="">&lt;a href="https://devcenter.heroku.com/articles/paperclip-s3">https://devcenter.heroku.com/articles/paperclip-s3&lt;/a>&lt;/a>&lt;br>&lt;br>And this one made it clear why my development environment was not working.&lt;br>&lt;a href="http://stackoverflow.com/questions/11760597/s3-paperclip-working-on-heroku-but-not-localhost" target="" rel="">&lt;a href="http://stackoverflow.com/questions/11760597/s3-paperclip-working-on-heroku-but-not-localhost">http://stackoverflow.com/questions/11760597/s3-paperclip-working-on-heroku-but-not-localhost&lt;/a>&lt;/a>&lt;br>I had to edit my .bash_profile&lt;br>But instead of restarting the terminal I just did &lt;br>&lt;br>source ~/.bash_profile &lt;br>&lt;br>and then started that rails server again&lt;b> in that terminal.&lt;/b>&lt;br>&lt;br>If only I found a tutorial on using fog and paperclip since I am already using that gem for refinerycms&lt;br>&lt;br>&lt;/p></description><category>refinerycms</category></item><item><title>Capistrano for non-rails sites</title><link>https://alfrednutile.info/posts/20/</link><pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/20/</guid><description>&lt;p>
I've been using capistrano for Rails and really impressed by how easy it makes deployment and rolllback. Sometimes though I need this type of automation on non-rails work. This type of automation can include setting up a vhost in Apache as well as Travis CI work. I know Chef-solo might be best for this but since I am already in Capistrano I might as well push it a little more.
&lt;/p>
&lt;p>
To use this on a static page I am building all I had to do, after making sure Ruby was installed of course was install the gem
&lt;a herf=https://github.com/leehambley/railsless-deploy/>railsless-deploy&lt;/a>.
&lt;/p>
&lt;p>
After I did that install I ran "capify ." in the folder I was working on.
&lt;/p>
&lt;p>
From there I edited the file Capify in the root of the folder so, as noted on the page above, it required this gem.
&lt;/p>
&lt;p>
In my case all I needed was a simple apache_vhost recipe and template to store the configurations using dynamic variables so I can use this on other sites quite easily. As well as updating the deploy.rb. You can see those in a github gist &lt;a href="#">here&lt;/a> and below.
&lt;br>
Also your folder layout will look like this
&lt;br>
/&lt;br>
/Capfile&lt;br>
/config&lt;br>
/config/deploy.rb&lt;br>
/config/recipes/base.rb&lt;br>
/config/recipes/apachevhost.rb&lt;br>
/config/recipes/templates/apache_vhost.erb&lt;br>
&lt;/br>
&lt;script src="https://gist.github.com/alnutile/5947574.js">&lt;/script>
&lt;/p>
&lt;p>
Thanks to the RailsCast episode &lt;a href=http://railscasts.com/episodes/337-capistrano-recipes>#337&lt;/a> I shown also the trick to setup a base config file to add some shared methods.
&lt;/p>
&lt;p>
One odd error before I could get this to work was to make an empty Gemfile in the root of the folder and run &lt;br>
bundle install
&lt;/br>
Even though I assumed the railsless gem would do that. But I posted this question on their github page and will see what I was missing.
&lt;br>
Finally I ran &lt;br>
&lt;/br>
cap deploy:install&lt;br>
cap deploy:setup&lt;br>
cap deploy:cold
&lt;/p>
&lt;p>
At this point Apache is set, the folders are set and the site can be accessed. And with all new pushes I just run cap deploy to update the server with the latest work from github "master"
&lt;/p>
&lt;p>
The next steps will be to integrate this into Travis CI to test and deploy via the github/git webhook feature.
&lt;/p></description><category>travis</category></item><item><title>Refinery CMS and Twitter Bootstrap</title><link>https://alfrednutile.info/posts/14/</link><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/14/</guid><description>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>This worked out quite easily on a project that I am working on. (not yet released) &lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>At the command line I had to run the needed code to copy the views to my app.&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>Here are some commands I ran thoug this command&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">
&lt;code>
&lt;span class="c3">rake refinery:override&lt;/span>&lt;/code>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>will show other options as well.&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">
&lt;code>&lt;span class="c3">rake refinery:override view=refinery/_site_bar&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">
rake refinery:override view=refinery/_content_page&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">rake refinery:override view=refinery/_menu&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">rake refinery:override view=refinery/_head&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">rake refinery:override view=refinery/_footer&lt;/span>
&lt;/code>
&lt;/p>&lt;p class="c0 c2">&lt;span class="c3">&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>Of course I had to install the gem in my Gemfile &lt;/span>&lt;span>for the sass version of this&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">//Gemfile &lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c3">gem &amp;quot;twitter-bootstrap-rails&amp;quot;&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>and run&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span class="c3">&lt;/span>&lt;/p>&lt;p class="c0">
&lt;code>
&lt;span class="c3">rails generate bootstrap:install static&lt;/span>
&lt;/code>&lt;/p>&lt;p class="c0 c2">&lt;span class="c3">&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>After all this you should have this type of layout in your file system&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c4">&lt;a class="c1" href="https://dl.dropboxusercontent.com/u/54803135/refinery_twitter1.png">&lt;img src="https://dl.dropboxusercontent.com/u/54803135/refinery_twitter1.png">&lt;/a>&lt;/span>&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;/p>&lt;p class="c0 c2">&lt;span>&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>Finally you need to do all the hard work to edit these files.&lt;/span>&lt;/p>&lt;p class="c0">&lt;span>Here is what I ended up with.&lt;/span>&lt;/p>&lt;p class="c0">&lt;span class="c4">&lt;a class="c1" href="https://gist.github.com/alnutile/5943019">https://gist.github.com/alnutile/5943019&lt;/a>&lt;/span>&lt;/p>
&lt;p>
&lt;script src="https://gist.github.com/alnutile/5943019.js">&lt;/script>
&lt;/p></description><category>twitterbootstrap</category></item><item><title>Technologies for a Saas</title><link>https://alfrednutile.info/posts/16/</link><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/16/</guid><description>&lt;p>
I had to review for a client what CMS to choose. Keeping in mind the CMS was only part of the product and a small part. Small in that the big value to the product seem to fall more on the APP part of the project that allowed the user to make a question set from an JSON based API. So a bulk of the work would be building that. The CMS was just to help manage a few pages, menu, users, and some settings.
&lt;/p>
&lt;!--start styles from google doc-->
&lt;style type="text/css">ol{margin:0;padding:0}.c1{vertical-align:top;width:27.8pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c22{vertical-align:top;width:25.5pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c15{vertical-align:top;width:315pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c9{vertical-align:top;width:240pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c19{vertical-align:top;width:24.8pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c10{vertical-align:top;width:26.2pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c12{vertical-align:top;width:27pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c8{vertical-align:top;width:111pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c17{vertical-align:top;width:92.2pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c11{vertical-align:top;width:30.8pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c2{vertical-align:top;width:29.2pt;border-style:solid;border-color:#000000;border-width:1pt;padding:5pt 5pt 5pt 5pt}.c28{list-style-type:decimal;margin:0;padding:0}.c23{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c26{color:#2793e6;font-size:10pt;background-color:#ffffff}.c18{color:#333333;font-size:10pt;background-color:#ffffff}.c21{padding-left:0pt;margin-left:36pt}.c6{color:inherit;text-decoration:inherit}.c0{line-height:1.0;direction:ltr}.c16{color:#1155cc;text-decoration:underline}.c27{text-align:right}.c3{font-weight:bold}.c5{direction:ltr}.c24{height:0pt}.c20{font-size:8pt}.c4{border-collapse:collapse}.c14{line-height:1.275}.c25{height:25pt}.c13{background-color:#cccccc}.c7{height:11pt}.title{padding-top:0pt;line-height:1.15;text-align:left;color:#000000;font-size:21pt;font-family:"Trebuchet MS";padding-bottom:0pt}.subtitle{padding-top:0pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:13pt;font-family:"Trebuchet MS";padding-bottom:10pt}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{padding-top:10pt;line-height:1.15;text-align:left;color:#000000;font-size:16pt;font-family:"Trebuchet MS";padding-bottom:0pt}h2{padding-top:10pt;line-height:1.15;text-align:left;color:#000000;font-size:13pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt}h3{padding-top:8pt;line-height:1.15;text-align:left;color:#666666;font-size:12pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt}h4{padding-top:8pt;line-height:1.15;text-align:left;color:#666666;font-size:11pt;text-decoration:underline;font-family:"Trebuchet MS";padding-bottom:0pt}h5{padding-top:8pt;line-height:1.15;text-align:left;color:#666666;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt}h6{padding-top:8pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt}&lt;/style>
&lt;!--end styles from google doc-->
&lt;p class="c5">&lt;span>Below are some notes about the technologies. I rate them 1-10, 1 = not strong 10 = strong. &lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>In the end &lt;/span>&lt;span class="c3">my thinking comes down the the Console.&lt;/span>&lt;span> To deploy sites, change server settings, and automate tasks, etc takes scripting and command line features. Using the same language the site is being built in to also do this type of scripting makes it not only easier to do the work but to also integrate the two areas.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Below I will review the Frameworks, The different CMS options, and define some terms used through the document.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.bsj31kttq3js">&lt;/a>&lt;span>Framework Considerations&lt;/span>&lt;/h2>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>The Frameworks I am presenting&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>D = Drupal&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>R = Ruby on Rails&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>W = Wordpress &lt;/span>&lt;/p>&lt;p class="c5">&lt;span>L = Laravel, PHP Framework&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>A = Angular.js Javascript Framework&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;a href="#" name="36368410253acc2780bfa65ed37321384547eea4">&lt;/a>&lt;a href="#" name="0">&lt;/a>&lt;table cellpadding="0" cellspacing="0" class="c4">&lt;tbody>&lt;tr class="c25">&lt;td class="c17 c13">&lt;p class="c0 c27">&lt;span class="c3">Teach -&amp;gt;&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1 c13">&lt;p class="c0">&lt;span>D&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2 c13">&lt;p class="c0">&lt;span>R&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10 c13">&lt;p class="c0">&lt;span>W&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22 c13">&lt;p class="c0">&lt;span>L&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12 c13">&lt;p class="c0">&lt;span>A&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9 c13">&lt;p class="c0">&lt;span>Notes (more details follow below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span class="c3">Features&lt;/span>&lt;span> &lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span>CLI Scripting&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>1&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>1&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>0&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>Command Line Scripting (more notes below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span>Testability&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>2&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>5&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>(more notes below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span>CMS&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>6&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>8&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>See CMS Notes below &lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span>Deployment&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>5&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>5&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>See Deployment Notes below (more notes below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c17">&lt;p class="c0">&lt;span>API Integration&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>8&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>8&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>Able to communicate to API (more notes below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c17">&lt;p class="c0">&lt;span>Customize&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>9&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>See notes below&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c17">&lt;p class="c0">&lt;span>Support&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>Ease of finding developers, but see notes below&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c17">&lt;p class="c0">&lt;span>RESTful&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0">&lt;span>5&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0">&lt;span>?&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0">&lt;span class="c20">N/A&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0">&lt;span>RESTful interface (more notes below)&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c17">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c1">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c10">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c22">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c12">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c9">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.ku9a911tvo84">&lt;/a>&lt;span>CMS Considerations&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>Here are some demos for Ruby on Rails and Laravel.&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Keep in mind “more features” does not mean better, in our case we need to be able to &lt;/span>&lt;span class="c3">control the features, or limit them&lt;/span>&lt;span>, have an interface that is &lt;/span>&lt;span class="c3">simple to use&lt;/span>&lt;span>, and most importantly we need to be able to &lt;/span>&lt;span class="c3">manage security updates&lt;/span>&lt;span>, feature updates, and other code or database level changes easily. Without that, and I have seen this for year now, when changes are needed, and we are up to 50-100 sites, then there is a huge expense there. &lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Some of the main features I am considering, not that others are not there or possible.&lt;/span>&lt;/p>&lt;ol class="c28" start="1">&lt;li class="c21 c5">&lt;span>User can easily add and edit pages&lt;/span>&lt;/li>&lt;li class="c21 c5">&lt;span>User can easily add and edit menu areas&lt;/span>&lt;/li>&lt;li class="c21 c5">&lt;span>There is a solid WYSIWYG editor for adding pages.&lt;/span>&lt;/li>&lt;li class="c5 c21">&lt;span>There are Roles and Permission Levels.&lt;/span>&lt;/li>&lt;li class="c21 c5">&lt;span>There is a solid authentication system &lt;/span>&lt;/li>&lt;/ol>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Some Links to CMS &lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Ruby on Rails&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://refinerycms.com/">http://refinerycms.com/&lt;/a>&lt;/span>&lt;span> Refinery&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>I have a youtube video here&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://youtu.be/pWK_mourmGY">http://youtu.be/pWK_mourmGY&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>There is a nice showcase here&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://refinerycms.com/showcase">http://refinerycms.com/showcase&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>A demo is here&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://refinerycms.com/showcase">http://refinerycms.com/showcase&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c18">A lot more info can be see here&lt;/span>&lt;/p>&lt;p class="c5 c14">&lt;span class="c26">&lt;a class="c6" href="http://railscasts.com/episodes/332-refinery-cms-basics?view=asciicast">http://railscasts.com/episodes/332-re...&lt;/a>&lt;/span>&lt;span class="c18"> &lt;/span>&lt;/p>&lt;p class="c5 c14">&lt;span class="c18">As well as on their website&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c26">&lt;a class="c6" href="http://refinerycms.com/">http://refinerycms.com/&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Laravel&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://pongocms.com/">http://pongocms.com/&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>I really do not have much info about this one BUT any CMS we choose will do the basics you need, and most importantly be flexible for your needs.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Drupal and Wordpress are already well known in this area so no links needed.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;hr style="page-break-before:always;display:none;">&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c3">CMS Chart&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>Ref = Refinery&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>D = Drupal&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>W = Wordpress&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;a href="#" name="c07108ae259b4b39b7a259677a3f4c9cfbd19cf2">&lt;/a>&lt;a href="#" name="1">&lt;/a>&lt;table cellpadding="0" cellspacing="0" class="c4">&lt;tbody>&lt;tr class="c24">&lt;td class="c8">&lt;p class="c0 c27">&lt;span class="c3">CMS-&amp;gt;&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>Ref&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>D&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>W&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>L&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0">&lt;span>Notes&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c8">&lt;p class="c0">&lt;span class="c3">Features&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c8">&lt;p class="c0">&lt;span>User Roles&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>8&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>8&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>?&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c8">&lt;p class="c0">&lt;span>Customize&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>9&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c8">&lt;p class="c0">&lt;span>WYSIWYG&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>7&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr>&lt;td class="c8">&lt;p class="c0">&lt;span>Easy to theme&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>5&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c8">&lt;p class="c0">&lt;span>Active Community&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>10&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;tr class="c24">&lt;td class="c8">&lt;p class="c0">&lt;span>License&lt;/span>&lt;/p>&lt;/td>&lt;td class="c11">&lt;p class="c0">&lt;span>M&lt;/span>&lt;/p>&lt;/td>&lt;td class="c19">&lt;p class="c0">&lt;span>G&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0">&lt;span>G&lt;/span>&lt;/p>&lt;/td>&lt;td class="c2">&lt;p class="c0 c7">&lt;span>&lt;/span>&lt;/p>&lt;/td>&lt;td class="c15">&lt;p class="c0">&lt;span>See Licenses below&lt;/span>&lt;/p>&lt;/td>&lt;/tr>&lt;/tbody>&lt;/table>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h3 class="c5">&lt;a name="h.7cp5e93pqpoz">&lt;/a>&lt;span>License&lt;/span>&lt;/h3>&lt;p class="c5">&lt;span>GPL &lt;/span>&lt;span class="c16">&lt;a class="c6" href="http://en.wikipedia.org/wiki/GNU_General_Public_License">http://en.wikipedia.org/wiki/GNU_General_Public_License&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span>MIT &lt;/span>&lt;span class="c16">&lt;a class="c6" href="http://en.wikipedia.org/wiki/MIT_License">http://en.wikipedia.org/wiki/MIT_License&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h3 class="c5">&lt;a name="h.i85vvdsef850">&lt;/a>&lt;span>Ruby on Rails&lt;/span>&lt;/h3>&lt;p class="c5">&lt;span>This is the technology behind BaseCamp, Groupon, Shopify, Yellow Pages, Hulu, Living Social, Twitter etc. This is about 10 years old and the Ruby language it is built around is older than that. &lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://en.wikipedia.org/wiki/Ruby_(programming_language)">http://en.wikipedia.org/wiki/Ruby_(programming_language)&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://en.wikipedia.org/wiki/Ruby_on_Rails">http://en.wikipedia.org/wiki/Ruby_on_Rails&lt;/a>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h3 class="c5">&lt;a name="h.twnwhg6ori6a">&lt;/a>&lt;span>Laravel&lt;/span>&lt;/h3>&lt;p class="c5">&lt;span class="c16">&lt;a class="c6" href="http://pongocms.com/">http://pongocms.com/&lt;/a>&lt;/span>&lt;span> there is a screen cast in the middle of the page. I have not used this but Laravel is a very strong PHP framework that is only going to get better in the next few years and more popular. &lt;/span>&lt;span class="c3">If we need to use PHP&lt;/span>&lt;span> this would be the way to go.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.8wf233iq86cj">&lt;/a>&lt;span>Customize&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>This now only includes the ability to customize but the ease of this work both for cost reason and for overall site stability. This Framework should not get in the way but assist us. And our work should not be about “removing features” or workflows but add them as we need them.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.3rxqh6fh05bc">&lt;/a>&lt;span>RESTful&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>This is key to talk to the website from the command line or centralized dashboard for example. By have this feature we can send commands, change setting etc to the site or sites as needed. For example we can send a command to disable a site, from the Sales Person dashboard.&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.7yfdw1n3gf24">&lt;/a>&lt;span>Deployment&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>We need to be able to easily deploy changes to the sites either security updates, database changes, or new features. Some of the tools to do that are &lt;/span>&lt;span class="c16">&lt;a class="c6" href="http://www.opscode.com/chef/">Chef&lt;/a>&lt;/span>&lt;span>, &lt;/span>&lt;span class="c16">&lt;a class="c6" href="https://github.com/capistrano/capistrano/wiki">Capstrano&lt;/a>&lt;/span>&lt;span>. Frameworks that keep settings in the database such as Variables, complex table layouts for data etc are very hard to deploy and update via scripts. That is why most frameworks rely on files to base much of their configuration settings. Drupal 8 may help drupal in this regards but it will not be ready for a year or so.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.qockwhs0mpge">&lt;/a>&lt;span>Developers&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>people who can code at this level not just site builders but people how can code building these custom features, manage servers, manage deployment.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.877qyptakom0">&lt;/a>&lt;span>Command Line Scripting&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>this is key. This allows us to use the same language to talk to the server, script deployments, monitor the systems, etc.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.946w6dd8n0py">&lt;/a>&lt;span>Testability&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>this is key to a solid product, one you know you can add features to without breaking previous features. This will be a part of the entire process, and no new deployments will happen until all tests pass. Testing features like User Authentication, Branding Changes, Question Answer sorting etc will mean a long term quality to the site and confidence as we add or change features.&lt;/span>&lt;/p>&lt;p class="c5 c7">&lt;span>&lt;/span>&lt;/p>&lt;h2 class="c5">&lt;a name="h.d8uniwwgx687">&lt;/a>&lt;span>API Integration&lt;/span>&lt;/h2>&lt;p class="c5">&lt;span>The API being JSON will be compatible with any of these solutions. The rating here is more about how friendly these solutions are to customize with this in mind.&lt;/span>&lt;/p></description><category>refinerycms</category></item><item><title>Angular.js Ticket System</title><link>https://alfrednutile.info/posts/18/</link><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/18/</guid><description>&lt;p>Fun side project to make a ticket system in Angular.js.&lt;br />
Still have to build out the authentication system and ideally move the api into Rails.&lt;br />
And of course wrap up a few other things ( -;&lt;br />
http://angular.alfrednutile.info/&lt;br />
Or the video&lt;br />
http://www.youtube.com/watch?v=RjCJNn7wpj0&lt;br />
&lt;iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/RjCJNn7wpj0" width="420">&lt;/iframe>&lt;/p></description><category>angular.js</category></item><item><title>My first Rails site for the masses.</title><link>https://alfrednutile.info/posts/15/</link><pubDate>Thu, 27 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/15/</guid><description>&lt;p>
First Rails site for the masses for me. Thanks to Progressive Exchange &lt;a href=http://www.progressiveexchange.org/welcome.htm target="_blank">http://www.progressiveexchange.org/welcome.htm&lt;/a>
I was able to volunteer for a webapp for Doctors for America &lt;a target="_blank" href="http://www.drsforamerica.org/">http://www.drsforamerica.org/&lt;/a>
So not only do I get to learn Ruby on Rails and practice but I get to build something for a good group and purpose.
&lt;/p>
&lt;p>
This app had to allow staff to enter and manage Speaker Requests and Speakers data as well as allow the public to view a Calendar of the upcoming events, filter as needed and submit a requests.
&lt;a target="_blank" href=http://speakers.drsforamerica.org/calendar>http://speakers.drsforamerica.org/calendar&lt;/a>
&lt;/p>
&lt;p>
Some of the key points for me where.
1. TDD – Still new at this but truly enjoy. Not only it is relaxing but it make refactoring code awesome.
2. Agile – Tried to keep the goals in small small units and check in with the client often to make sure things where on track and make changes easy.
3. Capistrano – coming from a drupal background where migrations and database relate changes = clicking this has been pure awesome. cap deploy = done
4. Pair programming – I was assisted by Amos King https://twitter.com/Adkron helping me to work through what to must have seems like headstart level work but he really helped me to see how to use scopes and how to better separate my Controllers and Models.
5. ActiveAdmin – though it will be fun to build my own user login area this was a quick quick way to get going. It uses formtastic to output the forms, some of which I had to customize.
6. Twitter Bootstrap – Still getting to know this one too. It really is great, I may try Foundations next but only because they both look super.
7. Rails – the obvious output. Though there are great tutorials online nothing is better then application of what you “know” cause then you realize what you don't know ( -: Which makes going back to those tutorials even better. This being my favorite so far http://ruby.railstutorial.org/ and http://railscasts.com
&lt;/p>
&lt;p>
Thanks to Twitter Bootstrap I get some nice Modal effects
&lt;a href="https://dl.dropboxusercontent.com/u/54803135/dfa_modal.gif">https://dl.dropboxusercontent.com/u/54803135/dfa_modal.gif&lt;/a>
&lt;/p>
&lt;p>
All code on GitHub
&lt;a href="https://github.com/alnutile/dfa">https://github.com/alnutile/dfa&lt;/a>
&lt;/p>
&lt;p>
rake stats! – next time more tests
&lt;a href="https://dl.dropboxusercontent.com/u/54803135/dfa_stats.png">https://dl.dropboxusercontent.com/u/54803135/dfa_stats.png&lt;/a>
&lt;/p></description><category>tdd</category></item><item><title>Vagrant and Laravel</title><link>https://alfrednutile.info/posts/13/</link><pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/13/</guid><description>&lt;p>Most likely for any internal server I had to run command&lt;/p>
&lt;p>php artisan serve &amp;ndash;host=&amp;ldquo;0.0.0.0&amp;rdquo;&lt;/p>
&lt;p>to access the port forwarding feature of vagrant&lt;/p>
&lt;p>Update:
I had to also make sure to set the forward to the same as the original 8000
So my Vagrant file looked like this
&lt;a href="https://gist.github.com/alnutile/5857999">gist&lt;/a>&lt;/p></description><category>laravel</category></item><item><title>Making lists from acts_as_taggable</title><link>https://alfrednutile.info/posts/7/</link><pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/7/</guid><description>&lt;p>This took some time to figure out but I finally found a post on stack exchange. Even RailsCasts has a how-to on making a tag cloud, as well as act_as_taggable&amp;rsquo;s guthub page. But I just could not see how to limit to a context other than :tag&lt;/p>
&lt;p>So maybe I was missing the obvious but all I wanted was to output a clickable list on a sidebar so users can filter content from that list.&lt;/p>
&lt;p>The code took place in
app/helpers/application_helper.rb
Since I wanted to use it in a shared partial&lt;/p>
&lt;p>You can see the gist here
&lt;a href="https://gist.github.com/alnutile/5745091">https://gist.github.com/alnutile/5745091&lt;/a>&lt;/p>
&lt;p>original post that lead me to this solution
&lt;a href="http://stackoverflow.com/questions/7169787/return-all-tags-based-on-context-actsastaggableon">http://stackoverflow.com/questions/7169787/return-all-tags-based-on-context-actsastaggableon&lt;/a>&lt;/p>
&lt;p>I noticed too that the person who posted the solution just read the code! Sometimes it is too easy to google.&lt;/p></description><category>acts_as_taggable</category></item><item><title>Questions that may come in handy when interviewing</title><link>https://alfrednutile.info/posts/12/</link><pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/12/</guid><description>&lt;ol>
&lt;li>
&lt;p>Can you clearly define the roles and responsibilities you need me to fill?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What would you need consider my hire a success in the next 6 months? In the next year?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GitHub has a 0% employee turn over rate. How does your company try to prevent turnover?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using the past few years of your organization financial records do you have a sense of growth and constant revenue increase for this year?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is there a good amount of jobs or internal products in the hopper to make a new hire profitable?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Considering a project that went well what do you think where some keys to it&amp;rsquo;s success and vice verse for a project that did not go well?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What are some long term goals of the company? Growth or stay the same size? SaSS products? etc
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How will your company look in 10 years?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Technology is always changing and new needs come and old needs go or are less profitable. What do you see to be the next &amp;ldquo;big thing&amp;rdquo; for you company to focus on?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is your Marketing Strategy? Word of mouth? Conferences? Magazine and Radio adds or? Is this a focus in your company?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Some companies enable / allow time during the week for staff to further their skills, give back to the community or build better tools and workflows for the company. This can at times be called 10% time etc. Just wondering if there is anything like that in place?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What are the health benefits? How much, if available, is a family health plan, dental?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Is there a retirement plan in effect?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Where can I read or learn about the company polices for sick days, personal time etc.
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the yearly salary growth rate?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>As a manager and owner how to do grow to understand your employees strengths and weaknesses?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is most important to you, for an employee to grow in their strengths or fix their weaknesses?
&lt;br>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What are some ways your company allows the employee to grow in their role(s)?
&lt;br>&lt;/p>
&lt;/li>
&lt;/ol></description><category>note2self</category></item><item><title>Hack For Change Challenge</title><link>https://alfrednutile.info/posts/11/</link><pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/11/</guid><description>&lt;p>Participated in the Hack For Change challenge in Western Mass.&lt;/p>
&lt;p>All the challenges where inspiring, I took part in the &amp;ldquo;Unlocking Prison Phone Data&amp;rdquo; because it seemed like the most difficult challenge.&lt;/p>
&lt;p>A blog post about it is &lt;a hre="http://hackforwesternmass.org/challenges" target='_blank'>here&lt;/a>&lt;/p>
&lt;p>Overall it was a lot of scrapping and command line work done by Gyepi Sam, doing some amazing work in Perl and all command line. It was great to see. Pulling down files, processing the PDFs via OCR and pushing them into the Postgres db.&lt;/p>
&lt;p>Jonathan Hills, took on the work of scrapping the pages that lead to the files using Python.&lt;/p>
&lt;p>I teamed up with Jake Mitchell and Aaron Smith to manage setting up Rails and getting the Models ready to take the data.&lt;/p>
&lt;p>I later setup SunspotSolr to speed up the results of the search.&lt;/p>
&lt;p>I will post a link to the site after the 26th once there is a bit more to show.&lt;/p>
&lt;p>Their website
&lt;a href="http://hackforwesternmass.org/">http://hackforwesternmass.org/&lt;/a>&lt;/p></description><category>hfcwestermass</category></item><item><title>ActiveAdmin Rails</title><link>https://alfrednutile.info/posts/8/</link><pubDate>Thu, 30 May 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/8/</guid><description>&lt;p>
Pretty amazing drop in interface to manage a site. I am building a Speakers Bureau for a non-profit and ended up using this to make that part of the build easier.
&lt;a href='http://activeadmin.info/'>http://activeadmin.info/&lt;/a>
&lt;/p>
&lt;p>
My only fear was bringing in way more than I needed but so far it is okay because of how hookable it is.
&lt;/p>
&lt;p>
I have dealt with other systems that can be a pain to hook so I am still always nervous about that moment when the hook takes more time than if you built it your self.
&lt;/p>
&lt;p>
Activeadmin takes your models and makes the forms needed to manage them on the fly. The one issue I has was a model with no field it could figure to use as the select label. So all I had to do was set my model to have add &lt;code>alias_attribute :name, :firstname&lt;/code> to the model that was having an issue. (not the belongs_to model but the has_many) and it just worked.
&lt;/p>
&lt;p>
&lt;img src='https://dl.dropboxusercontent.com/u/54803135/active_admin.png' width='400'>
&lt;/p></description><category>non-profit</category></item><item><title>Great tip on Git and Jenkins to auto deploy</title><link>https://alfrednutile.info/posts/3/</link><pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/3/</guid><description>&lt;p>
with every git push I would like jenkins to run it's tests then deploy the branch if it passes.
&lt;/p>
&lt;p>
This git plugin for jenkins notes you can setup a post-receive hook in git.
&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin" target=_blank>https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&lt;/a>
&lt;/p>&lt;p>
Git goes over what is available here
&lt;a href="http://git-scm.com/book/en/Customizing-Git-Git-Hooks" target=_blank>http://git-scm.com/book/en/Customizing-Git-Git-Hooks&lt;/a>
&lt;/p>&lt;p>
All I did was add post-receive to the git repo and added the curl command in the script noted in the plugin above and now Jenkins will auto run on every git push origin development
&lt;/p>
Nice!</description><category>git</category></item><item><title>Going Angular.js</title><link>https://alfrednutile.info/posts/2/</link><pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/2/</guid><description>&lt;p>Going Angular&lt;/p>
&lt;p>
Took some time to rewrite my drupal/bootstrap site into Angular.js and slim php.
Using slim and a seed project I quickly had a rest api to get the different content types, Blog, Page etc.
I am using the Page content type to make other dynamic parts to the site like Footer and Header.
&lt;/p>
&lt;p>
After a quick migration from drupal to a more basic MySQL db layout (soon mongodb?) I put together a Angular.js
front end.&lt;/p>
&lt;p>
Still have a ton to learn about Angular and I figure this will only help. I will post some notes soon on Angular for a different
project I am working on.
&lt;/p>
&lt;p>
Some good links
&lt;br>
&lt;strong>Angular&lt;/strong>
&lt;br>
http://angularjs.org/
&lt;br>
They have a great tutorial there.
&lt;br>
&lt;strong>The Slim Rest skeleton here&lt;/strong>
&lt;br>
https://github.com/ccoenraets/angular-cellar
&lt;br>
&lt;strong>Great Seed for a Project&lt;/strong>
&lt;br>
https://github.com/angular/angular-seed
&lt;br>
This seems like it could have been a good starter to build out the site
http://yeoman.io/
But I already had a Twitter Bootstrap theme in place and ready.</description><category>rails</category></item><item><title>Javascript Based Product Viewer</title><link>https://alfrednutile.info/posts/6/</link><pubDate>Fri, 22 Mar 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/6/</guid><description>&lt;p>Due to NDA limitations I had to remove links to the final product
Latest Project Virtual Design Tool. [ url removed due to nda issues ) -: ]Some points that were fun, new, and
challenging.&lt;ol>&lt;li>Model, View, Controller mindet.&lt;/li>&lt;li>Building the
RESTful service/API first&lt;/li>&lt;li>Trying to follow a feature driven development
plan.&lt;/li>&lt;li>Having smaller tasks and more points of QA&lt;/li>&lt;li>Having smaller
points to check in with the client to review the finished tasks and not wait
till the &amp;ldquo;end&amp;rdquo;.&lt;/li>&lt;li>Make it modular so it would work just as well
outside of the site as in.&lt;/li>&lt;li>Verbally breaking up the Classes, functions
and overall code used to make the App. &lt;/li>&lt;li>NaturalDocs documentation
tool and syntax&lt;/li>&lt;li>JetBrain IDE&lt;/li>&lt;/ol>I have been trying to learn the
Model View Controller structure to code in. Since we are working with drupal it
seems to be a tough fit. Basically drupal becomes possible via some custom code
with a RESTful API. It&amp;rsquo;s menu router offering one point of access for
anonymous level data (right now just read only). &lt;br>&lt;br>From there the work was making
the &lt;b>Models&lt;/b> to deliver back to the &lt;b>Controller&lt;/b> the data requested. The App calls
to this end point with requests. The App then has a &lt;b>View&lt;/b> that receives the
Model&amp;rsquo;s data and outputs it on the page. MVC is still quite new to me. Mix
this with OOP and you get a lot of new ways of thinking in one project. So it
was a good start but not perfect.&lt;br>&lt;span>&lt;br>We learned from our last project and 100
projects before that the endless issues with “Big Up Front Design”
[“Because any big design created in advance of working software cannot be
correct” &lt;a href="https://kindle.amazon.com/work/practical-object-oriented-
esign-ruby-ebook/B0096GEQUE/B0096BYG7C" target="" rel="">Practical Object-Oriented Design in
Ruby: An Agile Primer (Addison-Wesley Professional Ruby Series)&lt;/a> by
Sandi Metz] also not having enough small measurable pieces to review with the
client, ie Agile.&lt;/span>&lt;blockquote>&lt;span>“Because any big design created in
advance of working software cannot be correct” &lt;a href="https://kindle
amazon.com/work/practical-object-oriented-design-ruby-ebook/
0096GEQUE/B0096BYG7C" target="" rel="">Practical Object-Oriented Design in Ruby: An Agile Primer
(Addison-Wesley Professional Ruby Series)&lt;/a> by Sandi
Metz&lt;/span>&lt;/blockquote>&lt;span>&lt;br>This smaller project we took time to break up the scope
into numerous tasks grouped in a Feature. That feature/interaction was then
placed inside a Burn Down chart to help track progress. [Great info here &lt;a href="http://joel.inpointform.net/software-development/burn-down-charts-tutorial-" target="" rel="">http://joel.inpointform.net/software-development/b
rn-down-charts-tutorial-simple-agile-project-tracking/&lt;/a>]&lt;/span>Each task was smaller than 2 days. We initially played
quoting poker as an office to guesstimate the tasks lengths. Many of the tasks
ended up being small modular functional parts of the whole we that could QA
internally or show to the client. For example the full product looks like
this. [photo removed per NDA] But the work was broken up into
smaller pieces as such Shapes
BarOrientation Bar [photo removed per NDA]&lt;b> &lt;/b>Texture and Colors
bar window where images wrap out. etc.  Small chunks that we could make
focused css and javascript around. &lt;br>&lt;br>Then we took a full day, 2 coders, to
outline on paper, white board etc how to build the App. This was tough since it
seems anti-productive. But mix this with writing tests, documentation and it was
easier to be more precise about what was being built. The other goal here was to
make it very modular. Ideally it could work outside of the website css and
all. &lt;a href="https://kindle.amazon.com/work/scalable-modular-architecture-c
s-ebook/B006FOFNAW/B006EQBPMG" target="" rel="">Scalable and Modular Architecture for
CSS&lt;/a> [photo removed per NDA] &lt;br>&lt;br>On a side note one of the
cool things about the App is how the effect is made. There is really only
one large swatch image and then a set of transparent orientations per
Shape.  The initial load of the page
only pulls down the default Shape&amp;rsquo;s set eg 4 orientations.  When
you click a Shape the new set is pulled from a stored result in the jQuery.data
object which was stashed there via the initial delivery of the JSON data. There
is no new pull from the server till you click a new Texture. This was one
possible way to reduce the image lag and download that can happen with a large
set of image..[photo removed per NDA] &lt;span>was a good way to document the code but I am
starting to agree with some of the books I am reading that good code should read
like a book and not need comments and docs [Clean Code: A Handbook of Agile
Software Craftsmanship by Robert C.
Martin &lt;a href="http://www.amazon.com/dp/B001GSTOAM/ref=r_soa_w_d" target="" rel="">http://www.amazon.com/dp/B001GSTOAM/ref=r_soa_w_d&lt;/a> ]. &lt;/span>Opening notes or a readme to get help the
coder know the purpose of the file but the rest should be found in the names of
the Classes and Methods and just well broken out code.&lt;br>&lt;span>&lt;br>Finally I
used an IDE other than Coda. I am running Ubuntu now and just wanted to try and
IDE that could do a ton more than Coda. Simple tools like Textmate or Sublime
peak my interest as well but so far the IDE from these people was really good &lt;a href="http://www.jetbrains.com/" target="" rel="">&lt;a href="http://www.jetbrains.com/">http://www.jetbrains.com/&lt;/a>&lt;/a>. I like how it
had jshint built in, integration to git that was “better” than Coda.
Sure the command line is great for git but there gui was not bad at times to
have as well. It was not slow at all, my Core 2 Duo on an SSD never seemed
slow.&lt;/span>&lt;/p></description><category>REST</category></item><item><title>Global Redirect module after spaces / purl install does not</title><link>https://alfrednutile.info/posts/26/</link><pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/26/</guid><description>&lt;p>Sometime when using spaces and purl there are Pages Not Found even though they are there. This is one reason. There is a space that purl is looking for a url starting with eg test. Some day you make a node test/testmore and decide later to use drupal&amp;#39;s redirect to save the url test/testmore and delete the node (or unpublish it) But since spaces and purl is keeping an eye on test it will not work. Purl will strip the redirect of the test part $_REQUEST[&amp;#39;q&amp;#39;] making it so this would fail since it no longer is in this space. This minor hook_init can do a double check.&lt;/p>
&lt;pre class="prettyprint linenums:1t">
function path_redirect_extra_init() {
//Check if empty page
$status = menu_get_item($_GET[&amp;#39;q&amp;#39;]);
//print_r(&amp;#39;Menu get item &amp;#39; . $status);
if(empty($status)) {
//do one more check if this can be redirects
if(isset($_REQUEST[&amp;#39;q&amp;#39;])) {
$original_request = check_plain($_REQUEST[&amp;#39;q&amp;#39;]);
$result = db_query(&amp;quot;SELECT redirect FROM path_redirect WHERE source LIKE \&amp;quot;%s\&amp;quot;&amp;quot;, $original_request);
while ($row = db_fetch_array($result)) {
drupal_goto($row[&amp;#39;redirect&amp;#39;], $query = NULL, $fragment = NULL, $http_response_code = 301);
}
}
}
}
&lt;/pre>
&lt;p>The http://drupal.org/project/fast_404 module used hook_boot which may have worked as well. Also this is d6 and d7 has the hook_url_inbound_alter and hook_url_outbound_alter whereas d6 closest option to these is custom_url_rewrite_inbound&lt;/p></description><category>bug</category></item><item><title>DrupalCamp Western Mass</title><link>https://alfrednutile.info/posts/1/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/1/</guid><description>&lt;p>I will be presenting on 2 topics.&lt;/p>
&lt;p>Using a VM for development the url can be seen below.
&lt;a href="http://drupalcampma.com/virtual-box-ubuntu-local-development-strategy">http://drupalcampma.com/virtual-box-ubuntu-local-development-strategy&lt;/a>&lt;/p>
&lt;p>jQuery/Ajax without using the Drupal FAPI
&lt;a href="http://drupalcampma.com/using-jquery-and-ajax-outside-drupal-fapi">http://drupalcampma.com/using-jquery-and-ajax-outside-drupal-fapi&lt;/a>&lt;/p>
&lt;p>Though this drupal backbone session looks great!
&lt;a href="http://drupalcampma.com/drupal-and-backbonejs">http://drupalcampma.com/drupal-and-backbonejs&lt;/a>&lt;/p></description><category>presentation</category></item><item><title>jQuery Address</title><link>https://alfrednutile.info/posts/5/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/5/</guid><description>&lt;p>Simple example of jQuery.address in use.
As you click the top &amp;ldquo;black&amp;rdquo; menu area the pages will load via Ajax (and title) notice also the URL.
Then if you click back it forces a reload.
There is very little code needed to make this work.
Other than the ajax callback I run this on page load (eg pressing back on the browser button)&lt;/p>
&lt;pre class="prettyprint linenums:1t">
//Jquery Address clicking back
$.address.externalChange(function(){
if($.address.value() !== '/') {
updateMe($.address.value());
}
});
&lt;/pre>
&lt;p>The externalChange reacts to the page load or back button and runs this function(s).
In this case I run a function and pass the path to it.
All that function does is run jQuery.ajax based on the path and lastly&lt;/p>
&lt;pre class="prettyprint">
&lt;code>
$.address.value(path);
&lt;/code>
&lt;/pre>
&lt;p>and this updates the path.&lt;/p>
&lt;p>That is it.
One other thing is I set the state to&lt;/p>
&lt;pre class="prettyprint">
&lt;code>
$.address.state('/');
&lt;/code>
&lt;/pre>
&lt;p>This made it possible to remove the # from the url.&lt;/p></description><category>JavaScript</category></item><item><title>NDA</title><link>https://alfrednutile.info/posts/21/</link><pubDate>Fri, 11 Jul 2008 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/21/</guid><description>&lt;p>Some sites are under NDA.
So if you see this message at some point after clicking a link it is due to that. If you have questions about the link you clicked feel free to email me at &lt;a href="mailto:alfrednutile@gmail.com">alfrednutile@gmail.com&lt;/a>&lt;/p></description><category>nda</category></item></channel></rss>