<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ioc on Alfred Nutile</title><link>https://alfrednutile.info/tags/ioc/</link><description>Recent content in ioc on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/ioc/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Guide - Controllers, Services and IOC</title><link>https://alfrednutile.info/posts/107/</link><pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/107/</guid><description><h2 id="design-guides">Design Guides</h2><ul><li>Controllers - contains application logic and passing user input data to service</li><li>Services - The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.</li><li>Repositories - layer for interaction with models and performing DB operations</li><li>Models - common laravel model files with relationships defined</li></ul><h1 id="in-and-out-burgers">In and Out Burgers</h1><p>Between the user&rsquo;s request and the response is the application. The above design guide not only gives us a consistent, flexible way to manage a requests and responses from a web user but then leads us into creating applications that can manage consul request as well.</p><p><img src="https://docs.google.com/drawings/d/1D601St_IuaZ8FKW2eXQYqE2vHqZxRRLtmB8eGpQw8Aw/pub?w=761&amp;h=296" alt="in and out"/><p>Starting with the book by the Author of Laravel, Tyler Otwell</p><p><a href="https://leanpub.com/laravel">book laravel</a></p><p>The great thing about this book is that it is not really about Laravel but about SOLID design principles</p><ul><li>Single responsibility principle</li><li>Open/closed principle</li><li>Liskov substitution principle</li><li>Interface segregation principle</li><li>Dependency inversion principle</li></ul><p>[wikipedia solid](<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)</a></p><h1 id="change-to-scope-does-not-cause-bad-code-bad-design-patterns-cause-bad-code">Change to scope does not cause bad code, bad design patterns cause bad code.</h1><p><em>Scope changes and that is fine.</em> This is key to the success of an application. It must change with the vision of the Product owner as deliverables bring to light what could not be seen on paper, mock ups, whiteboards etc.</p><p>If we follow the Solid Design Principles then &ldquo;change is okay&rdquo; and easy.</p><h1 id="back-to-the-book-laravel-from-apprentice-to-artisan">Back to the book &ldquo;Laravel: from Apprentice to Artisan</h1><p>So Tyler Otwell goes over each principle showing them in context of Laravel.</p><p>Here are some key design patters to grasp</p><h2 id="ioc">IOC</h2><p>Inversion of control is fundamental to a flexible application that meets the 5 goals above. By &ldquo;coding to an interface&rdquo; we can not only work faster as a team but adapt to change easily.</p><p>How to get here?</p><p>Other than reading the book consider this common example.</p><p>&ldquo;Build A Contract&rdquo; Taylor Otwell. Laravel: From Apprentice To Artisan (Kindle Location 75 to 185). leanpub.com.</p><p>By hooking an Interface into the Service Provider we can attach any implementation we want to that interface.</p><p>This means someone can be working on one part of the app talking to another part that is not even done yet cause they can mock out the responses based on an Interface.</p><p>Using</p><pre><code>php artisan make:provider BillingInterface</code></pre><p>You will easily setup the class to start with in the app/Providers folder</p><p>Laravel 5 is taking this to the next level with &ldquo;Contracts/Interfaces&rdquo; as a big part of the framework.</p><p><a href="https://laracasts.com/series/whats-new-in-laravel-5/episodes/7">laracasts contracts</a></p><p>This also means we can easily swap out classes as needed. The book goes over Billing we have another example Queue. We are using Beanstalkd to work locally and Amazon SQS to work on production. This is all done via such design patters. Interfaces/Contracts around talking to a queue.</p><h1 id="controllers">Controllers</h1><p>A request comes in and it sends it to the right service. Finally it delivers the response. Below is an example of what a method in a controller should have and no more.</p><pre><code>app/Http/Controllers/ProjectsController.php:31
public function index()
{
try
{
$results = $this->service->getAllProjectsForThisUser();
return Response::json($this->responseServices->respond($results, "Loaded Projects"), 200);
}
catch(\Exception $e) {
return Response::json($this->responseServices->respond($e->getMessage(), "Error Getting Project Failed"), 422);
}<pre><code>}</code></pre><p/></pre><p>It traps any errors and responds as needed to that error.</p></p><h2 id="issues-with-above">Issues with above?</h2><p>Yes! Error codes should come from the Service as well. How does the controller know a 422?</p><h3 id="service-then-does-what">Service then does what?</h3><p>As defined above</p><p>&ldquo;The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.&rdquo;</p><ul><li>Validation</li><li>Business Logic</li><li>Calling Repositories</li><li>Transform Data in and out</li><li>Lastly returns the results with a know error code.</li></ul><p>Since 422 is an HTTP Response</p><pre><code>vendor/symfony/http-foundation/Symfony/Component/HttpFoundation/Response.php:64</code></pre><p>We should have possible a response transformer class to consider the non HTTP response. Then let the Controller pick from that to find its related HTTP response. See the<a href="https://leanpub.com/build-apis-you-wont-hate">Build API&rsquo;s You Wont&rsquo;t Hate</a> for more on that. Covered in the other guide shortly too.</p></description><tags>ioc, style guides</tags></item></channel></rss>