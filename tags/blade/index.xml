<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blade on Alfred Nutile</title><link>https://alfrednutile.info/tags/blade/</link><description>Recent content in blade on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/blade/index.xml" rel="self" type="application/rss+xml"/><item><title>Wrapping JSONEditor in Vue as Well as Laravel Blade</title><link>https://alfrednutile.info/posts/222/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/222/</guid><description>&lt;p>&lt;strong>UPDATED November 05 2017&lt;/strong>&lt;/p>
&lt;p>This will cover how to make a &lt;a href="https://github.com/josdejong/jsoneditor">JSONEditor&lt;/a> component that I can then use in a Blade template and listen to events.&lt;/p>
&lt;p>You will end up with this:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt="">&lt;/p>
&lt;p>First making sure I have all the packages I need:&lt;/p>
&lt;pre>&lt;code> //package.json
&amp;quot;devDependencies&amp;quot;: {
&amp;quot;axios&amp;quot;: &amp;quot;^0.17&amp;quot;,
&amp;quot;bootstrap-sass&amp;quot;: &amp;quot;^3.3.7&amp;quot;,
&amp;quot;cross-env&amp;quot;: &amp;quot;^5.0.1&amp;quot;,
&amp;quot;jquery&amp;quot;: &amp;quot;^3.2&amp;quot;,
&amp;quot;laravel-mix&amp;quot;: &amp;quot;^1.0&amp;quot;,
&amp;quot;lodash&amp;quot;: &amp;quot;^4.17.4&amp;quot;,
&amp;quot;vue&amp;quot;: &amp;quot;^2.1.10&amp;quot;
},
&amp;quot;dependencies&amp;quot;: {
&amp;quot;select2&amp;quot;: &amp;quot;^4.0.5&amp;quot;,
&amp;quot;jsoneditor&amp;quot;: &amp;quot;^5.9.6&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>And to load it into my bootstrap file:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/bootstrap.js
try {
window.$ = window.jQuery = require('jquery');
require('bootstrap-sass');
require(&amp;quot;select2&amp;quot;);
require(&amp;quot;jsoneditor&amp;quot;);
} catch (e) {
console.log(&amp;quot;Error loading jquery&amp;quot;);
}
&lt;/code>&lt;/pre>&lt;p>Which gets pulled in by my app.js which I also register the global component:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/app.js
require('./bootstrap');
window.Vue = require('vue');
/**
* Using this as a globle event emmitter for components to easily talk to other components
*/
window.EventBus = new Vue();
Vue.component('cat-json-editor', require('./components/JSONEditor'));
Vue.component('cat-config-field', require('./components/ConfigField'));
//end of file
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The app.js and bootstrap.js are default workflows of Laravel&lt;/p>
&lt;/blockquote>
&lt;p>Then I will make the component:&lt;/p>
&lt;pre>&lt;code>//resources/assets/js/components/JSONEditor.vue
&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;div id=&amp;quot;jsoneditor&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
import JSONEditor from 'jsoneditor';
export default Vue.extend({
props: ['config'],
mounted: function () {
let self = this;
let container = document.getElementById('jsoneditor');
let options = {
onChange: function() {
EventBus.$emit('config-updated', editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) { editor.set(window.config); }
}
});
&amp;lt;/script&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
#jsoneditor {
width: 800px;
height: 600px;
}
&amp;lt;/style&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Here I register the props and I setup some config using code I placed into window from my controller. You can use &lt;a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">this tool&lt;/a> for this process.
I could have passed it into the component but chose not to.&lt;/p>
&lt;p>So now when there is a change it will emit the change to the global &lt;code>EventBus&lt;/code>&lt;/p>
&lt;p>Now for the &lt;code>ConfigField&lt;/code> component:&lt;/p>
&lt;pre>&lt;code>&amp;lt;&amp;lt;template&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; id=&amp;quot;config&amp;quot; name=&amp;quot;config&amp;quot; class=&amp;quot;form-control&amp;quot; rows=&amp;quot;30&amp;quot; v-model=&amp;quot;config&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default Vue.extend({
data() {
return {
'config': JSON.stringify(window.config)
}
},
methods: {
configUpdated: function(json) {
this.config = JSON.stringify(json);
}
},
created() {
EventBus.$on(&amp;quot;config-updated&amp;quot;, this.configUpdated);
}
});
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;p>With these two components in place I now need to add the components to the HTML template.&lt;/p>
&lt;p>After this is setup my Blade file has the needed Vue listener etc to update the form (non-ajax) as needed:&lt;/p>
&lt;pre>&lt;code>@push('scripts')
&amp;lt;script&amp;gt;
new Vue({
el: '#config_form',
})
&amp;lt;/script&amp;gt;
@endpush
&amp;lt;!-- Form above this that is doing all the form submission work --&amp;gt;
&amp;lt;div id=&amp;quot;config_form&amp;quot;&amp;gt;
&amp;lt;label for=&amp;quot;config&amp;quot;&amp;gt;Config&amp;lt;/label&amp;gt;
&amp;lt;cat-json-editor&amp;gt;&amp;lt;/cat-json-editor&amp;gt;
&amp;lt;cat-config-field&amp;gt;&amp;lt;/at-config-field&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>In this case I am taking advantage of Blades &lt;a href="https://laravel.com/docs/5.5/blade#stacks">stack feature&lt;/a>&lt;/p>
&lt;p>And the minor amount of work here just mounts Vue onto the &lt;code>#config_form&lt;/code>&lt;/p>
&lt;p>Then I use Vue to listen to the event &amp;ldquo;config-updated&amp;rdquo;. From there, since this is not about Ajax requests, I update the hidden field on the form.
I could have done this with JQuery but just wanted to get use to this Vue workflow. Also I could see sending this over Ajax sooner than later even if just for validation notices etc.&lt;/p>
&lt;p>Here is a quick look at the Scope of the objects:&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/nc1yn0hci05mtq4/events.png?dl=0" alt="">&lt;/p></description></item></channel></rss>