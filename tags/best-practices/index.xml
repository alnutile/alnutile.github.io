<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>best practices on Alfred Nutile</title><link>https://alfrednutile.info/tags/best-practices/</link><description>Recent content in best practices on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Jan 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description>&lt;p>&lt;strong>Update: September 06 2016&lt;/strong>&lt;/p>
&lt;p>We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.&lt;/p>
&lt;p>&lt;strong>Or Listen &lt;a href="http://www.readorlisten.com/2">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Another article about this written by Loran Jane Mitchell &lt;a href="http://www.lornajane.net/posts/2014/using-composer-without-gitignoring">Using Composer Without GitIgnoring Vendor&lt;/a>&lt;/p>
&lt;p>I have done this for sometime with node_modules because I use to hate waiting for npm to pull down during CI builds. I could have used the CI systems cache for this but I realized once the project starts it is rare that I needed to add more libraries. And when I did it was just as easy to wipe using &lt;code>git rm&lt;/code> and do them again fresh. This included my use of Bower.&lt;/p>
&lt;p>But then there is Composer and PHP. The project starts and I might be pulling in libraries quite a bit but at some point we are just running &lt;code>composer install&lt;/code> and never &lt;code>composer update&lt;/code>. This step included &lt;code>rm -rf vendor&lt;/code> which helped with the speed. And this is going great BUT has a few draw backs I will cover below.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="speed-ci-and-deployment">Speed (CI, and Deployment)&lt;/h2>
&lt;p>This is not HUGE but with workflow now each deployment, unless it is a &lt;code>quick&lt;/code> one, we tend to just use &lt;code>rm -rf vendor &amp;amp;&amp;amp; composer install&lt;/code>. And it does cost us 1/2 a minute. Again not huge but nice to not have that as down time to the user. For at this point the app is not usable. And even worse as I will talk about below. And we do a lot of builds a day in the CI.&lt;/p>
&lt;h2 id="one-point-of-failure-vs-many">One Point of Failure VS Many&lt;/h2>
&lt;p>This is the big reason in my opinion. I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing. This can be caused due to a misconfiguration on our part, eg using anonymous Github connections but at times I have seen it even when authenticated and am not totally sure why.&lt;/p>
&lt;p>Then there are those moments, and they happen, when Github is under DDOS attack! So then it is just a day of no deployments and that is not an option really. And with this technique we have a good chance of getting a deployment in since we are just hitting one repo and not trying our luck at many.&lt;/p>
&lt;h2 id="rollback">Rollback&lt;/h2>
&lt;p>Then there are Rollback moments. Zero down time would be great and this is one step closer. With our releases we use Tags. So if I was to release 1.2.2 and it had a bug I could rollback to tag 1.2.1 in moments. No need to rebuild composer. Sure it saves minor amount of time but when things are down on production 1/2 a minute can feel like a life time. This does not cover all migration issues but that is not a thing we do every deployment and honestly with the migration rollback feature we have in Laravel I think that becomes an edge case that can be dealt with using Artisan and some creative coding.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;when things are down on production 1/2 a minute can feel like a life time&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="fixing-merge-conflicts">Fixing Merge Conflicts&lt;/h2>
&lt;p>Well what happens when there is a conflict in this vendor folder? That is easy really just &lt;code>rm&lt;/code> the whole thing and do what I have been doing all along &lt;code>composer install&lt;/code> saving &lt;code>composer update&lt;/code> only for those moments you are looking for something to really be updated and feeling lucky (and patient).&lt;/p></description>
laravel, php, workflows, coding, best practices</item></channel></rss>