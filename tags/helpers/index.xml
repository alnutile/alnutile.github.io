<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>helpers on Alfred Nutile</title><link>https://alfrednutile.info/tags/helpers/</link><description>Recent content in helpers on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Dec 2021 06:32:07 -0400</lastBuildDate><atom:link href="https://alfrednutile.info/tags/helpers/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Fixture Put Fixture Helpers for Laravel</title><link>https://alfrednutile.info/posts/get_put/</link><pubDate>Sat, 25 Dec 2021 06:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/get_put/</guid><description>&lt;p>I do a lot with fixtures when testing. This means I put files in the &lt;code>tests/fixtures&lt;/code> folder that represet the JSON of what ever I am testing. For example maybe I hit an
API that returns&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And when I mock that API response I want to have that ready for me to use.&lt;/p>
&lt;p>I then save it to the folder &lt;code>tests/fixtures/foo.json&lt;/code> and can just use it.&lt;/p>
&lt;p>To do that I just do the following.&lt;/p>
&lt;h2 id="setup-a-helpersphp-file-in-your-app">Setup a helpers.php file in your app&lt;/h2>
&lt;p>Add the file &lt;code>app/helpers.php&lt;/code> for now with &lt;code>&amp;lt;?php&lt;/code> on top of it.&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
&lt;/code>&lt;/pre>&lt;p>Not to exciting yet!&lt;/p>
&lt;p>Then add it to &lt;code>composer.json&lt;/code>&lt;/p>
&lt;pre>&lt;code>File: composer.json
38: &amp;quot;autoload-dev&amp;quot;: {
39: &amp;quot;psr-4&amp;quot;: {
40: &amp;quot;Tests\\&amp;quot;: &amp;quot;tests/&amp;quot;
41: },
42: &amp;quot;files&amp;quot;: [
43: &amp;quot;app/helpers.php&amp;quot;
44: ]
45: },
&lt;/code>&lt;/pre>&lt;p>Now run &lt;code>composer dump&lt;/code> and you are ready to add helpers to your app.&lt;/p>
&lt;h2 id="add-get-and-put-helpers">Add get and put helpers&lt;/h2>
&lt;p>To that file I add the getter and putter(?):&lt;/p>
&lt;pre>&lt;code>&amp;lt;?php
use Illuminate\Support\Facades\File;
if (!function_exists(&amp;quot;put_fixture&amp;quot;)) {
function put_fixture($file_name, $content = [], $json = true)
{
if ($json) {
$content = json_encode($content, 128);
}
File::put(
base_path(sprintf(&amp;quot;tests/fixtures/%s&amp;quot;, $file_name)),
$content
);
return true;
}
}
if (!function_exists(&amp;quot;get_fixture&amp;quot;)) {
function get_fixture($file_name)
{
$results = File::get(base_path(sprintf(
&amp;quot;tests/fixtures/%s&amp;quot;,
$file_name
)));
return json_decode($results, true);
}
}
&lt;/code>&lt;/pre>&lt;p>and I make the folder &lt;code>tests/fixtures&lt;/code>&lt;/p>
&lt;p>And now in my tests I can do this:&lt;/p>
&lt;pre>&lt;code>put_fixture('meta_data.json', $response_from_api_as_array);
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>NOTE: Many apis have good docs that sometimes show a JSON response I can save. But somtimes I want a real response to save it so I hit the api ONCE from my test
and mock it from then on&lt;/p>
&lt;/blockquote>
&lt;p>and I can use that later just like this&lt;/p>
&lt;pre>&lt;code>get_fixture('meta_data.json', $response_from_api_as_array);
&lt;/code>&lt;/pre>&lt;p>This will simply put a file and get that file &lt;code>tests/fixtures/meta_data.json&lt;/code>&lt;/p>
&lt;p>And the file will be JSON for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;foo&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description>
laravel, php, note2self, helpers</item></channel></rss>