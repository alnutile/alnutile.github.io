<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sqlite on Alfred Nutile</title><link>https://alfrednutile.info/tags/sqlite/</link><description>Recent content in sqlite on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 18 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/sqlite/index.xml" rel="self" type="application/rss+xml"/><item><title>Sqlite and Laravel</title><link>https://alfrednutile.info/posts/128/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/128/</guid><description><p>It is really really nice to use this for testing and local since any reseed work is quick.</p><p>Overall the swap out is easy and I do not think, so far, there has been any issues going to mysql on production.</p><p>The only two things to set over all is</p><h2 id="seeding">Seeding</h2><p>In my DatabaseSeeder.php file I set this</p><pre><code>&lt;?php<p>use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;</p><p>class DatabaseSeeder extends Seeder {</p><pre><code>/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Eloquent::unguard();
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}</code></pre><p>}</p><p/></pre><p>This allows me to reseed without issues.</p></p><h2 id="null-fields">Null fields</h2><p>On fields that are allowed to be null just add this</p><pre><code>&lt;?php<p>use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;</p><p>class AddGithubTokenToUsersTable extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;string('name')-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('name');
});
}</code></pre><p>}</p><p/></pre><p>Check out<a href="https://www.alfrednutile.info/posts/112">Speeding up PHPunit tests and Behat in Laravel for Database refreshes</a> to see more info of how you can use this.</p></p><p>Also see<a href="https://www.alfrednutile.info/posts/63">php artisan migrate:reset not working</a> for some extra setup.</p><h2 id="update-2-11-2015">Update 2-11-2015</h2><p><a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a> noted that since renameColumn does not work with Sqlite you can do this to drop and make the column. Also without the two steps in<code>up()</code> seeding failed.</p><pre><code> /**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table->dropColumn('bundle_id');
});<pre><code> Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;string('project_id', 36)-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('project_id');
$table-&amp;gt;string('bundle_id', 36)-&amp;gt;nullable();
});
}</code></pre><p/></pre></p></description><tags>laravel, php, sqlite</tags></item></channel></rss>