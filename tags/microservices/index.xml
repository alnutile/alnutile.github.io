<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservices on Alfred Nutile</title><link>https://alnutile.github.io/tags/microservices/</link><description>Recent content in microservices on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://alnutile.github.io/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging in Iron.io Workers</title><link>https://alnutile.github.io/posts/147/</link><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>https://alnutile.github.io/posts/147/</guid><description>Previously I wrote about how to use Lumen and Iron.io this adds to that by modifying the logging technique.
As noted the worker is basically a class that sets things up, hands off the payload to the handler and returns the results.
&amp;lt;?php
use App\CompareFuseHandler;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;
require_once __DIR__ . '/libs/bootstrap.php';
$payload = getPayload(true);
fire($payload);
function fire($payload)
{
$logs = storage_path('logs/lumen.log');
Log::info(sprintf(&amp;quot;Starting Worker at %s&amp;quot;, \Carbon\Carbon::now()));
try
{
//Empty Logs
$handler = App::make('App\CompareFuseHandler');
$handler-&amp;gt;handle($payload);
echo &amp;quot;Success See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now()));
echo File::get($logs);
}
catch(\Exception $e)
{
echo &amp;quot;Error See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now())); echo File::get($logs);
}
}
The nice thing about above is that all throughout my handler class I can start the do Log::info('foo') to store up a report for the end of the process on either Success or Error.</description></item><item><title>Iron.io Laravel and Workers, Microservices</title><link>https://alnutile.github.io/posts/136/</link><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>https://alnutile.github.io/posts/136/</guid><description>We are starting to use Iron.io and their workers for a lot of the tasks that our apps need to do. For example one app needs to scan websites for images and text and report on them. In our case that is 2 workers, one with the code needed to get the text we want and the other images. Another worker runs behat tests to take screenshots and reports back to the called with the results.</description></item></channel></rss>