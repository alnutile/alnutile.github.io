<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bdd on Alfred Nutile</title><link>https://alfrednutile.info/tags/bdd/</link><description>Recent content in bdd on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 Aug 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/bdd/index.xml" rel="self" type="application/rss+xml"/><item><title>Mockery Behat and Laravel</title><link>https://alfrednutile.info/posts/190/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/190/</guid><description><p>This is a quick view of using this library<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a> and a Mockery Trait (should be included soon but for now put the below in your<code>features/bootstrap</code> folder and run<code>composer dump</code>).</p><p>The example here is a method that looks like this</p><p><code>features/bootstrap/ExampleContext.php</code></p><pre><code> $partial = Mockery::mock(\App\Broadcasts\ColumnsAndRowsDoneProcessingEmail::class, [$this->segment])->makePartial();<pre><code> $partial-&amp;gt;shouldReceive('sendEmail')-&amp;gt;never();
$repo = App::make(\App\JobsRepository::class);
$partial-&amp;gt;handle($repo);</code></pre><p/></pre><p>When this is done running I would get pass BUT if I change it<code>never</code> to<code>once</code> and run it again I still get green :(</p></p><p>But I need to include the Mockery. In my case I made this trait that will allow me to also tests and mock events.</p><pre><code>&lt;?php<p>trait MockeryTrait
{</p><pre><code>public $firedEvents = [];
public $beforeApplicationDestroyedCallbacks = [];
/**
* @AfterScenario
*/
public function reviewMocks()
{
if ($this-&amp;gt;app) {
foreach ($this-&amp;gt;beforeApplicationDestroyedCallbacks as $callback) {
call_user_func($callback);
}
$this-&amp;gt;app-&amp;gt;flush();
$this-&amp;gt;app = null;
}
if (class_exists('Mockery')) {
Mockery::close();
}
$this-&amp;gt;beforeApplicationDestroyedCallbacks = [];
}
protected function beforeApplicationDestroyed(callable $callback)
{
$this-&amp;gt;beforeApplicationDestroyedCallbacks[] = $callback;
}
/**
* Specify a list of events that should be fired for the given operation.
*
* These events will be mocked, so that handlers will not actually be executed.
*
* @param array|string $events
* @return $this
*
* @throws \Exception
*/
public function expectsEvents($events)
{
$events = is_array($events) ? $events : func_get_args();
$this-&amp;gt;withoutEvents();
$this-&amp;gt;beforeApplicationDestroyed(function () use ($events) {
$fired = $this-&amp;gt;getFiredEvents($events);
if ($eventsNotFired = array_diff($events, $fired)) {
throw new Exception(
'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
);
}
});
return $this;
}
/**
* Mock the event dispatcher so all events are silenced and collected.
*
* @return $this
*/
protected function withoutEvents()
{
$mock = Mockery::mock('Illuminate\Contracts\Events\Dispatcher');
$mock-&amp;gt;shouldReceive('fire')-&amp;gt;andReturnUsing(function ($called) {
$this-&amp;gt;firedEvents[] = $called;
});
$this-&amp;gt;app-&amp;gt;instance('events', $mock);
return $this;
}
/**
* Filter the given events against the fired events.
*
* @param array $events
* @return array
*/
protected function getFiredEvents(array $events)
{
return $this-&amp;gt;getDispatched($events, $this-&amp;gt;firedEvents);
}
/**
* Filter the given classes against an array of dispatched classes.
*
* @param array $classes
* @param array $dispatched
* @return array
*/
protected function getDispatched(array $classes, array $dispatched)
{
return array_filter($classes, function ($class) use ($dispatched) {
return $this-&amp;gt;wasDispatched($class, $dispatched);
});
}
/**
* Check if the given class exists in an array of dispatched classes.
*
* @param string $needle
* @param array $haystack
* @return bool
*/
protected function wasDispatched($needle, array $haystack)
{
foreach ($haystack as $dispatched) {
if ((is_string($dispatched) &amp;amp;&amp;amp; ($dispatched === $needle || is_subclass_of($dispatched, $needle))) ||
$dispatched instanceof $needle) {
return true;
}
}
return false;
}</code></pre><p>}</code></pre><p>This pulls in a trait Laravel uses in PHPUnit.</p></p><p>So now when I run that test I get red and when I set it back to<code>zero</code> I get green!</p></description><tags>php, laravel, behat, bdd</tags></item><item><title>Uploading Images in Behat both at Domain Level and UI Level</title><link>https://alfrednutile.info/posts/188/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/188/</guid><description><p>The goal here is as follows</p><pre><code> @fileCleanup @javascript
Scenario: Uploading File
Given I already made a Segmentation and am editing it
Then I add file and the system will process it
And I can not add another file till it is done
And when the system is done I can add another file</code></pre><p>In this case they are large files and I want to get an MVP for the users to interact with so one file at a time is enough for now.</p><p>The tricky part is that I am running Selenium on my Mac and running behat in my VM there is no file path connection between the two.
This can also be an issue when using Saucelabs and<a href="https://crossbrowsertesting.com/">https://crossbrowsertesting.com/</a>.</p><h2 id="ui-level">UI Level</h2><p>I am using the Flow Angular library so it is JavaScript heavy (some notes below). Otherwise your work is even easier.</p><p>My step to set things up<code>Given I already made a Segmentation and am editing it</code> just adds that resource to the system and then I visit it.</p><p>From there I hit<code>Then I add file and the system will process it</code> and this is where it all begins</p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there<pre><code> /**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this-&amp;gt;attachFileToField('image_upload', $remotePath); //see Flow notes at the bottom of this page
$this-&amp;gt;assertPageNotContainsText('Upload File');
unlink($tempZip);
sleep(5); //Later on I will move this to `spin` see notes below
$this-&amp;gt;assertPageContainsText('data_columns_not_snaked');
}</code></pre><p/></pre><p>Let me show that again but now more simple just a normal input button</p></p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there
/**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip->open($tempZip, \ZipArchive::CREATE);
$zip->addFile($localFile, basename($localFile));
$zip->close();
$remotePath = $this->getSession()->getDriver()->getWebDriverSession()->file([
'file' => base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this->attachFileToField('image_upload', $remotePath); //the input field
/** prove the button is gone during this process **/
$this->assertPageNotContainsText('Upload File');
unlink($tempZip);
$this->pressButton('Upload File'); //dealing with normal input button
}</code></pre><h2 id="domain-level">Domain Level</h2><p>Since my Controller gets the info from the incoming<code>Request</code> and hands it to the Repository class, I like to test my classes outside the Controller then plug them in (see<a href="https://alfrednutile.info/posts/187">here</a> for more on that), there is typically no need to pass the full<code>Request</code> to the Repository. But in this case I went about passing the entire<code>Request</code> to the<code>Repository</code> and doing some checking in there as well.</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('features/fixtures/data_columns_not_snaked.xls');
$originalName = 'data_columns_not_snaked.xls';
/** note `true` passed in to `UploadedFile` it defines this as a test request **/
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file->set('profile_image', $upload);
$request->files = $file;<pre><code> $this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/data_columns_not_snaked.xls')), &amp;quot;File Not found&amp;quot;);
}</code></pre><p/></pre><p>And now that is passing as well.</p></p><h2 id="thats-it">Thats It</h2><p>I am now testing both the UI and the Domain level part of this Application.</p><h2 id="note">Note</h2><p>Using Flow Library<a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow</a> makes it easy to process large files in PHP for me.</p><p>One thing I had to do was do was set<code>flow-attrs</code> to the directive so I can get a<code>name</code> in there to target field.</p><pre><code>&lt;div class="btn btn-xs btn-primary" flow-attrs="{name:'image_upload'}" flow-btn ng-if="vm.file_uploading">
&lt;i class="fa fa-cloud-upload">&lt;/i> Upload File
&lt;/div></code></pre><p>Link to Spin on Behat docs and StackOverflow for a better solution than<code>sleep</code></p><p><a href="http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat">http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat</a></p><p><a href="http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html">http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html</a></p><p>And a bit more on that<a href="http://www.tentacode.net/10-tips-with-behat-and-mink">http://www.tentacode.net/10-tips-with-behat-and-mink</a></p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Behat Laravel Domain Testing Inside Out</title><link>https://alfrednutile.info/posts/187/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/187/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/055lj0hcljvpp7u/4_pane_guy_and_getting_started.png?dl=0" alt=""/><p>I will cover the use of<code>FormRequest</code>,<code>Mockery</code>,<code>Behat</code> and more in this article.</p><p>The article will show how to test your Domain code, in this case I mean testing how the code will work outside of the Routing and Controller layer of your Application. But what this will lead to is a &ldquo;lego&rdquo; like moment of plugging in these parts to your Controller so you know it will work. Of course it will be tested as well during the UI testing.</p><p>I will start off with this Behat Feature</p><pre><code>Feature: Login Page
Login page to do authenticated tasks
As an anonymous user
So we can protect some personal and administrative parts of the site<p>@happy_path @smoke @javascript @profile
Scenario: A user can login and see their profile
Given I am on the login page
And I fill in the login form with my proper username and password
Then I should be able to see my profile page
Then if I try to see another persons page I should get rejected</p><p>@smoke @profile
Scenario: A non logged in user can not get a profile
Given I am an anonymous user
And I go to the profile page
Then I should get redirected with an error message to let me know the problem</p><p/></pre><p>What we have is the<code>@happy_path</code> that will be the UI<code>Scenario</code> in this case as well as the Domain. And yes I can have more than one UI<code>Scenario</code> but in this case I just want to deliver something that let’s the Product Owner knows her application is working as expected.</p></p><p>What we will start with is<code>Scenario: A user can login and see their profile</code></p><p>In my example there will be a<code>Repository</code> class to manage the Business logic and a<code>FormRequest</code> Class to deal with managing ACL.</p><p>Let&rsquo;s take the Context file one step at a time<code>features/bootstrap/LoginPageDomainContext.php</code></p><pre><code> /**
* @Given I am on the login page
*/
public function iAmOnTheLoginPage()
{
$this->user = factory(\App\User::class)->create();
}</code></pre><p>I setup the state of the world for this<code>Scenario</code> I do not rely on seed data.</p><p>Also at the top of the Class I pull in<code>use \Laracasts\Behat\Context\DatabaseTransactions;</code> and<code>\Laracasts\Behat\Context\Migrator</code></p><p>These come from the Laracast Library on Behat<a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs</a> and<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><p>This next step is written with too much &ldquo;Web&rdquo; in mind. I should try and reword it so it fits more inline with the business goals.</p><pre><code> /**
* @Given I fill in the login form with my proper username and password
*/
public function iFillInTheLoginFormWithMyProperUsernameAndPassword()
{
Auth::login($this->user);
PHPUnit_Framework_Assert::assertFalse(Auth::guest());
}</code></pre><p>Here is where things get fun</p><pre><code> /**
* @Then I should be able to see my profile page
*/
public function iShouldBeAbleToSeeMyProfilePage()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(['user_id' => $user->id]);<pre><code> /** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)-&amp;gt;makePartial();
$auth-&amp;gt;shouldReceive('route')-&amp;gt;andReturn($user-&amp;gt;url);
$results = $auth-&amp;gt;authorize();
PHPUnit::assertTrue($results);
}</code></pre><p/></pre><p>And the next part to that</p></p><pre><code> /**
* @Then if I try to see another persons page I should get rejected
*/
public function ifITryToSeeAnotherPersonsPageIShouldGetRejected()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(
['favorite_comic_character' => "foo", 'user_id' => $user->id]
);
/** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)->makePartial();
$auth->shouldReceive('route')->andReturn($user->url);
$results = $auth->authorize();
PHPUnit::assertFalse($results);
}</code></pre><p>Making sure to close my<code>Mockery</code> when done</p><pre><code> /**
* @afterScenario
*/
public function cleanUp() {
Mockery::close();
}</code></pre><p>We are testing the two pieces that matter right now, the<code>Repo</code> and the<code>FormRequest</code>.</p><p>All I did was run<code>vendor/bin/behat -slogin_domain --append-snippets --tags=@happy_path</code> and I got to see the one(s) with that tag working.</p><h2 id="the-repo">The Repo</h2><p><code>\App\Repositories\ProfileShowPage</code></p><pre><code>&lt;?php
namespace App\Repositories;<p>use App\Profile;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;</p><p>class ProfileShowPage extends ProfileRepository
{</p><pre><code>public function showProfileForUserFromSlug($slug)
{
return \App\User::fromSlug($slug);
}</code></pre><p>}</code></pre><p>Why not just use the Controller! Well this is still a simple simple example but honestly if you are just building something for fun or something serious and just getting the feel of an idea go for it. I am doing this cause I want to plug in more to this later since it is part of a larger plan.</p></p><p><strong>Note:<code>Profile::fromSlug()</code> is just a scope and the model works out the rest of the query for me</strong></p><pre><code> public function scopeFromSlug($query, $slug)
{
return $query->with('profile')->where('url', $slug)->firstOrFail();
}</code></pre><p>That is it for the repository, now how about this<code>FormRequest</code> at<code>app/Http/Requests/ProfileShowRequest.php</code>?</p><h2 id="formrequest">FormRequest</h2><p>You can read more about this<a href="https://laravel.com/docs/5.2/validation#form-request-validation">here</a> on Laravel Docs</p><pre><code>&lt;?php<p>namespace App\Http\Requests;</p><p>/**</p><ul><li>@NOTE THERE ARE SOME CLASSES HERE SEE GITHUB
*/</li></ul><p>class ProfileShowRequest extends Request
{</p><pre><code>protected $profile;
/**
* Determine if the user is authorized to make this request.
*
* @return bool
*/
public function authorize()
{
if (Auth::guest()) {
return false;
}
/** @var \App\Repositories\ProfileShowPage $profilePage */
$profilePage = App::make(\App\Repositories\ProfileShowPage::class);
$user = $profilePage-&amp;gt;showProfileForUserFromSlug($this-&amp;gt;route('slug'));
return Auth::user()-&amp;gt;id == $user-&amp;gt;profile-&amp;gt;user_id;
}
public function forbiddenResponse()
{
return redirect('login')-&amp;gt;with('message', &amp;quot;You need to login first&amp;quot;);
}
/**
* Get the validation rules that apply to the request.
*
* @return array
*/
public function rules()
{
return [
//
];
}</code></pre><p>}</p><p/></pre><h2 id="the-controller">The Controller</h2></p><p>All right now that step is passing and the pieces are ready to plug in to the Controller!</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Http\Requests\ProfileShowRequest;
use App\Repositories\ProfileShowPage;
use Illuminate\Database\Eloquent\ModelNotFoundException;</p><p>class ProfileShowController extends Controller
{</p><pre><code>public function getProfileForUserUsingSlug(ProfileShowRequest $request, ProfileShowPage $repository, $slug)
{
try {
$profile = $repository-&amp;gt;showProfileForUserFromSlug($slug);
return view('profile.show', compact('profile'));
} catch (ModelNotFoundException $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Could not find your profile :(&amp;quot;);
} catch (\Exception $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Error getting profile :(&amp;quot;);
}
}</code></pre><p>}</code></pre><p>This controller has one Job<code>app/Http/Controllers/ProfileShowController.php</code> Showing the profile.</p></p><p>In with that job it has the ACL taken care of before it even has to think about what it needs to do.</p><p>After that it asks the repo to take care of the request and it deals with the response or inevitable exception!</p><p>So right away I can go to my ui test and make it so you can see the<strong><a href="https://github.com/alnutile/recipes/blob/a5f2522e702ee49d21711d9416c5a659e7761ddc/features/bootstrap/LoginPageUIContext.php">code here</a></strong></p><h2 id="follow-up">Follow Up</h2><p>All code for this can be seen at<a href="https://github.com/alnutile/recipes">https://github.com/alnutile/recipes</a> this is a foundation repo for a new book coming out in 2 months with many day to day Laravel Recipes!</p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description><p>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.</p><p>In this example I had a Class responsible for saving data, we&rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&rsquo;ll call FooProcessData.</p><p>The BDD Story for this worked out well in that just like in Konstantin Kudryashov noted in this<a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example#_=_">article</a> I had a great reading business driven gherkin feature that I then, using<a href="http://docs.behat.org/en/v3.0/guides/5.suites.html">Behat 3 and Suites</a> was able to make some really great names for my classes and methods.</p><p>But this was fine as I was working on FooSaveData, but the fact that FooProcessData had to iterate over a large complex array of data I did not want to do inside of this Gherkin test. It would mean that I had to deal with 5 other steps, x number of model states I needed etc. Instead I just made a unit test for that class &ldquo;FooProcessData&rdquo; and focused on it for a bit outside the rest of this work.</p><p>To begin with I just use</p><pre><code>File::put(base_path('tests/fixtures/data_to_process.json', json_encode($some_data, JSON_PRETTY_PRINT))</code></pre><p>to put that data right where I want it for my unit tests.</p><p>Then from there I go around and around unil the thinking on the left reads more like the thinking on the right</p><p><a href="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0"><img src="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0" alt="start to end"/></p><p>Which is my favorite part of this really as I see code evolve to something I can come back 6 months later and read.</p><blockquote><p>Let&rsquo;s Plan for a Future Where We&rsquo;re All As Stupid as We Are Today - Dan Milstein</p></blockquote><p>At this point that &ldquo;lego&rdquo; like piece is done and I can go back to my Behat BDD Gherkin test to finish off where I left off.</p></description><tags>php, laravel, bdd, behat, phpunit</tags></item><item><title>Getting Going Quickly Windows, Behat and Selenium</title><link>https://alfrednutile.info/posts/181/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/181/</guid><description><p>Quick Install Steps</p><h2 id="vagrant-and-homestead">Vagrant and Homestead</h2><p>This was easy I just followed these steps<a href="http://sherriflemings.blogspot.ca/2015/03/laravel-homestead-on-windows-8.html">here</a> and I was done. For me I used Vmware but Virtualbox is fine.</p><h2 id="windows-in-selenium">Windows in Selenium</h2><p>Two easy steps</p><h3 id="step-1-install-nodejs-super-easy">Step 1 Install Node.js SUPER EASY</h3><p><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>Install the .exe, restart your console and you have node!</p><h3 id="step-2-install-selenium">Step 2 Install Selenium</h3><p>Just go here and you are done!<a href="https://www.npmjs.com/package/selenium-standalone">https://www.npmjs.com/package/selenium-standalone</a></p><p>After those steps I run it in a powershell and the server is running and I am set to use it.</p><h2 id="final-touches">Final Touches</h2><p>In my VM I &ldquo;sudo vim /etc/hosts&rdquo; and point it to my selenium on windows using the domain &ldquo;selenium.dev&rdquo;</p><pre><code>192.168.7.57 selenium.dev</code></pre><p>Then my behat.yml looks like this</p><p>So when I run this inside the VM it knows to talk to the exteral version of Selenium</p><pre><code>default:
suites:
home_ui:
paths: [ %paths.base%/features/home]
contexts: [ HomePageUiContext ]
extensions:
Laracasts\Behat:
env_path: .env.behat
Behat\MinkExtension:
default_session: laravel
base_url: https://recipes.dev
laravel: ~
selenium2:
wd_host: "http://selenium.dev:4444/wd/hub"
browser_name: chrome</code></pre><p>You can see more of it<a href="https://github.com/alnutile/recipes/blob/master/behat.yml">here</a></p></description><tags>bdd, behat, windows</tags></item><item><title>Behat and Uploading Files to a Form Even on Remote Selenium2 Servers</title><link>https://alfrednutile.info/posts/179/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/179/</guid><description><p>Just had to tackle this issue so making some notes for later here :)</p><p><strong>Updated and more detailed<a href="https://alfrednutile.info/posts/188">here</a></strong></p><p>I run selenium on my Windows PC and before that my Mac, either one would have had this issue since my test is running side my VM. This meant when I needed to run a test to interact with a form to upload an image that image path was relative to the machine (VM) that I started the test on and not the Browser that was being manipulated by Selenium2.</p><p>The solution was &ldquo;easy&rdquo; thanks to this<a href="https://github.com/minkphp/MinkSelenium2Driver/issues/187#issuecomment-112106857">thread</a></p><p>After that my step just looked like this and I was done</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$localFile = base_path('features/assets/profile.jpg');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip->open($tempZip, \ZipArchive::CREATE);
$zip->addFile($localFile, basename($localFile));
$zip->close();<pre><code> $remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
$this-&amp;gt;attachFileToField('profile_image', $remotePath);
unlink($tempZip);
$this-&amp;gt;pressButton('Save');
}</code></pre><p/></pre><p>I also had to add<code>@javascript</code> to the test to allow this WebDriver feature to work.</p></p><p>That was it, saved me a ton of time suffering through this gotcha moment.</p></description><tags>behat, bdd, php, note2self</tags></item><item><title>Behat for Product Owners</title><link>https://alfrednutile.info/posts/156/</link><pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/156/</guid><description><p>As a developer putting all the business requirements into action and then showing that it is working as expected can be hard. 10 different google docs, 3 different views of what are the goals etc.</p><p>And as a Product Owner you are not sure if the work is done without always clicking around. And more importantly you do not even know if the developer really gets what you want.</p><p>This is where Behat / Gherkin (cause that name really gets Product Owners feeling comfortable) can help out. BUT the key is to remove ALL language barriers.</p><h2 id="gathering-the-business-requirements-into-a-gherkin-file">Gathering the Business Requirements into a Gherkin File</h2><p>Just open up a text editor, or google doc or even email, talk to the product owner, even share your screen, and write it with them.</p><pre><code>Feature: Reporting Goals for Product Foo
So I can decide what to order for next week
As a the business manager
Should allow me to see products, sort and filter<p>Scenario: Visit Reporting Page
I should be able to go to the report page
See all the products but only 100 per page to keep it easy to see
No products should be here that are not "active"
Filter by types of products using many filters at once
Paginate on those filter results
Export to a spreadsheet those results</p><p>@done
Scenario: Visit Reporting Page and do not have permission to be here
As a non admin person who goes to the reports page I should not be allowed to go here</p><p/></pre><p>So at this point there are 3 things they need to know and at that the rest is freeform.</p></p><h3 id="feature">Feature</h3><p>This is a one line look at the goal of this area, requirement.</p><h3 id="the-three-lines-after-the-feature">The Three Lines After the Feature</h3><p>Benefit, Role or User or Feature, The Feature itself</p><h3 id="scenario">Scenario</h3><p>Start your small bite size goals here. Maybe there is just one? Maybe there are also negatives to consider like<code>Scenario: Someone how does not have permission goes here</code></p><h3 id="tagging">Tagging</h3><p>Also maybe agree on some simple tags</p><p>@done = um done</p><p>@wip = work in progress</p><p>@needs_review</p><p>Etc.</p><h3 id="now-what">Now What</h3><p>At this point the Owners and Developers hopefully have what they need to start writing. Behat so easily let&rsquo;s us make custom steps that we can turn any of this into steps and even better code.</p><p>And as an Owner you can go simply to github and add these tests if you feel comfortable (yes some even are okay with this) and write it as the business needs it not as &ldquo;gherkin&rdquo; needs it.</p></description><tags>bdd, behat</tags></item><item><title>Laravel 5.1 Behat and Codeship</title><link>https://alfrednutile.info/posts/151/</link><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/151/</guid><description><p>The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.</p><p>Here are some steps to getting behat going on Codeship so you get full CI even of Angular.</p><p>This is all based off of<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><h2 id="behatyml">Behat.yml</h2><p>behat.yml looks like this for me</p><pre><code>default:
extensions:
Laracasts\Behat:
# env_path: .env.behat
Behat\MinkExtension:
base_url: https://microservicehub.dev:44300
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://192.168.10.1:4444/wd/hub"
browser_name: chrome<p>codeship:
extensions:
Laracasts\Behat:
env_path: .env.codeship
Behat\MinkExtension:
base_url: http://localhost:8080
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://localhost:4444/wd/hub"
browser_name: chrome</code></pre><p>This is so I can run it locally as needed. The Codeship profile will then call in the<code>.env.codeship</code> and update the url as needed.</p></p><h2 id="envcodeship">.env.codeship</h2><p>This file has</p><pre><code>APP_ENV=testing
APP_DEBUG=true
APP_KEY=f5edkkfijPDKQXPLHyYNDhiNZZrpT0Qd<p>DB_HOST=localhost
DB_DATABASE=test</p><p>CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync</p><p>MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</code></pre><h2 id="build-script-for-codeship">Build Script for Codeship</h2></p><p>Using the code they offer on their site I add that to my projects folder under tests/selenium_server.sh it is this file<a href="https://github.com/codeship/scripts/blob/master/packages/selenium_server.sh">here</a></p><p>Maybe some do not need to be there?</p><h2 id="codeship-test-settings">Codeship Test Settings</h2><p>Now in the settings I end up with inside the CodeShip UI are as follows</p><p>Here for example is the URL for my project to find these settings.</p><p><code>https://codeship.com/projects/8844/configure_tests</code></p><p>Under Setup Commands</p><pre><code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foobar
touch .env
echo "APP_ENV='testing'" >> .env
echo "DB_DATABASE='test'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "APP_KEY=DHMbPIbNLd1jI0ZEZZSxRFOHj03SU4P5" >> .env
echo "CACHE_DRIVER=file" >> .env
echo "SESSION_DRIVER=file" >> .env
echo "QUEUE_DRIVER=sync" >> .env
echo "MAIL_DRIVER=smtp" >> .env
echo "MAIL_HOST=smtp.mailgun.org" >> .env
echo "MAIL_PORT=2525" >> .env
composer install --dev
php artisan migrate
php artisan db:seed
nohup bash -c "sh tests/selenium_server.sh &amp;" &amp;&amp; sleep 9
cd public &amp;&amp; nohup bash -c "php -S localhost:8080 &amp;" &amp;&amp; sleep 9
cd ../</code></pre><p>Under Configure Test</p><pre><code>DB_DATABASE=test phpunit
php artisan migrate
php artisan db:seed
vendor/bin/behat --profile=codeship --stop-on-failure</code></pre><p>I run the migration one more time to get it ready for behat</p><p><img src="https://dl.dropboxusercontent.com/s/2uadht5426s40p8/behat_codeship.png?dl=0" alt="behat"/></description><tags>laravel, php, bdd</tags></item><item><title>Using Faker and ENV vars with Behat</title><link>https://alfrednutile.info/posts/140/</link><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/140/</guid><description><p><strong>UPDATED April 01 2015</strong></p><p>Realized I needed more &ldquo;tokens&rdquo; and I was already using my .env file for info for Seeding and for our different servers. So the Trait now pulls those in.</p><p>This is a simple trait to use in your FeatureContext file to then get the power of<a href="https://packagist.org/packages/fzaninotto/faker">Faker</a> in your Behat tests</p><h2 id="the-trait">The Trait</h2><pre><code>&lt;?php<p>trait TokenFaker {</p><pre><code>public function checkForTokens($arg)
{
$arg = str_replace($this-&amp;gt;replaceAbleTokens(), $this-&amp;gt;loadTokensValues(), $arg);
return $arg;
}
protected function replaceAbleTokens()
{
return array_merge($this-&amp;gt;getManualTokensKeys(), $this-&amp;gt;getEnvTokensKeys());
}
protected function getManualTokensKeys()
{
return [
'TOKEN_EMAIL',
'TOKEN_UUID',
'TOKEN_USERNAME',
'TOKEN_URL'];
}
protected function loadTokensValues()
{
return array_merge($this-&amp;gt;getManualTokenValues(), $this-&amp;gt;getEnvTokensValues());
}
protected function getManualTokenValues()
{
return [
$this-&amp;gt;faker-&amp;gt;email,
$this-&amp;gt;faker-&amp;gt;uuid,
$this-&amp;gt;faker-&amp;gt;word,
$this-&amp;gt;faker-&amp;gt;url
];
}
protected function getEnvTokensValues()
{
return array_values($_ENV);
}
protected function getEnvTokensKeys()
{
return array_keys($_ENV);
}</code></pre><p>}</code></pre><h2 id="the-feature-context">The Feature Context</h2></p><p>In my Feature Context I setup Faker and instantiate it and use the trait</p><pre><code>&lt;?php<p>use Faker\Factory as Faker;</p><p>class BaseContext extends MinkContext {
use TokenFaker;</p><pre><code>public function __construct($parameters = [])
{
$this-&amp;gt;faker = Faker::create();
}</code></pre><p/></pre><h2 id="the-step">The Step</h2></p><p>Here is one example but you could pass all your args through this</p><pre><code> /**
* @Given /^I have the payload:$/
*/
public function iHaveThePayload(PyStringNode $requestPayload)
{
$this->requestPayload = $this->checkForTokens($requestPayload);
}<p/></pre><h2 id="and-the-scenario">And The Scenario</h2></p><pre><code> Scenario: Can Create a Person
Given I have the payload:
"""
{ "data":
{
"email": "TOKEN_EMAIL",
"roles": [
{ "id": "role-manager", "name": "Manager" }
]
}
}
"""
Scenario: How do I get a token
Given I have the payload:
"""
{
"password": "ADMIN_PASS",
"grant_type": "password",
"client_id": "CLIENT_ID",
"client_secret": "CLIENT_SECRET",
"username": "ADMIN_USERNAME"
}
"""
And I request "POST /oauth/access_token"
Then I get a "200" response</code></pre><p>I would like to also save the state of the token made so I can check that the update/post really worked etc. But for now this makes it super easy to not reseed with every step and not worry about duplicate ids.</p></description><tags>behat, bdd</tags></item><item><title>Saucelabs PHP Client</title><link>https://alfrednutile.info/posts/96/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/96/</guid><description><p>It is built off of the php-github-api client seen<a href="https://github.com/KnpLabs/php-github-api">here</a> by KnpLabs . They made a really nice client that uses Guzzle and an AbstractionAPI to make it easy to code out different classes around the API endpoints.</p><p>Anyways I have had such a good experience with github one I figured it would be nice to have one for the Saucelabs work I do.</p><p><a href="https://github.com/alnutile/saucelabs_client">https://github.com/alnutile/saucelabs_client</a> more features will be added shortly as it is being used in a couple of decent size projects.</p><p>There are plenty of Tests to show how to use it.</p></description><tags>bdd, testing, php</tags></item><item><title>Behat Seed Repo</title><link>https://alfrednutile.info/posts/77/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/77/</guid><description><p>The aim of this repo is to make it super easy to get going with behat. All you will need to get outside of this repo is</p><ul><li>Selenium Jar file download</li><li>Composer</li><li>Saucelabs Account (Optional)</li></ul><p>After you install and setup those items you will be able to run tests locally or via Saucelabs and have a base setup to add new/custom steps as needed.</p><h3 id="selenium-easy">Selenium Easy</h3><p>This is the one jar file you need</p><p><a href="https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;can=2&amp;q=">https://code.google.com/p/selenium/downloads/detail?name=selenium-server-standalone-2.39.0.jar&amp;can=2&amp;q=</a></p><p>The trick though is getting Java for your OS. For me, a Mac, I had to go here<a href="http://support.apple.com/kb/DL1572">http://support.apple.com/kb/DL1572</a> ie avoid Oracles horrible download process at all costs. Linux is easy and Windows I am not sure about.</p><p>Once you have Java and Selenium open a terminal and go to the folder you will be keeping selenium and type</p><pre><code>java -jar selenium-server-standalone-2.39.0.jar</code></pre><p>This will output a lot of info to the screen and will remain running as you work. This line shows it is running</p><pre><code>14:21:08.171 INFO - Started SocketListener on 0.0.0.0:4444</code></pre><p>So now we can connect to that port later on.</p><h3 id="composer">Composer</h3><p>This is a great way to manage PHP dependencies and just enjoy the numerous libraries out there.</p><p>The install is pretty easy just type</p><pre><code>$ php composer.phar install</code></pre><p>And then move that into /use/bin on your machine so you can now run it from anywhere. (this may take sudo powers)</p><h3 id="behat-install">Behat Install</h3><p>Finally download the repo<a href="https://github.com/alnutile/behat-seed">https://github.com/alnutile/behat-seed</a>
to a folder that you will store tests for a site or many sites.</p><p>For example</p><pre><code>cd /opt
git clone https://github.com/alnutile/behat-seed</code></pre><p>Then cd into behat-seed and lets start the composer install</p><pre><code>cd behat-seed
composer install --prefer-dist</code></pre><p>Comeback in 20 minutes (or less hopefully)</p><p>After that you should be able to run</p><pre><code>bin/behat --help</code></pre><h4 id="layout-of-files-and-folders">Layout of files and folders</h4><p>This download and build of composer will leave you with this layout.</p><hr><pre><code>/opt/behat-seed
|-tests
|--behat.yml
|--features
| --bootstrap
| FeatureContext.php
| wikipedia.feature
| wikipedia_tokens.feature
|-files
|-vendor
|-composer.json
|-composer.lock
|-bin
| behat
|-dummy-site</code></pre><p>Tests will be where we store the behat.yml file and tests files. We will explore that more in a moment.</p><p>Tests has a folder called features. In here we store our actual tests called *.feature. Example wikipedia.feature.</p><p>Files is for storing files for a vanilla behat example.</p><p>Vendor is for composer as well as composer.lock and composer.json</p><p>Bin which stores behat only for now (really a symlink to the right area).</p><p>Finally dummy-site to run a php server for use to quickly test against.</p><h4 id="exploring-our-configuration">Exploring our configuration</h4><p>To start we are going to look at behat.yml so open up that file and you should see this in your editor. Keep in mind it is YAML format. So if you get errors then look for tabs and other formats that break YAML. Stick to spaces.</p><p>Looking at the file</p><pre><code>default:
paths:
features: /opt/behat-seed/tests/features
bootstrap: /opt/behat-seed/tests/features/bootstrap
formatter:
name: pretty
extensions:
OrangeDigital\BusinessSelectorExtension\Extension:
urlFilePath: tests/urls.yml
selectorFilePath: tests/selectors.yml
assetPath: path
timeout: 30
contexts:
UIBusinessSelector: ~
Behat\MinkExtension\Extension:
default_session: selenium2
goutte: null
selenium2: ~
base_url: 'http://localhost:8080'
browser_name: safari<p>saucelabs:
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
base_url: &lsquo;<a href="http://en.wikipedia.org/wiki/'">http://en.wikipedia.org/wiki/'</a>
selenium2:
browser: chrome
wd_host: &lsquo;behat-seed:fc5b688a-f27c-4c73-a914-eb5d7e2cdf1e@ondemand.saucelabs.com/wd/hub&rsquo;
capabilities:
platform: &lsquo;Windows 2012&rsquo;
browser: chrome
version: &lsquo;26&rsquo;
name: &lsquo;Behat See&rsquo;
command-timeout: &lsquo;600&rsquo;
max-duration: &lsquo;600&rsquo;</p><p/></pre><p>We will cover the details shortly.</p></p><h4 id="running-the-local-server">Running the local server</h4><p>I included a simple php server and some test pages to try this out against
To get it going</p><pre><code>cd dummy-site
php -S 127.0.0.1:8080</code></pre><p>And you now can visit that url to see a site with numerous things to click and move.</p><h2 id="now-what">Now What</h2><p>With all of this setup, selenium running then you can just run, for example, this command</p><pre><code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/local_tokens.feature</code></pre><p>To see tokens in action. Or</p><pre><code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/local.feature</code></pre><p>To see basic behat/mink Or to see it run but where? On Saucelabs.</p><pre><code>bin/behat --config tests/behat.yml --profile saucelabs tests/features/wikipedia.feature</code></pre><p>Even just testing linux/Mac so you can see that level of work.</p><pre><code>bin/behat --config tests/behat.yml tests/features/pure_behat.feature</code></pre><h2 id="roadmap">RoadMap</h2><ul><li>Some more steps included.</li><li>Base Vagrant install file</li></ul><h2 id="links">Links</h2><ul><li><p>OrangeDigital<a href="https://github.com/orangedigital/business-selector-extension">https://github.com/orangedigital/business-selector-extension</a></p></li><li><p>Saucelabs<a href="https://saucelabs.com/">https://saucelabs.com/</a></p></li><li><p>Some Code From</p><ul><li><a href="https://github.com/philsturgeon/build-apis-you-wont-hate/blob/master/chapter8/app/tests/behat/features/bootstrap/FeatureContext.php">build apis you wont hate</a></li></ul></li><li><p>Slim PHP<a href="http://www.slimframework.com/">http://www.slimframework.com/</a></p></li></ul></description><tags>behat, bdd</tags></item><item><title>Behat and bad HTML</title><link>https://alfrednutile.info/posts/38/</link><pubDate>Sat, 11 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/38/</guid><description><p>Some of the sites we are testing have HTML that has multiple ID that are the same. Or elements that do not really have enough info to get a class, name, label or ID out of.</p><p>This has been a challenge and there are a few custom steps made to help get through this</p><p> </p><hr/><h2>Switching to an Iframe with no name or id</h2><p>This was hard since the default was to target the ID of the frame or name.</p><p>Thanks to the help of this thread <a href="https://groups.google.com/forum/#!topic/behat/z0z3DscjzhU" target="_blank">https://groups.google.com/forum/#!topic/behat/z0z3DscjzhU</a> I was able to pull it off.</p><p>First, using jQuery and JavaScript I enable the user to target an Iframe by finding the ID of the div that surrounds it. Second I give the frame a name / id to target.</p><p>Then I the user can choose one of or other custom steps noted below to switch to the frame. The code still needs better error checking e.g. if the element does not exist.</p><p><script src="https://gist.github.com/alnutile/8365567.js"/></p><hr/><h2>Finding a Submit button on the page when there are 2 with the same name and ID</h2><p>This snippet allows the user to target a specific element on the page by adding a number. This was done a couple of months ago and at this point I think we have a better way to do it. I will show that below.</p><p><script src="https://gist.github.com/alnutile/8365581.js"/></p><hr/><h2>Clicking Submit on a form with no button</h2><p>There are a few ways to do this. So far this one seem to be working best.</p><p><script src="https://gist.github.com/alnutile/8365610.js"/></p><p>Of course if the form does not have an ID we would be in trouble.</p><hr/><h2>Switching to a popup window that has no name</h2><p>Finally this was the toughest one. We had to use a different branch of Mink to do this. This thread was key to getting this to work <a href="https://groups.google.com/forum/#!topic/behat/QNhOuGHKEWI" target="_blank">https://groups.google.com/forum/#!topic/behat/QNhOuGHKEWI</a></p><p>What we ended up with was basically from that thread</p><p><script src="https://gist.github.com/alnutile/8365741.js"/></p><hr/><h2><span style="line-height: 1.6em;">Dealing with Alerts</span></h2><p>Dealing with built in browser alerts was found in those threads as well.</p><p>I then wrote a helper that I use in other methods to do this.</p><p>Since all the steps are called from a web form they user can choose to "Click and Alert" as needed.</p><p> </p><p> </p><p> </p><p> </p><p><script src="https://gist.github.com/alnutile/8365634.js"/></p><p> </p><h2>Comparing the Size of an element to the Window</h2><p>Lastly (really this time) we have to check the size of an element to make sure it meets requirements.</p><p>This custom steps allows the user to enter a class to get the height of and enter the % it should be of the window.</p><script src="https://gist.github.com/alnutile/8365794.js"/><h2>UPDATE</h2><p>Noted in comments this might help as well</p><p><script src="https://gist.github.com/alnutile/4a112a99c967adffe88b.js"/></p></description><tags>bdd</tags></item><item><title>Behat Mink and using Javascript / jQuery to test attributes</title><link>https://alfrednutile.info/posts/37/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/37/</guid><description><p>Using Behat and Mink I had to make a test that would verify the height of content on the screen compared to the rest of the window size. For example it had to be 30% of the screen or more.</p><p>You can see the code below.</p><p>It allows the user to pass in the expected height % and the element they would like to target. I will optmize it to allow more options than just ID.</p><script src="https://gist.github.com/alnutile/8289033.js"/></description><tags>bdd</tags></item></channel></rss>