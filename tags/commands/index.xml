<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>commands on Alfred Nutile</title><link>https://alfrednutile.info/tags/commands/</link><description>Recent content in commands on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 May 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/commands/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Commands and Scheduling in Laravel 5.1</title><link>https://alfrednutile.info/posts/146/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/146/</guid><description><p>Wow, writing<a href="http://laravel.com/docs/master/artisan#command-structure">Artisan Commands</a> just become even easier. And plugging it into<a href="http://laravel.com/docs/master/scheduling">Scheduler</a> makes for a great combination.</p><p>For example we need to clean out a folder every so many minutes. The example below I also for fun play around with<code>progress</code> and table output.</p><p>Note too<code>protected $signature = 'approve:cleanuploads {--minutes=10}';</code> simplifies the<code>argument</code> and<code>options</code> features.</p><pre><code>&lt;?php namespace App\Console\Commands;<p>use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;</p><p>class CleanUploadsCommands extends Command
{
protected $rootPath = &lsquo;public/storage&rsquo;;
protected $maxMinutes = 10;
protected $deleted = [];
protected $signature = &lsquo;approve:cleanuploads {&ndash;minutes=10}';
protected $description = &lsquo;Clean all the uploads in the storage folder for security reasons&rsquo;;
protected $pdfFiles = [];
protected $files = [];</p><pre><code>public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;maxMinutes = $this-&amp;gt;option('minutes');
$this-&amp;gt;anyPdfFilesHere();
$this-&amp;gt;deletePdfFiles();
$this-&amp;gt;outputResults();
}
protected function anyPdfFilesHere()
{
$this-&amp;gt;files = File::allFiles(base_path($this-&amp;gt;rootPath));
foreach($this-&amp;gt;files as $file)
{
if (File::mimeType($file) == 'application/pdf')
{
$this-&amp;gt;pdfFiles[] = $file;
}
}
}
private function deletePdfFiles()
{
if(count($this-&amp;gt;pdfFiles) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressStart(count($this-&amp;gt;pdfFiles));
foreach($this-&amp;gt;pdfFiles as $file)
{
$modified = File::lastModified($file);
$minutes = Carbon::createFromTimestamp($modified)-&amp;gt;diffInMinutes();
if($minutes &amp;gt; $this-&amp;gt;maxMinutes)
{
$this-&amp;gt;setDeleted(['filename' =&amp;gt; $file]);
File::delete($file);
$this-&amp;gt;output-&amp;gt;progressAdvance();
}
}
}
}
private function outputResults()
{
if(count($this-&amp;gt;deleted) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressFinish();
$headers = ['File Name and Path'];
$this-&amp;gt;table($headers, $this-&amp;gt;getDeleted());
}
else
{
$this-&amp;gt;comment(sprintf(&amp;quot;No files older than %d minutes&amp;quot;, $this-&amp;gt;maxMinutes));
}
}
public function getDeleted()
{
return $this-&amp;gt;deleted;
}
public function setDeleted($deleted)
{
$this-&amp;gt;deleted[] = $deleted;
}</code></pre><p>}</code></pre><p>Then in the Kernel.php I enter</p></p><pre><code>&lt;?php namespace Approve\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
'App\Console\Commands\CleanUploadsCommands'
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
$schedule->command('approve:cleanuploads --minutes=10')
->everyMinute();
}
}</code></pre><p>And that is it.</p><p>One big thing about Commands is the power of Asynchronous processing that libraries like<a href="http://symfony.com/doc/current/components/process.html">Symfony Process</a> gives us the ability to run numerous commands at once!</p><p><img src="https://dl.dropboxusercontent.com/s/cu1v0wl61ul29qr/cleanFiles.gif?dl=0" alt="running"/></description><tags>laravel, php, commands</tags></item></channel></rss>