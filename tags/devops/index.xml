<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Alfred Nutile</title><link>https://alfrednutile.info/tags/devops/</link><description>Recent content in devops on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 May 2021 14:32:07 -0400</lastBuildDate><atom:link href="https://alfrednutile.info/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>CI - GitHub Actions and Laravel (Part 1 of 3)</title><link>https://alfrednutile.info/posts/ci_cd_part_one/</link><pubDate>Sun, 23 May 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/ci_cd_part_one/</guid><description><blockquote><p>The point is GitHub Actions should be revolutionizing your team&rsquo;s workflows; if it is not, you are missing something important.</p></blockquote><p>This first post is part one of three. In this series I will cover the following topics.</p><ul><li>PT 1 CI - Simple Continuous Integration using GitHub Actions</li><li>PT 2 CD - Simple Continuous Deployment using GitHub Actions</li><li>PT 3 Security - Shifting Left on Security</li></ul><p>Please keep in mind that the repository and code below I am sharing is not an end product and will evolve. The &ldquo;Links&rdquo; section below will have many of the links needed.</p><p>If I do not get any interest in this post, I will not do PT 2 or PT 2 as I try to use Build Measure Learn<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> with writing these articles.<strong>¬Ø_(„ÉÑ)_/¬Ø</strong></p><p>By the end of this post, you will easily be able to add CI to your open-source project, independent private project, team project, or even, dare I say, &ldquo;enterprise&rdquo; project. ( more on that later ü§î)</p><p>I will reference material in numerous books and research papers you can see many of them<a href="https://alfrednutile.info/posts/sod/">here</a></p><h3 id="continuous-delivery-book">Continuous Delivery Book</h3><blockquote><p>The commit stage begins with a change to the state of the project‚Äîthat is, a commit to the version control system. It ends with either a report of failure or, if successful, a collection of binary artifacts and deployable assemblies to be used in subsequent test and release stages, as well as reports on the state of the application. Ideally, a commit stage should take less than five minutes to run, and certainly no more than ten. Humble, Jez; Farley, David. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p></blockquote><p>This book is the<strong>&ldquo;why&rdquo;</strong> behind this article. You can not deliver quality code without a CI system that embraces automation and tooling to vet code quickly. To that end the company paying for this code can not succeed either with out this level of thinking.</p><blockquote><p>Those who excel at delivering profitability, productivity, and customer satisfaction survive. Anything less than excellence leads to failure. pg 32<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><blockquote><p>Continuous delivery for the sake of continuous delivery is not enough if you want your organization to succeed, however. It must be done with an eye to organizational goals such as profitability, productivity, and customer satisfaction. pg 49<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><blockquote><p>Our analysis this year shows elite performers are twice as likely to meet or exceed their organizational performance goals. Pg 54<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>These quotes make it clear that a company that says NO proper CI and CD is also saying NO to success. And most companies have to see the sentence &ldquo;We are a company that does x and happens to have a technology team&rdquo; flipped around to say, &ldquo;We are a technology company that happens to focuses on x.&rdquo;</p><h3 id="the-twelve-factor-app">The Twelve-Factor App</h3><img src="images/factor.png" width="800" class="center"><p>Read more about that<a href="https://12factor.net">here</a></p><p>This article is how I started years ago to consider any application I was building. In this post I am writing, CI will include the following principles.</p><ol><li>CodeBase</li><li>Dependencies</li><li>Config</li></ol><p>The article will use the repo<a href="https://github.com/alnutile/codenames">https://github.com/alnutile/codenames</a> as if it is an application. I mean it is, even though a very silly one.</p><p>We will in this case, focus more on the &ldquo;shifting left&rdquo; when it comes to &ldquo;quality and security&rdquo; and other goals like &ldquo;peer review-based approval process.&rdquo;</p><blockquote><p>We recommend that organizations move away from external change approval because of the negative effects on performance. Instead, organizations should &ldquo;shift left&rdquo; to peer review-based approval during the development process.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>I will apply some base GitHub Actions to the codebase to help confidence in quality and security from the start. By then end we will have the start of a CI system to help you and your team achieve &ldquo;Elite&rdquo; levels of performance.</p><img src="images/elite.png" width="1200" class="center"><h3 id="accelerate">Accelerate</h3><p>The book Accelerate<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> is not just a technology game-changer; it is a culture-changing strategy that can be implemented on any team today.</p><p>Just the habit of working in &ldquo;small batches&rdquo; will change the performance level of any team. This book will impact all parts of these three articles.</p><p>On that note, the only way to get to the &ldquo;Elite&rdquo; levels this book talks about is by putting CI and CD first. You have to believe in it, do it no matter how much time pressure is on your team because it will succeed in the long run. What will not succeed is cutting corners, building technical debt, and having too many non-automated processes between your code and going to production. All of this is proven by the data in this book and the ongoing reports it offers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p><blockquote><p>We also see that elite performers automate and integrate tools more frequently into their toolchains on almost all dimensions. Although automation may be seen as too expensive to implement (we often hear, &ldquo;I don&rsquo;t have time or budget to automate‚Äî it&rsquo;s not a feature!"), automation is truly a sound investment. Pg 60<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><h2 id="branching">Branching</h2><blockquote><p>PR is another way of saying Pull-Request</p></blockquote><p>To begin this CI process and all the GitHub Actions will assume a trunk-based branching process.
Basically, you have &ldquo;mainline&rdquo; and ONE level of branching off of that, e.g. the &ldquo;small batch&rdquo; of the feature you are working on.
This size of this &ldquo;batch&rdquo; should be under four hours of work, ideally, two. Consider a daily goal to merge two pull requests a day of work.
This strategy will make more sense as I cover Feature Flags in part two of the article.</p><blockquote><p>Our research shows that effective trunk-based development is characterized by fewer than three active branches and branches and forks having lifetimes of less than a day before being merged to master. Pg 41<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>All<a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">Pull Request</a> will trigger these automations leaving only one real manual step that is a peer developer on the project to review the code WHILE you work on the pull request or the next part of the feature.</p><p>Keep in mind, we are working in small batches. Your code is not a
days worth of work thrown to some poor teammate who has barely enough time to get a hot cup of coffee ‚òïÔ∏è. No, it is a small batch of code they can quickly review and even suggest an update for the next PR cause they know you will be at it quickly enough.</p><p>Every merged PR is not a final stoke on some great renascence painting but a small step toward building a feature. If you think in line with Build Measure Learn<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, you start realize that the feature might never get used or even eventually removed. Some statistics show this to be about 2/3 of the code pushed!</p><p>This PR process asks a teammate to review the code, and if they are too busy after thirty minutes, go find someone else. Please keep it to ONE person. This is not a time to philosophize around the merits of style and ideals. Those conversations can happen, but a team should have time to do that during the week and build standards together. Maybe, for example, the reviewer thinks you should not do x, then agree to come back to it later, set up a time to talk as the larger team and or in chat, make a decision, document it, or better add it to automation. These pull requests are about the feature and the known best practices the team has agreed to.</p><p>The short of it is, make a branch from trunk, push to your version control system a pull request with the first bit of code-test you write. Get someone&rsquo;s eyes on it sooner than later. When approved, merge that one branch back into trunk (main, master, mainline).</p><p>Lastly, if you find yourself waiting for someone to review the branch, you can branch-off of it since, by the time you are done with your second PR, you should have enough feedback from your teammate to merge and then rebase your current branch from trunk. Leaving you never more than one branch out at most from trunk.</p><p>One good question I had been asked about this was when I presented this workflow to another team was, &ldquo;Won&rsquo;t this distract my team from the work they are doing if all day there are looking at PRs&rdquo; and I asked my team about this, and overall, the answer is no.</p><p>For one, these are small batches of work; the dev does not have to switch their context that significantly unlike if they are handed days of code. Second, the devs do not and should not be coding eight hours a day. There should be other things going on in their day to make sure the health of the project and team are being built and maintained as well. We are preventing debt by doing this.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p><h2 id="github-actions">GitHub Actions</h2><p>Okay, this is huge; we are going to start talking about<a href="https://github.com/features/actions">GitHub Actions</a>. And yes, GitLabs and BitBucket have comparable features, so this article can be considered for all of them. The point is GitHub Actions should be revolutionizing your team&rsquo;s workflows; if it is not, you are missing something important. It empowers DevOps at the developer level in a way that years ago took heavy server administration skills to set up. But now it is like Lego bricks, pre-built automation to truly shift-left in all things.</p><h3 id="step-one-setting-up-the-actions">Step One: Setting up the actions</h3><p>This is easy; I will show you in order every action used to make this all happen.</p><p>First, it happens in one file<a href="https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml">https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml</a> maybe it can be broken up into more, etc. I am not a GitHub Actions expert, so feel free to Google more about this.</p><p>We start with the &ldquo;when&rdquo; to run the action.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">name</span>:<span style="color:#ae81ff">CI-CD</span><p><span style="color:#f92672">on</span>: [<span style="color:#ae81ff">push]</span></code></pre></div><p>The ‚Äúwhen‚Äù in this case is when code is pushed to any branch we run this.</p></p><p>Okay, then there is some base setup I will breeze over since the GitHub Action Docs are good and I rather focus on the &ldquo;how&rdquo; and &ldquo;why&rdquo;.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">runs-on</span>:<span style="color:#ae81ff">ubuntu-latest</span><span style="color:#f92672">env</span>:<span style="color:#f92672">DB_DATABASE</span>:<span style="color:#ae81ff">test</span><span style="color:#f92672">DB_USERNAME</span>:<span style="color:#ae81ff">root</span><span style="color:#f92672">DB_PASSWORD</span>:<span style="color:#ae81ff">password</span><span style="color:#f92672">BROADCAST_DRIVER</span>:<span style="color:#ae81ff">log</span><span style="color:#f92672">services</span>:<span style="color:#f92672">mysql</span>:<span style="color:#f92672">image</span>:<span style="color:#ae81ff">mysql:5.7</span><span style="color:#f92672">env</span>:<span style="color:#f92672">MYSQL_ALLOW_EMPTY_PASSWORD</span>:<span style="color:#66d9ef">false</span><span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>:<span style="color:#ae81ff">password</span><span style="color:#f92672">MYSQL_DATABASE</span>:<span style="color:#ae81ff">test</span><span style="color:#f92672">ports</span>:
-<span style="color:#ae81ff">3306</span><span style="color:#ae81ff">/tcp</span><span style="color:#f92672">options</span>: --<span style="color:#ae81ff">health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3</span><span style="color:#f92672">strategy</span>:<span style="color:#f92672">fail-fast</span>:<span style="color:#66d9ef">true</span><span style="color:#f92672">matrix</span>:<span style="color:#f92672">php-versions</span>: [<span style="color:#e6db74">"8.0"</span>]</code></pre></div><p>So we are going to lean heavily on<a href="https://github.com/shivammathur/setup-php">https://github.com/shivammathur/setup-php</a> and after we check out our repo</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">steps</span>:
-<span style="color:#f92672">uses</span>:<span style="color:#ae81ff">actions/checkout@v2</span></code></pre></div><p>Once that is done, we can get to work.</p><p>I set up PHP with some extensions I need, especially Xdebug even though it slows things down but it is how we will measure coverage.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Setup PHP, with composer and extensions</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">shivammathur/setup-php@v2</span><span style="color:#75715e">#https://github.com/shivammathur/setup-php</span><span style="color:#f92672">with</span>:<span style="color:#f92672">php-version</span>:<span style="color:#ae81ff">${{ matrix.php-versions }}</span><span style="color:#f92672">tools</span>:<span style="color:#ae81ff">phpmd</span><span style="color:#f92672">extensions</span>:<span style="color:#ae81ff">mbstring, dom, fileinfo, mysql</span><span style="color:#f92672">coverage</span>:<span style="color:#ae81ff">xdebug</span><span style="color:#75715e">#optional</span></code></pre></div><p>I then prepare the application:</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Start mysql service</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">sudo /etc/init.d/mysql start</span><ul><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Get composer cache directory</span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">composer-cache</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">echo "::set-output name=dir::$(composer config cache-files-dir)"</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Cache composer dependencies</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">actions/cache@v2</span><span style="color:#f92672">with</span>:<span style="color:#f92672">path</span>:<span style="color:#ae81ff">${{ steps.composer-cache.outputs.dir }}</span><span style="color:#75715e"># Use composer.json for key, if composer.lock is not committed.</span><span style="color:#75715e"># key: ${{ runner.os }}-composer-${{ hashFiles('<strong>/composer.json') }}</span><span style="color:#f92672">key</span>:<span style="color:#ae81ff">${{ runner.os }}-composer-${{ hashFiles('</strong>/composer.lock') }}</span><span style="color:#f92672">restore-keys</span>:<span style="color:#ae81ff">${{ runner.os }}-composer-</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Install Composer dependencies</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">composer install &ndash;no-progress &ndash;prefer-dist &ndash;optimize-autoloader</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Prepare the application</span><span style="color:#f92672">run</span>: |<span style="color:#e6db74"/><span style="color:#e6db74"> php -r "file_exists('.env') || copy('.env.example', '.env');"</span><span style="color:#e6db74"> php artisan key:generate</span></code></pre></div><p>We depend on<code>composer.lock</code> as being part of this. One key thing here is to never reference<code>dev-master</code> in your composer.json file. Please make sure you use the MAJOR version that you want and let itself updated at the MINOR version levels<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p></p></li></ul><p>Okay, now we have the system setup, PHP, MySQL, Composer files installed, and the<code>.env</code> setup.</p><blockquote><p>We&rsquo;re sucking diesel now!</p></blockquote><p>Now let&rsquo;s check our code for &ldquo;quality.&rdquo; Before we do that, let&rsquo;s ask what quality is? Some of it is opinion-based, but as a team, something is better than nothing. A bar, a standard, something you all can agree to. The choices I show here are used in actual day to day work and does not slow down the team. But at the same time, it catches those little things and helps us to have consistent code that we can all share the workload on.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Setup Done now to test and lint the code</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Run PHPMD</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">phpmd app GitHub phpmd.ruleset.xml</span></code></pre></div><p>To begin with, we use<a href="https://phpmd.org">PHPMD</a> as a simple way to verify some standards and or quality. There is a ruleset file that the team can
modify as needed.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Run linting to make sure it is worthwhile before NPM</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">phpstan</span><span style="color:#f92672">run</span>: |<span style="color:#e6db74"/><span style="color:#e6db74"/><span style="color:#ae81ff">./vendor/bin/phpstan analyse</span></code></pre></div><p><a href="https://github.com/phpstan/phpstan">PHPStan</a> is a Static Analysis Tool</p><blockquote><p>PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.</p></blockquote><p>It can catch many little things that our Unit tests (more on those in a moment) may not catch. Another option is<a href="https://github.com/nunomaduro/larastan">LaraStan</a> to help with the more specific Laravel code styles that may throw off PHPStan. Note we are not &ldquo;boiling the ocean&rdquo; here, we are setting things to levels that are &ldquo;good enough&rdquo;. Finding the right balance for your team is key here.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Again another lint before we do the js build</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">PHP Code Style (phpcs)</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">chindit/actions-phpcs@master</span><span style="color:#f92672">with</span>:<span style="color:#f92672">cli</span>:<span style="color:#e6db74">"--standard=PSR12"</span><span style="color:#f92672">dir</span>:<span style="color:#ae81ff">app/</span></code></pre></div><p>This one will help with linting, and some agreed to standards amongst the team. This makes our PR process not about looking at style but looking at logic.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Test with phpunit</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --coverage-clover clover.xml</span><span style="color:#f92672">env</span>:<span style="color:#f92672">DB_PORT</span>:<span style="color:#ae81ff">${{ job.services.mysql.ports['3306'] }}</span><ul><li><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Do we pass the coverage amount</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">vendor/bin/coverage-check clover.xml 60</span></code></pre></div><p>Okay, this is the big one-time to PHPUnit test. Sixty percent is a bit low. I think 70% is a better goal. I will quote Kent Beck about 100%. Also note we focus on the<a href="https://martinfowler.com/bliki/UserJourneyTest.html">Happy Paths</a></p><img src="images/kent.png" width="800" class="center"/></ul><hr><p>No Dusk tests? Right, so I might add Dusk for some End2End. The work I do day to day depends on Python Pytest for End2End testing. Since those projects have an embedded QA person, they tend to know Python. Dusk is fantastic and there are actions running selenium and what not, so it should plug in fine. Maybe I will come back later to this. If this app had a JavaScript framework like VueJS I would not use Dusk I would use Jest or some other well-known testing framework for JavaScript. Since this app is Livewire, I depend on its testing at the PHPUnit level, but I do see the value here of some e2e testing in Dusk.</p><p>Okay, so that is it; you now have these automations running with every PR. Let&rsquo;s see what a PR looks like.</p><h3 id="step-two-using-github-branch-protection">Step Two: Using GitHub Branch Protection</h3><p>First, we have to get GitHub into a place that &ldquo;forces&rdquo; a PR flow. Honestly, a team should have &ldquo;trust&rdquo; enough maybe not to do this but two things here. One it prevents accidents. We have all been on the wrong branch before and pushed up without seeing. Second it can help with management to know there are guardrails.</p><img src="images/branches.png" width="1200" class="center"><p>We set the rule to match our trunk branch<code>main</code>
We make sure that all Pull Requests require someone to create a PR beforehand and have one approver. Finally, we add this one Status check to pass before we can merge this into trunk.</p><p>Below is an example.</p><img src="images/pr_ui.png" width="1200" class="center"><p>What we get here is a Pull Request interface to see the critical aspects of this workflow.
The upper right corner will be a Green &ldquo;Review Pr&rdquo; button if another team member was looking at this PR.</p><p>The middle section shows the running state of the Actions we made above and if they pass or fail. If they fail, then no matter what, we can not merge this easily.</p><p>Lastly is the &ldquo;break glass&rdquo; button to merge the PR if you are an admin. This will be Green if your PR is approved and the Actions are all passing.</p><p>That is it really for the PR. Review, comment, or approve, and your team is ready to have a high-speed flow to ensure quality is in from the start.</p><h2 id="final-thoughts">Final Thoughts</h2><h3 id="tldr">tl;dr</h3><p>Take time to automate and place tools from the start of the chain in place to make sure quality is baked in. As your deploy code to production multiple times a day (coming in part two of this), you will see how important this is to speed and stability. And Actions let you do this easily.</p><h3 id="enterprise">Enterprise</h3><blockquote><p>Developers should be empowered to do ops, and this is a great place to start.</p></blockquote><p>I mention this above and just want to take a moment to say that even a solution this simple is better than nothing. Developers should be empowered to do ops, and this is a great place to start. Actions do not require different teams to approve or implement. It can streamline the work it takes to innovate, and innovation at this level will work its way up to the business as the data in Accelerate shows over and over again.</p><h2 id="references">References</h2><h2 id="links">Links</h2><ul><li><a href="https://github.com/alnutile/codenames">Example Repo</a></li><li><a href="https://alfrednutile.info/posts/sod/">Intro Post to all things State of DevOps</a></li><li><a href="https://github.com/shivammathur/setup-php">PHP Actions</a></li></ul><h2 id="follow-up">Follow Up</h2><ul><li>I will work on using CodeClimate as a code check action since this works with so many languages and seems to plugin easily using docker</li></ul><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn:1" role="doc-endnote"><p><a href="https://www.mindtools.com/pages/article/build-measure-learn.htm">https://www.mindtools.com/pages/article/build-measure-learn.htm</a><a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:2" role="doc-endnote"><p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912</a><a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:3" role="doc-endnote"><p><a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">State of DevOps Report 2019</a><a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:4" role="doc-endnote"><p><a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339">Accelerate</a><a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:5" role="doc-endnote"><p>(<a href="https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D">https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D</a>)<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:6" role="doc-endnote"><p><a href="https://semver.org">Semantic Verision</a><a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li></ol></section></description><tags>laravel, ci, cd, accelerate, devops</tags></item><item><title>Being on Offense When it Comes to Day to Day Scheduling</title><link>https://alfrednutile.info/posts/scheduling/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/scheduling/</guid><description><img src="images/featured-time.png" width="800" class="center"><blockquote><p>How do we go on the &ldquo;offensive&rdquo; leaving behind what has only become a &ldquo;defensive&rdquo; effort to save our day from becoming unproductive?¬†¬†Leaving us at the end of the day feeling like we need to make up some time after work or the weekend</p></blockquote><p>This post will be a look at how to manage your time in the midst of what can seem to be endless distractions and too many things needing to be done at once. It may seem mostly from a developer&rsquo;s perspective, but it might help others who feel like they no longer have enough time to focus during the workday to get their actual work done. In the end, I hope to show that part of being a professional developer or many other roles is knowing your limitations of time. Knowing your limits, you can say &ldquo;Yes&rdquo; to requests with confidence and &ldquo;No&rdquo; to requests because you can see the more negative significant impact of saying yes will have on the project and on you as a professional.</p><h2 id="day-to-day-popcorn-interactions">Day to day &ldquo;popcorn&rdquo; interactions</h2><p>Even before all the chat systems we now use, the day could quickly have been filled with numerous interruptions. Working in an office with your teammates knocking on your door for small talk while you are working through complex coding logic only to have it all topple over like a house of cards when that person asks, &ldquo;how was your weekend&rdquo; or &ldquo;have you see the show‚Ä¶.&rdquo; Or &ldquo;what are you working on?&rdquo;</p><p>And now, with these chat systems as an integral part of our remote work-life, we further have our time filled with &ldquo;obligations&rdquo; to respond to others. How do we go on the &ldquo;offensive&rdquo; leaving behind what has only become a &ldquo;defensive&rdquo; effort to save our day from becoming unproductive?¬†¬†Leaving us at the end of the day feeling like we need to make up some time after work or the weekend (btw, I typed workend here by accident, hmm). Or maybe even worse, feeling like you are no longer able to experience those creative flows and those days that leave you with a sense of accomplishment.</p><h2 id="setting-expectations">Setting expectations</h2><p>To begin with, I want to first make clear that this strategy will not try to achieve an eight-hour day of total flow or focus. You will never get there, nor do you need to. Sure, you might have enjoyed that at the start of your career, but looking back, I think many of those hours working had really been learning your skills, so that what took eight hours then takes two hours now. This does not mean you have six hours to do more. But my goal is to help you find those two to four hours a day to once again have that feeling that you created something or completed something that really was the work you knew you had to do.</p><p>With this in mind, part of the work is figuring out how to manage those other hours you have in the day to consistently protect the hours you need to get your job done. One thing I think that has to be realized here is the &ldquo;flow&rdquo; that you might have experienced in the early years; hacking on code for eight hours a day is actually to your detriment today. Anyone working on a feature or project needs time to check out from &ldquo;the flow&rdquo; to make sure they are still on target. This &ldquo;small batch&rdquo; flow is key to pivot and not getting so attached to your work that you avoid change.</p><blockquote><p>In software organizations, the capability to work and deliver in small batches is especially important - Forsgren PhD, Nicole; Humble, Jez; Kim, Gene. Accelerate (p. 131)</p></blockquote><blockquote><p>Lean manufacturers discovered the benefits of small batches decades ago. - Ries, Eric. The Lean Startup: How Today&rsquo;s Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses (p. 186).</p></blockquote><h2 id="scheduling">Scheduling</h2><p>Depending on your situation, there are different options here. Sometimes you are working on a feature with deadlines and have to get a certain amount of work done in a certain amount of time. But even then, you have to communicate with your boss about your progress or lack of it. Doing this in a scheduled manner can help you get lost in work and have one of those &ldquo;wow, what happened to the day&rdquo; moments not checking in with anyone to proactively give them a sense of the status of the work in progress. This puts you in the &ldquo;offensive&rdquo; mode by proactively giving reports about the status of the work being done. A manager should listen to your situation, and with your help, assess if an update should be given to the product owners. Also giving your team time to consider the overall timeline and not end up having to pull all-nighters just to create something that is a fraction of what it should have been.</p><blockquote><p>By creating a safer system of work, the value they created included fewer late night cram sessions, with more time to develop new, innovative features. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 137)</p></blockquote><p>To do this, break up your day into chunks ahead of time. For example, Monday, the first thing is to set up your calendar for all the times you need to get the work done for the week. For example, if you work better in the morning, protect that with your life. Need to take a walk in the day to get going again, schedule that in. You need to put this in a system so when you are asked if you can attend meeting x or y you can say &ldquo;No&rdquo; and then suggest options. Either way, part of being a professional is knowing what it takes to produce professional-level work. And staying up late at night when you are tired and worn out from a day of meetings will not produce that level of work ever.</p><blockquote><p>part of being a professional is knowing what it takes for you to produce professional-level work</p></blockquote><p>Again you are not blocking out six hours or four hours. Aim for small batches of forty-five-minute chunks. During that time, close all chat rooms, do not multitask (more on that shortly), close email, close Twitter, close all social networks, etc. Turn off phone notifications (you can typically set your phone to allow calls from people in your contact even when silenced). Then after this time is up, open all those up again, work comms especially and see if anything needs your attention. Or walk, stretch, do those other things that make you able to work well. For me, immediately after coming out of a 45-minute flow, I will write in my notepad (Evernote, Bear, Notes, whatever) what I was working on and where I left off; this way I can more easily get back into it after the check-in phase.</p><h2 id="something-came-up-i-must-do-it-now">Something came up I must do it now?</h2><p>Those moments that you do come up for air and look at all the different communication channels and some things need your attention; what do you do? Well, each situation will vary, but here are some ways to assess and manage them.</p><p>First, chat systems like Slack, Teams etc. are good tools, but sometimes you can save time by just taking a moment to do audio and if needed, video with the person making the request. Then you can talk with them about when do they really need this request to be taken care of. Sometimes just by having the moment of more personal communications, everyone can take a breath and truly assess how urgent the situation is.</p><p>Then if it is something that truly needs to be done now, you should take a moment to look at your schedule. If there is something else due this week and you now no longer have time to do that, outside of working the weekend or late at night, and this person is your boss, let them know. Sometimes managers need to hear that cost to what they are asking. &ldquo;If I do this today that that other feature can not get done till next week, and the chain effect goes on from there!&rdquo;.</p><blockquote><p>Saying &ldquo;Yes&rdquo; to everything is not going to help anyone in the long run.</p></blockquote><p>Saying &ldquo;Yes&rdquo; to everything is not going to help anyone in the long run. As you are starting out, you may feel this is key to getting more work, or getting ahead, and honestly, it might be. Still, at some point, part of being a professional is knowing when the direction of the situation will have a negative impact on the project. This can be from you knowing you have to cut corners in the code or security or what not to get the other work done. Or knowing that you have to work late nights and weekends will lead to less quality work, and eventually, you will be burnt out. Come to think of it, most of my &ldquo;oh carp moments, e.g. a deleted database, deleted application, destroyed server, etc., happened when I was tired and working late or lacked sleep.</p><p>Another thing to consider is that people on the other end of the request, once they understand how busy you are and know that you can give it your full attention at such a time, understand and be ok with you not doing it now. Ironically I was on the other end of this last week, assuming my important task would have been first on a colleague&rsquo;s schedule. One video chat later reminded me he has a few other things on his immediate list to get to first, and I was reminded my request is not the only one on his plate.</p><p>Second, by actually asking when is this needed, you can see how it can fit into the schedule you already made for your week. One good way to do this is to say, &ldquo;What is the latest this can get done&rdquo; and then see how it fits into your schedule. Heck, you might have an opening tomorrow, and they want it next week, but you can just get it done. Because you took time to slot out your schedule, you can be more &ldquo;offensive&rdquo; in your scheduling than defensive and reacting to all the &ldquo;newest&rdquo; things coming in.</p><h2 id="saying-no">Saying No</h2><p>Saying &ldquo;No&rdquo; or &ldquo;Not now&rdquo; for some might be hardest part of all of this, especially when we are coming up in your career. It may be scary since you want to be the go-to person the next time something important comes up. But saying no the right way means saying yes to the overall goal of a project, team, and company culture. You are saying &ldquo;no&rdquo; not because you do not want to do something but because you are actually saying &ldquo;no&rdquo; to some other item on your calendar by saying &ldquo;yes&rdquo; to this request. You are saying &ldquo;no&rdquo; to the quality of another feature down the line. Or you might be saying &ldquo;no&rdquo; to some training you had on your schedule for a month now. Or maybe saying &ldquo;no&rdquo; to technical-debt, or the personal time needed so you can remain healthy.</p><img src="images/saying-no.png" width="600" class="center"><p>One immediate place to consider saying &ldquo;no&rdquo; to is meetings. Not to all meetings but ones you do not have to be in. I know it can feel nice at first to be asked to meetings, but many of them you really are not needed. Let&rsquo;s say you have a standup every day and retro at the end of two weeks. Then you have a planning meeting as well that can be one to two hours long. Your day and week already have several scheduled meetings breaking it up. And after you put your 45-minute chunks on the calendar, you might not have a ton of other time for these impromptu meetings. So you can say no to those meetings, or if the meeting is needed, try to tie it to the end of another meeting, so you are not having two meetings breaking up your time.</p><p>Or course sometimes the meeting is required and takes hours, again a manager needs to realize the cost of this. This meeting cost of getting a feature X done this week and feature Y next week! Do not assume they know this. And if that manager can not consider that cost or thinks you can just work the weekend, you really need to consider if this is the right team for you.</p><h2 id="walk-away-from-chat">Walk away from chat</h2><p>When will email go away for work communications now that most of it takes place in chat? Most of us are currently on some type of chat system for work, often trying to manage several conversations at once because we do not want to wait for the other person to write back. Sure chat is a very fantastic tool helping us more easily share information when a phone call or email would be too much or too slow, but it has its limits.</p><p>As mentioned above, the key to any of this is turning these things off, including chat when you start your focus time. In forty-five minutes flow, NOTHING is going to happen that you can not miss. Sure, you need to keep up with things but NOT every minute of the day and not five different things at once.</p><p>When you are on your &ldquo;chat&rdquo; time, I would suggest knowing when it is best to turn a chat question into an audio call (video can sometimes depend on the situation). This can save you time waiting in the chat for someone to type back and prevent the complications from trying to explain something complex in chat.</p><img src="images/waiting.png" width="600" class="center"><p>Even though, for me, there is sometimes a productivity buzz that comes popping around multiple chats &ldquo;helping out.&rdquo; But rarely does that last long or end up going well, from my experience. Either I lose momentum for the work I am supposed to be getting done, or before long, I get wires mixed in one chat vs. another and end up causing more work and confusion than I might have saved.</p><h2 id="too-much-wip">Too much WIP</h2><p>Another common issue with saying &ldquo;yes&rdquo; to all things is you end up having too much work in progress or WIP. I will quote a couple of books about this to show that it is not a good place to be. Hopefully this will help you to see that in saying &ldquo;No&rdquo; you are preventing this condition from happening which is proven to lead to projects and teams failing.</p><blockquote><p>To enable fast and predictable lead times in any value stream there is usually a relentless focus on creating a smooth and even flow of work, using techniques such as small batch sizes, reducing work in process (WIP), preventing rework to ensure we don‚Äôt pass defects to downstream work centers, and constantly optimizing our system toward our global goals.- Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 53)</p></blockquote><blockquote><p>Small batch sizes result in less WIP, faster lead times, faster detection of errors, and less rework. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (p. 69)</p></blockquote><blockquote><p>Almost every Lean Startup technique we‚Äôve discussed so far works its magic in two ways: by converting push methods to pull and reducing batch size. Both have the net effect of reducing WIP. - Ries, Eric. The Lean Startup: How Today&rsquo;s Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses (p. 201)</p></blockquote><h2 id="embrace-interruptions">Embrace interruptions</h2><p>Part of this strategy is something it took me a while to realize, and maybe having a kid helped with this, you will be interrupted, and it will impact your focus; the question is how to minimize the impact. Be rigid enough that you create the space you need to get your work done, but at the same time be flexible enough to respond to these interruptions knowing that since you planned out your schedule, you can shift things around.¬†¬†And if all the pieces do not fit, you can communicate to your boss what will be impacted, days before it becomes a &ldquo;surprise.&rdquo;</p><blockquote><p>Be rigid enough that you create the space you need to get your work done, but at the same time be flexible enough to respond to these interruptions</p></blockquote><p>As I noted above, I have a scratch pad that I jot down notes about &ldquo;Where I left off&rdquo; so I can jump back in after the call or break. Other than that, depending on the size of the interruption, you might need to adjust the rest of your schedule. Trying to make up the time rarely goes well, from my experience. Sure, you can sacrifice that lunch away from the desk or mid-day walk, but you are in a marathon, not a sprint.</p><h2 id="the-illusion-of-multitasking">The illusion of multitasking</h2><p>Ok, this is a tricky subject. So many people swear they can do this. So, for now, I will just talk to those who feel it is not working for them.</p><p>I would point you to these books:</p><blockquote><p>Studies have shown that the time to complete even simple tasks, such as sorting geometric shapes, significantly degrades when multitasking. Of course, because our work in the technology value stream is far more cognitively complex than sorting geometric shapes, the effects of multitasking on process time is much worse. - Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook (pp. 65-66)</p></blockquote><blockquote><p>The truth is wholly the opposite in almost every circumstance, if neuroscience is to be believed. In study after study, we‚Äôve found that we are slower at completing tasks when we switch from one activity to another than we are when we simply repeat the same activity. In other words, if you shut down every tab of your browser, mute your phone, and close your email inbox, you‚Äôll finish the memo you‚Äôre writing in significantly less time. - Headlee, Celeste. Do Nothing (p. 95)</p></blockquote><blockquote><p>The truth is wholly the opposite in almost every circumstance, if neuroscience is to be believed. In study after study, we‚Äôve found that we are slower at completing tasks when we switch from one activity to another than we are when we simply repeat the same activity. In other words, if you shut down every tab of your browser, mute your phone, and close your email inbox, you‚Äôll finish the memo you‚Äôre writing in significantly less time. - Headlee, Celeste. Do Nothing (p. 95). Potter/Ten Speed/Harmony/Rodale. Kindle Edition.</p></blockquote><h2 id="summary">Summary</h2><p>I wrote this because it took me a while to really understand how important managing my schedule is. Hopefully, with the above information, you can start to see your day, week, and weeks adding up to getting &ldquo;more&rdquo; of the right things done both for work and for your career and health.¬†¬†Feel free to join our Stratus Open Office hours if you have any questions or post on Yammer&rsquo;s comments.</p></description><tags>devops, day-to-day</tags></item><item><title>Ongoing: Links and Notes About DevOps Transformation Using the Accelerate Data and Strategies</title><link>https://alfrednutile.info/posts/sod/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/sod/</guid><description><p>Next time I needed this info, I just wanted to make sure that I have the links I need concerning the Accelerate book and Software Delivery Performance. So I will use this page to continue to add info about these resources.</p><p>The links below really are all related as the authors work together in the different books, videos and research papers.</p><h2 id="tldr">TL;DR</h2><p>The most critical link<a href="https://www.devops-research.com/research.html#capabilities">State of DevOps Reports</a></p><p>As they go into articles that are key to making a great team, a great culture, and a thriving company</p><ul><li><a href="https://cloud.google.com/solutions/devops/devops-culture-transformational-leadership">DevOps culture: Transformational leadership</a></li><li><a href="https://cloud.google.com/solutions/devops/devops-culture-job-satisfaction">DevOps culture: Job satisfaction</a></li><li><a href="https://cloud.google.com/solutions/devops/devops-culture-westrum-organizational-culture">DevOps culture: Westrum organizational culture</a></li></ul><p>And so much more.</p><h2 id="accelerate-book">Accelerate Book</h2><p>First, the data supporting the following makes it all worth trying since it is not a leap of faith but trust in data. And if this data is correct, then along the way, we can avoid many of the pitfalls I have seen or been a part of in the day-to-day delivery of software. While at the same time creating a culture of learning and growing and inevitable success for the company.</p><img src="images/accelerate_book.png" width="300" float="left"><p>Purchase<a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339">here</a></p><p>This book and it&rsquo;s data lead into or supports a lot of the videos and books below.</p><blockquote><p>At the heart of this acceleration is software - Forsgren PhD, Nicole; Humble, Jez; Kim, Gene. Accelerate (p. 36). IT Revolution Press. Kindle Edition.</p></blockquote><h2 id="software-performance-measured">Software Performance Measured</h2><p>With the above, we can measure the results of good habits.
The outcome is not the metrics but just data to show how we are doing and what habits and systems we might need to practice or adjust.</p><ul><li>Working in small batches</li><li>Releasing often to production</li><li>Pain-free deployment</li><li>Test coverage</li><li>Automation (a key factor in many of the high and elite performing teams)</li><li>Minimal change approval process</li><li>A culture that learns from mistakes and does not punish</li><li>Shift left on security</li><li>Shift left on quality</li><li>Work in Process Limits</li><li>Customer Feedback</li></ul><p>And more, that the developers can work on in their day to day reducing
the focus on getting a feature done as quickly as possible, knowing that
in the long run, they are building a better product and culture that will lead to their company&rsquo;s long-term success and career.</p><h2 id="yearly-report-accelerate-state-of-devops">Yearly Report Accelerate State of DevOps</h2><p><img src="images/sodreport.png" alt=""/><p>The above chart comes from<a href="https://cloud.google.com/devops/">https://cloud.google.com/devops/</a>, but I have a shortcut to the PDF<a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">here</a></p><blockquote><p>Begin by focusing on the capabilities outlined in our research; they provide predictive guidelines to improve your technology delivery and deliver value. Start with foundations: Basic automation (such as version control and automated testing), monitoring, clear change approval processes, and a healthy culture.</p></blockquote><h2 id="the-four-key-metrics-seen-in-the-above-report">The Four Key Metrics (seen in the above report)</h2><p>The above SOD report talks about many different data points to consider; below, I am sharing the below to focus for a moment on these metrics that I think can, right now, help you begin to measure where you are and grow along the way.</p><p>Page 18 of the<a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">report</a></p><img src="images/sod_metrics.png"><p>You can read and try these for your team<a href="https://www.devops-research.com/quickcheck.html">here</a></p><p>Or use their opensource system to measure your own<a href="https://github.com/GoogleCloudPlatform/fourkeys">here</a></p><h2 id="culture">Culture</h2><p>All these books and papers have a focus on culture, in the end a culture of Trust is the goal and without that none of this will work.</p><p>The chart that caught my attention is this one:</p><img src="images/culture.png" width="800"><p>The goal is to build the Generative culture. This is the only way to run at the &ldquo;Elite&rdquo; speed since this has a realistic reaction failure which comes from trying new things, experimenting, and taking responsibility.</p><p>Again from what I see most of what is holding teams back is not the technology.</p><h2 id="roi">ROI</h2><img src="images/roi.png" width="500"><p><a href="https://cloud.google.com/resources/roi-of-devops-transformation-whitepaper">Sign Up for Whitepaper</a></p><p>This one I am still wrapping my head around.</p><blockquote><p>Traditionally, IT has been viewed as a cost center and, as such, was expected to justify its costs and return on investment (ROI) upfront. However, IT done right is a value driver and innovation engine. Companies that fail to leverage the transformative, value-generating power of IT risk being disrupted by those who do. What has been missing is an analytical, data-driven framework to forecast the value and justify investment in DevOps transformations. This white paper helps to fill that gap. While the methodology is not exhaustive, it does outline important considerations.</p></blockquote><p>Maybe a few more reads, and I will come back with more quotes and links.</p><h2 id="videos">Videos</h2><p>There are some great videos on YouTube by the authors. They continue to iterate their work and share the results at conferences.</p><p>I am collecting a list<a href="https://www.youtube.com/playlist?list=PLL8JVuiFkO9KNxX1VPT04-rAZqRI_G1j4">here</a></p><p>Also, they give you a feel for how authentic these authors are in their efforts.</p><p>They come from the industry, they are not just speaking about theory, but they have seen the good and the bad.</p><h2 id="devops-hanbook">DevOps Hanbook</h2><img src="images/devops_handbook.png" width="400"><p>This is my current read and it is full of both encouraging and discouraging information. Discouraging in that I wish I read it years ago since it would have been great information to have along the way. And encouraging in seeing how common the struggles are like stressful deployments to production, weekend work hours, focusing on costs over speed, outsourcing the wrong things etc.</p><p>Some quotes I saved so far:</p><blockquote><p>‚ÄúNordstrom started optimizing for speed instead of merely optimizing for cost.‚Äù ‚Äî The DevOps Handbook:: How to Create World-Class Agility, Reliability, and Security in Technology Organizations by Gene Kim, Jez Humble, et al. https://a.co/aA64V05</p></blockquote><blockquote><p>‚Äú10 Deploys per Day‚Äù by John Allspaw and Paul Hammond, Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook: (p. 11). IT Revolution Press. Kindle Edition.</p></blockquote><p>Is not just for Flickr, I am part of a team of only 8 developers and we are averaging 4 deployments to production a day. The site has numerous users using it during those hours.</p><p>Lastly as seen in the quote below, allowing developers to perform using these methodologies leads to the success of the company.</p><blockquote><p>Furthermore, high performers were twice as likely to exceed profitability, market share, and productivity goals. And, for those organizations that provided a stock ticker symbol, we found that high performers had 50% higher market capitalization growth over three years. Kim, Gene; Humble, Jez; Debois, Patrick; Willis, John. The DevOps Handbook: (p. 37). IT Revolution Press. Kindle Edition.</p></blockquote><h2 id="continous-delivery-book">Continous Delivery Book</h2><p>This book is the one that kicked it off for me years ago, thanks to<a href="https://www.linkedin.com/in/robsherali/">Rob Sherali</a>. This book defines the technical how and why behind automating your delivery pipeline.</p><blockquote><p>Continuous Delivery Sounds Great, but Will It Work Here?: It&rsquo;s not magic, it just requires continuous, daily improvement at all levels.</p></blockquote><img src="images/ci_book.png" width="400"><p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">here</a></p></description><tags>devops, accelerate</tags></item><item><title>CentOS or RedHat and Laravel</title><link>https://alfrednutile.info/posts/167/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/167/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/b0ourzj0umlrduq/laravel_redhat.png?dl=0" alt=""/><p><strong><a href="https://serversforhackers.com/an-ansible-tutorial">Got Ideas from here An Ansible Tutorial</a></strong></p><p>Just wrapped up setting up two RedHat servers (version 7) and one CentOS Virtual box so I could deploy a Laravel site.</p><p><strong>Code is<a href="https://github.com/alnutile/ansible-laravel-redhat">here</a></strong></p><p>Thanks to Ansible it was not as bad as it could have been.</p><p>I am not an ansible expert just getting into it as we need to do this more. What these scripts will do is</p><ul><li>Setup a CentOS Vagrant box</li><li>Setup a Server for Laravel and Queues SupervisorD</li><li>Setup up SSHD to be key based only you can remove this</li><li>Setup Cron to run scheduler</li><li>Setup SSL if you make the keys for this</li><li>Redirect to https for site</li></ul><h2 id="local-vm">Local VM</h2><p>Step one is to install Ansible on your Mac and then<code>vim /etc/ansible/hosts</code></p><p>In there I have</p><pre><code>[local]
192.168.1.22<p>[serverprod]
111.111.111.111</p><p>[serverstage]
111.111.111.111</code></pre><p>Local is the VM</p></p><p>I needed a local VM to run CentOS since I did not have RedHat but it is close enough. I downloaded the ISO installed it the old fashion way on VirtualBox then I ran my ansible scripts against it. You can see this line in the readme.md</p><pre><code>ansible-playbook --limit local -s centos.yml -u centos -k --ask-sudo-pass --extra-vars "user=centos"</code></pre><p>Now that that is set I can hit it with my nginx config</p><pre><code>ansible-playbook --limit local -s nginx.yml -u centos --extra-vars "user=centos version=centos"</code></pre><p>Okay now it should work?</p><h2 id="redhat">RedHat</h2><p>As I note in the readme.md I then setup the RedHat servers. They where a bit tougher but it all worked out. Note SELinux might be on that is why I have some lines to allow things but they may not be enough for your setup.</p></description><tags>laravel, devops</tags></item></channel></rss>