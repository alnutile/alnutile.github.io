<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>phpunit on Alfred Nutile</title><link>https://alfrednutile.info/tags/phpunit/</link><description>Recent content in phpunit on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/phpunit/index.xml" rel="self" type="application/rss+xml"/><item><title>PHPUnit CodeCoverage</title><link>https://alfrednutile.info/posts/260/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/260/</guid><description>PHPUnit CodeCoverage PHPUnit CodeCoverage
There is a ton of information about your code PHPUNit CodeCoverage can provide. At the root just making sure your coverage is at a certain level and if not where is it lacking.
With it&amp;rsquo;s xml output I use a script found here to check during our TravisCI builds if the code is meeting a required level.
Here is a gist of that script here and here is the .</description></item><item><title>Testing a trait with PHPUnit</title><link>https://alfrednutile.info/posts/212/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/212/</guid><description>In an effort to start recording test coverage using vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover I had some issues with traits being seen.
I tried numerous approaches my default being just to Use the trait in the test class. I ended up with this as I found some online info about trait testing here that references a now missing post by Sebastian Bergman the maker of PHPUnit
&amp;lt;?php
use Symfony\Component\Yaml\Yaml;
/**
* Test class for {@see PfawsYaml}.</description></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.
In this example I had a Class responsible for saving data, we&amp;rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&amp;rsquo;ll call FooProcessData.</description></item><item><title>Codeship and Laravel for Continuous Integration</title><link>https://alfrednutile.info/posts/148/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/148/</guid><description>Getting going on Codeship and Laravel is pretty easy.
Once you setup codeship to work with your github account just pull in your repo and set your Testing scripts as follows. (they have a ui for ENV variables as well)
Codeship Testing Settings [easier copy paste bottom of article] You can do this in their UI as well. But at this point I am
Setting up the composer token for any private repos that application might have Setting up .</description></item><item><title>Easily Create Fixture Data from Remote Services and Refresh Mock Data</title><link>https://alfrednutile.info/posts/145/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/145/</guid><description>Oops Codeship and Laravel is here
Easily Create Fixture Data from Remote Services and Refresh Mock Data We have integration tests that hit remote apis like Github, S3, DynomoDB, our own APIs etc and we do not want to hit those during out tests but we also want to make sure we have the real data. So when one of those APIs change then our mock data can be refreshed to see if our systems really work with it.</description></item><item><title>Timing PHPUnit Tests</title><link>https://alfrednutile.info/posts/127/</link><pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/127/</guid><description>Maybe there is a better way to do this? But using this article https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/ I was able to find a hanging test.
Setup I already have an xml file at the root of my project so I added to that that listener.
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;phpunit backupGlobals=&amp;quot;false&amp;quot;
backupStaticAttributes=&amp;quot;false&amp;quot;
bootstrap=&amp;quot;tests/bootstrap.php&amp;quot;
colors=&amp;quot;true&amp;quot;
convertErrorsToExceptions=&amp;quot;true&amp;quot;
convertNoticesToExceptions=&amp;quot;true&amp;quot;
convertWarningsToExceptions=&amp;quot;true&amp;quot;
processIsolation=&amp;quot;false&amp;quot;
stopOnFailure=&amp;quot;true&amp;quot;
syntaxCheck=&amp;quot;false&amp;quot;
&amp;gt;
&amp;lt;listeners&amp;gt;
&amp;lt;listener file=&amp;quot;./app/tests/listeners/TestTimesListener.php&amp;quot; /&amp;gt;
&amp;lt;/listeners&amp;gt;
&amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/BehatEditor/Tests&amp;lt;/directory&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/TheHub/Tests&amp;lt;/directory&amp;gt;
&amp;lt;exclude&amp;gt;./app/tests/BehatEditor/Tests/Migrations&amp;lt;/exclude&amp;gt;
&amp;lt;exclude&amp;gt;.</description></item><item><title>PHP quick fixture data for phpunit testing</title><link>https://alfrednutile.info/posts/117/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/117/</guid><description>You can use VCR or other libraries to make fixture data. But sometimes you can just make the request and save the results using this technique. From then on you mock and return the data.
Get the data. In this example I had a Client that would get data and return it for import. I was testing out the class that would take this data and import it and do other things.</description></item><item><title>Speeding up PHPunit tests and Behat in Laravel for Database refreshes</title><link>https://alfrednutile.info/posts/112/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/112/</guid><description>This article covers some good tips on this. Ideally you do not hit the database in unit tests but sometimes you do. Also in behat it hits the db all the time since it is at the Acceptance level.
Sqlite It is a great database and works. We easily can use it on running tests. When seeding the db I have my main seeding class doing this
&amp;lt;?php
use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
class DatabaseSeeder extends Seeder {
/**
* Run the database seeds.</description></item><item><title>Quick Gulp file to run php-unit tests</title><link>https://alfrednutile.info/posts/85/</link><pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/85/</guid><description>MUCH BETTER WAY HERE
This is setup for Laravel but can work for any app. Most of this is due to the great Laracasts on Gulp
Download and setup gulp
First make a package.json file in the root of your app and just put curly brackets in it.
touch package.json
vim package.json
//package.json
{
}
Then run the needed node commands
npm install -g gulp
npm install gulp --save-dev
npm install gulp-notify --save-dev
npm install gulp-phpunit --save-dev
Now the package.</description></item><item><title>Guard, Laravel and phpunit</title><link>https://alfrednutile.info/posts/51/</link><pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/51/</guid><description>If you already have rvm install this should be easy. Otherwise google that pain.
I set my rvm to ruby 2.0 but not sure if needed
rvm --default use 2.0
http://rvm.io/rubies/default
Then I made a Gemfile in the root folder and add this content
and run bundle install
After that was in place I ran guard init to get going and then pasted this code into the Guard file it made.</description></item></channel></rss>