<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serverless on Alfred Nutile</title><link>https://alfrednutile.info/tags/serverless/</link><description>Recent content in serverless on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/serverless/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Python Lambda behind and ALB</title><link>https://alfrednutile.info/posts/266/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/266/</guid><description>Just a quick note to self about ALB and Lambda. When using Lambda behind and ALB for routing your response has to be formatted properly else you will get a 502.
https://pypi.org/project/alb-response/ solved this problem.
from alb_response import alb_response
def lambda_handler(event, context):
response_dict = process_the_event(event)
return alb_response(
http_status=200,
json=response_dict,
is_base64_encoded=False,
)
The results are easy enough to do by hand but I had a bit of time really finding out the format to respond with other than JavaScript and that casing there was a bit confusing.</description></item><item><title>Lambda and Github Webhooks</title><link>https://alfrednutile.info/posts/245/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/245/</guid><description>Related to https://developer.github.com/webhooks/ and pushing data to Lambda AWS.
I can check the token by just having this check in my handler.
const crypto = require('crypto');
exports.handler = (event, context, callback) =&amp;gt; {
let headers = event.headers;
let body = event.body;
if (typeof body === 'object') {
body = JSON.stringify(event.body);
}
let github_event = headers['X-GitHub-Event'];
if (
github_event === undefined ||
typeof github_event !== 'string' ||
github_event.length &amp;lt; 1
) {
callback(null, {
statusCode: 400,
body: 'Missing X-GitHub-Event'
});
return;
}
let github_signature = headers['X-Hub-Signature'];
if (
github_signature === undefined ||
typeof github_signature !</description></item><item><title>Serverless Python and Example App WIP</title><link>https://alfrednutile.info/posts/229/</link><pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/229/</guid><description>There are good docs on this http://serverless.com platform. For Python
https://serverless.com/framework/docs/providers/aws/examples/hello-world/python/#hello-world-python-example https://github.com/serverless/examples I will cover some items here I need to do time after time.
Tagging ENV settings Testing Testing Example file test_cf_backuper.py:
import unittest
import mock
from mock import MagicMock
from get_buckets import GetBuckets
import boto3
real_client = boto3.client('cloudformation')
import logging
import json
from CFBackuper import CFBackuper
logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.DEBUG)
class TestHandler(unittest.TestCase):
def test_get_one_template(self):
client = CFBackuper()
results = client.</description></item><item><title>Serverless and Custom Tags for Resources</title><link>https://alfrednutile.info/posts/217/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/217/</guid><description>Because much of serveless.com is CloudFormation based, you can easily update existing resources. They talk about this feature here
For me this was required for adding tags
# you can add CloudFormation resource templates here
resources:
Resources:
ServerlessDeploymentBucket:
Properties:
Tags:
- { Key: &amp;quot;project&amp;quot;, Value: &amp;quot;${self:provider.project}&amp;quot; }
- { Key: &amp;quot;environment&amp;quot;, Value: &amp;quot;${opt:stage, self:provider.stage}&amp;quot; }
- { Key: &amp;quot;parent_project&amp;quot;, Value: &amp;quot;${self:custom.parent}&amp;quot; }
- { Key: &amp;quot;key_contact&amp;quot;, Value: &amp;quot;${self:custom.contact}&amp;quot; }
- { Key: &amp;quot;billing_ref&amp;quot;, Value: &amp;quot;${self:custom.</description></item><item><title>Serverless, AWS API Gateway and Authentication</title><link>https://alfrednutile.info/posts/214/</link><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/214/</guid><description>Just a note2self really.
Setting up Auth was super easy
As seen below I had to add to my serverless.yml authorizer
addQuote:
handler: quote/handler.add
events:
- http:
path: quote
method: post
cors: true
authorizer: aws_iam
authorizer: aws_iam
From here I then needed, in this case Postman, to pass an AWS KEY and SECRET made for this app.
When making the user I attached this Policy to the user
{
&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
&amp;quot;Statement&amp;quot;: [
{
&amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
&amp;quot;Action&amp;quot;: [
&amp;quot;execute-api:Invoke&amp;quot;
],
&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:execute-api:us-east-1:AWS_ID:*/dev/POST/quote&amp;quot;
}
]
}
I an easily make this in the serverless.</description></item></channel></rss>