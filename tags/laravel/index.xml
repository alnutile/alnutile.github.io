<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>laravel on Alfred Nutile</title><link>https://alfrednutile.info/tags/laravel/</link><description>Recent content in laravel on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Dec 2021 06:32:07 -0400</lastBuildDate><atom:link href="https://alfrednutile.info/tags/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Fixture Put Fixture Helpers for Laravel</title><link>https://alfrednutile.info/posts/get_put/</link><pubDate>Sat, 25 Dec 2021 06:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/get_put/</guid><description><p>I do a lot with fixtures when testing. This means I put files in the<code>tests/fixtures</code> folder that represet the JSON of what ever I am testing. For example maybe I hit an
API that returns</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">"foo"</span>:<span style="color:#e6db74">"bar"</span>
}</code></pre></div><p>And when I mock that API response I want to have that ready for me to use.</p><p>I then save it to the folder<code>tests/fixtures/foo.json</code> and can just use it.</p><p>To do that I just do the following.</p><h2 id="setup-a-helpersphp-file-in-your-app">Setup a helpers.php file in your app</h2><p>Add the file<code>app/helpers.php</code> for now with<code>&lt;?php</code> on top of it.</p><pre><code>&lt;?php</code></pre><p>Not to exciting yet!</p><p>Then add it to<code>composer.json</code></p><pre><code>File: composer.json
38: "autoload-dev": {
39: "psr-4": {
40: "Tests\\": "tests/"
41: },
42: "files": [
43: "app/helpers.php"
44: ]
45: },</code></pre><p>Now run<code>composer dump</code> and you are ready to add helpers to your app.</p><h2 id="add-get-and-put-helpers">Add get and put helpers</h2><p>To that file I add the getter and putter(?):</p><pre><code>&lt;?php<p>use Illuminate\Support\Facades\File;</p><p>if (!function_exists("put_fixture")) {
function put_fixture($file_name, $content = [], $json = true)
{
if ($json) {
$content = json_encode($content, 128);
}
File::put(
base_path(sprintf("tests/fixtures/%s", $file_name)),
$content
);
return true;
}
}</p><p>if (!function_exists("get_fixture")) {
function get_fixture($file_name)
{
$results = File::get(base_path(sprintf(
"tests/fixtures/%s",
$file_name
)));
return json_decode($results, true);
}
}</code></pre><p>and I make the folder<code>tests/fixtures</code></p></p><p>And now in my tests I can do this:</p><pre><code>put_fixture('meta_data.json', $response_from_api_as_array);</code></pre><blockquote><p>NOTE: Many apis have good docs that sometimes show a JSON response I can save. But somtimes I want a real response to save it so I hit the api ONCE from my test
and mock it from then on</p></blockquote><p>and I can use that later just like this</p><pre><code>get_fixture('meta_data.json', $response_from_api_as_array);</code></pre><p>This will simply put a file and get that file<code>tests/fixtures/meta_data.json</code></p><p>And the file will be JSON for example:</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">"foo"</span>:<span style="color:#e6db74">"bar"</span>
}</code></pre></div></description><tags>laravel, php, note2self, helpers</tags></item><item><title>Odd Livewire Error(s)</title><link>https://alfrednutile.info/posts/livewire/</link><pubDate>Tue, 17 Aug 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/livewire/</guid><description><p>Just keeping track of some nuances to LiveWire</p><h2 id="initialdatafingerprint">initialData.fingerprint</h2><p>The table with rows was not interating. The rows had two columns of for-each loops so
as always you need keys, but I think my mistake was not making the keys different
for either of them.</p><p>You can see the table below</p><pre><code>@foreach( $imports as $import)
&lt;tr class="bg-emerald-200"><pre><code> &amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ $import-&amp;gt;id }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ $import-&amp;gt;name }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;{{ optional($import-&amp;gt;source)-&amp;gt;type }}&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;@if($import-&amp;gt;file_path)
@livewire('download-import', ['import' =&amp;gt; $import], key('download-' . $import-&amp;gt;id))
@else
&amp;lt;div&amp;gt;no file&amp;lt;/div&amp;gt;
@endif
&amp;lt;/div&amp;gt;
&amp;lt;/td&amp;gt;
&amp;lt;td class=&amp;quot;border px-8 py-4&amp;quot;&amp;gt;
@livewire(&amp;quot;status-link&amp;quot;, [
'import' =&amp;gt; $import
], key('link-' . $import-&amp;gt;id))
&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
@endforeach</code></pre><p/></pre><p>The keys</p></p><pre><code>key('download-' . $import->id))</code></pre><p>and</p><pre><code>key('link-' . $import->id))</code></pre><p>Did not work when I was using<code>key($import->id)</code></p><p>The table and search all just stopped :(</p><p>Anyways hope this saves the future me an hour!</p></description><tags>laravel, livewire, note</tags></item><item><title>CI - GitHub Actions and Laravel (Part 1 of 3)</title><link>https://alfrednutile.info/posts/ci_cd_part_one/</link><pubDate>Sun, 23 May 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/ci_cd_part_one/</guid><description><blockquote><p>The point is GitHub Actions should be revolutionizing your team&rsquo;s workflows; if it is not, you are missing something important.</p></blockquote><p>This first post is part one of three. In this series I will cover the following topics.</p><ul><li>PT 1 CI - Simple Continuous Integration using GitHub Actions</li><li>PT 2 CD - Simple Continuous Deployment using GitHub Actions</li><li>PT 3 Security - Shifting Left on Security</li></ul><p>Please keep in mind that the repository and code below I am sharing is not an end product and will evolve. The &ldquo;Links&rdquo; section below will have many of the links needed.</p><p>If I do not get any interest in this post, I will not do PT 2 or PT 2 as I try to use Build Measure Learn<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> with writing these articles.<strong>¯_(ツ)_/¯</strong></p><p>By the end of this post, you will easily be able to add CI to your open-source project, independent private project, team project, or even, dare I say, &ldquo;enterprise&rdquo; project. ( more on that later 🤔)</p><p>I will reference material in numerous books and research papers you can see many of them<a href="https://alfrednutile.info/posts/sod/">here</a></p><h3 id="continuous-delivery-book">Continuous Delivery Book</h3><blockquote><p>The commit stage begins with a change to the state of the project—that is, a commit to the version control system. It ends with either a report of failure or, if successful, a collection of binary artifacts and deployable assemblies to be used in subsequent test and release stages, as well as reports on the state of the application. Ideally, a commit stage should take less than five minutes to run, and certainly no more than ten. Humble, Jez; Farley, David. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p></blockquote><p>This book is the<strong>&ldquo;why&rdquo;</strong> behind this article. You can not deliver quality code without a CI system that embraces automation and tooling to vet code quickly. To that end the company paying for this code can not succeed either with out this level of thinking.</p><blockquote><p>Those who excel at delivering profitability, productivity, and customer satisfaction survive. Anything less than excellence leads to failure. pg 32<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><blockquote><p>Continuous delivery for the sake of continuous delivery is not enough if you want your organization to succeed, however. It must be done with an eye to organizational goals such as profitability, productivity, and customer satisfaction. pg 49<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><blockquote><p>Our analysis this year shows elite performers are twice as likely to meet or exceed their organizational performance goals. Pg 54<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>These quotes make it clear that a company that says NO proper CI and CD is also saying NO to success. And most companies have to see the sentence &ldquo;We are a company that does x and happens to have a technology team&rdquo; flipped around to say, &ldquo;We are a technology company that happens to focuses on x.&rdquo;</p><h3 id="the-twelve-factor-app">The Twelve-Factor App</h3><img src="images/factor.png" width="800" class="center"><p>Read more about that<a href="https://12factor.net">here</a></p><p>This article is how I started years ago to consider any application I was building. In this post I am writing, CI will include the following principles.</p><ol><li>CodeBase</li><li>Dependencies</li><li>Config</li></ol><p>The article will use the repo<a href="https://github.com/alnutile/codenames">https://github.com/alnutile/codenames</a> as if it is an application. I mean it is, even though a very silly one.</p><p>We will in this case, focus more on the &ldquo;shifting left&rdquo; when it comes to &ldquo;quality and security&rdquo; and other goals like &ldquo;peer review-based approval process.&rdquo;</p><blockquote><p>We recommend that organizations move away from external change approval because of the negative effects on performance. Instead, organizations should &ldquo;shift left&rdquo; to peer review-based approval during the development process.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>I will apply some base GitHub Actions to the codebase to help confidence in quality and security from the start. By then end we will have the start of a CI system to help you and your team achieve &ldquo;Elite&rdquo; levels of performance.</p><img src="images/elite.png" width="1200" class="center"><h3 id="accelerate">Accelerate</h3><p>The book Accelerate<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> is not just a technology game-changer; it is a culture-changing strategy that can be implemented on any team today.</p><p>Just the habit of working in &ldquo;small batches&rdquo; will change the performance level of any team. This book will impact all parts of these three articles.</p><p>On that note, the only way to get to the &ldquo;Elite&rdquo; levels this book talks about is by putting CI and CD first. You have to believe in it, do it no matter how much time pressure is on your team because it will succeed in the long run. What will not succeed is cutting corners, building technical debt, and having too many non-automated processes between your code and going to production. All of this is proven by the data in this book and the ongoing reports it offers<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p><blockquote><p>We also see that elite performers automate and integrate tools more frequently into their toolchains on almost all dimensions. Although automation may be seen as too expensive to implement (we often hear, &ldquo;I don&rsquo;t have time or budget to automate— it&rsquo;s not a feature!"), automation is truly a sound investment. Pg 60<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><h2 id="branching">Branching</h2><blockquote><p>PR is another way of saying Pull-Request</p></blockquote><p>To begin this CI process and all the GitHub Actions will assume a trunk-based branching process.
Basically, you have &ldquo;mainline&rdquo; and ONE level of branching off of that, e.g. the &ldquo;small batch&rdquo; of the feature you are working on.
This size of this &ldquo;batch&rdquo; should be under four hours of work, ideally, two. Consider a daily goal to merge two pull requests a day of work.
This strategy will make more sense as I cover Feature Flags in part two of the article.</p><blockquote><p>Our research shows that effective trunk-based development is characterized by fewer than three active branches and branches and forks having lifetimes of less than a day before being merged to master. Pg 41<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p></blockquote><p>All<a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">Pull Request</a> will trigger these automations leaving only one real manual step that is a peer developer on the project to review the code WHILE you work on the pull request or the next part of the feature.</p><p>Keep in mind, we are working in small batches. Your code is not a
days worth of work thrown to some poor teammate who has barely enough time to get a hot cup of coffee ☕️. No, it is a small batch of code they can quickly review and even suggest an update for the next PR cause they know you will be at it quickly enough.</p><p>Every merged PR is not a final stoke on some great renascence painting but a small step toward building a feature. If you think in line with Build Measure Learn<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, you start realize that the feature might never get used or even eventually removed. Some statistics show this to be about 2/3 of the code pushed!</p><p>This PR process asks a teammate to review the code, and if they are too busy after thirty minutes, go find someone else. Please keep it to ONE person. This is not a time to philosophize around the merits of style and ideals. Those conversations can happen, but a team should have time to do that during the week and build standards together. Maybe, for example, the reviewer thinks you should not do x, then agree to come back to it later, set up a time to talk as the larger team and or in chat, make a decision, document it, or better add it to automation. These pull requests are about the feature and the known best practices the team has agreed to.</p><p>The short of it is, make a branch from trunk, push to your version control system a pull request with the first bit of code-test you write. Get someone&rsquo;s eyes on it sooner than later. When approved, merge that one branch back into trunk (main, master, mainline).</p><p>Lastly, if you find yourself waiting for someone to review the branch, you can branch-off of it since, by the time you are done with your second PR, you should have enough feedback from your teammate to merge and then rebase your current branch from trunk. Leaving you never more than one branch out at most from trunk.</p><p>One good question I had been asked about this was when I presented this workflow to another team was, &ldquo;Won&rsquo;t this distract my team from the work they are doing if all day there are looking at PRs&rdquo; and I asked my team about this, and overall, the answer is no.</p><p>For one, these are small batches of work; the dev does not have to switch their context that significantly unlike if they are handed days of code. Second, the devs do not and should not be coding eight hours a day. There should be other things going on in their day to make sure the health of the project and team are being built and maintained as well. We are preventing debt by doing this.<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></p><h2 id="github-actions">GitHub Actions</h2><p>Okay, this is huge; we are going to start talking about<a href="https://github.com/features/actions">GitHub Actions</a>. And yes, GitLabs and BitBucket have comparable features, so this article can be considered for all of them. The point is GitHub Actions should be revolutionizing your team&rsquo;s workflows; if it is not, you are missing something important. It empowers DevOps at the developer level in a way that years ago took heavy server administration skills to set up. But now it is like Lego bricks, pre-built automation to truly shift-left in all things.</p><h3 id="step-one-setting-up-the-actions">Step One: Setting up the actions</h3><p>This is easy; I will show you in order every action used to make this all happen.</p><p>First, it happens in one file<a href="https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml">https://github.com/alnutile/codenames/blob/main/.github/workflows/ci-cd.yml</a> maybe it can be broken up into more, etc. I am not a GitHub Actions expert, so feel free to Google more about this.</p><p>We start with the &ldquo;when&rdquo; to run the action.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">name</span>:<span style="color:#ae81ff">CI-CD</span><p><span style="color:#f92672">on</span>: [<span style="color:#ae81ff">push]</span></code></pre></div><p>The “when” in this case is when code is pushed to any branch we run this.</p></p><p>Okay, then there is some base setup I will breeze over since the GitHub Action Docs are good and I rather focus on the &ldquo;how&rdquo; and &ldquo;why&rdquo;.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">runs-on</span>:<span style="color:#ae81ff">ubuntu-latest</span><span style="color:#f92672">env</span>:<span style="color:#f92672">DB_DATABASE</span>:<span style="color:#ae81ff">test</span><span style="color:#f92672">DB_USERNAME</span>:<span style="color:#ae81ff">root</span><span style="color:#f92672">DB_PASSWORD</span>:<span style="color:#ae81ff">password</span><span style="color:#f92672">BROADCAST_DRIVER</span>:<span style="color:#ae81ff">log</span><span style="color:#f92672">services</span>:<span style="color:#f92672">mysql</span>:<span style="color:#f92672">image</span>:<span style="color:#ae81ff">mysql:5.7</span><span style="color:#f92672">env</span>:<span style="color:#f92672">MYSQL_ALLOW_EMPTY_PASSWORD</span>:<span style="color:#66d9ef">false</span><span style="color:#f92672">MYSQL_ROOT_PASSWORD</span>:<span style="color:#ae81ff">password</span><span style="color:#f92672">MYSQL_DATABASE</span>:<span style="color:#ae81ff">test</span><span style="color:#f92672">ports</span>:
-<span style="color:#ae81ff">3306</span><span style="color:#ae81ff">/tcp</span><span style="color:#f92672">options</span>: --<span style="color:#ae81ff">health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3</span><span style="color:#f92672">strategy</span>:<span style="color:#f92672">fail-fast</span>:<span style="color:#66d9ef">true</span><span style="color:#f92672">matrix</span>:<span style="color:#f92672">php-versions</span>: [<span style="color:#e6db74">"8.0"</span>]</code></pre></div><p>So we are going to lean heavily on<a href="https://github.com/shivammathur/setup-php">https://github.com/shivammathur/setup-php</a> and after we check out our repo</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">steps</span>:
-<span style="color:#f92672">uses</span>:<span style="color:#ae81ff">actions/checkout@v2</span></code></pre></div><p>Once that is done, we can get to work.</p><p>I set up PHP with some extensions I need, especially Xdebug even though it slows things down but it is how we will measure coverage.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Setup PHP, with composer and extensions</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">shivammathur/setup-php@v2</span><span style="color:#75715e">#https://github.com/shivammathur/setup-php</span><span style="color:#f92672">with</span>:<span style="color:#f92672">php-version</span>:<span style="color:#ae81ff">${{ matrix.php-versions }}</span><span style="color:#f92672">tools</span>:<span style="color:#ae81ff">phpmd</span><span style="color:#f92672">extensions</span>:<span style="color:#ae81ff">mbstring, dom, fileinfo, mysql</span><span style="color:#f92672">coverage</span>:<span style="color:#ae81ff">xdebug</span><span style="color:#75715e">#optional</span></code></pre></div><p>I then prepare the application:</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Start mysql service</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">sudo /etc/init.d/mysql start</span><ul><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Get composer cache directory</span><span style="color:#f92672">id</span>:<span style="color:#ae81ff">composer-cache</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">echo "::set-output name=dir::$(composer config cache-files-dir)"</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Cache composer dependencies</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">actions/cache@v2</span><span style="color:#f92672">with</span>:<span style="color:#f92672">path</span>:<span style="color:#ae81ff">${{ steps.composer-cache.outputs.dir }}</span><span style="color:#75715e"># Use composer.json for key, if composer.lock is not committed.</span><span style="color:#75715e"># key: ${{ runner.os }}-composer-${{ hashFiles('<strong>/composer.json') }}</span><span style="color:#f92672">key</span>:<span style="color:#ae81ff">${{ runner.os }}-composer-${{ hashFiles('</strong>/composer.lock') }}</span><span style="color:#f92672">restore-keys</span>:<span style="color:#ae81ff">${{ runner.os }}-composer-</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Install Composer dependencies</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">composer install &ndash;no-progress &ndash;prefer-dist &ndash;optimize-autoloader</span></p></li><li><p><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Prepare the application</span><span style="color:#f92672">run</span>: |<span style="color:#e6db74"/><span style="color:#e6db74"> php -r "file_exists('.env') || copy('.env.example', '.env');"</span><span style="color:#e6db74"> php artisan key:generate</span></code></pre></div><p>We depend on<code>composer.lock</code> as being part of this. One key thing here is to never reference<code>dev-master</code> in your composer.json file. Please make sure you use the MAJOR version that you want and let itself updated at the MINOR version levels<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p></p></li></ul><p>Okay, now we have the system setup, PHP, MySQL, Composer files installed, and the<code>.env</code> setup.</p><blockquote><p>We&rsquo;re sucking diesel now!</p></blockquote><p>Now let&rsquo;s check our code for &ldquo;quality.&rdquo; Before we do that, let&rsquo;s ask what quality is? Some of it is opinion-based, but as a team, something is better than nothing. A bar, a standard, something you all can agree to. The choices I show here are used in actual day to day work and does not slow down the team. But at the same time, it catches those little things and helps us to have consistent code that we can all share the workload on.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Setup Done now to test and lint the code</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Run PHPMD</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">phpmd app GitHub phpmd.ruleset.xml</span></code></pre></div><p>To begin with, we use<a href="https://phpmd.org">PHPMD</a> as a simple way to verify some standards and or quality. There is a ruleset file that the team can
modify as needed.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Run linting to make sure it is worthwhile before NPM</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">phpstan</span><span style="color:#f92672">run</span>: |<span style="color:#e6db74"/><span style="color:#e6db74"/><span style="color:#ae81ff">./vendor/bin/phpstan analyse</span></code></pre></div><p><a href="https://github.com/phpstan/phpstan">PHPStan</a> is a Static Analysis Tool</p><blockquote><p>PHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs even before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code can be checked before you run the actual line.</p></blockquote><p>It can catch many little things that our Unit tests (more on those in a moment) may not catch. Another option is<a href="https://github.com/nunomaduro/larastan">LaraStan</a> to help with the more specific Laravel code styles that may throw off PHPStan. Note we are not &ldquo;boiling the ocean&rdquo; here, we are setting things to levels that are &ldquo;good enough&rdquo;. Finding the right balance for your team is key here.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#75715e"># Again another lint before we do the js build</span>
-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">PHP Code Style (phpcs)</span><span style="color:#f92672">uses</span>:<span style="color:#ae81ff">chindit/actions-phpcs@master</span><span style="color:#f92672">with</span>:<span style="color:#f92672">cli</span>:<span style="color:#e6db74">"--standard=PSR12"</span><span style="color:#f92672">dir</span>:<span style="color:#ae81ff">app/</span></code></pre></div><p>This one will help with linting, and some agreed to standards amongst the team. This makes our PR process not about looking at style but looking at logic.</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">-<span style="color:#f92672">name</span>:<span style="color:#ae81ff">Test with phpunit</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --coverage-clover clover.xml</span><span style="color:#f92672">env</span>:<span style="color:#f92672">DB_PORT</span>:<span style="color:#ae81ff">${{ job.services.mysql.ports['3306'] }}</span><ul><li><span style="color:#f92672">name</span>:<span style="color:#ae81ff">Do we pass the coverage amount</span><span style="color:#f92672">run</span>:<span style="color:#ae81ff">vendor/bin/coverage-check clover.xml 60</span></code></pre></div><p>Okay, this is the big one-time to PHPUnit test. Sixty percent is a bit low. I think 70% is a better goal. I will quote Kent Beck about 100%. Also note we focus on the<a href="https://martinfowler.com/bliki/UserJourneyTest.html">Happy Paths</a></p><img src="images/kent.png" width="800" class="center"/></ul><hr><p>No Dusk tests? Right, so I might add Dusk for some End2End. The work I do day to day depends on Python Pytest for End2End testing. Since those projects have an embedded QA person, they tend to know Python. Dusk is fantastic and there are actions running selenium and what not, so it should plug in fine. Maybe I will come back later to this. If this app had a JavaScript framework like VueJS I would not use Dusk I would use Jest or some other well-known testing framework for JavaScript. Since this app is Livewire, I depend on its testing at the PHPUnit level, but I do see the value here of some e2e testing in Dusk.</p><p>Okay, so that is it; you now have these automations running with every PR. Let&rsquo;s see what a PR looks like.</p><h3 id="step-two-using-github-branch-protection">Step Two: Using GitHub Branch Protection</h3><p>First, we have to get GitHub into a place that &ldquo;forces&rdquo; a PR flow. Honestly, a team should have &ldquo;trust&rdquo; enough maybe not to do this but two things here. One it prevents accidents. We have all been on the wrong branch before and pushed up without seeing. Second it can help with management to know there are guardrails.</p><img src="images/branches.png" width="1200" class="center"><p>We set the rule to match our trunk branch<code>main</code>
We make sure that all Pull Requests require someone to create a PR beforehand and have one approver. Finally, we add this one Status check to pass before we can merge this into trunk.</p><p>Below is an example.</p><img src="images/pr_ui.png" width="1200" class="center"><p>What we get here is a Pull Request interface to see the critical aspects of this workflow.
The upper right corner will be a Green &ldquo;Review Pr&rdquo; button if another team member was looking at this PR.</p><p>The middle section shows the running state of the Actions we made above and if they pass or fail. If they fail, then no matter what, we can not merge this easily.</p><p>Lastly is the &ldquo;break glass&rdquo; button to merge the PR if you are an admin. This will be Green if your PR is approved and the Actions are all passing.</p><p>That is it really for the PR. Review, comment, or approve, and your team is ready to have a high-speed flow to ensure quality is in from the start.</p><h2 id="final-thoughts">Final Thoughts</h2><h3 id="tldr">tl;dr</h3><p>Take time to automate and place tools from the start of the chain in place to make sure quality is baked in. As your deploy code to production multiple times a day (coming in part two of this), you will see how important this is to speed and stability. And Actions let you do this easily.</p><h3 id="enterprise">Enterprise</h3><blockquote><p>Developers should be empowered to do ops, and this is a great place to start.</p></blockquote><p>I mention this above and just want to take a moment to say that even a solution this simple is better than nothing. Developers should be empowered to do ops, and this is a great place to start. Actions do not require different teams to approve or implement. It can streamline the work it takes to innovate, and innovation at this level will work its way up to the business as the data in Accelerate shows over and over again.</p><h2 id="references">References</h2><h2 id="links">Links</h2><ul><li><a href="https://github.com/alnutile/codenames">Example Repo</a></li><li><a href="https://alfrednutile.info/posts/sod/">Intro Post to all things State of DevOps</a></li><li><a href="https://github.com/shivammathur/setup-php">PHP Actions</a></li></ul><h2 id="follow-up">Follow Up</h2><ul><li>I will work on using CodeClimate as a code check action since this works with so many languages and seems to plugin easily using docker</li></ul><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn:1" role="doc-endnote"><p><a href="https://www.mindtools.com/pages/article/build-measure-learn.htm">https://www.mindtools.com/pages/article/build-measure-learn.htm</a><a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:2" role="doc-endnote"><p><a href="https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912">https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912</a><a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:3" role="doc-endnote"><p><a href="https://www.dropbox.com/s/b856g72dkzjjriq/state-of-devops-2019.pdf?dl=0">State of DevOps Report 2019</a><a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:4" role="doc-endnote"><p><a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339">Accelerate</a><a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:5" role="doc-endnote"><p>(<a href="https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D">https://www.linkedin.com/pulse/being-offense-when-comes-day-scheduling-alfred-nutile/?trackingId=o9EJPZ73zVJOR6MeQ1HN3w%3D%3D</a>)<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:6" role="doc-endnote"><p><a href="https://semver.org">Semantic Verision</a><a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li></ol></section></description><tags>laravel, ci, cd, accelerate, devops</tags></item><item><title>Laravel Sail and M1 Mac</title><link>https://alfrednutile.info/posts/sail/</link><pubDate>Sun, 23 May 2021 14:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/sail/</guid><description><p>Some notes to self will add more after time if needed.</p><h2 id="mac-m1">Mac M1</h2><p>Had a MySQL error:</p><pre><code>ERROR: no matching manifest for linux/arm64/v8 in the manifest list entries</code></pre><p>All I had to do was update<code>docker-composer.yml</code>:</p><pre><code>File: docker-compose.yml
24: mysql:
25: image: 'mysql:8.0'
26: ports:
27: - '${FORWARD_DB_PORT:-3306}:3306'</code></pre><p>To:</p><pre><code> mysql:
image: mariadb:10.5.8
ports:
- "${FORWARD_DB_PORT:-3306}:3306"</code></pre><p>Then I disabled<code>meilisearch</code> else everytime I ran<code>sail anything</code> it would stop the docker container.</p><pre><code>File: docker-compose.yml
50: # meilisearch:
51: # image: "getmeili/meilisearch:latest"
52: # ports:
53: # - "${FORWARD_MEILISEARCH_PORT:-7700}:7700"
54: # volumes:
55: # - "sailmeilisearch:/data.ms"
56: # networks:
57: # - sail</code></pre><p>I will have to come back to this one to fix it some info is<a href="https://github.com/meilisearch/MeiliSearch/issues/1195">here</a></p><h2 id="xdebug">Xdebug</h2><p>The article is a great start<a href="https://medium.com/geekculture/debug-your-laravel-sail-applications-with-xdebug-160ad70fcd41">here</a></p><p>But a couple of things I think need to be made more clear or might even be an error:</p><p>Set the<code>SAIL_DEBUG=true</code> not<code>SAILDEBUG=true</code></p><p>When running the build do:</p><pre><code>❯ sail build --no-cache --build-arg XDEBUG=true</code></pre><p>To pass the args. And as he notes run<code>sail php -v</code> after sail is running to make sure you do not see any errors and xdebug is working.</p><h2 id="links">Links</h2><ul><li><a href="https://medium.com/geekculture/debug-your-laravel-sail-applications-with-xdebug-160ad70fcd41">Xdebug</a></li><li>Some overall m1 issues<a href="https://github.com/laravel/sail/issues/104">here</a></li></ul></description><tags>laravel, note</tags></item><item><title>Cognito and OAuth</title><link>https://alfrednutile.info/posts/261/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/261/</guid><description><p>make your App Client</p><p>Make sure to check</p><p><img src="https://dl.dropboxusercontent.com/s/b41fgm4avehxkar/cog_app_client.png?dl=0" alt=""/><p>Make some scopes uner Resource Server</p><p>Then &ldquo;App Client Settings&rdquo;</p><p>Connect it to &ldquo;Cognito User Pool&rdquo;</p><p>And choose &ldquo;Client Credentials&rdquo; from &ldquo;Allowed OAuth Flow&rdquo; choosing some scopes</p></description><tags>aws, cognito, laravel</tags></item><item><title>PHPUnit CodeCoverage</title><link>https://alfrednutile.info/posts/260/</link><pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/260/</guid><description><h1 id="phpunit-codecoverage">PHPUnit CodeCoverage</h1><p><a href="https://phpunit.de/manual/6.5/en/code-coverage-analysis.html">PHPUnit CodeCoverage</a></p><p>There is a ton of information about your code PHPUNit CodeCoverage can provide. At the root just making sure your coverage is at a certain level and if not where is it lacking.</p><p>With it&rsquo;s xml output I use a script found<a href="https://ocramius.github.io/blog/automated-code-coverage-check-for-github-pull-requests-with-travis/">here</a> to check during our TravisCI builds if the code is meeting a required level.</p><p>Here is a gist of that script<a href="https://gist.github.com/alnutile/78e11717d91f2dfce970f8f1aec68469">here</a>
and here is the<code>.travis.yml</code> section snippet that will run the coverage generating test and then review it for percentage of coverage.</p><pre><code>script:
- vendor/bin/phpcs --standard=psr2 app/
- set -e
- vendor/bin/phpunit --coverage-clover clover.xml --stop-on-failure --testsuite=Unit,Feature
- php ./coverage-checker.php clover.xml 70<p/></pre><p>This is what we run in Travis to review the coverage, if it is below<strong>70</strong>% it will fail.</p></p><blockquote><p>If your unit tests cover 100% of your code, you&rsquo;re doing it wrong.
Just my 2 cts. - Fabien Potencier</p></blockquote><h2 id="setting-up">Setting Up</h2><p>This can be tricky you need Xdebug in place else you might get &ldquo;Coverage driver missing&rdquo; errors.</p><p>Once ready you need to update your<code>phpunit.xml</code> here is my example:</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;phpunit
/// left out some area for brevity
&lt;testsuites>
&lt;testsuite name="Unit">
&lt;directory suffix="Test.php">./tests/Unit&lt;/directory>
&lt;/testsuite><pre><code> &amp;lt;testsuite name=&amp;quot;Feature&amp;quot;&amp;gt;
&amp;lt;directory suffix=&amp;quot;Test.php&amp;quot;&amp;gt;./tests/Feature&amp;lt;/directory&amp;gt;
&amp;lt;/testsuite&amp;gt;
&amp;lt;/testsuites&amp;gt;
&amp;lt;filter&amp;gt;
&amp;lt;whitelist processUncoveredFilesFromWhitelist=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;./app&amp;lt;/directory&amp;gt;
&amp;lt;exclude&amp;gt;
&amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;app/Http/Controllers/Auth&amp;lt;/directory&amp;gt;
&amp;lt;file&amp;gt;app/Console/Commands/SetupDeploymentCommand.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Console/Kernel.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Kernel.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/AppServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/AuthServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/EventServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/BroadcastServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Providers/RouteServiceProvider.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Controllers/Controller.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Exceptions/Handler.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/Authenticate.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/EncryptCookies.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/RedirectIfAuthenticated.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/TrimStrings.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/TrustProxies.php&amp;lt;/file&amp;gt;
&amp;lt;file&amp;gt;app/Http/Middleware/VerifyCsrfToken.php&amp;lt;/file&amp;gt;
&amp;lt;/exclude&amp;gt;
&amp;lt;/whitelist&amp;gt;
&amp;lt;/filter&amp;gt;
/// left out some area for brevity</code></pre><p>&lt;/phpunit></p><p/></pre><p>Above I setup<code>filter</code> to exclude a bunch of Laravel files I do not want to maintain.</p></p><h2 id="running-the-command">Running the Command</h2><pre><code>vendor/bin/phpunit --coverage-clover clover.xml --stop-on-failure --coverage-html=build</code></pre><p>This will output the clover.xml and make a folder called<code>build</code> make sure to include that in your<code>.gitignore</code></p><p>On my Mac, when done, I just type<code>open build/index.html</code> and I go to a page like this</p><p><img src="https://dl.dropboxusercontent.com/s/vnmt5iy909hycid/Screenshot%202019-01-09%2012.02.29.png?dl=0" alt=""/><h2 id="exploring">Exploring</h2><p>As seen above I get a list of all my classes and how the coverage is on each them. It gets even better from here.</p><h3 id="class-level">Class Level</h3><p>So you are wondering why a class is missing coverage? Click on the Class folder and start to dig in.</p><p><img src="https://dl.dropboxusercontent.com/s/ii7yqczoviw0vpz/Screenshot%202019-01-09%2012.22.23.png?dl=0" alt=""/><p>Maybe it finds something you forgot or maybe it is fussing about a bit of code you know you tested?</p><p>In this example it could be either. So I have two main options.</p><h4 id="annotate-the-test">Annotate the test</h4><p>Let&rsquo;s say I have a Controller level test that is testing this:</p><pre><code> /**
* @covers App\Http\Controllers\AdminController::index
*/
public function testWorksAsAdmin()
{
$user = factory(\App\User::class)->states('admin')->create();
$this->be($user);
$this->get("/admin")->assertStatus(200)->assertSee("Show user");
}<pre><code>/**
* @covers App\Http\Controllers\AdminController::index
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$this-&amp;gt;get(&amp;quot;/admin&amp;quot;)-&amp;gt;assertStatus(302);
}</code></pre><p/></pre><p>You can see I specifically tell PHPUnit CodeCoverage that this controller tests are testing this area. But I do not let it know about the MiddleWare so I could do:</p></p><pre><code> /**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
*/
public function testWorksAsAdmin()
{
$user = factory(\App\User::class)->states('admin')->create();
$this->be($user);
$this->get("/admin")->assertStatus(200)->assertSee("Show user");
}
/**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$this->get("/admin")->assertStatus(302);
}</code></pre><p>Then run the test command again and:</p><p><img src="https://dl.dropboxusercontent.com/s/gl8m3ompd4s8vw5/Screenshot%202019-01-09%2012.26.43.png?dl=0" alt=""/><h4 id="annotate-the-class">Annotate the Class</h4><p>In the above I could have just done this:</p><pre><code> /**
* @codeCoverageIgnore
*/
public function __construct()
{
$this->middleware('admin_only')->only("index");
}<p/></pre><p>And that is fine, as long as you know that middleware is tested in it’s own area.</p></p><h4 id="exceptions">Exceptions</h4><p>I tend to do try/catch in my controllers to clearly react to an issue and respond to a user&rsquo;s request but this can show in PHPUnit Coverage as a non tested section of code.</p><p>All I need to do is add a test for that.</p><pre><code> /**
* @covers App\Http\Controllers\AdminController::index
* @covers App\Http\Controllers\AdminController::__constructor
* @expectedException \Exception
*/
public function testWorksAsNonAdmin()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$this->get("/admin")->assertStatus(422);
}<p/></pre><h3 id="dashboard">Dashboard</h3></p><p>This is where some other nice info is surfaced about your code.</p><p><img src="https://dl.dropboxusercontent.com/s/9cgvtghsc56iqyk/dashboard_link.png?dl=0" alt=""/><p>Should bring you to this layout</p><p><img src="https://dl.dropboxusercontent.com/s/04vgti8gogembv8/Screenshot%202019-01-09%2012.31.05.png?dl=0" alt=""/><p>The<strong>CRAP</strong> rating is &ldquo;interesting&rdquo; you can read more about it<a href="https://stackoverflow.com/questions/4731774/how-to-read-improve-c-r-a-p-index-calculated-by-php/4731869#4731869">here</a> since I do not fully understand it myself but imo it comes down not to 100% coverage but:</p><ul><li>Keep classes small and focused</li><li>Keep classed down to 1 public method, even Controllers letting other protected/private methods do the work</li><li>Test the class for message in and message out</li></ul><blockquote><p>&ldquo;You don&rsquo;t send messages because you have objects, you have objects because you send messages - Sandi Metz Poodr Book&rdquo;</p></blockquote><h2 id="helpers">Helpers</h2><p>Two other tools to compliment that above</p><h3 id="phpmetrics">PHPMetrics</h3><p>This tool<a href="http://www.phpmetrics.org/">http://www.phpmetrics.org/</a> can easily be setup and run showing more details about your classes and their state of &ldquo;complexity&rdquo; etc.</p><h3 id="larastan">LaraStan</h3><p>This tool<a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan</a> when it does not go overboard in it&rsquo;s reading your code (set it to a low level) can do a good job of finding issues in your code that you did not find in your tests. It runs over your code including exceptions you did not cover in your tests etc. Really does find some interesting things.</p></description><tags>laravel, testing, phpunit</tags></item><item><title>Bitbucket Pipeline</title><link>https://alfrednutile.info/posts/257/</link><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/257/</guid><description><p>BitBucket has a nice feature call Pipelines<a href="https://bitbucket.org/product/features/pipelines">https://bitbucket.org/product/features/pipelines</a> for $0 you can, even for private repos have a decent CI flow.</p><blockquote><p>Private repos CI Pipeline $0!!</p></blockquote><p>It took a bit to get going though since the docs do not talk about PHP and MySQL in enough details. Here is what I ended up with for a<code>bitbucket-pipelines.yml</code></p><pre><code># This is a sample build configuration for PHP.
# Check our guides at https://confluence.atlassian.com/x/e8YWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: php:7.2<p>options:
max-time: 120</p><p>pipelines:
default:
- step:
caches:
- composer
script:
- apt-get update &amp;&amp; apt-get install -y unzip gnupg
- docker-php-ext-install mysqli pdo pdo_mysql
- curl -sS<a href="https://getcomposer.org/installer">https://getcomposer.org/installer</a> | php &ndash; &ndash;install-dir=/usr/local/bin &ndash;filename=composer
- cp .env.bitbucket .env
- curl -sL<a href="https://deb.nodesource.com/setup_8.x">https://deb.nodesource.com/setup_8.x</a> | bash -
#- apt-get install -y nodejs
# hung on install so will have to come back to this
#- npm install
#- npm test
- composer install
- composer check-style
- vendor/bin/phpunit
services:
- mysql
- step:
name: Deploy to staging
image: aneitayang/aws-cli:1.0
deployment: staging
trigger: automatic
script:
- curl<a href="https://forge.laravel.com/servers/baz/sites/bar/deploy/http?token=foo">https://forge.laravel.com/servers/baz/sites/bar/deploy/http?token=foo</a></p><p>definitions:
services:
mysql:
image: mysql:5.7
environment:
MYSQL_DATABASE: &lsquo;test&rsquo;
MYSQL_RANDOM_ROOT_PASSWORD: &lsquo;yes&rsquo;
MYSQL_USER: &lsquo;test_user&rsquo;
MYSQL_PASSWORD: &lsquo;password&rsquo;</code></pre><p>So basically I install mysql and set it up to use then all just work. NPM just hangs right now so I am not 100% sure what to do there.</p></p><h2 id="debug">Debug</h2><p>Unlike TravisCI I could not just SSH in to debug I had to run docker.
Here are some links</p><ul><li><a href="https://confluence.atlassian.com/bitbucket/debug-your-pipelines-locally-with-docker-838273569.html">https://confluence.atlassian.com/bitbucket/debug-your-pipelines-locally-with-docker-838273569.html</a></li><li><a href="https://confluence.atlassian.com/bitbucket/php-with-bitbucket-pipelines-873907835.html">https://confluence.atlassian.com/bitbucket/php-with-bitbucket-pipelines-873907835.html</a></li><li><a href="https://confluence.atlassian.com/bitbucket/configure-bitbucket-pipelines-yml-792298910.html">Config Info</a></li></ul><p>running locally below worked for me</p><pre><code>docker run -it --volume=$(pwd):/var/www/html --memory=4g --memory-swap=4g --memory-swappiness=0 --entrypoint=/bin/bash php:7.2-apache</code></pre><p>But I would have to install their mysql docker as well they note and map them together. ¯_(ツ)_/¯</p><p>Maybe the price is right for this vs TravisCI</p></description><tags>laravel, bitbucket</tags></item><item><title>JSONEditor, Vue and Vuex</title><link>https://alfrednutile.info/posts/256/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/256/</guid><description><p>As I post<a href="https://alfrednutile.info/posts/222">here</a> I wanted to use JSONEditor as a component. But with Vuex I was able to reduce the work quite a ton.<img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt="">
Here is my store for the json_field:</p><pre><code>export default {
state: {
json_field: null,
},
getters: {
json_field: state => {
return state.json_field;
}
},
mutations: {
jsonField(state, json_field) {
state.json_field = json_field;
}
},
};</code></pre><p>Then my JSONEditor.vue component:</p><pre><code>&lt;template>
&lt;div id="jsoneditor" ref="editor">&lt;/div>
&lt;/template><p>&lt;script>
import JSONEditor from &lsquo;jsoneditor&rsquo;;
import { mapGetters } from &lsquo;vuex&rsquo;</p><pre><code>export default Vue.extend({
computed: {
...mapGetters(
{ json_field: 'json_field' }
),
},
mounted() {
let container = this.$refs.editor;
let options = {
onChange: () =&amp;gt; {
this.$store.commit(&amp;quot;jsonField&amp;quot;, editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) {
editor.set(this.json_field);
}
}
});</code></pre><p>&lt;/script></p><p>&lt;style type="text/css">
#jsoneditor {
width: 1000px;
height: 600px;
}
&lt;/style></p><p/></pre><p>Finally the component that will use it:</p></p><pre><code>&lt;template>
    &lt;section>
&lt;b-form-group id="metrics"
label="Metrics"
label-for="metrics"
description="Paste as it should be">
&lt;cat-json-editor v-if="show_editor">&lt;/cat-json-editor>
&lt;/b-form-group>
&lt;/section>
&lt;/template>
&lt;script>
import JSONEditor from 'jsoneditor';
export default {
data() {
return {
form: {},
show_editor: false
}
},
created() {
this.getStandardMetrics();
},
methods: {
getStandardMetrics() {
axios.get('/api/standards').then(res => {
this.$snotify.success("Loading Standards", "Success");
this.$store.commit("jsonField", res.data);
this.show_editor = true;
}).catch(err => {
this.$snotify.warning("error getting metric standars", "Error");
})
}
}
}
&lt;/script></code></pre><p>If do the<code>v-if</code> to load the editor AFTER I have some state for it. I am sure I could have done some watcher but this worked.</p></description><tags>vuejs, laravel</tags></item><item><title>Laravel Filter Scope on a Model</title><link>https://alfrednutile.info/posts/255/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/255/</guid><description><p>So I find myself writing searchable pages that, via an API or what not, someone can filter the page by different fields on the model.<img src="https://dl.dropboxusercontent.com/s/qm3semea1hzutuk/filter_example.png?dl=0" alt=""/><p>This can end up being a Controller class that does a lot of filters off the Request. Or it can be a Repository class that abstracts the business logic into one place for several related models.</p><p>But in many cases it really is just one Model being filtered. And if I add a Scope<code>scopeFilter</code> and pass in the Request as an array I can iterate over that array and call to other existing scopes on the model.</p><pre><code> /**
* Return only active models
*
* @param object $query
* @param array $filters
* @return Builder
*/
public function scopeFilters($query, $filters)
{
unset($filters['page']);
foreach ($filters as $scope => $value) {
$scope = camel_case($scope);
$query = $this->{$scope}($value);
}
return $query;
}</code></pre><p>This allows me to use those scopes in other places as well.</p><p>For example a request to active policies for repo_name &ldquo;foo&rdquo;:</p><pre><code>curl https://foo.test/api/policies?active=1&amp;repo_name=foo</code></pre><p>The Controller can do something simple like this:</p><pre><code> public function __invoke(Request $request)
{
try {
$results = Subscriber::filters($request->all())->orderBy("repo_name")->paginate(20);
return response()->json($results, 200);
} catch (\Exception $e) {
\Log::error($e);
return response()->json(null, 400);
}
}</code></pre><p>And the model can handle it with these other scopes, that can be used by themselves as well:</p><pre><code> /**
* Scope to get by repo_name
*
* @param object $query
* @param string $repo_name
* @return Builder
*/
public function scopeRepoName($query, $repo_name)
{
return $query->where("repo_name", $repo_name);
}<pre><code> /**
* Return only active models
*
* @param object $query
* @return Builder
*/
public function scopeActive($query, $state = 1)
{
if ($state == 'all') {
$state = [0,1];
}
$state = array_wrap($state);
return $query-&amp;gt;whereIn(&amp;quot;active&amp;quot;, $state);
}</code></pre><p/></pre><p>For some time I kept this logic out of models but recently I been trying to use models as more of a place to store this sort of model related logic.</p></p><p>If two models need to work together then maybe a Business class could help out to glue them together but still something to consider.</p><p>I will show in the next post one model subscribing another model.</p></description><tags>laravel, note2self</tags></item><item><title>Query Strings, Vue and Bootstrap Active Tab</title><link>https://alfrednutile.info/posts/254/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/254/</guid><description><p>In order to have the tabs and URL change as needed when the user lands on the page or clicks the tab I had to setup a few things.</p><p><img src="https://dl.dropboxusercontent.com/s/bdawx8hl7gisijs/tabs.gif?dl=0" alt=""/><p>First I setup the Vue.js router as seen<a href="https://alfrednutile.info/posts/244">here</a></p><p>Then my component will work out the rest.</p><p>Using<a href="https://bootstrap-vue.js.org/docs/components/tabs">BV</a></p><p>I have tabs and then I set those tabs as needed.</p><pre><code> &lt;b-tabs v-model="activeTab">
&lt;b-tab title="Settings" active >
&lt;div class="mt-4 alert alert-info">
Manage related policies by clicking on the Tabs.<pre><code> &amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;See Results&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Add Policies&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Update Policies&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Quality Metrics&amp;quot;&amp;gt;
&amp;lt;quality-metrics-report class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 1&amp;quot;&amp;gt;&amp;lt;/quality-metrics-report&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Travis File Report&amp;quot;&amp;gt;
&amp;lt;travis-subscription-root class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 2&amp;quot;&amp;gt;&amp;lt;/travis-subscription-root&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;/b-tabs&amp;gt;</code></pre><p/></pre><p>When I user clicks on the tabs the state changes since the<code>activeTab</code> is a computed property.</p></p><pre><code> computed: {
activeTab: {
get: function() {
return this.$store.state.tabIndex;
},
set: function(newTab) {
let tabs = {
tab: _.findKey(this.tabs, function(o) {return o == newTab;})
}
this.$router.push({
query: tabs
});
console.log(this.$router.history.current);
this.$store.commit('tabIndex', newTab);
},
},</code></pre><p>Using lodash I can easily find my tab name from the value of the tabe we are looking at.</p><pre><code> data() {
return {
tabs: { travis_policy_results: 2, quality_metrics_report: 1 }
}
},</code></pre><p>That takes care of the user clicking. I could store the state right in the component but I am doing this in vuex which should not matter here really.</p><p>Now when the user lands on the page my<code>mounted</code> method acts on the url:</p><pre><code> mounted() {
if(this.$router.history.current['query']['tab']) {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},</code></pre><p>That is it now the state changes on page land and on click.</p><p>I can also have it change as the user clicks on their Back button.</p><pre><code> methods: {
changeTab() {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},
mounted() {
if(this.$router.history.current['query']['tab']) {
this.changeTab();
}
},
watch: {
$route(to, from) {
if (to.fullPath != from.fullPath) {
this.changeTab();
}
}
},</code></pre></description><tags>vuejs, laravel</tags></item><item><title>Valet Laravel 7.1 and 7.2</title><link>https://alfrednutile.info/posts/253/</link><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/253/</guid><description>..</description><tags>laravel, note2self</tags></item><item><title>PHPStan Setup</title><link>https://alfrednutile.info/posts/251/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/251/</guid><description><p>There is a good episode here<a href="https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases">https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases</a> that talks about this.</p><p>The short of it is that it can easily catch some issues that your tests or IDE did not. For example I had a class name overlap due to a typo and it found it. From there it will output tons of other info that may just help guide you in your work.</p><p>The install is super easy as seen in the docs<a href="https://github.com/phpstan/phpstan">https://github.com/phpstan/phpstan</a></p><p>For me I did</p><pre><code>composer global require phpstan/phpstan</code></pre><p>then in my<code>composer.json</code> I added</p><pre><code>"scripts": {
//see last row but here are some other nice quick shortcuts
"check-style": "phpcs -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app",
"fix-style": "phpcbf -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app",
"check-metrics": "phpmetrics --report-json=report.json app &amp;&amp; vendor/bin/quality_run_check.py report.json",
"check-metrics-html": "phpmetrics --report-json=report.json --report-html=report app &amp;&amp; open report/index.html",
"phpstan": "phpstan analyse app"
}</code></pre><p>The initial run found this</p><pre><code>Cannot declare class App\Observers\QualityReport because the name is already in use in /Users/alfrednutile/Code/cat-quality-service/app/Observers/QualityReport.php on line 7</code></pre><p>which was great since I did not catch that in my tests. Another run found a missing variable for my printf which was in an exception area I did not test.</p><p>This may help as well<a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan</a> for Laravel</p><p>This will avoid some Facade and other issues. Even just trying</p><pre><code>php artisan code:analyse --paths=app --level=0</code></pre><p>Found some issues I did not see, for example object properties I did not define at the top of the Class.</p></description><tags>static analysis, laravel</tags></item><item><title>Vuex External File</title><link>https://alfrednutile.info/posts/250/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/250/</guid><description><p>Setup Vuex with external file<a href="https://vuex.vuejs.org/installation.html">https://vuex.vuejs.org/installation.html</a></p><p>But after this make a file in the<code>resources/assets/js</code> called<code>store.js</code> then set it up as needed
Here I will have one loading state</p><pre><code>export default {
state: {
loading: true,
},
getters: {
loading: state => {
return state.loading;
},
},
mutations: {
loading(state, loading) {
state.loading = loading;
}
}
};</code></pre><p>now import it into your app.js</p><p><code>import store from './store';</code></p><p>and</p><pre><code>var app = new Vue({
mixins: [require('spark')],
store: new Vuex.Store(store),
router
});</code></pre><p>That should do it. I do load some state in my<code>resources/views/layouts/app.blade.php</code></p><pre><code> &lt;script>
window.Laravel = {!! json_encode([
"apiToken" => auth()->user()->api_token ?? null
]) !!};
&lt;/script></code></pre><p>Just to help with some basic stuff</p></description><tags>note2self, vuejs, laravel</tags></item><item><title>Simple API_Token Auth for VueJS Components and Laravel</title><link>https://alfrednutile.info/posts/249/</link><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/249/</guid><description><p>For those non Passport moments just a simple site that has VueJS Components that need to access routes with authentication in place.</p><p>Thanks to</p><ul><li><a href="https://pineco.de/vue-components-laravel-based-apis/">https://pineco.de/vue-components-laravel-based-apis/</a></li><li><a href="https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2">https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2</a></li></ul><h2 id="route-file">Route File</h2><p><code>routes/api.php</code></p><pre><code>Route::get('/trigger_contacts', function (Request $request) {
\Log::info("Triggering Contacts");
return response()->json(null, 200);
})->middleware('auth:api');</code></pre><p>This will not work out of the box, you will get a 401. Let&rsquo;s plug some things in.</p><h2 id="blade">Blade</h2><p>My main<code>resources/views/layouts/app.blade.php</code></p><pre><code> &lt;script>
window.Laravel = {!! json_encode([
"apiToken" => auth()->user()->api_token ?? null
]) !!};
&lt;/script>
&lt;/head></code></pre><h2 id="okay-now-for-vuejs">Okay now for VueJS</h2><p><code>resources/assets/js/bootstrap.js</code></p><pre><code>window.axios = require('axios');<p>window.axios.defaults.headers.common[&lsquo;X-Requested-With&rsquo;] = &lsquo;XMLHttpRequest&rsquo;;
window.axios.defaults.headers.common[&lsquo;Authorization&rsquo;] = &lsquo;Bearer ' + Laravel.apiToken;</p><p/></pre><h2 id="now-the-migration-and-model">Now the migration and model</h2></p><pre><code>php artisan make:migration alter_users_add_api_token --table=users</code></pre><p>Then the migration file:</p><pre><code> Schema::table('users', function (Blueprint $table) {
$table->char('api_token', 60)->nullable()->after('remember_token');
});</code></pre><p>And the User.php model (which is not in the App\Model folder :) ):</p><pre><code> protected $hidden = [
'password', 'remember_token', "api_token"
];
public function getApiTokenAttribute($value)
{
if (!$value) {
$value = str_random(60);
$this->api_token = $value;
$this->save();
}
return $value;
}</code></pre><h2 id="component">Component</h2><p>This is nothing out of the ordinary:</p><pre><code> triggerContacts() {
this.loading = true;
axios
.get('/api/trigger_contacts')
.then(results => {
console.log(results);
this.status_message = 'Triggered Contacts';
setTimeout(() => {
this.loading = false;
this.status_message = null;
}, 3000);
})
.catch(err => {
console.log('issue with trigger');
});
}</code></pre><p>That is it now your component will work with the route.</p></description><tags>vuejs, laravel</tags></item><item><title>Dusk Screenshots to S3 of Failing tests</title><link>https://alfrednutile.info/posts/248/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/248/</guid><description><p>I can be really annoying to troubleshoot a failed test in Dusk when using CI systems. What I ended up doing was setting up my project to send these files to S3 on fail.</p><p>Here are the steps</p><h2 id="setup-you-app">Setup You App</h2><p>This is just S3 storage so make sure you have a bucket and a folder in the bucket to write to. Basically for AWS you make an IAM with a key and secret and let it read/write to this folder. Might look like this policy</p><pre><code>{
"Version": "2012-10-17",
"Statement": [
{
"Action": [
"s3:ListBucket"
],
"Resource": [
"arn:aws:s3:::your-bucket"
],
"Effect": "Allow"
},
{
"Action": [
"*"
],
"Resource": [
"arn:aws:s3:::your-bucket/*"
],
"Effect": "Allow"
}
]
}</code></pre><p>or limited it just to the folder<code>screenshots</code></p><pre><code>{
"Version": "2012-10-17",
"Statement": [
{
"Action": [
"s3:ListAllMyBuckets",
"s3:HeadBucket"
],
"Resource": "*",
"Effect": "Allow",
"Sid": "VisualEditor1"
},
{
"Action": [
"s3:ListBucket",
"s3:GetBucketLocation"
],
"Resource": [
"arn:aws:s3:::your-bucket",
"arn:aws:s3:::your-bucket/*"
],
"Effect": "Allow",
"Sid": "VisualEditor0"
},
{
"Action": [
"s3:GetObject"
],
"Resource": [
"arn:aws:s3:::your-bucket/screenshots",
"arn:aws:s3:::your-bucket/screenshots/*"
],
"Effect": "Allow",
"Sid": "VisualEditor2"
}
]
}</code></pre><p>Now in your<code>tests/DuskTestCase.php</code> file add this:</p><pre><code> public function tearDown()
{
if (env("TRAVIS")) {
$files = \File::files(base_path("tests/Browser/screenshots"));<pre><code> if ($files) {
foreach ($files as $file) {
Storage::disk('travis_fails')
-&amp;gt;put($file-&amp;gt;getFileName(), $file-&amp;gt;getContents());
}
}
}
parent::tearDown();
}</code></pre><p/></pre><p>This will run on Travis based tests saving files to the bucket.</p></p><p>I added to my<code>config/filesystems.php</code> file this:</p><pre><code> 'disks' => [
'travis_fails' => [
'driver' => 's3',
'key' => env('AWS_ACCESS_KEY_ID'),
'secret' => env('AWS_SECRET_ACCESS_KEY'),
'region' => "eu-west-1",
'root' => "screenshots",
'bucket' => 'foo-bucket',
'url' => env('AWS_URL'),
],
///</code></pre><p>Now for TravisCI</p><h2 id="setup-travisci">Setup TravisCI</h2><p>Then in Travis under Settings -> Environment Variables we make sure to add our key and secret with the proper key format:</p><pre><code>AWS_SECRET_ACCESS_KEY=foo
AWS_ACCESS_KEY_ID=bar</code></pre><p><img src="https://dl.dropboxusercontent.com/s/nez8f4hz4anmghl/Screenshot%202018-06-26%2009.36.26.png?dl=0" alt=""/><h2 id="now-you-are-ready-to-fail">Now You are Ready to Fail!</h2><p>Ok so on your next fail you will see in your s3 bucket some of those super handy screenshots.</p></description><tags>dusk, laravel, testing, aws</tags></item><item><title>Laravel Queue Restart and 'Why are my changes not showing up'</title><link>https://alfrednutile.info/posts/246/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/246/</guid><description><p>Just a note to self and others who have suffered this. If you are running queues locally, for what ever reason, then any changes you make in code you need to restart your queue daemon.</p><pre><code>php artisan queue:restart</code></pre><p>This will cause the daemon to look at a timestamp and restart if that is newer than before &ldquo;e.g. you ran the above. And this will force the in memory process to update itself from the latest code base.</p><p>Good luck!</p></description><tags>laravel, queues, note2self</tags></item><item><title>Query Strings and VueJS</title><link>https://alfrednutile.info/posts/244/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/244/</guid><description><p>Quick way to make the url reflect the query string so the user can share the url and filters.</p><p>This is component based VueJS building so not an SPA
But I still install<code>"vue-router": "^3.0.1"</code></p><p>And load it</p><pre><code>import VueRouter from 'vue-router';<p>Vue.use(VueRouter);</code></pre><p>The on the component I set a watch on the router.</p></p><pre><code> watch: {
$route(to, from) {
this.setModelFromQueryString();
this.search();
}
},</code></pre><p>In this case it will set the query strings then trigger the &ldquo;search&rdquo; to load the data into the page. This search becomes the go to to get state<p>when the page is loaded (as seen below) or when the users clicks “search”</p></p><p>Created kicks this off the state:</p><pre><code> created: function() {
this.setModelFromQueryString();
this.search();
},</code></pre><p>Here is<code>setModelFromQueryString</code>:</p><pre><code> setModelFromQueryString() {
this.params.forEach(param => {
this[param.model] = this.getParam(param.display_name);
});
},</code></pre><p>Make sure the model matches the state the user wants. The states or filters that I am trying to set are stored in data.</p><p>The data model stores theys keys and related model values that I want to focus on keeping and restoring:</p><pre><code> data() {
return {
params: [
{
model: 'stack_name',
display_name: 'stack_name'
},
{
model: 'project_name',
display_name: 'project_name'
},
{
model: 'current_page',
display_name: 'page'
},
{
model: 'language',
display_name: 'language'
},
{
model: 'search_name',
display_name: 'name'
}
],</code></pre><p>Now that the model is there I can iterate over these in a few other areas I will show below.</p><p>Page load, and search call the method<code>search</code> and this takes care of a few things</p><ul><li>make sure the the query string reflects the latest model, e.g. what the user set on the page form</li><li>updates the api url to have these params<code>this.getParams('/api/libraries')</code></li></ul><p>Here is search plus those methods:</p><pre><code>search() {
this.setQueryString();
this.loading = true;
axios
.get(this.getParams('/api/libraries'))
.then(results => {
this.libraries = results.data;
this.loading = false;
})
.catch(error => {
console.log(error);
$alerts.send('Error', 'Could not get next page', true);
});
},
getParams(prefix) {
let url_string = prefix + '?';
let query = [];
this.params.forEach(param => {
if (this[param.model]) {
let value = this[param.model];
let name = param.display_name;
query.push(`${name}=${value}`);
}
});
query = query.join('&amp;');
return `${url_string}${query}`;
},
getParam(param) {
return this.$router.history.current.query[param];
},
paginateFunction(page) {
this.current_page = page;
this.search();
},
setQueryString() { //This method builds up the url so the user will see the filter on page load based on their search
let items = {};<pre><code> this.params.forEach(param =&amp;gt; {
if (this[param.model] != undefined) {
items[param.display_name] = this[param.model];
}
});
this.$router.push({
query: items
});
},</code></pre><p/></pre><p><img src="https://dl.dropboxusercontent.com/s/lmnyjw7aub0ggb2/filters.gif?dl=0" alt=""/></p></description><tags>vuejs, note2self, laravel</tags></item><item><title>Getting Started with Orchestra Testbench for Laravel Package Development</title><link>https://alfrednutile.info/posts/241/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/241/</guid><description><p>The goal of this article will allow one to setup a stand alone package working with it&rsquo;s own tests and has access to all of the normal Laravel workflows outside of Laravel. So you can build it using the easier conventions and helpers Laravel offers.</p><p>Since my work will include database usage I will grab both packages:</p><pre><code>composer require --dev "orchestra/testbench:&lt;=3.5" "orchestra/database:v3.5.0"</code></pre><p>I will setup my<code>composer.json</code> after this as such:</p><pre><code> "autoload-dev": {
"psr-4": {
"Tests\\": "tests/"
}
}</code></pre><p>This way my classes will just have the Tests namespace.</p><p>And then add<code>tests/TestCase.php</code></p><pre><code>&lt;?php<p>namespace Tests;</p><p>use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Mockery;
use AlfredNutileInc\HPClient\HubPlannerProvider;</p><p>class TestCase extends \Orchestra\Testbench\TestCase
{</p><pre><code>/**
* Load any providers I am offering
*/
protected function getPackageProviders($app)
{
return
[
HubPlannerProvider::class,
];
}
public function setUp()
{
parent::setUp();
//I can load any local factories if I want to
//$this-&amp;gt;withFactories(__DIR__ . '/../database/factories');
//make the bast path under tests folder
$this-&amp;gt;app-&amp;gt;setBasePath(__DIR__ . '/../');
//Because I use dynamic facades
\File::makeDirectory(base_path(&amp;quot;storage/framework/cache&amp;quot;), 0755, true, true);
//I can deliver routes for testing
//$this-&amp;gt;app['router']-&amp;gt;get('example', function () {
// return view(&amp;quot;testing&amp;quot;);
//})-&amp;gt;name('featured');
//Load a view for testing
//\View::addLocation(__DIR__ . '/../views');
//$this-&amp;gt;loadLaravelMigrations(['--database' =&amp;gt; 'testing']);
//Any migrations I need to bring in
$this-&amp;gt;loadMigrationsFrom([
'--database' =&amp;gt; 'testing',
'--path' =&amp;gt; realpath(__DIR__ . '/migrations')
]);
//$output = $this-&amp;gt;artisan('migrate', ['--database' =&amp;gt; 'testing']);
}
/**
* Setup logging
*/
protected function getEnvironmentSetUp($app)
{
$app-&amp;gt;configureMonologUsing(function ($monolog) {
$path = __DIR__ . &amp;quot;/logs/laravel.log&amp;quot;;
$handler = $handler = new StreamHandler($path, 'debug');
$handler-&amp;gt;setFormatter(tap(new LineFormatter(null, null, true, true), function ($formatter) {
/** @var LineFormatter $formatter */
$formatter-&amp;gt;includeStacktraces();
}));
/** @var \Monolog\Logger $monolog */
$monolog-&amp;gt;pushHandler($handler);
});
//setup db config if needed
//$app['config']-&amp;gt;set('database.default', 'testbench');
//$app['config']-&amp;gt;set('database.connections.testbench', [
// 'driver' =&amp;gt; 'sqlite',
// 'database' =&amp;gt; ':memory:',
// 'prefix' =&amp;gt; '',
//]);
$app['config']-&amp;gt;set('app.debug', env('APP_DEBUG', true));
//Does my pacakge had any default configurations I want to set
//$app['config']-&amp;gt;set('laravel-feature-flag.logging', true);
}</code></pre><p>}</code></pre><p>Also:</p></p><pre><code>composer require --dev "mockery/mockery:0.9.*"</code></pre><p>Since I use this a lot to mock and it does not come with &ldquo;orchestra/testbench&rdquo;</p><p>Now I am ready to run tests.</p><p>Here is a sample on</p><pre><code>&lt;?php<p>namespace Tests\Feature;</p><p>use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use AlfredNutileInc\HPClient\UserFromResource;
use function GuzzleHttp\json_decode;</p><p>class UserFromResourceTest extends TestCase
{</p><pre><code>use UserFromResource;
public function testResultsFromPayload()
{
$users = \File::get(base_path(&amp;quot;tests/fixtures/resources.json&amp;quot;));
$payload = \File::get(base_path(&amp;quot;tests/fixtures/comments_report_limited.json&amp;quot;));
$results = $this-&amp;gt;transformResouceToResourceName(json_decode($payload, true), json_decode($users, true));
$result = array_first($results);
$this-&amp;gt;assertArrayHasKey('user_name', $result);
$this-&amp;gt;assertEquals('Rob Sherali', $result['user_name']);
}</code></pre><p>}</p><p/></pre><p>I can easily use Facades, helpers etc that I am use to from Laravel.
And I can see logs in<code>logs/laravel.log</code></p></p><p>Also I add</p><pre><code> &lt;php>
&lt;env name="APP_ENV" value="testing"/>
&lt;env name="CACHE_DRIVER" value="array"/>
&lt;env name="SESSION_DRIVER" value="array"/>
&lt;env name="QUEUE_DRIVER" value="sync"/>
&lt;env name="MAIL_DRIVER" value="array"/>
&lt;/php></code></pre><p>To my<code>phpunit.xml.dist</code> so it can set defaults as Laravel does.</p></description><tags>laravel, testing, orchestra</tags></item><item><title>BrowserSync and Laravel</title><link>https://alfrednutile.info/posts/239/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/239/</guid><description><p>Quick reminder to take advantage of this amazing feature<a href="https://laravel.com/docs/5.6/mix#browsersync-reloading">https://laravel.com/docs/5.6/mix#browsersync-reloading</a></p><p>No more reloading your browser.</p><pre><code>yarn add browser-sync --dev</code></pre><p>then to your<code>webpack.mix.js</code> e.g. the domain of the site you are working on.</p><pre><code> mix.browserSync('foo.test');</code></pre><p>finally</p><pre><code>yarn run watch</code></pre><blockquote><p>Note turn off sourceMaps when running this else it can be kinda slow</p></blockquote></description><tags>laravel, note2self, vuejs</tags></item><item><title>GroupBy not Sorting by latest</title><link>https://alfrednutile.info/posts/240/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/240/</guid><description><p>Just to make this easy to find. I had a report to write which had numerous daily rows of the same related model data.
So in this cause I was tracking servers and security reports.</p><p>My reports where daily like this</p><table><thead><tr><th>id</th><th style="text-align:center">server_id</th><th style="text-align:right">failed</th><th>type</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">1</td><td style="text-align:right">1</td><td>security</td></tr><tr><td>2</td><td style="text-align:center">1</td><td style="text-align:right">1</td><td>testing</td></tr><tr><td>3</td><td style="text-align:center">1</td><td style="text-align:right">0</td><td>testing</td></tr></tbody></table><p>But a groupBy here on server_id would return ID 1 so it would appear as if it was still failing.</p><p>Adding</p><pre><code>$results = $results->whereRaw('ID IN ( select MAX(id) from reports GROUP BY server_id)');</code></pre><p>or double group by:</p><pre><code>$results = $results->whereRaw('ID IN ( select MAX(id) from reports GROUP BY server_id, type)');</code></pre><p>Did the trick to sort and group by that latest record, which<code>latest</code> did not do for me.</p></description><tags>laravel, note2self</tags></item><item><title>Troubleshoot Laravel Socialite and Github login</title><link>https://alfrednutile.info/posts/238/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/238/</guid><description><p>This has driven me mad too many times. Basically you will get very little feedback if there is any issue getting the token from Github.</p><p>The problem is in this method.</p><pre><code> public function user()
{
if ($this->hasInvalidState()) {
throw new InvalidStateException;
}<pre><code> $response = $this-&amp;gt;getAccessTokenResponse($this-&amp;gt;getCode());
$user = $this-&amp;gt;mapUserToObject($this-&amp;gt;getUserByToken(
$token = Arr::get($response, 'access_token')
));
return $user-&amp;gt;setToken($token)
-&amp;gt;setRefreshToken(Arr::get($response, 'refresh_token'))
-&amp;gt;setExpiresIn(Arr::get($response, 'expires_in'));
}</code></pre><p/></pre><p>This is in the<code>vendor/laravel/socialite/src/Two/AbstractProvider.php</code></p></p><p>So for example my real error was:</p><pre><code>array:3 [
"error" => "redirect_uri_mismatch"
"error_description" => "The redirect_uri MUST match the registered callback URL for this application."
"error_uri" => "https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch2"
]</code></pre><p>But this shows up overall as a token issue or as<code>GuzzleHttp\Exception\ClientException: Client error:</code>GET<a href="https://api.github.com/user?access_token=%60">https://api.github.com/user?access_token=`</a> resulted in a<code>401 Unauthorized</code> response:` so it is really hard to debug.</p><p>Here is to the next time I get this error to remind me where to<code>dd</code></p><p>Also the url gave it away too but by then it was gone:</p><pre><code>https://foo.te\st/login/github/callback?error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch&amp;state=foo</code></pre></description><tags>note2self, laravel</tags></item><item><title>Passing from Blade to VueJs</title><link>https://alfrednutile.info/posts/236/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/236/</guid><description><p>A lot of posts had<a href="https://medium.com/@m_ramsden/passing-data-from-laravel-to-vue-98b9d2a4bd23">this</a> style.</p><p>I ended up just needing this:</p><p><img src="https://dl.dropboxusercontent.com/s/huucm3vx4uyklq7/Screenshot%202018-02-23%2020.29.22.png?dl=0" alt=""/><p>The controller simply does this:</p><p><img src="https://dl.dropboxusercontent.com/s/qw7x7u7ayr7j441/Screenshot%202018-02-23%2020.29.52.png?dl=0" alt=""/></description><tags>laravel, note2self, vuejs</tags></item><item><title>Docker Laravel and Cron</title><link>https://alfrednutile.info/posts/234/</link><pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/234/</guid><description><p>This to this post<a href="https://laracasts.com/discuss/channels/servers/run-the-scheduler-in-a-docker-image/replies/325422">here</a></p><p>for the idea.</p><p>Basically running cron in Docker is easy BUT once the Host had more than one Docker client cron stopped working. No clue why but to solve this I did two things</p><p>One made a script that was on the Docker Client</p><p><code>/scheduler.sh</code></p><pre><code>#!/bin/bash
php /app/artisan schedule:run --verbose --no-interaction >> /dev/null 2>&amp;1
sleep 60</code></pre><p>Then I did this in the<code>Dockerfile</code></p><pre><code>COPY scheduler.sh /
RUN chmod 755 /scheduler.sh</code></pre><p>Finally<code>supervisord</code> manages it:</p><pre><code>[supervisord]
nodaemon=true<p>[program:scheduler]
command=/scheduler.sh
autostart=true
autorestart=true
user=root
startsecs = 0
numprocs=1
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr</p><p/></pre><p>the<code>startsecs</code> allows it not to be seen as a failing script</p></p><h3 id="full-dockerfile">Full Dockerfile</h3><pre><code>FROM ubuntu:16.04<p>#https://github.com/shipping-docker/dockerized-app/blob/master/docker/app/Dockerfile
MAINTAINER Alfred Nutile</p><p>RUN apt-get update<br>
&amp;&amp; apt-get install -y locales<br>
&amp;&amp; locale-gen en_US.UTF-8</p><p>ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8</p><h2 id="had-to-leave-both-update-requests">had to leave both update requests</h2><p>RUN apt-get update<br>
&amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y cron anacron nginx curl zip unzip git software-properties-common supervisor sqlite3<br>
&amp;&amp; add-apt-repository -y ppa:ondrej/php<br>
&amp;&amp; apt-get update<br>
&amp;&amp; apt-get install -y screen vim php7.1-fpm php7.1-cli php7.1-mcrypt php7.1-gd php7.1-mysql<br>
php7.1-pgsql php7.1-imap php-memcached php7.1-mbstring php7.1-xml php7.1-curl<br>
php7.1-sqlite3 php7.1-xdebug imagemagick php7.1-intl php7.1-zip<br>
&amp;&amp; php -r "readfile(&lsquo;<a href="http://getcomposer.org/installer');">http://getcomposer.org/installer');</a>" | php &ndash; &ndash;install-dir=/usr/bin/ &ndash;filename=composer<br>
&amp;&amp; mkdir /run/php<br>
&amp;&amp; apt-get remove -y &ndash;purge software-properties-common<br>
&amp;&amp; apt-get -y autoremove<br>
&amp;&amp; apt-get clean<br>
&amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</p><p>RUN mkdir /etc/nginx/ssl
COPY nginx.crt /etc/nginx/ssl/nginx.crt
COPY nginx.key /etc/nginx/ssl/nginx.key
COPY default /etc/nginx/sites-available/default
COPY php-fpm.conf /etc/php/7.1/fpm/php-fpm.conf
COPY xdebug.ini /etc/php/7.1/mods-available/xdebug.ini</p><h1 id="2018-02-16-09-13-39">2018 02 16 09 13 39</h1><p>COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY start-container /usr/local/bin/start-container
RUN chmod +x /usr/local/bin/start-container</p><h2 id="deal-with-cron-issues">Deal with cron issues</h2><p>COPY scheduler.sh /
RUN chmod 755 /scheduler.sh
CMD [ "start-container" ]</code></pre></p></description><tags>laravel, note2self, docker</tags></item><item><title>Laravel and AWS Rekognition</title><link>https://alfrednutile.info/posts/235/</link><pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/235/</guid><description>&hellip;.</description><tags>laravel, rekognition</tags></item><item><title>Pusher and Laravel Updates</title><link>https://alfrednutile.info/posts/233/</link><pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/233/</guid><description><p>Getting error &ldquo;Did you forget to specify the cluster when creating the Pusher instance&rdquo;</p><p>Then need to set<code>config/broadcasting.php</code>:</p><pre><code> 'pusher' => [
'driver' => 'pusher',
'key' => env('PUSHER_KEY'),
'secret' => env('PUSHER_SECRET'),
'app_id' => env('PUSHER_APP_ID'),
'options' => [
//
],
],</code></pre><p>to</p><pre><code> 'pusher' => [
'driver' => 'pusher',
'key' => env('PUSHER_KEY'),
'secret' => env('PUSHER_SECRET'),
'app_id' => env('PUSHER_APP_ID'),
'options' => [
"cluster" => 'us2',
"encrypted" => true
],
],</code></pre><p>And if still calling pusher manually in your js update to be:</p><pre><code> $window.client = new Pusher($window.pusher_key, {
cluster: 'us2',
encrypted: true
});<pre><code> var pusher = $pusher($window.client);</code></pre><p/></pre><p>the above depends on how are you putting the pusher info into $window but make sure to add the cluster and encryption</p></p><blockquote><p>NOTE yours may not be<strong>us2</strong></p></blockquote><p><img src="https://dl.dropboxusercontent.com/s/eu96h23ko3034q2/pusher_cluster.png?dl=0" alt=""/></description><tags>laravel, note2self</tags></item><item><title>Dusk and Production (with Dusk disabled)</title><link>https://alfrednutile.info/posts/232/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/232/</guid><description><pre><code>In DatabaseServiceProvider.php line 78:
Class 'Faker\Factory' not found</code></pre><p>I had a ton if issues getting dusk on production, especially since production would run</p><pre><code>composer install --no-dev --prefer-dist --no-interaction</code></pre><p>To get around this issue I had to do a few things</p><p>One, if you are stuck and can not even run php artisan on the server:</p><pre><code>rm bootstrap/cache/services.php
rm bootstrap/cache/packages.php</code></pre><p>Two, turn off auto discovery for Dusk and just add it to the app/Providers/AppServiceProvider.php</p><pre><code> public function register()
{
if ($this->app->environment('local', 'testing')) {
$this->app->register(DuskServiceProvider::class);
}
}</code></pre><p>and in<code>composer.json</code></p><pre><code> "extra": {
"laravel": {
"dont-discover": [
"laravel/dusk"
]
}
},</code></pre><p>Now if you still get a Faker error as I was let&rsquo;s move that up in our composer file:</p><pre><code> "fzaninotto/faker": "^1.7"
},
"require-dev": {
"mockery/mockery": "0.9.*",</code></pre><p>Okay so now you are ready.</p><p>As far as Travis goes I run this on the before_deploy</p><pre><code>before_deploy:
- rm .env
- export APP_ENV=production
- php artisan clear-compiled
- composer install --no-dev --prefer-dist --no-interaction</code></pre><p>And prevents the error while at the same time cleanup up my code before CodeDeploy bundles it up for deployment.</p></description><tags>laravel, note2self</tags></item><item><title>Testing Laravel API, Spark with Authentication</title><link>https://alfrednutile.info/posts/231/</link><pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/231/</guid><description><p>Just a reminder to self, if I want to test an API I made and need to pass and<code>api_token</code></p><pre><code>&lt;?php<p>namespace Tests\Feature;</p><p>use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Quote;
use Laravel\Spark\Repositories\TokenRepository;</p><p>class QuoteControllerTest extends TestCase
{</p><pre><code>use RefreshDatabase;
public function testGettingAQuoteUsingToken()
{
$user = factory(\App\User::class)-&amp;gt;create();
$team = factory(\App\Team::class)-&amp;gt;create();
$team-&amp;gt;users()-&amp;gt;attach($user-&amp;gt;id, ['role' =&amp;gt; &amp;quot;member&amp;quot;]);
$quote = factory(\App\Quote::class)-&amp;gt;create([
'team_id' =&amp;gt; $team-&amp;gt;id,
'posted_by' =&amp;gt; $user-&amp;gt;id
]);
$token = new TokenRepository();
$token = $token-&amp;gt;createToken(
$user,
'get_quote',
[]
)-&amp;gt;token;
$this-&amp;gt;json('GET', &amp;quot;/api/teams/{$team-&amp;gt;id}/quotes/random?api_token={$token}&amp;quot;)
-&amp;gt;assertStatus(200)-&amp;gt;assertJson([
'quote' =&amp;gt; $quote-&amp;gt;quote,
'by' =&amp;gt; $quote-&amp;gt;by,
'posted_by' =&amp;gt; [
'email' =&amp;gt; $user-&amp;gt;email,
'name' =&amp;gt; $user-&amp;gt;name,
'avatar' =&amp;gt; $user-&amp;gt;photo_url
]
]);
}</code></pre><p/></pre><p>Also I made a<code>database/factories/TeamFactory.php</code> file:</p></p><pre><code>&lt;?php
use Faker\Generator as Faker;
use App\User;
use App\Team;
$factory->define(Team::class, function (Faker $faker) {
return [
"name" => $faker->word,
"owner_id" => function() {
return factory(User::class)->create()->id;
}
];
});</code></pre><blockquote/></description><tags>laravel, note2self, testing</tags></item><item><title>Example of Making Documentation in Markdown with PDF Output</title><link>https://alfrednutile.info/posts/230/</link><pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/230/</guid><description><p>Many of the sites I make have a need for a Support page for staff to know how to do things like add content, manage users etc. This article will cover how I go about writing my help docs in Markdown and then displaying it on the website with an option to print as PDF.</p><h2 id="writing-markdown">Writing MarkDown</h2><p>To begin with, I made the help doc in mine. I made a sample one<a href="https://raw.githubusercontent.com/alnutile/alsblog5/master/docs/help.md">here</a></p><p>I save this to the root of the application<code>docs/help.md</code></p><h2 id="output-the-help-page-markdown-to-html">Output the Help Page Markdown to HTML</h2><p>So there are two things I want out of this, a TOC and the Markdown.</p><p>First I will install the needed libraries.</p><pre><code>composer require cebe/markdown:~1.1.1 laravelista/sherlock</code></pre><p>Then I make a controller<code>php artisan make:controller HelpController</code> and add a method<code>show</code>:</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use Illuminate\Http\Request;
use cebe\markdown\GithubMarkdown;
use Laravelista\Sherlock\Sherlock;</p><p>class HelpController extends Controller
{</p><pre><code>public function show(GithubMarkdown $markdown_writer, Sherlock $sherlock)
{
$path = base_path(&amp;quot;docs/help.md&amp;quot;);
$help = \File::get($path);
$toc = $sherlock-&amp;gt;deduct($help)-&amp;gt;getToc();
$help = $markdown_writer-&amp;gt;parse($help);
$help = $toc . '&amp;lt;hr&amp;gt;' . $help;
return view('help', compact(&amp;quot;help&amp;quot;));
}</code></pre><p>}</code></pre><pre><code>Route::get("help", "HelpController@show")->name("help");</code></pre><p>adding to my<code>web.php</code> file:
And a simple blade template to show the content:</p></p><pre><code>@extends('layouts.app')
&lt;!-- -->
@section('content')
&lt;div class="panel panel-default">
@section('title', 'Example Help')
&lt;div class="panel-heading">Example Help Output&lt;/div>
&lt;div class="panel-body">
{!! $help !!}
&lt;/div>
&lt;/div>
@endsection</code></pre><p>You can see the output<a href="https://alfrednutile.info/help">here</a></p><p>The author of the Sherlock library suggests a different way to inject the info but I opted for this. It will make more sense when I do the PDF output.</p><p>On the top of that page is a PDF link here is how I can provide that as well.</p><h2 id="output-to-pdf">Output to PDF</h2><p>Install the needed library.</p><pre><code>composer require barryvdh/laravel-dompdf</code></pre><blockquote><p>note I did have to install php7.1-gd and php7.1-dom php7.1-opcache</p></blockquote><p>adding to my<code>web.php</code> file:</p><pre><code>Route::get("pdf", "HelpController@pdf")->name("pdf");</code></pre><p>And update the controller to have a pdf method:</p><pre><code> public function pdf(GithubMarkdown $markdown_writer, Sherlock $sherlock)
{
$path = base_path("docs/help.md");
$help = \File::get($path);
$toc = $sherlock->deduct($help)->getToc();<pre><code> $help = $markdown_writer-&amp;gt;parse($help);
$help = $toc . '&amp;lt;hr&amp;gt;' . $help;
return \PDF::loadHTML($help)-&amp;gt;stream();
}</code></pre><p/></pre><blockquote/><p>Note: this is a good time to move the injected Classes into a<code>__costructor</code> since they are using in two methods in the same class</p></blockquote><p>Alright, now when you click the link o the help page it will output an inline PDF.</p></description><tags>laravel, note2self</tags></item><item><title>Laravel Asset Notes WIP</title><link>https://alfrednutile.info/posts/227/</link><pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/227/</guid><description><p>This is just a reminder area of all the minor details as I find them that I need to remember</p><h2 id="fontawesome">FontAwesome</h2><pre><code>yarn add font-awesome</code></pre><p>Then in my<code>resources/assets/sass/app.scss</code></p><pre><code>// Fonts
@import url("https://fonts.googleapis.com/css?family=Raleway:300,400,600");
// Variables
@import "variables";
// Bootstrap
@import "~bootstrap-sass/assets/stylesheets/bootstrap";
@import "~font-awesome/css/font-awesome";</code></pre><p>My webpack is the default</p><pre><code>mix.js('resources/assets/js/app.js', 'public/js')
.sass('resources/assets/sass/app.scss', 'public/css');</code></pre><p>set to go!</p><p>If using Less</p><pre><code>#resources/assets/less/app.less
@import "./../../../node_modules/font-awesome/less/font-awesome";</code></pre></description><tags>note2self, laravel, assets, wip</tags></item><item><title>PostMark SMTP for sending Notifications and Password Resets</title><link>https://alfrednutile.info/posts/226/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/226/</guid><description><p>I have been using PostMark for years<a href="https://postmarkapp.com">https://postmarkapp.com</a>
for sending emails, e.g. password reset and more.</p><p>They have an API but to get going with SMTP all the info is<a href="https://postmarkapp.com/developer/user-guide/sending-email/sending-with-smtp">here</a></p><p>Basically get your KEY and use it in your .env like this:</p><pre><code>MAIL_DRIVER=smtp
MAIL_HOST=smtp.postmarkapp.com
MAIL_PORT=587
MAIL_USERNAME=foo
MAIL_PASSWORD=foo
MAIL_ENCRYPTION=tls</code></pre><p>And all should work. Just make sure to</p><ul><li>Register the domain in their domain ui</li><li>Set the from info in Laravel</li></ul></description><tags>laravel, note2self</tags></item><item><title>Dusk Notes</title><link>https://alfrednutile.info/posts/225/</link><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/225/</guid><description><p>Just keeping a list of gotchas around dusk.</p><h2 id="use-refreshdatabase-not-working">use RefreshDatabase not working</h2><p>Cost: 1 hour lost</p><p>Basically I had to go back to the slower &ldquo;use DatabaseMigrations;&rdquo; otherwise it would not work. The user was null.</p><p>Links:<a href="https://laracasts.com/discuss/channels/testing/dusk-problem-databasetransactions">This thread helped</a></p><h2 id="headless-or-not">Headless or not</h2><p>Cost: 1 hour lost or less</p><p>For some odd reasons my tests started coming up blank.</p><p>I turned off headless in this class<code>DuskTestCase</code></p><pre><code> protected function driver()
{
$args = [
'--disable-gpu',
'--headless'
];
if (env("HEADLESS_OFF")) {
$args = [
'--disable-gpu'
];
}
$options = (new ChromeOptions)->addArguments($args);<pre><code> return RemoteWebDriver::create(
'http://localhost:9515',
DesiredCapabilities::chrome()-&amp;gt;setCapability(
ChromeOptions::CAPABILITY,
$options
)
);
}</code></pre><p/></pre><p>And this way it still works on travis.</p></p></description><tags>note2self, laravel, dusk</tags></item><item><title>Laravel Shift and Your Day Job</title><link>https://alfrednutile.info/posts/223/</link><pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/223/</guid><description><p>** UPDATED November 22 2017 **</p><p>The service<a href="https://laravelshift.com/shifts">Laravel Shift</a> is a great way to save a ton of time and keep your Laravel application up to date.</p><p>But sometimes you may not be allowed to share access to your company Github account for this process since it is hard to limit access at the repo level.</p><p>In this case I have a quick way to get your work done and back into the company repo IF that is okay with your boss.</p><p>Here are the steps:</p><p>Make a new branch since this is a huge update</p><p>Then make a repo on your account the is PRIVATE</p><p>Then in the same folder of the exiting repository type :</p><pre><code>git remote add shift git@github.com:alnutile/planner.git</code></pre><p>The tricky part here is that if there are private dependencies.</p><p>There is no easy answer, yes since this is a branch you could:</p><ol><li><p>remove those dependencies from composer and<code>config/app.php</code></p></li><li><p>then run<code>composer install</code> again to clean out the lock file (UPDATE: just delete the composer.lock file once you know the install is working)</p></li></ol><p>Then push to your repo:</p><pre><code>git push shift 5.5</code></pre><p>Now go to the Shift website and start the process pointing to the repo you just made. Once paid then in moments you will get a PR.
Merge that in and start the process of fixing any files it noted as missing.
I typically will pull this work down locally.</p><pre><code>git pull --rebase shift 5.5</code></pre><p>Then run your tests to make sure all is well</p><p>When done with any manual fixes and if you need to run Shift again:</p><pre><code>git push shift 5.5</code></pre><p>Now rinse and repeat till you are 5.5</p><blockquote><p>NOTE: After each merge I tend to clean out vendor and composer.lock:</p></blockquote><pre><code>rm -rf composer.lock vendor</code></pre><p>This just seems to be a lot faster of a process.</p></description><tags>laravel, note2self</tags></item><item><title>Wrapping JSONEditor in Vue as Well as Laravel Blade</title><link>https://alfrednutile.info/posts/222/</link><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/222/</guid><description><p><strong>UPDATED November 05 2017</strong></p><p>This will cover how to make a<a href="https://github.com/josdejong/jsoneditor">JSONEditor</a> component that I can then use in a Blade template and listen to events.</p><p>You will end up with this:</p><p><img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt=""/><p>First making sure I have all the packages I need:</p><pre><code> //package.json
"devDependencies": {
"axios": "^0.17",
"bootstrap-sass": "^3.3.7",
"cross-env": "^5.0.1",
"jquery": "^3.2",
"laravel-mix": "^1.0",
"lodash": "^4.17.4",
"vue": "^2.1.10"
},
"dependencies": {
"select2": "^4.0.5",
"jsoneditor": "^5.9.6"
}</code></pre><p>And to load it into my bootstrap file:</p><pre><code>//resources/assets/js/bootstrap.js
try {
window.$ = window.jQuery = require('jquery');
require('bootstrap-sass');
require("select2");
require("jsoneditor");
} catch (e) {
console.log("Error loading jquery");
}</code></pre><p>Which gets pulled in by my app.js which I also register the global component:</p><pre><code>//resources/assets/js/app.js
require('./bootstrap');<p>window.Vue = require(&lsquo;vue&rsquo;);</p><p>/**</p><ul><li>Using this as a globle event emmitter for components to easily talk to other components
*/
window.EventBus = new Vue();</li></ul><p>Vue.component(&lsquo;cat-json-editor&rsquo;, require('./components/JSONEditor'));</p><p>Vue.component(&lsquo;cat-config-field&rsquo;, require('./components/ConfigField'));
//end of file</code></pre><blockquote/><p>The app.js and bootstrap.js are default workflows of Laravel</p></blockquote><p>Then I will make the component:</p><pre><code>//resources/assets/js/components/JSONEditor.vue
&lt;template>
&lt;div>
&lt;div id="jsoneditor">&lt;/div>
&lt;/div>
&lt;/template><p>&lt;script></p><pre><code>import JSONEditor from 'jsoneditor';
export default Vue.extend({
props: ['config'],
mounted: function () {
let self = this;
let container = document.getElementById('jsoneditor');
let options = {
onChange: function() {
EventBus.$emit('config-updated', editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) { editor.set(window.config); }
}
});</code></pre><p>&lt;/script></p><p>&lt;style type="text/css">
#jsoneditor {
width: 800px;
height: 600px;
}
&lt;/style></code></pre><p>Here I register the props and I setup some config using code I placed into window from my controller. You can use<a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">this tool</a> for this process.
I could have passed it into the component but chose not to.</p></p><p>So now when there is a change it will emit the change to the global<code>EventBus</code></p><p>Now for the<code>ConfigField</code> component:</p><pre><code>&lt;&lt;template>
&lt;div>
&lt;input type="hidden" id="config" name="config" class="form-control" rows="30" v-model="config">
&lt;/div>
&lt;/template><p>&lt;script></p><pre><code>export default Vue.extend({
data() {
return {
'config': JSON.stringify(window.config)
}
},
methods: {
configUpdated: function(json) {
this.config = JSON.stringify(json);
}
},
created() {
EventBus.$on(&amp;quot;config-updated&amp;quot;, this.configUpdated);
}
});</code></pre><p>&lt;/script></code></pre><p>With these two components in place I now need to add the components to the HTML template.</p></p><p>After this is setup my Blade file has the needed Vue listener etc to update the form (non-ajax) as needed:</p><pre><code>@push('scripts')
&lt;script>
new Vue({
el: '#config_form',<pre><code> })
&amp;lt;/script&amp;gt;</code></pre><p>@endpush
&lt;!&ndash; Form above this that is doing all the form submission work &ndash;>
&lt;div id="config_form">
&lt;label for="config">Config&lt;/label>
&lt;cat-json-editor>&lt;/cat-json-editor>
&lt;cat-config-field>&lt;/at-config-field>
&lt;/div></p><p/></pre><p>In this case I am taking advantage of Blades<a href="https://laravel.com/docs/5.5/blade#stacks">stack feature</a></p></p><p>And the minor amount of work here just mounts Vue onto the<code>#config_form</code></p><p>Then I use Vue to listen to the event &ldquo;config-updated&rdquo;. From there, since this is not about Ajax requests, I update the hidden field on the form.
I could have done this with JQuery but just wanted to get use to this Vue workflow. Also I could see sending this over Ajax sooner than later even if just for validation notices etc.</p><p>Here is a quick look at the Scope of the objects:</p><p><img src="https://dl.dropboxusercontent.com/s/nc1yn0hci05mtq4/events.png?dl=0" alt=""/></description><tags>vue, vue2, laravel, blade, note2self</tags></item><item><title>Laravel, Dusk and Valet</title><link>https://alfrednutile.info/posts/221/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/221/</guid><description><p>By default I set my<code>phpunit.xml</code> to use<code>test</code> as my database:</p><pre><code> &lt;php>
&lt;env name="APP_ENV" value="testing"/>
&lt;env name="CACHE_DRIVER" value="array"/>
&lt;env name="SESSION_DRIVER" value="array"/>
&lt;env name="MAIL_DRIVER" value="log"/>
&lt;env name="QUEUE_DRIVER" value="sync"/>
&lt;env name="DB_DATABASE" value="test"/> &lt;-- this line here
&lt;/php></code></pre><p>But with<a href="https://laravel.com/docs/5.5/valet">Valet</a> and<a href="https://laravel.com/docs/5.5/dusk">Dusk</a> this led to the browser using my default database and not<code>test</code>
but the PHPUnit test itself was using<code>test</code> so the user I created and logged in as was not available in the browser.</p><p>I tried to set<code>.env.dusk.local</code> and I tried<code>phpuni.dusk.xml</code> none of it worked so I had to remove<code>&lt;env name="DB_DATABASE" value="test"/></code></p><p>This is a bummer and I am sure I am missing something. What this means and my tests reset my database for my local app which ideally it would not since it is really nice to keep state.</p></description><tags>note2self, laravel, testing</tags></item><item><title>WIP AWS Batch and Workers with Laravel</title><link>https://alfrednutile.info/posts/220/</link><pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/220/</guid><description><h1 id="sending-docker-commands-to-get-a-task-done">Sending Docker Commands to Get A Task Done</h1><p>This article will show how to get started with AWS Batch and Docker to spin up a &ldquo;worker&rdquo;</p><p>By the time you are done reading it you will:</p><ol><li>Have a Docker image to run your command in.</li><li>Deploy the Docker image to AWS ECR</li><li>And Run a Task on the AWS Batch system, or a 100 tasks, does not matter.</li><li>Finally you will have the scripts needed to fully build AWS Batch with CloudFormation, e.g. super simple</li></ol><h2 id="building-the-laravel-worker">Building the Laravel Worker</h2><p>This can be any language you want, any framework or none! I will focus on Laravel.</p><p>Either way we need a git repo, so later we can push this and do a Docker build on the CI via the deploy scripts.</p><p>Note the 2 Commands</p><ul><li>One to manage all the Tasks and then stitch the results together</li><li>One to just covert the image to PDF
&ndash; depend on?</li></ul><p>Install SDK</p><h3 id="the-command">The Command</h3><p>Before you get going install<a href="https://aws.amazon.com/cli/">AWS CLI</a> on your machine.</p><p>Make sure you have your credentials and profiles setup per the docs<a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">here</a></p><p>Then the rest will work off those credentials as we make new ones per application and you just place them into your profile via<code>~/.aws/credentials</code> and<code>~/.aws/config</code></p><h3 id="installing-incomings">Installing Incomings</h3><h2 id="building-the-docker-container-to-run-this-work">Building the Docker container to run this work</h2><pre><code>docker-compose build //this will be needed locally
docker-compose run --rm -w /app app php artisan
docker-compose run app php artisan security:scan --git-repo=https://github.com/alnutile/security-scanner-show-error-poc
docker-compose run -w /app app php artisan batch:convert_image_to_pdf --image-url=https://dl.dropboxusercontent.com/s/d2sx0wjheb7dk0p/example_batch.jpg --destination=batch-example/foo</code></pre><h2 id="setting-up-aws-to-run-the-work-on">Setting up AWS to run the work on.</h2><h3 id="compute-environment">Compute Environment</h3><p>For starters there is the Compute Environment (CE). This is what manages the scaling of the EC2 instances.</p><p>The script is HERE. But this is only needed once. I will Explain in a moment.</p><h3 id="job-definition">Job Definition</h3><p>Then there is the JobDefinitions. This is where we can define the Job we want to run and the Compute Environment to run it on. Let the CE figure out the scaling, and hence we can just build one and share it with every one.
So if you have a CE already build try putting your JobDefinition on that before making another one for your Worker.</p><p>The script is HERE.</p><p>Open the scripts, they are just JSON. Good docs are<strong>HERE</strong> on how to make, or read these scripts.</p><p>Once those are all setup take the AWS KEY and Secret it gave you and use it to setup you local AWS CLI.</p><p>This is key for a sane workflow. Here is a link [<strong>HERE</strong>] get your profile right.</p><p>Once you have this setup all the rest will fall into place.</p><h2 id="deploying-to-ci">Deploying to CI</h2><p>Before we push let&rsquo;s make sure that<code>.gitignore</code> has:</p><pre><code>docker/app/packaged/*
!docker/app/packaged/.gitkeep</code></pre><p>Plus all the default Laravel ignores including<code>.env</code></p><p>Deploy Script
Now we need to get this work to CI</p><h2 id="going-to-aws-ui-to-run">Going to AWS UI to run</h2><p>This is annoying lets make a command for this&hellip;</p><h3 id="the-testing-command">The Testing Command</h3><p>More import that is how a &ldquo;requesting&rdquo; app will call this.</p><p><strong>DIAGRAM HERE</strong></p><h2 id="putting-it-all-together">Putting it all together</h2><p>Show running 10 jobs via the command</p><h2 id="now-taking-it-a-bit-further">Now Taking it a bit further</h2><p>The command did a lot</p><ul><li>Got Image</li><li>Made into PDF</li><li>Stitched them all together</li></ul><p>But now let&rsquo;s take this a bit further. I am going to make 2 JobDefinitions.</p><p>One will kick off an orchestrate the work by creating a job per image, tracking the progress of those jobs, and
When all those jobs are done knit them together!</p><p>Here is how it will look.</p><h2 id="summary-of-install">Summary of Install</h2><p>Get Docker file in place docker/app/DockerFile
Get Packaged file in place
Setup Core CloudFormation</p><ul><li>ECR</li><li>JobDefinition</li><li>User Key/Secret
Get docker-compose inlace
Get Travis.yml in place and docker/deploy.bash
See diagram on how this all comes together</li></ul></description><tags>laravel, note2self, aws, wip</tags></item><item><title>Mocking Models OutSide of Laravel</title><link>https://alfrednutile.info/posts/219/</link><pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/219/</guid><description><p>This all comes down to me using<a href="https://github.com/orchestral/testbench">https://github.com/orchestral/testbench</a></p><p>With this in place I can work on an external library as if it is in Laravel.</p><p>The one place I ran into trouble on though was mocking model related methods like<code>all</code> for example a model<code>Foo</code> being called as<code>\App\Foo::all()</code> was hard to mock cause all is stacic:</p><pre><code>//\Illuminate\Database\Eloquent\Model::all
public static function all($columns = ['*'])
{
return (new static)->newQuery()->get(
is_array($columns) ? $columns : func_get_args()
);
}</code></pre><p>But once I did this to my test:</p><pre><code> public function testGetWithNoResults()
{
$mock = \Mockery::mock("alias:AlfredNutileInc\LaravelFeatureFlags\FeatureFlag");
$mock->shouldReceive('all')->once()->andReturn([]);<pre><code> App::instance(FeatureFlag::class, $mock);
$fjs = new FeatureFlagsForJavascript();
$this-&amp;gt;assertEmpty($fjs-&amp;gt;get());
}</code></pre><p/></pre><p>It was mocked!</p></p></description><tags>laravel, note2self</tags></item><item><title>Versions and Branching a Library</title><link>https://alfrednutile.info/posts/218/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/218/</guid><description><p>At work<a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a> and I had to, using many examples on of libraries we use, to finalize how to branch and version our libraries.</p><p>There should be one branch for each major version (<code>1.0</code>,<code>2.0</code>, etc).</p><p>These should be the only branches besides<code>master</code>.</p><p>Releases within these versions should be tagged following semantic<a href="http://semver.org/">versioning guidlines</a> (<code>v1.2.3</code> for example).</p><p>In general, all work should be done via pr from the<code>master</code> branch and then merged into whatever the current branch is.</p><p>The only exception is when you are making minor or patch version changes to a previous version.</p><p>For example, if the most current version is<code>2.0</code>, then any changes to master via pr and then merged in to the<code>2.0</code> branch. However, at that point any changes required by the<code>1.0</code> branch would be made via pr off of the<code>1.0</code> branch. See fig.1 for an example.</p><p><img src="https://www.dropbox.com/s/wzn4loxi3u7vzck/Branching%20Libraries%20and%20Packages.png?raw=1" alt="">
figure 1</p><p>When creating a new version, the package&rsquo;s<code>composer.json</code> should alias<code>dev-master</code> to the latest version:</p><pre><code>"extra": {
"branch-alias": {
"dev-master": "3.0-dev"
}
},</code></pre></description><tags>laravel, versioning, note2self</tags></item><item><title>Machine to Machine Laravel Passport</title><link>https://alfrednutile.info/posts/211/</link><pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/211/</guid><description><p>Recently I needed to create an OAuth around Machine to Machine authentication<a href="https://laravel.com/docs/master/passport#client-credentials-grant-tokens">here</a></p><p>The docs are good but I must have missed something obvious or maybe I just well missed something obvious.</p><p>Basically I just kept getting<code>Unauthenticated.</code> and this makes sense since I received the token using</p><pre><code>grant_type:client_credentials
client_id:1
client_secret:foobar</code></pre><p>So after following the docs I had to then to the following</p><pre><code>Route::middleware('auth:api')->get('/user', function (Request $request) {
return $request;
});</code></pre><p>with</p><pre><code>Route::middleware('auth.client')->get('/user', function (Request $request) {
return "FOO";
});</code></pre><p><strong>&lsquo;auth.client&rsquo;</strong> being key!</p><p>And updated<code>app/Http/Kernel.php</code>:</p><pre><code> protected $routeMiddleware = [
'auth' => \Illuminate\Auth\Middleware\Authenticate::class,
'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'bindings' => \Illuminate\Routing\Middleware\SubstituteBindings::class,
'can' => \Illuminate\Auth\Middleware\Authorize::class,
'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
'auth.client' => \Laravel\Passport\Http\Middleware\CheckClientCredentials::class,
];</code></pre><p>Adding<code>auth.client</code> then I was back in business.</p></description><tags>laravel, passport</tags></item><item><title>Dusk and Homestead</title><link>https://alfrednutile.info/posts/209/</link><pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/209/</guid><description><p>Working on learning<a href="https://laravel.com/docs/5.4/dusk#introduction">Dusk</a> and really excited to get going with it.</p><p>But running it in homestead proved to be a bit tricky.</p><p>After following the docs and running<code>php artisan dusk</code> not much happened. Sure if I ran it on my Mac and it just worked but my tests needed to do migrations and what not and I want to keep my work in Homestead.</p><p>So a few steps later and it worked thanks to this post<a href="https://github.com/laravel/dusk/issues/50#issuecomment-275155974">https://github.com/laravel/dusk/issues/50#issuecomment-275155974</a></p><h2 id="local-host-file">Local host file</h2><p>Make sure to edit<code>sudo vim /etc/hosts</code> and add the APP_URL there as well</p><pre><code>127.0.0.1 webforms.dev</code></pre><p>Then make sure you can hit it from inside homestead as well.</p><p><code>curl -X GET http://webforms.dev</code></p><p>All set?</p><h2 id="then-run-xvfb">Then run xvfb</h2><p>This is a virtual frame buffer that Chrome runs in. Pretty cool really<a href="https://en.wikipedia.org/wiki/Xvfb">https://en.wikipedia.org/wiki/Xvfb</a></p><p>So I like to use screen to start a new session</p><p><code>screen -S running_xvfb</code></p><p>and then in there run</p><p><code>Xvfb :0 -screen 0 1280x8000x24 &amp;</code></p><p>Now we want to swap back to our default session<code>CTRL+A</code> then still holding CTRL let go of A and press D.</p><p>You are back at your default terminal</p><p>Type:</p><pre><code>vagrant@homestead:~/Code/webforms$ screen -ls
There is a screen on:
16315.running_xvfb (04/24/2017 12:34:09 AM) (Detached)
1 Socket in /var/run/screen/S-vagrant.</code></pre><p>Now it all just worked!</p></description><tags>note2self, laravel</tags></item><item><title>Simple Slack Trait Get Request and return Response</title><link>https://alfrednutile.info/posts/208/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/208/</guid><description><p>In this example I get a message from Slack (but this can be any message) and then send results back to Slack.</p><p>One thing to keep in mind you really want to get your code working out side of Slack since you cannot easily do a push, test, fix, push, test as we normally do when working locally with a browser.</p><p>Get your PHPUnit working for a class that will handle the payload, then you know when you plug it in to the Slack Route it will &ldquo;just work&rdquo;.</p><p>More on that shortly&hellip;</p><p><a name="receive"/></p><h3 id="getting-a-message">Getting a message</h3><p>Going with the POST settings we will setup Slack to send a POST request to a URL we are building.</p><p>So I will show some tests first<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php">here</a> and then trait<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slacktrait-php">here</a></p><p>We have a few features going on to consider</p><p>All of which I use this fixture to replicate the incoming Slack Message</p><pre><code>[
{"token": "foo"},
{"team_id": "bar"},
{"team_domain": "baz"},
{"channel_id": "C0JKRSDEV"},
{"channel_name": "test"},
{"user_id": "U02NC4UL2"},
{"user_name": "alfrednutile"},
{"command": "/hp:report"},
{"text": "not really needed yet"},
{"response_url": "https://hooks.slack.com/commands/foo/bar/baz"}
]</code></pre><p>see<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slack_incoming_run_report-json">here</a> too.</p><h4 id="is-this-coming-from-the-right-token">Is this coming from the right token?</h4><p><code>testSuccessVerifiesToken</code> and bad<code>testVerifiesToken</code></p><p>see example<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L34">here</a></p><h3 id="is-this-even-coming-from-slack">Is this even coming from Slack?</h3><p><code>testSuccessSlackURL</code> and<code>testFailWrongURL</code></p><p>see example<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L61">here</a></p><h3 id="is-this-person-even-allowed-to-do-this">Is this person even allowed to do this?</h3><p><code>testSuccessVerifiesPerson</code>
see example<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L49">here</a></p><h3 id="is-there-infotext-in-the-incoming-message-for-me-to-consider">Is there info/text in the incoming message for me to consider</h3><p><code>testKeepSheetsAsTrue</code> shows me looking for text.</p><p>Again easy stuff to test outside of Slack.<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runreportslacktest-php-L95">here</a></p><p><a name="send"/></p><h2 id="okay-now-the-message-is-good-how-to-send-one-back">Okay Now the message is good how to send one back?</h2><p>The route has to becomes a non-auth and non-basic auth protected route so Slack can POST to it</p><p>Here is my<code>nginx</code><code>default.conf</code>config (see docs on how to update this using CloudFormation)</p><pre><code>location /api/v1/slack/ { auth_basic "off"; allow all; satisfy any; try_files $uri $uri/ /index.php?$query_string; }</code></pre><p>To allow this to happen see the full file here LINK.</p><p>Then the route is simple<code>routes/api.php</code></p><pre><code>Route::group(['prefix' => 'v1'], function(){
Route::post('slack/hp_reports', 'RunReportSlackController@handle');
Route::post('slack/hp_user_reports', 'RunUserLevelReportSlackController@handle');<p>});</code></pre><p>The Controller<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runuserlevelreportslackcontroller-php-L21">here</a> does as little work as possible.</p></p><p>Though I would like to move these into a Validation</p><pre><code> if(!$this->token) {
$this->setToken(env('SLACK_TOKEN_REPORT_REQUEST'));
}<pre><code> if($this-&amp;gt;notASlackUrl($request)) {
$message = sprintf(&amp;quot;Not a Slack URL&amp;quot;);
throw new NotSlackUrlException($message);
}</code></pre><p/></pre><p>Again the Controller should not have to do too much.</p></p><p>But the logic is outside the controller and which now is outside the scope of the example since at this point we just have, as seen in the fixture above so do what you want with the incoming JSON.</p><p>Once done it sends it back to the Controller<a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-runuserlevelreportslackcontroller-php-L43">here</a> to respond back to Slack using<code>respondToSlack</code> seen in<code>SlackTrait.php</code><a href="https://gist.github.com/alnutile/822ec5907a4752b74d38dd63e6eeba39#file-slacktrait-php-L89">here</a></p><p>Which simple breaks it up into an array</p><pre><code> public function respondToSlack($message, $attachment, $type = 'in_channel')
{
return ['response_type' => $type, 'text' => $message, 'attachments' => [ ['text' => $attachment ] ] ];
}</code></pre><p>Attachments in this case just being more text. For our team you can see it when you type<code>/sd behat</code> in Slack. This request goes to our app, looks for the word(s) behat in the docs and replies back to Slack as such</p><pre><code>slash-command APP [11:43 AM]
Your original search slack total found 3
Title: Holiday and other Team Processes URL: https://foo.com/team-managment
Title: Getting Started New to the Team URL: https://foo.com/new-to-the-team
Title: Onboarding Links URL: https://foo.com/onboarding-links</code></pre><p>&ldquo;Your original search slack total found 3&rdquo; in the text and the rest the &ldquo;attachments&rdquo; is the results we get from Slack</p><h2 id="env">ENV</h2><p>One tricky part here is the<code>.env</code></p><p>I am looking for<code>SLACK_TOKEN</code> but this will get old soon if I do a few of these since they all have different tokens. I would suggest an<code>config/slack.php</code> to then have areas for this.</p><pre><code>&lt;?php<p>return [
&lsquo;slack_report&rsquo; => env(&lsquo;SLACK_TOKEN_FEATURE_FOO&rsquo;, &lsquo;12345&rsquo;),
];</code></pre></p></description><tags>slack, laravel</tags></item><item><title>Instantiate Request for Testing</title><link>https://alfrednutile.info/posts/206/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/206/</guid><description><p>When I need to make a request for a test in which the Class is expecting a<code>\Illuminate\Http\Request</code> I can do this for a file based or non file based request.</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('tests/fixtures/example_profile.jpg');
$originalName = 'example_profile.jpg';
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file->set('profile_image', $upload);
$request->files = $file;<pre><code> $this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/example_profile.jpg')), &amp;quot;File Not found&amp;quot;);
}</code></pre><p/></pre><p>Or just Mocked</p></p><pre><code> $fixture = File::get(base_path('tests/fixtures/slack_incoming_run_report.json'));
$fixture = json_decode($fixture, true);
//$request = new \Illuminate\Http\Request([], [], $fixture,[], [], [], false);
$request = Mockery::mock(\Illuminate\Http\Request::class);
$request->shouldReceive('all')->andReturn($fixture);
/** @var \App\PlannerSlackReport $report */
$report = new \App\PlannerSlackReport();
$report->handle($request);</code></pre><blockquote/></description><tags>laravel, note2self, php, testing</tags></item><item><title>Load Testing With Behat</title><link>https://alfrednutile.info/posts/205/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/205/</guid><description><p>The team I am a part of write our tests using Behat for the most part as we try to practice BDD and take advantage of how writing in Gherkin can lead our code to be more inline with the language of the business.</p><p>In this case I wanted to replicate some file upload and processing that the system will be doing during a training that will happen next week as 4 users are uploading files and going through the entire process.</p><p>To do this I made an Artisan command to run these tests in parallel</p><pre><code>&lt;?php<p>namespace App\Console\Commands;</p><p>use Illuminate\Console\Command;
use Symfony\Component\Process\Process;</p><p>class LoadTestingCommand extends Command
{
public $processes;</p><pre><code>protected $signature = 'load:testing {number} {--profile=default}';
protected $description = 'Run x number of load tests';
public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;processes = [];
foreach(range(1, $this-&amp;gt;argument('number')) as $index) {
$this-&amp;gt;info(sprintf(&amp;quot;Start running process %d&amp;quot;, $index + 1));
$command = $this-&amp;gt;getCommandToRun();
$process = new Process($command);
$process-&amp;gt;setTimeout(12000);
$process-&amp;gt;start();
$this-&amp;gt;processes[] = $process;
}
while(count($this-&amp;gt;processes) &amp;gt; 0) {
/** @var Process $process */
foreach($this-&amp;gt;processes as $key =&amp;gt; $process) {
if(!$process-&amp;gt;isRunning()) {
$this-&amp;gt;info(sprintf(&amp;quot;Done running process %d&amp;quot;, $key));
$this-&amp;gt;info($process-&amp;gt;getOutput());
unset($this-&amp;gt;processes[$key]);
}
$this-&amp;gt;info(sprintf(&amp;quot;Still running process %d&amp;quot;, $key));
sleep(2);
}
}
}
private function getCommandToRun()
{
$profile = $this-&amp;gt;option('profile');
$command = sprintf(&amp;quot;vendor/bin/behat --profile=%s -se2e_load_test&amp;quot;, $profile);
return $command;
}</code></pre><p>}</code></pre><p>Just very simple for now. It allows the user to pass the number of concurrent tests to run and the profile to use, eg Staging, Production etc.</p></p><p>Here is the<code>behat.yml</code></p><pre><code>load_testing_staging:
extensions:
Behat\MinkExtension:
base_url: https://foo-staging.bar.com<p>load_testing_production:
extensions:
Behat\MinkExtension:
base_url:<a href="https://foo.bar.com">https://foo.bar.com</a></code></pre><p>Now when I run the command we get 4 windows starting up interacting with the site, and a terminal running top just to see if there are any obvious issues. I could take this a lot further by running other monitoring tools on the servers but in this case I wanted to just get a sense of how well it would work for there to be x users uploading files and what not at the same time.</p></p><p><img src="https://dl.dropboxusercontent.com/s/i4r7er84jh5vqtg/loadtesting.png?dl=0" alt=""/></description><tags>behat, laravel</tags></item><item><title>Example Job Format for Queue</title><link>https://alfrednutile.info/posts/204/</link><pubDate>Sat, 14 Jan 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/204/</guid><description><p>Sometimes I just need this info to remind myself what a job looks like in a queue and how to mock it etc.</p><p>In this case I have a simple class that will be used to dispatch the job.</p><pre><code>&lt;?php<p>namespace App\Jobs;</p><p>use Illuminate\Bus\Queueable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Log;</p><p>class RandomWordJob implements ShouldQueue
{
use InteractsWithQueue, Queueable, SerializesModels;</p><pre><code>public $payload = [];
public function __construct($payload)
{
$this-&amp;gt;payload = $payload;
}
/**
* Execute the job.
*
* @return void
*/
public function handle()
{
Log::debug(&amp;quot;Here&amp;quot;, [var_dump($this-&amp;gt;payload)]);
dd($this-&amp;gt;payload);
}</code></pre><p>}</code></pre><p>Notice, in this case I put an array payload into the constructor. And it is<strong>public</strong> because I want to be passed into the queue.</p></p><p>What the payload in the queue will look like is this</p><pre><code>{"job":"Illuminate\\Queue\\CallQueuedHandler@call","data":{"commandName":"App\\Jobs\\RandomWordJob","command":"O:22:\"App\\Jobs\\RandomWordJob\":5:{s:7:\"payload\";a:2:{s:11:\"word_number\";i:28;s:17:\"destination_queue\";s:20:\"docker-words-private\";}s:6:\"\u0000*\u0000job\";N;s:10:\"connection\";s:8:\"requests\";s:5:\"queue\";N;s:5:\"delay\";N;}"}}</code></pre><p>Serialized data.</p><p>For a quick example of making this happen I made an Artisan command just to put job(s) into the queue so I can see this and maybe for fun just see the whole process through (but honestly it is best to mock the queue and know your class will work if the payload is right) more on that in a moment.</p><pre><code>&lt;?php<p>namespace App\Console\Commands;</p><p>use App\Jobs\RandomWordJob;
use Illuminate\Console\Command;</p><p>class PutSampleRequestInQueue extends Command
{
/**
* The name and signature of the console command.
*
* @var string
*/
protected $signature = &lsquo;docker-work:sample-request&rsquo;;</p><pre><code>/**
* The console command description.
*
* @var string
*/
protected $description = 'Put a sample request into the right queue';
/**
* Create a new command instance.
*
* @return void
*/
public function __construct()
{
parent::__construct();
}
/**
* Execute the console command.
*
* @return mixed
*/
public function handle()
{
$payload = [
'word_number' =&amp;gt; random_int(1, 100),
'destination_queue' =&amp;gt; &amp;quot;docker-words-private&amp;quot;
];
$job = (new RandomWordJob($payload))-&amp;gt;onConnection('requests');
dispatch($job);
}</code></pre><p>}</p><p/></pre><p>From here I can now run<code>php artisan queue:work requests &ndash;once</code> to see my class get this job and “process it”</p></p><p><img src="https://dl.dropboxusercontent.com/s/t5nhb2gyich2hfy/example_get_job.png?dl=0" alt=""/><h2 id="testing">Testing</h2><p>But now for ease of testing this Job Class I can just do this.</p><pre><code> /**
* @test
*/
public function process_payload_make_word_count_and_destination_in_payload()
{<pre><code> //Should get the number
//make a word
//make a payload to put back into the queue
$payload = [
'word_number' =&amp;gt; random_int(1, 100),
'destination_queue' =&amp;gt; &amp;quot;docker-words-private&amp;quot;
];
$job = new \App\Jobs\RandomWordJob($payload);
$job-&amp;gt;handle();
PHPUnit_Framework_Assert::assertNotNull($job-&amp;gt;getResults());
}</code></pre><p/></pre><p>In this case I will store some results of the process, since it is not saved in a databse for this example, in the object and then in my test prove the class did what it was suppose to do.</p></p><p>Basically I know Laravel works, I know SQS works, and I know how the data will be handed to the class as it is instantiated so I am just testing the Class and how it handles the request.</p><p>Note too like a Controller it is really key to handle inside a Try/Catch</p><pre><code> public function handle()
{
try {
Log::debug("Here", [var_dump($this->payload)]);
dd($this->payload);
} catch (\Exception $e) {
Log::debug(sprintf("Failed to work :( %s", $e->getMessage()));
}
}</code></pre></description><tags>note2self, laravel</tags></item><item><title>LarScanner simple foundation for building a good Laravel Security Scanner</title><link>https://alfrednutile.info/posts/203/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/203/</guid><description><p>Just the start to a new library that I hope others will help out on<a href="https://github.com/alfred-nutile-inc/larscanner">https://github.com/alfred-nutile-inc/larscanner</a></p><p>There is a roadmap in the readme.md but basically how to start adding more and more features on this to protect our applications built in Laravel.</p></description><tags>laravel, security</tags></item><item><title>Super Simple Sending Messages to Slack from Laravel</title><link>https://alfrednutile.info/posts/202/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/202/</guid><description><p>Laravel 5.3 has this feature. But for those not using that version or who just want to see how easy this is, I will show here how I been doing this for some time now.</p><p>Here is the main Class I call to send a message. As you can see I am using Guzzle, in this case<code>"guzzlehttp/guzzle": "^6.1"</code> but others versions can work.</p><pre><code>&lt;?php
namespace App\Services;<p>use Illuminate\Support\Facades\Log;
use GuzzleHttp\Client;</p><p>class SlackWrapper
{
/**
* @var Client $client
*/
protected $client;</p><pre><code>protected $slack_url = false;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
}
public function sendMessageToSlack($message)
{
try {
$this-&amp;gt;client-&amp;gt;request(
'POST',
$this-&amp;gt;getSlackUrl(),
[
'body' =&amp;gt; $this-&amp;gt;message($message)
]
);
} catch (\Exception $e) {
Log::debug(sprintf(&amp;quot;Error sending to Slack %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
protected function message($message)
{
return json_encode(
[
'text' =&amp;gt; $message
]
);
}
public function getSlackUrl()
{
if (!$this-&amp;gt;slack_url)
return env('SLACK_URL');
return $this-&amp;gt;slack_url;
}
/**
* @param boolean $slack_url
*/
public function setSlackUrl($slack_url)
{
$this-&amp;gt;slack_url = $slack_url;
return $this;
}</code></pre><p>}</code></pre><p>And that is it. As long as I set this<code>env(&lsquo;SLACK_URL&rsquo;)</code> in my .env OR in the class instantiation it will get to that endpoint.</p></p><p>Then in slack just add get the webhook/room you want to post to</p><p><img src="https://dl.dropboxusercontent.com/s/rk2gd4c5tpflpmi/webhooks_slack.png?dl=0" alt=""/></description><tags>php, laravel, slack</tags></item><item><title>Pusher and PHP 'Error Failed to connect to Pusher'</title><link>https://alfrednutile.info/posts/201/</link><pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/201/</guid><description><p>Note to self. Getting this error &ldquo;Error Failed to connect to Pusher&rdquo; but the front end is working. And you know your credentials are correct, AND it was working just a day ago check the date and time on your machine/vm.</p><p>Mine had drift and since it was behind by 20 minutes I would end up with this error.</p><p>Oy what a waste or time x 2 :(</p></description><tags>php, note2self, laravel</tags></item><item><title>Model Boot Events</title><link>https://alfrednutile.info/posts/200/</link><pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/200/</guid><description><p>Just a quick not to modify model data upon an event. Laravel docs talk about it<a href="https://laravel.com/docs/5.3/eloquent#events">here</a></p><p>But putting it in another class can get kinda confusing when you are trying to debug or update the code.</p><p>In this example I have a model<code>Board</code> and I want to, upon saving, make sure it has some key data.</p><pre><code> protected static function boot()
{
static::bootTraits();<pre><code> /** @var \App\Board $model */
static::creating(function ($model) {
if (!$model-&amp;gt;id) {
$model-&amp;gt;id = Uuid::uuid4()-&amp;gt;toString();
}
});
}</code></pre><p/></pre><p>So now my<code>\App\Board</code> class will trigger this addition of UUID if the ID is not set upon<code>creation</code>.</p></p></description><tags>laravel, note2self</tags></item><item><title>Queue onConnection</title><link>https://alfrednutile.info/posts/199/</link><pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/199/</guid><description><p>If you look here<a href="https://laravel.com/docs/5.3/queues#customizing-the-queue-and-connection">https://laravel.com/docs/5.3/queues#customizing-the-queue-and-connection</a></p><p>Under &ldquo;Dispatching To A Particular Connection&rdquo;</p><p>But if running test and local where I just want<code>sync</code> or<code>database</code></p><pre><code> if(env('QUEUE_DRIVER') != 'sync' &amp;&amp; env('QUEUE_DRIVER') != 'database') {
$concentration_curve = (new ImportDataColumnWorker($this->job_notice->model, $this->job_notice->payload))
->onConnection('columns');
} else {
$concentration_curve = (new ImportDataColumnWorker($this->job_notice->model, $this->job_notice->payload));
}<pre><code> $this-&amp;gt;dispatch($concentration_curve);</code></pre><p/></pre></p></description><tags>laravel, note2self</tags></item><item><title>Laravel and Casting 'JSON_UNESCAPED_UNICODE' Data</title><link>https://alfrednutile.info/posts/196/</link><pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/196/</guid><description><p>Had a interesting issue with Laravel and the<a href="https://laravel.com/docs/5.2/eloquent-mutators">cast feature</a></p><p>Basically a Chinese set of characters would be converted to their unicode counterpart<a href="http://php.net/manual/en/json.constants.php">http://php.net/manual/en/json.constants.php</a></p><p>So saving &ldquo;你好，世界&rdquo; would become &ldquo;\u4f60\u597d\uff0c\u4e16\u754c&rdquo; in the database.</p><p>Making it hard to search for &ldquo;你好，世界&rdquo;</p><p>But I just wanted this data as it was, so later I could query the data and interact with it in it&rsquo;s default character state.</p><p>Digging into the Model class<code>vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php:3044</code> I found that this method would<code>json_encode</code> but with no options.</p><p>So on my model I had to override that</p><pre><code> protected function asJson($value)
{
/**
* Alter Cast
* Default is altering unicode
*/
return json_encode($value, JSON_UNESCAPED_UNICODE);
}<p/></pre><p>And now “你好，世界” would save that way to the database and not “\u4f60\u597d\uff0c\u4e16\u754c”</p></p></description><tags>laravel, json, note2self</tags></item><item><title>Laravel Throttle Feature using IP address as Key</title><link>https://alfrednutile.info/posts/193/</link><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/193/</guid><description><p><strong>NOTE: 5.3, for 5.2 see ending update</strong></p><p>The Laravel Throttle feature<a href="https://laravel.com/docs/5.3/authentication#login-throttling">here</a> is a great addition to the framework. By default it uses the<code>username</code> and the IP for the key to count<code>attempts</code>.</p><p>But I want to cover how to switch that to use an IP only and not the username. A good example of why is a hacker running through a list of emails and passwords just trying to break into sites where that user would use the same password as the site the got the list from. This person could try this 5000 long list against your server and not once will Throttle care about that.</p><p>The fix is fairly simple in your<code>app/Http/Controllers/Auth/AuthController.php</code> add</p><pre><code> /**
* Get the throttle key for the given request.
*
* @param \Illuminate\Http\Request $request
* @return string
*/
protected function throttleKey(Request $request)
{
if (Config::get('auth.throttle_key') == 'ip') {
return $request->ip();
} else {
return Str::lower($request->input($this->username())).'|'.$request->ip();
}
}</code></pre><p>Then in your<code>config/auth.php</code> add</p><pre><code> /*
|--------------------------------------------------------------------------
| Throttle Key
|--------------------------------------------------------------------------
|
| You may choose to block ip address from failed attempts
| of a combination of IP and Username
|
| Supported: "ip", "username|ip"
|
*/
'throttle_key' => 'ip'</code></pre><p>This way you can switch it later back if needed</p><p>From here on the IP will track the failed attempts.</p><p><img src="https://dl.dropboxusercontent.com/s/0n2v4f1o6jxbmmm/login_throttle_fail.png?dl=0" alt=""/><h2 id="laravel-52">Laravel 5.2</h2><p>In 5.2 I had to change<code> protected function throttleKey</code> to<code> protected function throttleKey</code></p></description><tags>laravel, security</tags></item><item><title>Throttle Password Reset</title><link>https://alfrednutile.info/posts/194/</link><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/194/</guid><description><p>Laravel Throttle works on failed auth attempts but how about password resets?</p><p>Here is what I made my<code>app/Http/Controllers/Auth/PasswordController.php</code> look like</p><h2 id="53">5.3</h2><pre><code>&lt;?php<p>namespace App\Http\Controllers\Auth;</p><p>use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;</p><p>class PasswordController extends Controller
{</p><table><thead><tr><th>/*</th></tr></thead><tbody><tr><td>Password Reset Controller</td></tr><tr><td>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</td></tr><tr><td/></tr><tr><td>This controller is responsible for handling password reset requests</td></tr><tr><td>and uses a simple trait to include this behavior. You&rsquo;re free to</td></tr><tr><td>explore this trait and override any methods you wish to tweak.</td></tr><tr><td/></tr><tr><td>*/</td></tr></tbody></table><pre><code>use ResetsPasswords, ThrottlesLogins;
protected $username;
/**
* Create a new password controller instance.
*
* @return void
*/
public function __construct()
{
$this-&amp;gt;middleware('guest');
}
/**
* Validate the request of sending reset link.
*
* @param \Illuminate\Http\Request $request
* @return void
*/
protected function validateSendResetLinkEmail(Request $request)
{
$this-&amp;gt;incrementLoginAttempts($request);
$this-&amp;gt;username = 'email';
if($this-&amp;gt;hasTooManyLoginAttempts($request)) {
return back()
-&amp;gt;withError(&amp;quot;You have exceeded the limit of attempts. Please try again shortly&amp;quot;)
-&amp;gt;withInput();
}
$validator = Validator::make(
$request-&amp;gt;all(), [
'email' =&amp;gt; 'required|email'
]
);
if ($validator-&amp;gt;fails()) {
return back()
-&amp;gt;withMessage(&amp;quot;If you are in the system you will get an email shortly to reset your password&amp;quot;)
-&amp;gt;withInput();
}
}
public function loginUsername()
{
return property_exists($this, 'username') ? $this-&amp;gt;username : 'email';
}
protected function getThrottleKey(Request $request)
{
return $request-&amp;gt;ip();
}</code></pre><p>}</code></pre><h2 id="52">5.2</h2></p><p>The controller ended up looking like this</p><pre><code>&lt;?php
namespace App\Http\Controllers\Auth;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ResetsPasswords;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Password;
class PasswordController extends Controller
{
/*
|--------------------------------------------------------------------------
| Password Reset Controller
|--------------------------------------------------------------------------
|
| This controller is responsible for handling password reset requests
| and uses a simple trait to include this behavior. You're free to
| explore this trait and override any methods you wish to tweak.
|
*/
use ResetsPasswords, ThrottlesLogins;<pre><code>protected $username;
/**
* Create a new password controller instance.
*
* @return void
*/
public function __construct()
{
$this-&amp;gt;middleware('guest');
}
/**
* Validate the request of sending reset link.
*
* @param \Illuminate\Http\Request $request
* @return void
*/
protected function sendResetLinkEmail(Request $request)
{
$this-&amp;gt;incrementLoginAttempts($request);
$this-&amp;gt;username = 'email';
Log::debug(&amp;quot;Validate&amp;quot;);
if($this-&amp;gt;hasTooManyLoginAttempts($request)) {
return redirect()-&amp;gt;back()-&amp;gt;withErrors(['email' =&amp;gt; &amp;quot;You have exceeded the limit of attempts. Please try again shortly&amp;quot;]);
}
$this-&amp;gt;validate($request, ['email' =&amp;gt; 'required|email']);
$broker = $this-&amp;gt;getBroker();
$response = Password::broker($broker)-&amp;gt;sendResetLink(
$request-&amp;gt;only('email'), $this-&amp;gt;resetEmailBuilder()
);
switch ($response) {
case Password::RESET_LINK_SENT:
return $this-&amp;gt;getSendResetLinkEmailSuccessResponse($response);
case Password::INVALID_USER:
default:
return $this-&amp;gt;getSendResetLinkEmailFailureResponse($response);
}
}
public function loginUsername()
{
return property_exists($this, 'username') ? $this-&amp;gt;username : 'email';
}
protected function getThrottleKey(Request $request)
{
return $request-&amp;gt;ip();
}</code></pre><p>}</code></pre><h2 id="tip-while-your-add-it-leak-even-less-about-your-apps-user-emails">TIP: While your add it leak even less about your app’s user emails</h2></p><p>On other thing here is take a moment to change your error message<code>resources/lang/en/passwords.php</code></p><pre><code> 'password' => 'Passwords must be at least six characters and match the confirmation.',
'reset' => 'Your password has been reset!',
'sent' => 'We have e-mailed your password reset link!',
'token' => 'This password reset token is invalid.',
'user' => "If you are a user in the system an a reset email has been sent",</code></pre><p>Where<code>user</code> does not leak out any information about the email being correct or not.</p></description><tags>laravel, security</tags></item><item><title>Mockery Behat and Laravel</title><link>https://alfrednutile.info/posts/190/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/190/</guid><description><p>This is a quick view of using this library<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a> and a Mockery Trait (should be included soon but for now put the below in your<code>features/bootstrap</code> folder and run<code>composer dump</code>).</p><p>The example here is a method that looks like this</p><p><code>features/bootstrap/ExampleContext.php</code></p><pre><code> $partial = Mockery::mock(\App\Broadcasts\ColumnsAndRowsDoneProcessingEmail::class, [$this->segment])->makePartial();<pre><code> $partial-&amp;gt;shouldReceive('sendEmail')-&amp;gt;never();
$repo = App::make(\App\JobsRepository::class);
$partial-&amp;gt;handle($repo);</code></pre><p/></pre><p>When this is done running I would get pass BUT if I change it<code>never</code> to<code>once</code> and run it again I still get green :(</p></p><p>But I need to include the Mockery. In my case I made this trait that will allow me to also tests and mock events.</p><pre><code>&lt;?php<p>trait MockeryTrait
{</p><pre><code>public $firedEvents = [];
public $beforeApplicationDestroyedCallbacks = [];
/**
* @AfterScenario
*/
public function reviewMocks()
{
if ($this-&amp;gt;app) {
foreach ($this-&amp;gt;beforeApplicationDestroyedCallbacks as $callback) {
call_user_func($callback);
}
$this-&amp;gt;app-&amp;gt;flush();
$this-&amp;gt;app = null;
}
if (class_exists('Mockery')) {
Mockery::close();
}
$this-&amp;gt;beforeApplicationDestroyedCallbacks = [];
}
protected function beforeApplicationDestroyed(callable $callback)
{
$this-&amp;gt;beforeApplicationDestroyedCallbacks[] = $callback;
}
/**
* Specify a list of events that should be fired for the given operation.
*
* These events will be mocked, so that handlers will not actually be executed.
*
* @param array|string $events
* @return $this
*
* @throws \Exception
*/
public function expectsEvents($events)
{
$events = is_array($events) ? $events : func_get_args();
$this-&amp;gt;withoutEvents();
$this-&amp;gt;beforeApplicationDestroyed(function () use ($events) {
$fired = $this-&amp;gt;getFiredEvents($events);
if ($eventsNotFired = array_diff($events, $fired)) {
throw new Exception(
'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
);
}
});
return $this;
}
/**
* Mock the event dispatcher so all events are silenced and collected.
*
* @return $this
*/
protected function withoutEvents()
{
$mock = Mockery::mock('Illuminate\Contracts\Events\Dispatcher');
$mock-&amp;gt;shouldReceive('fire')-&amp;gt;andReturnUsing(function ($called) {
$this-&amp;gt;firedEvents[] = $called;
});
$this-&amp;gt;app-&amp;gt;instance('events', $mock);
return $this;
}
/**
* Filter the given events against the fired events.
*
* @param array $events
* @return array
*/
protected function getFiredEvents(array $events)
{
return $this-&amp;gt;getDispatched($events, $this-&amp;gt;firedEvents);
}
/**
* Filter the given classes against an array of dispatched classes.
*
* @param array $classes
* @param array $dispatched
* @return array
*/
protected function getDispatched(array $classes, array $dispatched)
{
return array_filter($classes, function ($class) use ($dispatched) {
return $this-&amp;gt;wasDispatched($class, $dispatched);
});
}
/**
* Check if the given class exists in an array of dispatched classes.
*
* @param string $needle
* @param array $haystack
* @return bool
*/
protected function wasDispatched($needle, array $haystack)
{
foreach ($haystack as $dispatched) {
if ((is_string($dispatched) &amp;amp;&amp;amp; ($dispatched === $needle || is_subclass_of($dispatched, $needle))) ||
$dispatched instanceof $needle) {
return true;
}
}
return false;
}</code></pre><p>}</code></pre><p>This pulls in a trait Laravel uses in PHPUnit.</p></p><p>So now when I run that test I get red and when I set it back to<code>zero</code> I get green!</p></description><tags>php, laravel, behat, bdd</tags></item><item><title>Uploading Images in Behat both at Domain Level and UI Level</title><link>https://alfrednutile.info/posts/188/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/188/</guid><description><p>The goal here is as follows</p><pre><code> @fileCleanup @javascript
Scenario: Uploading File
Given I already made a Segmentation and am editing it
Then I add file and the system will process it
And I can not add another file till it is done
And when the system is done I can add another file</code></pre><p>In this case they are large files and I want to get an MVP for the users to interact with so one file at a time is enough for now.</p><p>The tricky part is that I am running Selenium on my Mac and running behat in my VM there is no file path connection between the two.
This can also be an issue when using Saucelabs and<a href="https://crossbrowsertesting.com/">https://crossbrowsertesting.com/</a>.</p><h2 id="ui-level">UI Level</h2><p>I am using the Flow Angular library so it is JavaScript heavy (some notes below). Otherwise your work is even easier.</p><p>My step to set things up<code>Given I already made a Segmentation and am editing it</code> just adds that resource to the system and then I visit it.</p><p>From there I hit<code>Then I add file and the system will process it</code> and this is where it all begins</p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there<pre><code> /**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this-&amp;gt;attachFileToField('image_upload', $remotePath); //see Flow notes at the bottom of this page
$this-&amp;gt;assertPageNotContainsText('Upload File');
unlink($tempZip);
sleep(5); //Later on I will move this to `spin` see notes below
$this-&amp;gt;assertPageContainsText('data_columns_not_snaked');
}</code></pre><p/></pre><p>Let me show that again but now more simple just a normal input button</p></p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there
/**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip->open($tempZip, \ZipArchive::CREATE);
$zip->addFile($localFile, basename($localFile));
$zip->close();
$remotePath = $this->getSession()->getDriver()->getWebDriverSession()->file([
'file' => base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this->attachFileToField('image_upload', $remotePath); //the input field
/** prove the button is gone during this process **/
$this->assertPageNotContainsText('Upload File');
unlink($tempZip);
$this->pressButton('Upload File'); //dealing with normal input button
}</code></pre><h2 id="domain-level">Domain Level</h2><p>Since my Controller gets the info from the incoming<code>Request</code> and hands it to the Repository class, I like to test my classes outside the Controller then plug them in (see<a href="https://alfrednutile.info/posts/187">here</a> for more on that), there is typically no need to pass the full<code>Request</code> to the Repository. But in this case I went about passing the entire<code>Request</code> to the<code>Repository</code> and doing some checking in there as well.</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('features/fixtures/data_columns_not_snaked.xls');
$originalName = 'data_columns_not_snaked.xls';
/** note `true` passed in to `UploadedFile` it defines this as a test request **/
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file->set('profile_image', $upload);
$request->files = $file;<pre><code> $this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/data_columns_not_snaked.xls')), &amp;quot;File Not found&amp;quot;);
}</code></pre><p/></pre><p>And now that is passing as well.</p></p><h2 id="thats-it">Thats It</h2><p>I am now testing both the UI and the Domain level part of this Application.</p><h2 id="note">Note</h2><p>Using Flow Library<a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow</a> makes it easy to process large files in PHP for me.</p><p>One thing I had to do was do was set<code>flow-attrs</code> to the directive so I can get a<code>name</code> in there to target field.</p><pre><code>&lt;div class="btn btn-xs btn-primary" flow-attrs="{name:'image_upload'}" flow-btn ng-if="vm.file_uploading">
&lt;i class="fa fa-cloud-upload">&lt;/i> Upload File
&lt;/div></code></pre><p>Link to Spin on Behat docs and StackOverflow for a better solution than<code>sleep</code></p><p><a href="http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat">http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat</a></p><p><a href="http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html">http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html</a></p><p>And a bit more on that<a href="http://www.tentacode.net/10-tips-with-behat-and-mink">http://www.tentacode.net/10-tips-with-behat-and-mink</a></p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Behat Laravel Domain Testing Inside Out</title><link>https://alfrednutile.info/posts/187/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/187/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/055lj0hcljvpp7u/4_pane_guy_and_getting_started.png?dl=0" alt=""/><p>I will cover the use of<code>FormRequest</code>,<code>Mockery</code>,<code>Behat</code> and more in this article.</p><p>The article will show how to test your Domain code, in this case I mean testing how the code will work outside of the Routing and Controller layer of your Application. But what this will lead to is a &ldquo;lego&rdquo; like moment of plugging in these parts to your Controller so you know it will work. Of course it will be tested as well during the UI testing.</p><p>I will start off with this Behat Feature</p><pre><code>Feature: Login Page
Login page to do authenticated tasks
As an anonymous user
So we can protect some personal and administrative parts of the site<p>@happy_path @smoke @javascript @profile
Scenario: A user can login and see their profile
Given I am on the login page
And I fill in the login form with my proper username and password
Then I should be able to see my profile page
Then if I try to see another persons page I should get rejected</p><p>@smoke @profile
Scenario: A non logged in user can not get a profile
Given I am an anonymous user
And I go to the profile page
Then I should get redirected with an error message to let me know the problem</p><p/></pre><p>What we have is the<code>@happy_path</code> that will be the UI<code>Scenario</code> in this case as well as the Domain. And yes I can have more than one UI<code>Scenario</code> but in this case I just want to deliver something that let’s the Product Owner knows her application is working as expected.</p></p><p>What we will start with is<code>Scenario: A user can login and see their profile</code></p><p>In my example there will be a<code>Repository</code> class to manage the Business logic and a<code>FormRequest</code> Class to deal with managing ACL.</p><p>Let&rsquo;s take the Context file one step at a time<code>features/bootstrap/LoginPageDomainContext.php</code></p><pre><code> /**
* @Given I am on the login page
*/
public function iAmOnTheLoginPage()
{
$this->user = factory(\App\User::class)->create();
}</code></pre><p>I setup the state of the world for this<code>Scenario</code> I do not rely on seed data.</p><p>Also at the top of the Class I pull in<code>use \Laracasts\Behat\Context\DatabaseTransactions;</code> and<code>\Laracasts\Behat\Context\Migrator</code></p><p>These come from the Laracast Library on Behat<a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs</a> and<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><p>This next step is written with too much &ldquo;Web&rdquo; in mind. I should try and reword it so it fits more inline with the business goals.</p><pre><code> /**
* @Given I fill in the login form with my proper username and password
*/
public function iFillInTheLoginFormWithMyProperUsernameAndPassword()
{
Auth::login($this->user);
PHPUnit_Framework_Assert::assertFalse(Auth::guest());
}</code></pre><p>Here is where things get fun</p><pre><code> /**
* @Then I should be able to see my profile page
*/
public function iShouldBeAbleToSeeMyProfilePage()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(['user_id' => $user->id]);<pre><code> /** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)-&amp;gt;makePartial();
$auth-&amp;gt;shouldReceive('route')-&amp;gt;andReturn($user-&amp;gt;url);
$results = $auth-&amp;gt;authorize();
PHPUnit::assertTrue($results);
}</code></pre><p/></pre><p>And the next part to that</p></p><pre><code> /**
* @Then if I try to see another persons page I should get rejected
*/
public function ifITryToSeeAnotherPersonsPageIShouldGetRejected()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(
['favorite_comic_character' => "foo", 'user_id' => $user->id]
);
/** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)->makePartial();
$auth->shouldReceive('route')->andReturn($user->url);
$results = $auth->authorize();
PHPUnit::assertFalse($results);
}</code></pre><p>Making sure to close my<code>Mockery</code> when done</p><pre><code> /**
* @afterScenario
*/
public function cleanUp() {
Mockery::close();
}</code></pre><p>We are testing the two pieces that matter right now, the<code>Repo</code> and the<code>FormRequest</code>.</p><p>All I did was run<code>vendor/bin/behat -slogin_domain --append-snippets --tags=@happy_path</code> and I got to see the one(s) with that tag working.</p><h2 id="the-repo">The Repo</h2><p><code>\App\Repositories\ProfileShowPage</code></p><pre><code>&lt;?php
namespace App\Repositories;<p>use App\Profile;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;</p><p>class ProfileShowPage extends ProfileRepository
{</p><pre><code>public function showProfileForUserFromSlug($slug)
{
return \App\User::fromSlug($slug);
}</code></pre><p>}</code></pre><p>Why not just use the Controller! Well this is still a simple simple example but honestly if you are just building something for fun or something serious and just getting the feel of an idea go for it. I am doing this cause I want to plug in more to this later since it is part of a larger plan.</p></p><p><strong>Note:<code>Profile::fromSlug()</code> is just a scope and the model works out the rest of the query for me</strong></p><pre><code> public function scopeFromSlug($query, $slug)
{
return $query->with('profile')->where('url', $slug)->firstOrFail();
}</code></pre><p>That is it for the repository, now how about this<code>FormRequest</code> at<code>app/Http/Requests/ProfileShowRequest.php</code>?</p><h2 id="formrequest">FormRequest</h2><p>You can read more about this<a href="https://laravel.com/docs/5.2/validation#form-request-validation">here</a> on Laravel Docs</p><pre><code>&lt;?php<p>namespace App\Http\Requests;</p><p>/**</p><ul><li>@NOTE THERE ARE SOME CLASSES HERE SEE GITHUB
*/</li></ul><p>class ProfileShowRequest extends Request
{</p><pre><code>protected $profile;
/**
* Determine if the user is authorized to make this request.
*
* @return bool
*/
public function authorize()
{
if (Auth::guest()) {
return false;
}
/** @var \App\Repositories\ProfileShowPage $profilePage */
$profilePage = App::make(\App\Repositories\ProfileShowPage::class);
$user = $profilePage-&amp;gt;showProfileForUserFromSlug($this-&amp;gt;route('slug'));
return Auth::user()-&amp;gt;id == $user-&amp;gt;profile-&amp;gt;user_id;
}
public function forbiddenResponse()
{
return redirect('login')-&amp;gt;with('message', &amp;quot;You need to login first&amp;quot;);
}
/**
* Get the validation rules that apply to the request.
*
* @return array
*/
public function rules()
{
return [
//
];
}</code></pre><p>}</p><p/></pre><h2 id="the-controller">The Controller</h2></p><p>All right now that step is passing and the pieces are ready to plug in to the Controller!</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Http\Requests\ProfileShowRequest;
use App\Repositories\ProfileShowPage;
use Illuminate\Database\Eloquent\ModelNotFoundException;</p><p>class ProfileShowController extends Controller
{</p><pre><code>public function getProfileForUserUsingSlug(ProfileShowRequest $request, ProfileShowPage $repository, $slug)
{
try {
$profile = $repository-&amp;gt;showProfileForUserFromSlug($slug);
return view('profile.show', compact('profile'));
} catch (ModelNotFoundException $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Could not find your profile :(&amp;quot;);
} catch (\Exception $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Error getting profile :(&amp;quot;);
}
}</code></pre><p>}</code></pre><p>This controller has one Job<code>app/Http/Controllers/ProfileShowController.php</code> Showing the profile.</p></p><p>In with that job it has the ACL taken care of before it even has to think about what it needs to do.</p><p>After that it asks the repo to take care of the request and it deals with the response or inevitable exception!</p><p>So right away I can go to my ui test and make it so you can see the<strong><a href="https://github.com/alnutile/recipes/blob/a5f2522e702ee49d21711d9416c5a659e7761ddc/features/bootstrap/LoginPageUIContext.php">code here</a></strong></p><h2 id="follow-up">Follow Up</h2><p>All code for this can be seen at<a href="https://github.com/alnutile/recipes">https://github.com/alnutile/recipes</a> this is a foundation repo for a new book coming out in 2 months with many day to day Laravel Recipes!</p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description><p>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.</p><p>In this example I had a Class responsible for saving data, we&rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&rsquo;ll call FooProcessData.</p><p>The BDD Story for this worked out well in that just like in Konstantin Kudryashov noted in this<a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example#_=_">article</a> I had a great reading business driven gherkin feature that I then, using<a href="http://docs.behat.org/en/v3.0/guides/5.suites.html">Behat 3 and Suites</a> was able to make some really great names for my classes and methods.</p><p>But this was fine as I was working on FooSaveData, but the fact that FooProcessData had to iterate over a large complex array of data I did not want to do inside of this Gherkin test. It would mean that I had to deal with 5 other steps, x number of model states I needed etc. Instead I just made a unit test for that class &ldquo;FooProcessData&rdquo; and focused on it for a bit outside the rest of this work.</p><p>To begin with I just use</p><pre><code>File::put(base_path('tests/fixtures/data_to_process.json', json_encode($some_data, JSON_PRETTY_PRINT))</code></pre><p>to put that data right where I want it for my unit tests.</p><p>Then from there I go around and around unil the thinking on the left reads more like the thinking on the right</p><p><a href="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0"><img src="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0" alt="start to end"/></p><p>Which is my favorite part of this really as I see code evolve to something I can come back 6 months later and read.</p><blockquote><p>Let&rsquo;s Plan for a Future Where We&rsquo;re All As Stupid as We Are Today - Dan Milstein</p></blockquote><p>At this point that &ldquo;lego&rdquo; like piece is done and I can go back to my Behat BDD Gherkin test to finish off where I left off.</p></description><tags>php, laravel, bdd, behat, phpunit</tags></item><item><title>Homestead and Auto Setup Hosts File</title><link>https://alfrednutile.info/posts/184/</link><pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/184/</guid><description><p>I discovered this Vagrant Plugin<a href="https://github.com/cogitatio/vagrant-hostsupdater">https://github.com/cogitatio/vagrant-hostsupdater</a> thanks to<a href="https://github.com/cogitatio/vagrant-hostsupdater">https://github.com/cogitatio/vagrant-hostsupdater</a> when setting up Windows and thought why can&rsquo;t I use it on my Mac?</p><p>Just like the docs say on their github site</p><pre><code>vagrant plugin install vagrant-hostsupdater</code></pre><p>Then update your ruby file that setups up homestead</p><pre><code>subl ~/Homestead/scripts/homestead.rb</code></pre><p>This will look like<img src="https://dl.dropboxusercontent.com/s/chwinvw18ufcurv/homestead_alias.png?dl=0" alt="alias"/><p>Then</p><pre><code>subl ~/.homestead/Homestead.yaml</code></pre><p>And make that like this</p><p><img src="https://dl.dropboxusercontent.com/s/8mbqv837jgtpnm9/homestead_alias_two.png?dl=0" alt="homestead"/><p>Then run provision</p><pre><code>cd ~/Homestead
vagrant provision</code></pre><p>That is it now your /etc/hosts file will look like this</p><p><img src="https://dl.dropboxusercontent.com/s/91u5omdgwoij006/homestead_hosts.png?dl=0" alt="homestead"/></description><tags>homestead, laravel</tags></item><item><title>API Token Based Access Laravel 5.1 (Yet another article on this)</title><link>https://alfrednutile.info/posts/183/</link><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/183/</guid><description><h2 id="api-token">API Token</h2><p>Laravel 5.2 introduces the auth token guard setup which is way simpler than Oauth. Also it does not assume a certain level of complexity in needs like Scopes and expirations of tokens that we do not need for our internal app to app communications.</p><p>We are using 5.1 so this will implement it.</p><p>See some docs here<a href="https://gistlog.co/JacobBennett/090369fbab0b31130b51">https://gistlog.co/JacobBennett/090369fbab0b31130b51</a></p><p>For creating a user the AppServiceProvider boots the user record and if no api_token
is present it will set one. As well as the UUID (we use<a href="https://packagist.org/packages/ramsey/uuid">https://packagist.org/packages/ramsey/uuid</a> for this)</p><p><code>app/Providers/AppServiceProvider.php:18</code></p><pre><code> User::creating(function($user) {
if (!$user->id)
{
$user->id = Uuid::uuid4()->toString();
}<pre><code> if (!$user-&amp;gt;api_token)
{
$user-&amp;gt;api_token = Uuid::uuid4()-&amp;gt;toString();
}
});</code></pre><p/></pre><p>The factory includes this as well<code>database/factories/ModelFactory.php</code></p></p><pre><code>$factory->define(App\User::class, function ($faker) {
return [
'id' => $faker->uuid,
'name' => $faker->name,
'email' => $faker->email,
'api_token' => $faker->uuid,
'password' => str_random(10),
'remember_token' => str_random(10),
];
});</code></pre><p>Note in the<code>\App\User</code> model has this field hidden like the password field<code>app/User.php</code></p><pre><code>///
class User extends Model implements AuthenticatableContract, CanResetPasswordContract
{
use Authenticatable, CanResetPassword;
protected $hidden = ['password', 'remember_token', 'api_token'];
///</code></pre><p>And of course we need the migration for this</p><pre><code>&lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class AddApiTokenToUsersTable extends Migration
{
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table->string('api_token', 60)->unique();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
if(Schema::hasColumn('users', 'api_token'))
$table->dropColumn('api_token');
});
}
}</code></pre><p>This is all happening using the<code>api_token</code> middleware seen here<code>app/Http/Middleware/ApiToken.php</code></p><pre><code>&lt;?php
namespace App\Http\Middleware;
use App\User;
use Closure;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\App;
class ApiToken
{
protected $auth;
public function __construct(Guard $auth)
{
$this->auth = $auth;
}
public function handle($request, Closure $next)
{
if($request->input('api_token') &amp;&amp; $this->hasMatchingToken($request->input('api_token'))) {
return $next($request);
}
/**
* This assumes it is behind auth at all times
* so if the above fails we then let auth manage it
*/
if ($this->auth->guest()) {
if ($request->ajax()) {
return response('Unauthorized.', 401);
} else {
return redirect()->guest('auth/login');
}
}
return $next($request);
}
/**
* Laravel 5.2 uses vendor/laravel/framework/src/Illuminate/Auth/TokenGuard.php:66 and then
* vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:87 to get
* a user based on the password
*
* @NOTE
* We can load the user if we want to manage scopes/roles etc but right now it is
* just pass fail
*/
public function hasMatchingToken($token)
{
if($user = User::where('api_token', $token)->first())
return true;
}
}</code></pre><p>And plug that into the Kernel<code>app/Http/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Http;
use Illuminate\Foundation\Http\Kernel as HttpKernel;
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];
/**
* The application's route middleware.
*
* @var array
*/
protected $routeMiddleware = [
'auth' => \App\Http\Middleware\Authenticate::class,
'auth.token' => \App\Http\Middleware\ApiToken::class,
'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
];
}</code></pre><h2 id="tests">Tests</h2><p>You can see the tests<code>tests/UserTokenTest.php</code></p><pre><code>&lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
class UserTokenTest extends TestCase
{
use DatabaseMigrations;
/**
* @test
*/
public function should_pass_auth_with_no_token_since_they_auth()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_auth_user_since_they_have_token()
{
$user = factory(\App\User::class)->create();
$results = $this->call('GET', sprintf("/example/auth_token?api_token=%s", $user->api_token));
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_fail_user_no_token_no_auth()
{
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(302, $results->status());
}
}</code></pre><h2 id="console-commands-to-make-tokens">Console Commands to Make Tokens</h2><p>You can see the commands<code>app/Console/Commands/UserTokenCrud.php</code></p><pre><code>&lt;?php
namespace App\Console\Commands;
use App\User;
use Illuminate\Console\Command;
use Ramsey\Uuid\Uuid;
class UserTokenCrud extends Command
{
/**
* @TODO
* Show, Update, Delete
*/
protected $signature = 'cat:create-token {user_email} {--show=false : Just show the token} ';
protected $description = 'Create the token for the user';
public function __construct()
{
parent::__construct();
}
public function handle()
{
try
{
$user = User::where('email', $this->argument('user_email'))->first();
if(!$user)
throw new \Exception(sprintf("User not found for %s", $this->argument("user_email")));
if($this->option('show'))
{
$this->info(sprintf("User token is %s", $user->api_token));
return false;
}
$token = Uuid::uuid4()->toString();
$user->api_token = $token;
$user->save();
$this->info(sprintf("User with email %s now has token %s", $user->email, $token));
}
catch(\Exception $e)
{
$this->error(sprintf("Error finding user %s", $e->getMessage()));
}
}
}</code></pre><p>Plug that into the Console Kernel<code>Console/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
//\App\Console\Commands\Inspire::class,
\App\Console\Commands\UserTokenCrud::class
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
//$schedule->command('inspire')
->hourly();
}
}</code></pre><p>Allowing to update, delete and see tokens</p><h2 id="example-routes">Example Routes</h2><pre><code>Route::group(['middleware' => 'auth.token'], function () {
Route::get('example/auth_token', function () {
return "foo";
});
});</code></pre><p>I added some testing / example routes. Once you have your api_token give them a try</p><ul><li>/example/auth_token?api_token=foo to show the API Token working</li><li>/s3?api_token=foo</li><li>/rds?api_token=foo</li><li>/dynamodb?api_token=foo</li></ul><p>Note the token might change if you seed the database. You can ssh into the server and run</p><pre><code>php artisan cat:create-token foo@gmail.com --show</code></pre><p>To get the token.</p></description><tags>php, auth, laravel, api</tags></item><item><title>Laravel, PHPUnit, Require_Once on Routes</title><link>https://alfrednutile.info/posts/178/</link><pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/178/</guid><description><p>Going crazy running PHPUnit all and getting fail but you run the one route and it works!</p><p>The difference is<code>require</code> versus<code>require_once</code> in PHPUnit tests.</p><p>For example</p><pre><code>require __DIR__ . '/../ConfigurationExamples/routes.php';<p>Route::get('/', function () {
return view(&lsquo;welcome&rsquo;);
});</p><p/></pre><p>Now when I run my tests I get 100% pass</p></p><pre><code>/**
* @test
*/
public function should_auth_user()
{
$user = factory(\App\User::class)->create();
$results = $this->call('GET', sprintf("/example/auth_token?api_token=%s", $user->api_token));
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_fail_user()
{
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(302, $results->status());
}
/**
* @test
*/
public function should_pass_auth_with_no_token()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}</code></pre><p>The moment I change it to<code>require_once</code> I get fails on the last or second to last one, it is not consistant except that it will fail. I immediately run that one and it passes.</p><p>It is not the database and I can change the order of these tests to have the bottom one fail.</p><p>So<code>require</code> is your friend!!</p></description><tags>note2self, php, laravel</tags></item><item><title>Remote Behat Testing with Laravel</title><link>https://alfrednutile.info/posts/177/</link><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/177/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/k92297boe0w9tta/balloon_2_of_3.jpg?dl=0" alt="balloon_2_or_3"/><p><strong><a href="http://www.readorlisten.com/12">Listen Here</a></strong></p><p>This document will cover how to use a Behat specific API to setup a site for testing. What this includes is setting up a Scenario so that it has the data you need to run a test. This makes it possible not to rely on Seed data for this. This will allow us to run behat tests from remote machines as well as run tests in parallel.</p><h2 id="why-not-seed-data">Why not seed data?</h2><p>From experience seed data fails in two ways.</p><p>One a project gets large and there is a ton of seed data and one person adds to it or alters in a way that effects how someone else was expecting the data to be. It just becomes too much of it&rsquo;s own domain of knowledge outside of the test it applies to.</p><p>Second seed data assumes you can reset the state of the application at anytime. But if you want to run your tests in parallel you need to have a more precise system to set up the &ldquo;World&rdquo; for that particular Scenario.</p><h2 id="the-api">The API</h2><p>First we will setup an API in our app just for Behat and the behat user.</p><p>Example Route protected by Authentication as a particular user.</p><pre><code>Route::get('/api/v1/behat/setup_campaign_eu',
['as' => 'behat.camp_eu', 'uses' => '\AlfredNutileInc\BehatAPI\BehatApiController@setupCampaignEU']);<p/></pre><p>Example Controller</p></p><pre><code> public function setEUCampaignToPushed()
{
$campaign = Campaign::find($this->campaign_id_eu);
if($campaign)
{
$campaign->status = Campaign::PUSHED;
$campaign->save();
}
}</code></pre><p>So now our data is set.</p><h2 id="behat-steps">Behat Steps</h2><p>So when we run our Behat test we start by setting that state.</p><pre><code> Background: Login
Given I setup campaigns
Given I login as "admin"
And I wait</code></pre><p>We are setting up this state right before we run the Scenario(s). Of course we can move this one step into the needed Scenario if there are many in the test.</p><p>Example of the<code>FeatureContext.php</code> file that has this step.</p><pre><code> /**
* @Given /^I setup campaigns$/
*/
public function iSetupCampaigns()
{
$this->iLoginAs('behat');<pre><code> $this-&amp;gt;visit('/api/v1/behat/setup_campaign_eu');
}</code></pre><p/></pre><p>You see we are using the already existing Behat steps and sessions to log in and finally hit the API path we created above.</p></p><h2 id="clean-up">Clean Up</h2><p>And using the hooks that Behat has we can clean up after our steps even if there is a fail. Again leaving the system in the same stat it was when we first hit it with our tests.</p><p>The test file&rsquo;s scenario has a tag<code>@1_1</code> as seen below</p><pre><code> @1_1
Scenario: Campaign Misc
Given I am on an EU Campaign
And I wait</code></pre><p>This tag is then called in our<code>FeatureContext</code> file using a Behat Hook<code>AfterScenario</code></p><pre><code> /**
* @AfterScenario @1_1
*/
public function after_1_1($event)
{
$this->iLoginAs('behat');
$this->visit('/api/v1/behat/1_1_cleanup');
}</code></pre><p>This allows us to hit the api at the end of the Scenario once again</p><pre><code> public function cleanUpCampaignEU()
{
try
{
$country = Country::find('test-country-eu');
$country->active = 0;
$country->save();<pre><code> $campaign_fixture = $this-&amp;gt;loadCampaignFixtureForEu();
$this-&amp;gt;cleanOutRelatedMetaMaster($campaign_fixture);
$this-&amp;gt;cleanUpByID($campaign_fixture);
$this-&amp;gt;cleanUpByID_16Name();
$this-&amp;gt;misc_cleanup();
return Response::json(&amp;quot;Done cleaning Campaign EU&amp;quot;, 200);
}
catch(\Exception $e)
{
return Response::json(&amp;quot;Error cleaning Campaign EU &amp;quot; . $e-&amp;gt;getMessage());
}
}</code></pre><p/></pre><p>And that is it. We have tested and cleaned up after our selves with a precision that allows us to run tests in parallel, from remote machines and to even do<code>smoke</code> tests on any environment.</p></p></description><tags>behat, laravel</tags></item><item><title>CMS or NOT CMS</title><link>https://alfrednutile.info/posts/176/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/176/</guid><description><p>This video just shows and example of a NOT CMS we built for a client. Sure they can add content and manage it BUT they did not need all the extra features that come with Wordpress or Drupal like workflows, versioning, intricate roles etc.</p><p>Also they had a huge need to easily deploy all of this work. For example the Help system can have updates deployed to all of the sites via one Github commit.</p><p>So in this case the need for spinning up new instances for clients, easily updating 100s of sites and keeping the whole UI simple far out weighed all the other features Wordpress and Drupal gave you out of the box.</p><iframe width="640" height="480" src="https://www.youtube.com/embed/on9GAAIus_M" frameborder="0" allowfullscreen=/></description><tags>cms, laravel</tags></item><item><title>Feature Flags In Laravel</title><link>https://alfrednutile.info/posts/175/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/175/</guid><description><h2 id="overview">Overview</h2><p><strong>Library is<a href="https://github.com/friendsofcat/laravel-feature-flag/">https://github.com/friendsofcat/laravel-feature-flag/</a></strong></p><p><strong>Listen<a href="http://www.readorlisten.com/10">here</a></strong></p><p><strong>Watch<a href="https://youtu.be/4nq7FyHQj8I">https://youtu.be/4nq7FyHQj8I</a></strong></p><p>We are working on using FeatureFlags or Toggles in our applications. For one we are aiming to do all our work on mainline branch at all times so this would be a key coding discipline to use FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application. For example if a hotfix or another feature is ready to go to production we can push that with no worries of the in progress feature.</p><blockquote><p>FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application</p></blockquote><p>You can see many of the reasons in this article<a href="http://martinfowler.com/articles/feature-toggles.html">http://martinfowler.com/articles/feature-toggles.html</a> by Pete Hodgson for using this system. So not just the more common situations of permissions but also Release Toggles, Experiment Toggles and more see list and image below</p><p><img src="http://martinfowler.com/articles/feature-toggles/chart-4.png" alt="flag_types"/><p><strong>[image from martin fowler feature-toggles article</strong></p><ul><li>Release Toggles</li><li>Ops Toggles</li><li>Permission Toggles</li><li>Experiment Toggles</li></ul><p>The core coding logic I will be using is this library<a href="https://github.com/Atriedes/feature">Atriedes/feature</a> as it has the logic needed to consider common feature flag states eg user, users, on, off, groups, admin, internal, random etc.</p><ul><li>on or off value simple!</li><li>on for users</li><li>on for groups</li><li>on for a user</li><li>bucketing random</li><li>random</li><li>percentage</li><li>url query string</li></ul><blockquote><p>The core coding logic I will be using is this library<a href="https://github.com/Atriedes/feature">Atriedes/feature</a></p></blockquote><p>One key thing, as I use this in Laravel, is I will try and mix this with the existing<a href="https://laravel.com/docs/5.2/authorization">Authorization</a> workflow that is already present. This gives me some already prepared ways to think about this both at the view layer, model layer and controller layer and where to register these states. Plus we then get great Laravel docs to help explain some of it.</p><p>For example I can use this in my theme<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-snippet-blade-php">snippet</a></p><h2 id="installing">Installing</h2><p>This will install two things. The library I made to do this and the Example library I am using to show it in action.</p><h3 id="providers">Providers</h3><p>Add the below to your config/app.php</p><pre><code>AlfredNutileInc\LaravelFeatureFlags\FeatureFlagsProvider::class,
AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureProvider::class,</code></pre><h3 id="the-core-library-featureflagsprovider">The Core Library FeatureFlagsProvider</h3><p>What does this do?</p><p>It does some basic Laravel work for registering views for settings, routes for managing settings CRUD and some cache on model changes so we can update the World as needed.</p><p>The big thing it does do is instantiate World.</p><pre><code> public function boot()
{
$this->registerViewFiles();<pre><code> $this-&amp;gt;injectLinks();
$this-&amp;gt;registerFeatureFlags();
}
private function registerFeatureFlags()
{
$features = FeatureFlag::where('active', 1)-&amp;gt;get()-&amp;gt;toArray();
foreach($features as $key =&amp;gt; $value)
{
$features = $this-&amp;gt;transformFeatures($features, $value, $key);
unset($features[$key]);
}
$world = new World();
\Feature\Feature::create($world, $features);
}
private function transformFeatures($features, $value, $key)
{
$features[$value['key']] = $value;
$features[$value['key']]['users'] = (isset($value['variants']['users'])) ? $value['variants']['users'] : [];
return $features;
}</code></pre><p/></pre><blockquote/><p>The big thing it does do is instantiate World.</p></blockquote><p>The database saves the data in a way that I will talk about below. Above is the transformation of that data into a more compatible form to this library.</p><p>So at this point we have World, which is where we set our way of finding truth and<code>$features</code> which is the state of all features.</p><h4 id="world">World</h4><p>This class implements the interface that comes with the library</p><p>You can see that<a href="https://gist.github.com/anonymous/c508101f0a85a4751c93">here</a></p><p>I simply do some logic in there based off User email since that is all I am using right now instead of user id or name. More can be added as needed to react to all the other options.</p><p>But this is how we find things like &lsquo;can this user see this feature&rsquo;, &lsquo;what users are active for this feature&rsquo; etc. Basically it is the class you use to tie your framework into the FeatureFlag logic. So when it asks for groups, users, etc it has the methods and logic needed to compare your data to the feature flag requirements.</p><h3 id="then-the-examplefeature-provider">Then the ExampleFeature Provider</h3><p>Just so I could try out this library on something so I could wrap my head around it I made an example feature that added a twitter field to the user data.</p><p>This was great cause it was a schema change so I had to make sure the field was<code>nullable</code> and it offered some view level interactions with the FeatureFlag.</p><h3 id="in-the-view">In the View</h3><p>I made a view of it<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-partial-blade-php">partial</a></p><p>That can be injected into the main view that this feature will be altering<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-example-blade-php">example.blade.php</a></p><p>All of this is registered in the Provider setup above</p><pre><code>public function boot(GateContract $gate)
{<p>$this->registerPolicies($gate);</p><p>$gate->define(&lsquo;add-twitter-field&rsquo;, &lsquo;\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@addTwitterField&rsquo;);</p><p>$gate->define(&lsquo;see-twitter-field&rsquo;, &lsquo;\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@seeTwitterField&rsquo;);
}</code></pre><p>Those logic classes are super simple thanks to this library and really could just have been Closures.</p></p><pre><code>&lt;?php
namespace AlfredNutileInc\LaravelFeatureFlags;
class ExampleFeatureFlagLogic
{
public function addTwitterField()
{
return \Feature\Feature::isEnabled('add-twitter-field');
}
public function seeTwitterField($user)
{
return \Feature\Feature::isEnabled('see-twitter-field');
}
}</code></pre><p>Now you can turn off this info as needed. And in your Controllers/Repository just remember to not assume that field is coming in via request or that it even exists in the Model.</p><pre><code>$user->twitter = ($request->input("twitter")) ? $request->input("twitter") : null;</code></pre><p>Honestly I think it is better to add this to a Laravel Model Event. Then as you listen to that Event you can react to it. And when not having the feature on or installed any longer it is one less place your code is being injected into the application.</p><h3 id="featureflag-migration">FeatureFlag Migration</h3><p>The Migration will make one table for<code>feature_flags</code> and add a column to the user table for the example twitter field feature.</p><p>Note the Example Provider will add the<code>twitter</code> column to the<code>user</code> table. It is nullable so it will not be an issue if other parts of the app do not consider this data.</p><p>In the<code>feature_flags</code> table there we have the id column, the key column, active column to even consider the feature flag and then the variants column if any. I might get rid of the active column but thought it might speed up queries.</p><p>The variant column being json allows us to store unstructured data to hold any data for different situations so we can cover all the possible variants listed above.</p><p>For example</p><pre><code>
$server_config['show-twitter'] => array('users' => array('on' => array('fred')))<p/></pre><p>would store as</p></p><pre><code>|ID |KEY |ACTIVE |VARIANT |
|---|--------------|---------|---------------------------------|
| 2 | show-twitter | 1 |{ 'users': [ 'on': [ 'fred' ] ] }|
| | | | |</code></pre><h2 id="menu">Menu</h2><p>Just a note the demo has the Feature Flag menu. Because this core app uses the ViewComposer pattern to create a &ldquo;links&rdquo; array I can add to that later on in my FeatureFlagProvider</p><p><img src="https://dl.dropbox.com/s/daftzzfq7it6wxx/feature_flag_menu.png?dl=0" alt="menu"/><pre><code> private function injectLinks()
{<pre><code> view()-&amp;gt;composer(
'layouts.default', function($view) {
if ($view-&amp;gt;offsetExists('links')) {
$links_original = $view-&amp;gt;offsetGet('links');
$links = [
['title' =&amp;gt; 'Feature Flags', 'url' =&amp;gt; route('feature_flags.index'), 'icon' =&amp;gt; 'flag-o']
];
$view-&amp;gt;with('links', array_merge($links_original, $links));
}
}
);
}</code></pre><p/></pre><p>But that is for another post!</p></p><h2 id="video">Video</h2><p><iframe width="420" height="315" src="https://www.youtube.com/embed/4nq7FyHQj8I" frameborder="0" allowfullscreen=/></p><h2 id="todo">TODO</h2><ul><li>Use Model Events to do that level of work</li><li>Cache of the FeatureFlag Settings and update Cache on Change</li><li>Show how it works in the menu and other areas eg include and Provider</li></ul></description><tags>laravel, feature_flags, php</tags></item><item><title>Slack Custom Commands and Laravel to Make an American to British Translater</title><link>https://alfrednutile.info/posts/173/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/173/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/b8vwn1peb7s5cet/a2b.gif?dl=0" alt="in use"/><p>Laravel or anything you are comfortable with making a Route and Response will work fine really.</p><p>This &ldquo;messaging as a platform&rdquo; is a new world for me, challenging my way of thinking in many ways. Some things just do not need a authentication of their own, a UI, etc they just need a place to get info from, or do something with some info etc.</p><p>In this case I made a really simple &ldquo;Custom Slash Command&rdquo; to translate British Slang to American and American to British (so I can sound cooler!)</p><p>Later I will look into bots etc but for now here is a look at a custom slash commands.</p><h2 id="getting-api-endpoint-setup">Getting API Endpoint Setup</h2><p>I still do not have a great local workflow for this. There are articles about this online with secure tunnels etc. My next step is to use my wildcard cert or using<a href="https://letsencrypt.org/">https://letsencrypt.org/</a> to have a local url so I can make this workflow a ton easier.</p><p>But to get going I had to setup a domain with valid HTTPS. As linked above, Let&rsquo;s Encrypt might be a great way to setup a play area and solutions like Forge<a href="https://forge.laravel.com/">https://forge.laravel.com/</a> Heroku<a href="https://www.heroku.com/">https://www.heroku.com/</a> are great ways to get going quickly on getting a &ldquo;POSTABLE&rdquo; API in place.</p><p>What I mean by POSTABLE is that your API needs to take a POST from Slack (it can take a GET but not sure the advantage to that) but consider App you are setting up the foundation to so many cool integrations you can do with Slack all using this one server your are setting up, until of course something needs it&rsquo;s own space. One POSTABLE API can be like your own &ldquo;If This Then That&rdquo;<a href="https://ifttt.com/">https://ifttt.com/</a> solution in my opinion. Fun for some of us that is for sure.</p><p>Once that was setup I could start playing around.</p><h2 id="setting-up-the-slack-endpoint">Setting up the Slack Endpoint</h2><p>Once I log into the slack.com website and read up on the API went over to Custom Integrations. Making a Slack App will come later but for not this was more than enough to have some fun.</p><p>In there I added a configuration.</p><p>There are several settings here that matter.</p><p><img src="https://dl.dropboxusercontent.com/s/jbnl2yn9e9odfhg/slack_image_1.png?dl=0" alt="example image"/><ul><li>Command: /b2a</li><li>URL:<a href="https://foo.com/api/v1/brit_to_us">https://foo.com/api/v1/brit_to_us</a></li><li>Method: POST</li><li>Token: TOP_SECRET</li><li>Customize Name: brit2american</li><li>Custom Icon: speaking_head_in_silhouette</li><li>Help Text:</li><li>Description: Translate British slang to American Slang</li><li>Usage hint: Throw A Spanner In The Works</li><li>Descriptive Label: Brit to American Slang</li></ul><p>I made two of them since I also need to turn my boring American into cool British Slang</p><ul><li>Command: /a2b</li><li>URL:<a href="https://foo.com/api/v1/us_to_brit">https://foo.com/api/v1/us_to_brit</a></li><li>Method: POST</li><li>Token: TOP_SECRET</li><li>Customize Name: american2brit</li><li>Custom Icon: speaking_head_in_silhouette</li><li>Help Text:</li><li>Description: Translate American to Cool British Slang</li><li>Usage hint: Throw A Spanner In The Works</li><li>Descriptive Label: Good Morning All!</li></ul><p>Once these are setup we are ready to build our Routes!</p><h2 id="setting-up-the-receiving-api">Setting Up the Receiving API</h2><p>This part could have gone better if I had a local environment setup to receive these Slack commands and next time I will, I just did not realize how easy it was to just setup my own local environment with a good signed cert which Slack requires until I started writing this article.</p><p>This was for fun so I did not go crazy with design. All of it could have been in the route file really. But I do want this domain and Laravel install I made to allow me to plug in other Custom Commands and later Slack App.</p><h3 id="slack-payload">Slack Payload</h3><p>Note this page on Slack<a href="https://api.slack.com/slash-commands">https://api.slack.com/slash-commands</a> you will get a payload like this</p><pre><code>token=gIkuvaNzQIHg97ATvDxqgjtO
team_id=T0001
team_domain=example
channel_id=C2147483705
channel_name=test
user_id=U2147483697
user_name=Steve
command=/weather
text=94070
response_url=https://hooks.slack.com/commands/1234/5678</code></pre><p>For me that meant keeping some things in the .env file as needed to look for a specific Token, User etc BUT later I can see making a Provider class and Config file to setup up for each Slash Command or App I make so that I keep the settings as needed in one grouped place and not in a huge file.</p><p>For now I just use the<code>text</code> and the<code>response_url</code> to my advantage the rest I am not worried about right now.</p><p>This is also I good example of an easy<code>Webhook</code> workflow. Give me your object and where to send the results back to.</p><p>Keeping the routing simple my<code>routes.php</code> file is just this</p><pre><code>Route::post('/api/v1/brit_to_us', 'BritToUSController@britToUs');
Route::post('/api/v1/us_to_brit', 'BritToUSController@usToBrit');</code></pre><p>And that controller is just this</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use Illuminate\Http\Request;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Goutte\Client as GoutteClient;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;</p><p>class BritToUSController extends Controller
{</p><pre><code>protected $url = 'http://www.translatebritish.com/';
/**
* @var GoutteClient
*/
protected $client;
public function __construct(GoutteClient $client)
{
$this-&amp;gt;client = $client;
}
public function usToBrit(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url . 'reverse.php');
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
public function britToUs(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url);
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
protected function respondToSlack($message, $original_message, $type = 'in_channel')
{
return ['response_type' =&amp;gt; 'in_channel', 'text' =&amp;gt; trim($message), 'attachments' =&amp;gt; ['text' =&amp;gt; $original_message]];
}
/**
* @return string
*/
public function getUrl()
{
return $this-&amp;gt;url;
}
/**
* @param string $url
*/
public function setUrl($url)
{
$this-&amp;gt;url = $url;
}</code></pre><p>}</p><p/></pre><p>The gist of it is to take the incoming<code>text</code> and pass it to the Translation Site, and return it to the<code>response_url</code> using the Response::json Facade.</p></p><p>Pretty easy. Later I can validate tokens, validate users or query info based on a user eg &ldquo;Get me my tickets from JIRA&rdquo; for example</p><p>That is some of my goals later, how to use Slack to automate some of my, and my teams, day to day needs and workflows.</p><p><strong>UPDATE</strong>
Make sure you exclude this route from the &ldquo;app/Http/Middleware/VerifyCsrfToken.php&rdquo; middleware</p><pre><code> protected $except = [
'api/v1/imports'
];</code></pre></description><tags>laravel, php, slack</tags></item><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description><p><strong>Update: September 06 2016</strong></p><p>We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.</p><p><strong>Or Listen<a href="http://www.readorlisten.com/2">here</a></strong></p><p>Another article about this written by Loran Jane Mitchell<a href="http://www.lornajane.net/posts/2014/using-composer-without-gitignoring">Using Composer Without GitIgnoring Vendor</a></p><p>I have done this for sometime with node_modules because I use to hate waiting for npm to pull down during CI builds. I could have used the CI systems cache for this but I realized once the project starts it is rare that I needed to add more libraries. And when I did it was just as easy to wipe using<code>git rm</code> and do them again fresh. This included my use of Bower.</p><p>But then there is Composer and PHP. The project starts and I might be pulling in libraries quite a bit but at some point we are just running<code>composer install</code> and never<code>composer update</code>. This step included<code>rm -rf vendor</code> which helped with the speed. And this is going great BUT has a few draw backs I will cover below.</p><blockquote><p>&ldquo;I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing&rdquo;</p></blockquote><h2 id="speed-ci-and-deployment">Speed (CI, and Deployment)</h2><p>This is not HUGE but with workflow now each deployment, unless it is a<code>quick</code> one, we tend to just use<code>rm -rf vendor &amp;&amp; composer install</code>. And it does cost us 1/2 a minute. Again not huge but nice to not have that as down time to the user. For at this point the app is not usable. And even worse as I will talk about below. And we do a lot of builds a day in the CI.</p><h2 id="one-point-of-failure-vs-many">One Point of Failure VS Many</h2><p>This is the big reason in my opinion. I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing. This can be caused due to a misconfiguration on our part, eg using anonymous Github connections but at times I have seen it even when authenticated and am not totally sure why.</p><p>Then there are those moments, and they happen, when Github is under DDOS attack! So then it is just a day of no deployments and that is not an option really. And with this technique we have a good chance of getting a deployment in since we are just hitting one repo and not trying our luck at many.</p><h2 id="rollback">Rollback</h2><p>Then there are Rollback moments. Zero down time would be great and this is one step closer. With our releases we use Tags. So if I was to release 1.2.2 and it had a bug I could rollback to tag 1.2.1 in moments. No need to rebuild composer. Sure it saves minor amount of time but when things are down on production 1/2 a minute can feel like a life time. This does not cover all migration issues but that is not a thing we do every deployment and honestly with the migration rollback feature we have in Laravel I think that becomes an edge case that can be dealt with using Artisan and some creative coding.</p><blockquote><p>&ldquo;when things are down on production 1/2 a minute can feel like a life time&rdquo;</p></blockquote><h2 id="fixing-merge-conflicts">Fixing Merge Conflicts</h2><p>Well what happens when there is a conflict in this vendor folder? That is easy really just<code>rm</code> the whole thing and do what I have been doing all along<code>composer install</code> saving<code>composer update</code> only for those moments you are looking for something to really be updated and feeling lucky (and patient).</p></description><tags>laravel, php, workflows, coding, best practices</tags></item><item><title>Logout User After Inactivity Laravel and Milddleware</title><link>https://alfrednutile.info/posts/168/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/168/</guid><description><p><strong>Original Post</strong><a href="http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user">http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user</a></p><p>This Middleware made it super easy to satisfy a requirement to log the user out after 15 minutes of in activity.</p><p>I added only a few touchups.</p><p>One was the<code>getTimeOut</code> this was so I can work locally and override this by setting it to a large number. I could even use it to just bypass the whole things for a bit since on<code>local</code> I rather not deal with this.</p><p>Also I removed the message count since it just was not needed for what I was doing.</p><pre><code>&lt;?php namespace App\Http\Middleware;
use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Session\Store;
class SessionTimeout {
protected $session;
protected $timeout=900;
public function __construct(Store $session){
$this->session=$session;
}
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next)
{
if(!$this->session->has('lastActivityTime'))
$this->session->put('lastActivityTime',time());
elseif(time() - $this->session->get('lastActivityTime') > $this->getTimeOut()){
$this->session->forget('lastActivityTime');
Auth::logout();
return redirect('auth/login')->withErrors(['You had not activity in 15 minutes']);
}
$this->session->put('lastActivityTime',time());
return $next($request);
}<pre><code>protected function getTimeOut()
{
return (env('TIMEOUT')) ?: $this-&amp;gt;timeout;
}</code></pre><p>}</code></pre></p></description><tags>laravel, php</tags></item><item><title>CentOS or RedHat and Laravel</title><link>https://alfrednutile.info/posts/167/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/167/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/b0ourzj0umlrduq/laravel_redhat.png?dl=0" alt=""/><p><strong><a href="https://serversforhackers.com/an-ansible-tutorial">Got Ideas from here An Ansible Tutorial</a></strong></p><p>Just wrapped up setting up two RedHat servers (version 7) and one CentOS Virtual box so I could deploy a Laravel site.</p><p><strong>Code is<a href="https://github.com/alnutile/ansible-laravel-redhat">here</a></strong></p><p>Thanks to Ansible it was not as bad as it could have been.</p><p>I am not an ansible expert just getting into it as we need to do this more. What these scripts will do is</p><ul><li>Setup a CentOS Vagrant box</li><li>Setup a Server for Laravel and Queues SupervisorD</li><li>Setup up SSHD to be key based only you can remove this</li><li>Setup Cron to run scheduler</li><li>Setup SSL if you make the keys for this</li><li>Redirect to https for site</li></ul><h2 id="local-vm">Local VM</h2><p>Step one is to install Ansible on your Mac and then<code>vim /etc/ansible/hosts</code></p><p>In there I have</p><pre><code>[local]
192.168.1.22<p>[serverprod]
111.111.111.111</p><p>[serverstage]
111.111.111.111</code></pre><p>Local is the VM</p></p><p>I needed a local VM to run CentOS since I did not have RedHat but it is close enough. I downloaded the ISO installed it the old fashion way on VirtualBox then I ran my ansible scripts against it. You can see this line in the readme.md</p><pre><code>ansible-playbook --limit local -s centos.yml -u centos -k --ask-sudo-pass --extra-vars "user=centos"</code></pre><p>Now that that is set I can hit it with my nginx config</p><pre><code>ansible-playbook --limit local -s nginx.yml -u centos --extra-vars "user=centos version=centos"</code></pre><p>Okay now it should work?</p><h2 id="redhat">RedHat</h2><p>As I note in the readme.md I then setup the RedHat servers. They where a bit tougher but it all worked out. Note SELinux might be on that is why I have some lines to allow things but they may not be enough for your setup.</p></description><tags>laravel, devops</tags></item><item><title>Quick Tip Forcing More Complex Passwords in Laravel</title><link>https://alfrednutile.info/posts/166/</link><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/166/</guid><description><p>With the great<a href="http://laravel.com/docs/5.1/validation">Laravel Docs</a> I will quickly show how to &ldquo;encourage&rdquo; the user to set a better password.</p><p>Going through the standard docs for<a href="http://laravel.com/docs/5.1/authentication">Authentication</a> we end up with a registration form.</p><p>Then in the<a href="https://github.com/laravel/laravel/blob/master/app/Http/Controllers/Auth/AuthController.php">AuthController</a> that comes with Laravel I modify it a bit.</p><pre><code> protected function validator(array $data)
{
$messages = ['password.regex' => "Your password must contain 1 lower case character 1 upper case character one number"];
return Validator::make($data, [
'name' => 'required|max:255',
'email' => 'required|email|max:255|unique:users',
'password' => 'required|confirmed|min:8|regex:/^(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])\S*$/',
], $messages);
}</code></pre><p>Using the<code>regex</code> rule seen in the<a href="http://laravel.com/docs/5.1/validation#available-validation-rules">docs</a><a href="http://php.net/manual/en/function.preg-match.php">http://php.net/manual/en/function.preg-match.php</a> and the Laravel docs I can then set an expression to check for these characters, and I can also set a custom message if it fails.</p><p>And with that little bit of work we get an error message to help the user make a better password.</p><p><img src="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0" alt="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0"/><p>btw this is coming about as I start this<a href="https://onemonth.com/courses/web-security">Web Security Course</a> and try to consider some of these ideas in my day to day Laravel work.</p></description><tags>laravel, php, security</tags></item><item><title>Image Uploads, Laravel, Angular and Flow.js</title><link>https://alfrednutile.info/posts/165/</link><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/165/</guid><description><p>Here is one combination out of many to make this happen.</p><p>The libraries are</p><p><a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow</a></p><p>and</p><p><a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server</a></p><h2 id="model-and-imageable-resource">Model and Imageable Resource</h2><p>What I like about this is we can make 1 controller to manage uploads. That controller will upload the file, place it into the correct folder, and setup the relationship to the resource.</p><p>In this example the Resource will be a Contact.</p><p>So I then follow Laravel docs to create the Polymorphic Imageable/Photo example<a href="http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations">http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations</a></p><p>Ending up with an image model like this</p><pre><code>&lt;?php<p>namespace App;</p><p>use Illuminate\Database\Eloquent\Model;</p><p>class Image extends Model
{
public $timestamps = false;</p><pre><code>/**
* Get all of the owning imageable models.
*/
public function imageable()
{
return $this-&amp;gt;morphTo();
}</code></pre><p>}</code></pre><p>And a Contact.php file like this</p></p><pre><code>&lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
use Rhumsaa\Uuid\Uuid;
class Contact extends Model
{
protected $fillable = [
'first_name',
'last_name',
'active'
];
public function images()
{
return $this->morphMany(\App\Image::class, 'imageable');
}
}</code></pre><p>Nothing special really</p><p>Even the migration is right from the docs</p><pre><code>&lt;?php<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p><p>class CreateTableImageable extends Migration
{
public function up()
{
Schema::create(&lsquo;images&rsquo;, function (Blueprint $table) {
$table->increments(&lsquo;id&rsquo;);
$table->string(&lsquo;path&rsquo;);
$table->integer(&lsquo;imageable_id&rsquo;);
$table->string(&lsquo;imageable_type&rsquo;);
});
}</p><pre><code>public function down()
{
Schema::drop('images');
}</code></pre><p>}</code></pre><h2 id="controller">Controller</h2></p><p>Now for the Controller.</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Image;
use Flow\Config;
use Illuminate\Support\Facades\Input;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;</p><p>class ImageController extends Controller
{</p><pre><code>public $model_id;
public $model_class_path;
public $destination_path;
public $filename;
public $config;
public function uploadFile(Request $request, $model_id = false)
{
try
{
$this-&amp;gt;model_id = $model_id;
$model_class_path = $this-&amp;gt;getClassName($request);
$path = $this-&amp;gt;getImagePublicDestinationPath($request);
$this-&amp;gt;model_class_path = $model_class_path;
$this-&amp;gt;destination_path = $path;
$this-&amp;gt;config = new Config(array(
'tempDir' =&amp;gt; storage_path('chunks_temp_folder')
));
$this-&amp;gt;filename = Input::get('flowFilename');
$this-&amp;gt;saveImagable();
$flowRequest = new \Flow\Request();
if(\Flow\Basic::save(
public_path($this-&amp;gt;getDestinationPath()). '/' . $this-&amp;gt;filename,
$this-&amp;gt;config,
$flowRequest)) {
return Response::json(['data' =&amp;gt; $model_id, 'message' =&amp;gt; &amp;quot;File Uploaded $this-&amp;gt;filename&amp;quot;], 200);
} else {
return Response::json([], 204);
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error saving image %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
public function saveImagable()
{
$imageable = new Image();
$imageable-&amp;gt;path = $this-&amp;gt;destination_path . '/' . $this-&amp;gt;filename;
$imageable-&amp;gt;imageable_id = $this-&amp;gt;model_id;
$imageable-&amp;gt;imageable_type = $this-&amp;gt;model_class_path;
$imageable-&amp;gt;save();
}
public function getDestinationPath()
{
return $this-&amp;gt;destination_path;
}
public function setDestinationPath($destination_path)
{
$this-&amp;gt;destination_path = $destination_path;
}
private function getClassName($request)
{
return ($request-&amp;gt;input('model_class_path')) ? $request-&amp;gt;input('model_class_path') : 'App\Contact';
}
public function getImagePublicDestinationPath(Request $request)
{
return ($request-&amp;gt;input('path')) ? $request-&amp;gt;input('path') : 'images/contacts';
}</code></pre><p>}</p><p/></pre><p>Nothing special there just per the docs of the Flow php library<a href="https://github.com/flowjs/flow-php-server"><a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server</a></a></p></p><p>And the route.php file</p><pre><code>Route::get('images/upload/{model_id}', 'ImageController@uploadFile');
Route::post('images/upload/{model_id}', 'ImageController@uploadFile');</code></pre><p>By the time this project is done though all of this is behind auth middleware. While being built it is behind htaccess.</p><p>One catch overall is the resource needs to exist before you can upload a file related to it so on Contact New type pages you may need to wait till the contact is created before you do the upload. There are ways around this but for now we are keeping it simple.</p><h2 id="angular">Angular</h2><p>This is a simple example.</p><p>The route I made a simple example path</p><pre><code>Route::get('/upload_example', function () {
return view('upload');
});</code></pre><p>That view extends the example layout view</p><h3 id="defaultbladephp">default.blade.php</h3><pre><code>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head><pre><code>&amp;lt;style&amp;gt;
/* This helps the ng-show/ng-hide animations start at the right place. */
/* Since Angular has this but needs to load, this gives us the class early. */
.ng-hide { display: none!important; }
&amp;lt;/style&amp;gt;
&amp;lt;title ng-bind=&amp;quot;title&amp;quot;&amp;gt;Ratsoc v2.0&amp;lt;/title&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge, chrome=1&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&amp;quot; /&amp;gt;
&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;
&amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&amp;gt;</code></pre><p>&lt;/head></p><p>&lt;body flow-prevent-drop>
&lt;div>
&lt;div ng-include="&lsquo;layout/shell.html&rsquo;">&lt;/div>
&lt;div id="splash-page" ng-show="showSplash">
&lt;div class="page-splash">
&lt;div class="page-splash-message">
Ratsoc v2.0
&lt;/div>
&lt;div class="progress progress-striped active page-progress-bar">
&lt;div class="bar">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></p><p>@yield(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;script src=&amp;quot;/temp/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/angular.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/ng-flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/app.upload.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;</code></pre><p>&lt;/body></p><p>&lt;/html></code></pre><p>Of course this would be setup better with Gulp but for now keeping it simple. The the view that is the content.</p></p><h3 id="uploadbladephp">upload.blade.php</h3><pre><code>@extends('layouts.default')<p>@section(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;div ng-app=&amp;quot;app.upload&amp;quot; flow-init flow-prevent-drop&amp;gt;
&amp;lt;div ng-controller=&amp;quot;MainController as vm&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-8 col-lg-offset-2&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;&amp;quot;
flow-init=&amp;quot;{
target: '/images/upload/' + vm.contact.id, singleFile: true, testChunks: true,
query: { '_token': vm.token, 'model_class_path': 'App\\Contact', 'path': 'images/contacts'}
}&amp;quot;
flow-files-submitted=&amp;quot;vm.upload( $files, $event, $flow )&amp;quot;
flow-file-success=&amp;quot;vm.setFileName($flow.files)&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;
flow-drop flow-drag-enter=&amp;quot;style={opacity: .5}&amp;quot;
flow-drag-leave=&amp;quot;style={}&amp;quot; ng-style=&amp;quot;style&amp;quot;
flow-drop-enabled=true&amp;gt;
&amp;lt;strong&amp;gt;&amp;lt;i class=&amp;quot;fa fa-arrow-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Upload image here by dragging here&amp;lt;/strong&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;btn btn-xs btn-default&amp;quot; ng-click=&amp;quot;vm.removeFile($flow)&amp;quot;
ng-if=&amp;quot;($flow.files.length &amp;gt; 0)&amp;quot; name=&amp;quot;remove-file&amp;quot;&amp;gt; Remove File &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;img ng-src=&amp;quot;@{{ vm.image }}&amp;quot; ng-show=&amp;quot;vm.image&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</code></pre><p>@endsection</code></pre><p>Not much of a looker here. This makes it super easy to work on things though before plugging it into your more complex applications.</p></p><p>Here I am adding a payload so when I use this on a page I can decide then is it at Contact, a Project, a Product etc. and setup the path eg &lsquo;images/projects&rsquo; or Model name &lsquo;App\Contact&rsquo; as needed.</p><p>Then for the app.js file to do all this, again you might break it up into more files just keeping this simple.</p><pre><code>(function () {
'use strict';<pre><code>angular.module('app.upload', [
'flow'
]);
function FlowConfig(flowFactoryProvider)
{
flowFactoryProvider.defaults = {
speedSmoothingFactor: 0.2,
maxChunkRetries: 10,
simultaneousUploads: 10
};
}
function MainController($http, $scope)
{
var vm = this;
vm.contact = {};
vm.contact.id = 'new';
vm.token = false;
vm.upload = upload;
vm.setFileName = setFileName;
vm.image_root = '/images/contacts/';
activate();
////
function activate()
{
getToken();
}
function setFileName(flow_files)
{
vm.image = vm.image_root + flow_files[0].name;
}
function upload(files, event, flow)
{
angular.forEach(files, function(v,i) {
files[i].flowObj.opts.query._token = vm.token;
});
flow.upload();
}
function getToken()
{
$http.get('/auth/token').then(
successGettingToken,
errorGettingToken
);
}
function successGettingToken(response)
{
vm.token = response.data;
}
function errorGettingToken(response)
{
console.log(&amp;quot;Error&amp;quot;);
console.log(response);
}
}
angular.module('app.upload')
.controller(&amp;quot;MainController&amp;quot;, MainController)
.config(FlowConfig);</code></pre><p>})();</p><p/></pre><p>So we use the flow upload event to run our upload method. This then adds the token to the POST request for the CSRF middleware.</p></p><p>Keep in mind my Angular is just a widget in blade. There is no separate session situation that you may have in SPA (Single Page Applications)</p><p>Thats it, drag file, file uploads and you have Flow, Angular and Laravel.</p><p><img src="https://dl.dropboxusercontent.com/s/01l8psl1rpud4ee/laravel_flow_angular.png?dl=0" alt=""/></description><tags>laravel, php, angular</tags></item><item><title>Spark Setup Issue</title><link>https://alfrednutile.info/posts/163/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/163/</guid><description><p>During the install<a href="https://github.com/laravel/spark">https://github.com/laravel/spark</a> I kept getting this error</p><pre><code> Problem 1
- Installation request for laravel/spark-installer ~1.0 -> satisfiable by laravel/spark-installer[v1.0.0].
- Conclusion: remove illuminate/support v4.2.17
- laravel/spark-installer v1.0.0 requires illuminate/support ~5.0 -> satisfiable by illuminate/support[v5.0.0, v5.0.22, v5.0.25, v5.0.26, v5.0.28, v5.0.33, v5.0.4, v5.1.1, v5.1.13, v5.1.16, v5.1.2, v5.1.6, v5.1.8].
- Can only install one of: illuminate/support[v5.0.0, v4.2.17].
- Can only install one of: illuminate/support[v5.0.22, v4.2.17].
- Can only install one of: illuminate/support[v5.0.25, v4.2.17].
- Can only install one of: illuminate/support[v5.0.26, v4.2.17].
- Can only install one of: illuminate/support[v5.0.28, v4.2.17].
- Can only install one of: illuminate/support[v5.0.33, v4.2.17].
- Can only install one of: illuminate/support[v5.0.4, v4.2.17].
- Can only install one of: illuminate/support[v5.1.1, v4.2.17].
- Can only install one of: illuminate/support[v5.1.13, v4.2.17].
- Can only install one of: illuminate/support[v5.1.16, v4.2.17].
- Can only install one of: illuminate/support[v5.1.2, v4.2.17].
- Can only install one of: illuminate/support[v5.1.6, v4.2.17].
- Can only install one of: illuminate/support[v5.1.8, v4.2.17].
- Installation request for illuminate/support == 4.2.17.0 -> satisfiable by illuminate/support[v4.2.17].</code></pre><p>Finally I went into my ~/.composer folder. Removed<code>composer.lock</code> then I edited the<code>composer.json</code> to look like this</p><pre><code>{
"require": {
"laravel/envoy": "~1.0",
"laravel/installer": "~1.1",
"laravel/spark-installer": "~1.0"
}
}</code></pre><p>I use Envoy for a lot of my projects so I left that there and made sure to update my installer.</p><p>Then I ran, in that folder composer update.</p><p>Finally I made sure to add the path to my ~/.bash_profile as</p><pre><code>export PATH=$PATH:/Users/alfrednutile/.composer/vendor/bin/</code></pre><p>Then ran<code>source ~/.bash_profile</code></p><p>With all that in place I could go to my new Laravel install to run<code>spark install</code></p></description><tags>spark, laravel, php</tags></item><item><title>Adding Expose IDS to Laravel MiddleWare</title><link>https://alfrednutile.info/posts/162/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/162/</guid><description><p>The library is<a href="https://github.com/enygma/expose">https://github.com/enygma/expose</a></p><blockquote><p>&ldquo;Expose is an Intrusion Detection System for PHP loosely based on the PHPIDS project (and using it&rsquo;s ruleset for detecting potential threats).&rdquo;</p></blockquote><p>After seeing it in the latest PHPArch<a href="https://www.phparch.com/2015/09/september-2015-issue-release-security-boot-camp/">magazine</a> on security I wanted to give it a try.</p><p>Of course this is far from a complete look.</p><p>Step 1 Make the MiddleWare</p><p><code>php artisan make:middleware ExposeMiddleware</code></p><p>Then add Expose as noted in the docs.</p><pre><code>&lt;?php<p>namespace App\Http\Middleware;</p><p>use Closure;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Log;</p><p>class ExposeMiddleware
{
public function handle($request, Closure $next)
{
$filters = new \Expose\FilterCollection();
$filters->load();
$logger = App::make(&lsquo;log&rsquo;);
$manager = new \Expose\Manager($filters, $logger);
$manager->run($request->input());</p><pre><code> Log::info(sprintf(&amp;quot;Logging results from Expose %d&amp;quot;, $manager-&amp;gt;getImpact()));
return $next($request);
}</code></pre><p>}</p><p/></pre><p>Then in<code>app/Http/Kernel.php</code></p></p><pre><code> protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\ExposeMiddleware::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];</code></pre><p>Now to make the route for testing</p><pre><code>&lt;?php
Route::get('/', function () {
return view('welcome');
});
Route::post('/post', function() {
return "Yo";
});</code></pre><p>And now a phpunit test to hit the route</p><pre><code> public function testPost()
{
$token = csrf_token();
$data = array(
'_token' => $token,
'test' => 'foo',
'bar' => array(
'baz' => 'quux',
'testing' => '&lt;script>test&lt;/script>'
)
);
$this->call('POST', '/post', $data);
}</code></pre><p>One more thing is to set the<code>app/Http/Middleware/VerifyCsrfToken.php</code> as such</p><pre><code>
public function handle($request, Closure $next)
{
if ( 'testing' === App::environment() &amp;&amp; $request->exists('_token') ) {
$input = $request->all();
$input['_token'] = $request->session()->token();
$request->replace( $input );
}
if ($this->isReading($request) || $this->shouldPassThrough($request) || $this->tokensMatch($request)) {
return $this->addCookieToResponse($request, $next($request));
}
throw new TokenMismatchException;
}</code></pre><p>Okay so now we can tail the log file in the terminal and hit the route with phpunit</p><p><img src="https://dl.dropboxusercontent.com/s/fgoax2z12mhhf0t/expose.png?dl=0" alt=""/><p>And the logs should output</p><pre><code>[2015-09-02 23:50:44] testing.INFO: Match found on Filter ID 38 [{"id":"38","rule":"(?:\\&lt;[\\/]?(?:[i]?frame|applet|isindex|marquee|keygen|script|audio|video|input|button|textarea|style|base|body|meta|link|object|embed|param|plaintext|xm\\w+|image|im(?:g|port)))","description":"Detects possibly malicious html elements including some attributes","tags":"xss, csrf, id, rfe, lfi","impact":"4"}]
[2015-09-02 23:50:44] testing.INFO: Logging results from Expose 8<p/></pre><p>At this point the MiddleWare can do numerous things</p></p><ul><li>Log to an in memory db IP addresses that violates a rule of a certain level and block them.</li><li>Keep track of issues and notify the team of issues</li><li>Cut through a can without getting dull</li></ul><p>Anyways I have a ways to go with this but just seeing the different tools I could use to make my applications more secure.</p></description><tags>security, laravel, php</tags></item><item><title>Note To Self: A VirtualBox machine with the name 'homestead' already exists.</title><link>https://alfrednutile.info/posts/161/</link><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/161/</guid><description><p>Since I know this will happen again I want to remind myself and others how to fix it.</p><p>I had this error<code>A VirtualBox machine with the name 'homestead' already exists.</code> when doing my normal vagrant up. I got some help at<a href="http://stackoverflow.com/questions/26993903/a-virtualbox-machine-with-the-name-homestead-already-exists">http://stackoverflow.com/questions/26993903/a-virtualbox-machine-with-the-name-homestead-already-exists</a> but it was not made too clear.</p><p>Here are the exact steps for me to fix this</p><p>Run<code>vboxmanage list vms</code></p><p>This will output a list</p><pre><code>"homestead" {5dc30604-8ebe-4060-8966-4881958e6bf5}
"boot2docker-vm" {38af33d4-7ebc-4498-a80e-39711a08b413}
"settler_default_1434987271004_24349_1440846292799_16470" {2c80bf94-99b8-4b51-95a0-034dddae8c33}</code></pre><p>Then I took the id of homestead<code>5dc30604-8ebe-4060-8966-4881958e6bf5</code> and did</p><pre><code>echo '5dc30604-8ebe-4060-8966-4881958e6bf5' > ~/Homestead/.vagrant/machines/default/virtualbox/id</code></pre><p><strong>UPDATE</strong></p><p>Rough day. Like I said this rarely happens but in this case I also had the<code>default: Warning: Authentication failure. Retrying...</code> error so I did this</p><pre><code>cd /tmp
wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub
cat vagrant.pub >> ~/.ssh/authorized_keys</code></pre></description><tags>laravel, note</tags></item><item><title>Laravel and Angular Widgets e.g. Non SPA (Single Page Application) Pattern</title><link>https://alfrednutile.info/posts/160/</link><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/160/</guid><description><p>Not all apps need to be an SPA (Single Page Application). Sure they have their place but in most cases the task might benefit from just a Blade template and Angular widget. This saves you from having to write an angular route which can be a tedious duplication of work. Also Blade is fast and fun to work with.</p><h2 id="step-one-add-data-to-global-window">Step One Add Data to Global Window</h2><p>Using the<a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">Transform PHP Vars to JavaScript</a> you can easily start to inject some content into your templates, if needed, to setup the data your Angular widget can use to build out it&rsquo;s elements.</p><p>For example the Controller below will push some info into the view that I can use later</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Campaign;
use App\Folder;
use App\Helpers\ReturnWebhook;
use App\Http\Requests;
use App\Providers\WebhookExtendedProvider;
use App\Utilities\GenerateSampleContent;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Response;
use Michelf\MarkdownExtra;
use Rhumsaa\Uuid\Uuid;</p><p>class HelpController extends Controller
{
use GenerateSampleContent;
use ReturnWebhook;</p><pre><code>public function api()
{
$url = url();
$apis['campaigns'] = 'api/v1/campaigns';
$apis['campaigns_get'] = 'api/v1/campaigns/';
$campaigns = Campaign::select('id', 'name')-&amp;gt;groupBy('name')-&amp;gt;orderBy('name')-&amp;gt;get();
$folders = Folder::with('meta_values')-&amp;gt;groupBy('folders.id')-&amp;gt;get();
/**
* Using the Javacript Library
*/
\JavaScript::put([
'campaigns' =&amp;gt; $campaigns,
'token' =&amp;gt; csrf_token(),
'folders' =&amp;gt; $folders,
'url' =&amp;gt; $url,
'apis' =&amp;gt; $apis
]);
$text = file_get_contents(base_path('docs/webhooks.md'));
$webhooks = MarkdownExtra::defaultTransform($text);
$api = file_get_contents(base_path('docs/api.md'));
$api = MarkdownExtra::defaultTransform($api);
return view('help.api', compact('webhooks', 'api', 'campaigns', 'url', 'apis', 'folders'));
}</code></pre><p/></pre><h2 id="setting-up-the-view-and-angular">Setting Up the View and Angular</h2></p><p>Now in the view for the Controller above we use that info. Note the Angular brackets<code>@{{</code></p><p><a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-partial-blade-php">See template here</a></p><p>So now that view is rendering both Blade data<code>{{</code> and Angular.</p><p>You will see too I setup the Angular controller<code>vm.addMarketoFolderNameToQuery</code> keep in mind I already setup that<code>ng-app</code> in my main template file<code>layouts.default</code></p><p><a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-default-blade-php">See Default Layout Here</a></p><h2 id="angular-controller">Angular Controller</h2><p>Here is the ApiController injected above. Notice we use Angular&rsquo;s $window to get the data we passed in from the Laravel Controller. You can also see it making API requests later on as the user clicks buttons etc.</p><pre><code>(function(){
'use strict';<pre><code>function ApiControllerUserShow($http, $window, toaster)
{
var vm = this;
vm.getting_token = '';
vm.user = $window.user;
vm.url = $window.url;
vm.message = &amp;quot;You do not have an API Key yet. Click the button below to make one&amp;quot;;
vm.getNewApi = getNewApi;
activate();
///
function activate()
{
console.log($window.user);
setApiToken();
}
function getNewApi()
{
vm.getting_token = 'fa-spin';
toaster.pop('info', &amp;quot;Getting new token&amp;quot;);
$http.get('/api/v1/create_client_token')
.success(function(response) {
toaster.pop('info', &amp;quot;Loading new token&amp;quot;);
console.log(response);
vm.getting_token = ''
vm.api_token = response.data;
})
.error(function(response) {
toaster.pop('error', &amp;quot;Could not get token please contact support&amp;quot;);
console.log(response);
});
}
function setApiToken()
{
//$user-&amp;gt;oauth_client-&amp;gt;oauth_session-&amp;gt;oauth_access_tokens-&amp;gt;id
if(!vm.user.oauth_client)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session.oauth_access_tokens)
{
vm.api_token = vm.message;
}
else
{
vm.api_token = vm.user.oauth_client.oauth_session.oauth_access_tokens.id;
}
}
}
angular.module('app')
.controller('ApiControllerUserShow', ApiControllerUserShow);</code></pre><p>})();</code></pre><p>That is it. Keep in mind that Blade template can have numerous angular “widgets” so different sections of the page can benefit from Angular. Or the one page can have several places that the Angular controller controls some of the output.</p></p><p>So hopefully this sums up a quick way to start putting Angular widgets into your Laravel application and still benefit from all speed that these too tools offer both in developing and in rendering!</p></description><tags>laravel, php, angular</tags></item><item><title>Laravel 5.1 and Oauth</title><link>https://alfrednutile.info/posts/159/</link><pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/159/</guid><description><h1 id="laravel-51-and-oauth2-server">Laravel 5.1 and Oauth2 Server</h1><p>Video coming soon&hellip;</p><p>Example repo is here<a href="https://github.com/alnutile/oauth_how_to">https://github.com/alnutile/oauth_how_to</a></p><p>The library we will use is</p><p><a href="https://github.com/lucadegasperi/oauth2-server-laravel">https://github.com/lucadegasperi/oauth2-server-laravel</a></p><p>This will setup a server both client_type and password_type for Grant Types.</p><h1 id="coming-to-terms-with-oauth">Coming to Terms with Oauth</h1><p>Coming to terms with this stuff is long and tedious.
The docs are here<a href="https://github.com/lucadegasperi/oauth2-server-laravel/">https://github.com/lucadegasperi/oauth2-server-laravel/</a> wiki will help and then these lead to the League docs as well<a href="http://oauth2.thephpleague.com/">http://oauth2.thephpleague.com/</a></p><p>There is also a podcast interview with the Alex Bilbie who made the League Oauth Library<a href="http://fullstackradio.com/episodes/4/">http://fullstackradio.com/episodes/4/</a></p><p>What I will cover is mainly the instalation going beyond the docs above into the details of getting this thing going. I will also provide a &ldquo;play&rdquo; repo for you to review.</p><h2 id="base-laravel-install">Base Laravel Install</h2><p>If you want to use this demo to play around just run<code>composer install</code> and see the migration info below.</p><p>Install laravel as normal, install the library as normal. You will see some extra stuff I have in the repo for helping out as well (this will be seen in the video too)</p><p><code>app/OauthTools</code></p><p>Some commands to use artisan to make users, tokens etc.</p><p>So in the end my<code>app/Console/Kernel.php</code> looked like<a href="https://github.com/alnutile/oauth_how_to/blob/master/app/Console/Kernel.php">https://github.com/alnutile/oauth_how_to/blob/master/app/Console/Kernel.php</a></p><p>So I could easily do</p><pre><code>php artisan oauth-tools:adduser admin@foo.com</code></pre><p><img src="https://dl.dropboxusercontent.com/s/4oz4yn8p8gxftt2/make_user_oauth.png?dl=0" alt=""/><p>or</p><pre><code>php artisan oauth-tools:generate-token 33591b34-03c2-4ece-a763-d531aee0298a admin@foo.com client</code></pre><p>Also note<a href="https://github.com/alnutile/oauth_how_to/blob/master/composer.json">composer.json</a> I use a uuid library to help with these commands etc.</p><p>Finally to have all of this work out of the box with the Postman file I shared run it this way for now</p><pre><code>cd public
php -S localhost:8181</code></pre><p>The database for this example is sqlite so</p><pre><code>touch storage/database.sqlite
php artisan migrate:refresh --seed</code></pre><p>And you should now have a db and migrations</p><p>Since it is sqlite just rm the file and touch it again to re-migrate and save your self the headache of DBAL driver etc since this just just a quick working demo.</p><h2 id="setup-your-oauth-config">Setup your oauth config</h2><p><code>config/oauth2.php</code> file as seen<a href="https://github.com/alnutile/oauth_how_to/blob/master/config/oauth2.php">here</a><strong>BUT</strong> only if you want these. And my<code>access_token_ttl</code> is way too big so see the defaults in the docs. Also note it points to<a href="https://github.com/alnutile/oauth_how_to/blob/master/app/OauthPasswordVerifier.php">OauthPasswordVerifier</a> which the docs talk about as well.</p><h2 id="route">Route</h2><p>As noted you add the code to your route</p><pre><code>Route::post('oauth/access_token', function() {
return Response::json(Authorizer::issueAccessToken());
});<p>Route::get(&lsquo;test&rsquo;, [&lsquo;middleware&rsquo; => &lsquo;oauth&rsquo;, function() {
return Response::json("Welcome");
}]);</code></pre><p>Later on you will see this instead</p></p><pre><code>Route::post('oauth/access_token', function() {
return Response::json(Authorizer::issueAccessToken());
});
Route::get('test', ['middleware' => 'oauthOrAuth', function() {
return Response::json("Welcome");
}]);</code></pre><p>With the<strong>oauthOrAuth</strong> I will explain that in the video as well. But basically and api endpoint can be used by a local session based user and a remote application using oauth. It is just how our APIs go.</p><p>So this lets that work just fine.</p><h2 id="postman">Postman</h2><p>Just to show it all working you will see in the video me using postman. You will see that in the repo<a href="https://github.com/alnutile/oauth_how_to/blob/master/oauth_try_2.json.postman_collection">here</a></p><h2 id="now-what">Now What</h2><p>Between the links above and Postman you have a working</p><p><img src="https://dl.dropboxusercontent.com/s/bbt0fmfflm2zq7x/oauth_token.gif?dl=0" alt=""/></description><tags>oauth, laravel</tags></item><item><title>Talking to the Methods Not the Properties</title><link>https://alfrednutile.info/posts/158/</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/158/</guid><description><p>Just a team related style guide item.</p><p>When talking to properties in a class talk via a getter.</p><pre><code>&lt;?php<p>class Foo {</p><p>protected $client;</p><p>function bar()
{
return $this->client->getAll();
}</p><p>}</p><p/></pre><p>Would then become</p></p><pre><code>&lt;?php
class Foo {
protected $client;
function bar()
{
return $this->getClient->getAll();
}
function getClient()
{
return $this->client;
}
}</code></pre><p>There are a few reasons for this</p><ul><li>Consistent style for the team</li><li>Changes to that property can be done in one place. So if we have to for example alter it before it is used then we can do it here.</li><li>PHPUnit Mockery can mock both but mocking a Method over a Property is another style I prefer.</li><li>Easier to have your IDE see all the places that is being used.</li><li>Instantiate on use</li></ul><h2 id="instantiate-on-use">Instantiate on Use</h2><p>When writing a package/libraries that does not have dependency injection and I do not want to make the __constructor too busy I will do this instead.</p><pre><code>&lt;?php<p>class Foo {</p><p>protected $client;</p><p>function bar()
{
return $this->getClient->getAll();
}</p><p>function getClient()
{
if($this->client == null)
$this->setClient();</p><pre><code>return $this-&amp;gt;client;</code></pre><p>}</p><p>function setClient($client = null)
{
if($client == null)
$client = new Client();</p><pre><code>$this-&amp;gt;client = $client;
return $this;</code></pre><p>}</p><p>}</p><p/></pre><p>This makes it simple to mock during testing and simple to instantiate as needed.</p></p></description><tags>team, laravel, php</tags></item><item><title>Using your project docs inside the application</title><link>https://alfrednutile.info/posts/157/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/157/</guid><description><p>The applications I work on have markdown docs. These can be in the docs/ folder for example as<code>docs/webhooks.md</code></p><p>But some of these docs have value to the user of the UI not just the developer, and when we include these docs inside the application repo it is a TON easier to just update them as you fix and make new features in the codebase.</p><p>You can have the best of both worlds with a simple to use library<a href="https://github.com/michelf/php-markdown">https://github.com/michelf/php-markdown</a></p><h2 id="the-controller">The Controller</h2><p>This then allows me, in my controllers to get some content from these docs, for example</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Http\Requests;
use Michelf\MarkdownExtra;</p><p>class HelpController extends Controller
{
public function api()
{
$text = file_get_contents(base_path(&lsquo;docs/webhooks.md&rsquo;));
$webhooks = MarkdownExtra::defaultTransform($text);</p><pre><code> return view('help.api', compact('webhooks'));
}</code></pre><p>}</code></pre><h2 id="the-blade-template-file">The Blade Template File</h2></p><p>Then in the blade template all I need to do to show those docs are</p><pre><code>@extends('layouts.default')<p>@section(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;API Help&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-12&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;wrapper wrapper-content animated fadeInRight&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;ibox-content&amp;quot;&amp;gt;
{!! $webhooks !!}
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</code></pre><p>@endsection</code></pre><p>Being a private repo we review the code so using “{!!” is not so bad. But keep in mind you are trusting what is in these files! Of course a simple</p></p><pre><code>$webhooks = strip_tags($webhooks, "tags you allow here");</code></pre><p>Will help out there.</p><h2 id="the-markdown">The Markdown</h2><p>Then just write your file as normal in markdown!</p></description><tags>laravel, php, docs</tags></item><item><title>HasMany Through a Many to Many</title><link>https://alfrednutile.info/posts/155/</link><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/155/</guid><description><p>This thread helped a lot<a href="http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many">http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many</a></p><p>In the end I had this query</p><pre><code> class MetaData extends Model
{<pre><code>public function meta_values()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class);
}
public function meta_data_types()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class)
-&amp;gt;leftJoin('meta_data_type_meta_value', 'meta_values.id', '=', 'meta_data_type_meta_value.meta_value_id')
-&amp;gt;leftJoin('meta_data_types', 'meta_data_types.id', '=', 'meta_data_type_meta_value.meta_data_type_id')
-&amp;gt;groupBy('meta_data_types.id')
-&amp;gt;select('meta_data_types.*');
}</code></pre><p/></pre><p>Model<code>meta_data_types</code> had not direct relation to this MetaData model class. But MetaData did relate to meta_values.</p></p><p>So using that info I could get the related MetaValues and then the related MetaDataTypes and that was it.</p><p>It is a lot easier if just doing this through a One to Many<a href="http://laravel.com/docs/5.1/eloquent-relationships#has-many-through">http://laravel.com/docs/5.1/eloquent-relationships#has-many-through</a></p></description><tags>laravel, php</tags></item><item><title>Adding RSS to Your Site</title><link>https://alfrednutile.info/posts/154/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/154/</guid><description><p>Using this library<a href="https://packagist.org/packages/thujohn/rss">https://packagist.org/packages/thujohn/rss</a></p><p>We simply install but using a forked version so it works with L5</p><pre><code> "require": {
"php": ">=5.5.9",
"laravel/framework": "5.1.*",
"thujohn/rss": "dev-master"
},
"repositories": [
{
"type": "vcs",
"url": "https://github.com/majortom731/rss-l4.git"
}
],</code></pre><pre><code>composer update</code></pre><p>And as they note in the docs</p><pre><code>'providers' => array(
'Thujohn\Rss\RssServiceProvider',
)</code></pre><p>Now in my route I simply put</p><pre><code>Route::get('feed', function() {
$feed = Thujohn\Rss\RssFacade::feed('2.0', 'UTF-8');
$feed->channel(array('title' => 'Incomings.io Blog and News', 'description' => 'Latest News and Blog postings for Incomings.io', 'link' => 'http://incomings.io/feed'));
$blogs = Blog::all();
foreach ($blogs as $blog){
$feed->item(array('title' => $blog->title, 'description|cdata' => $blog->body, 'link' => 'http://incomings.io/blogs/' . $blog->id));
}<pre><code>return Response::make($feed, 200, array('Content-Type' =&amp;gt; 'text/xml'));</code></pre><p>});</code></pre><p>And nothing fancy here I just output my blog model. I could limit to the latest 10 or output the data better but for now.</p></p></description><tags>laravel, php</tags></item><item><title>Bower and Elixir</title><link>https://alfrednutile.info/posts/153/</link><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/153/</guid><description><p>Trying to make this workflow more easy. Right now it seems that since bower ends up putting all assets into bower_components (css and js) and elixir wants assets by default in resources/assets/css and js that I need to have an easy way to get the files via bower and then get them to the needed folders.</p><p>For most project we actually leave the files in the git repo for faster ui testing builds and we rarely run updates but when we do it would be nice for bower to also be able to work and not mess any of the above settings not cause me to have to manually move files around.</p><h2 id="setting-up-bower">Setting up Bower</h2><p>Following this<a href="https://github.com/blittle/bower-installer">https://github.com/blittle/bower-installer</a> I have bower-installer ready to go.</p><p>Then I setup my<code>bower.json</code> to get my long list of way to many files ready to gulp / elixir</p><pre><code>{
"name": "demo",
"version": "0.0.0",
"homepage": "https://github.com/alnutile/demo",
"license": "MIT",
"ignore": [
"**/.*",
"node_modules",
"bower_components",
"test",
"tests"
],
"install": {
"path": {
"css": "resources/assets/css/vendor",
"js": "resources/assets/js/vendor"
}
},
"dependencies": {
"angular": "1.3.*",
"angular-bootstrap": "0.11.*",
"angular-animate": "1.3.*",
"angular-sanitize": "1.3.*",
"angular-resource": "1.3.*",
"restangular": "1.4.0",
"ng-flow": "~2",
"angular-xeditable": "~0.1.8",
"jquery": "2.1.1",
"bootstrap": "~3.2.0",
"checklist-model": "0.1.3",
"pace": "0.5.*",
"moment": "latest",
"jasny-bootstrap": "*",
"angular-ui-router": "*",
"angularjs-toaster": "~0.4.10",
"angular-strap": "~2.1.6",
"iCheck": "~1.0.2",
"angular-spinner": "~0.6.1",
"fontawesome": "~4.3.0",
"ng-table": "~0.5.4",
"angular-ui-select": "~0.11.2",
"jquery-ui": "~1.11.4"
}
}</code></pre><p>Now I have bower_components which I do not need or push around anymore (thanks to this) but I also have<code>resources/assets/js</code> and<code>resources/assets/css</code> which I can now keep in the repo saving up npm and bower speed issues when running acceptance tests on Codeship<a href="https://alfrednutile.info/posts/151">more on that here</a>.</p><p>That gets my<code>gulpfile.js</code> for the base libraries down to</p><pre><code>var elixir = require('laravel-elixir');<p>elixir(function(mix) {
mix
.styles(["vendor/<strong>/*.css" ], "public/css/vendor.css")
.scripts( ["vendor/angular/angular.js", "vendor/</strong>/*.js"], "public/js/vendor.js");
});</p><p/></pre><p>I still would like to controller the ordering more. For example not sure angular just happened to be in the right order due to alphabetical order, or if it was included twice etc.</p></p><p>Lastly adding versioning</p><pre><code>var elixir = require('laravel-elixir');<p>elixir(function(mix) {
mix
.styles(["vendor/<strong>/*.css" ], "public/css/vendor.css")
.scripts( ["vendor/angular/angular.js", "vendor/</strong>/*.js"], "public/js/vendor.js")
.version( ["css/vendor.css", "js/vendor.js"]);
});</code></pre><p>As noted in the docs<a href="http://laravel.com/docs/5.1/elixir#versioning-and-cache-busting"><a href="http://laravel.com/docs/5.1/elixir#versioning-and-cache-busting">http://laravel.com/docs/5.1/elixir#versioning-and-cache-busting</a></a></p></p><p>From here I still need to setup a workflow for all my app files.</p><p>For example a page like &ldquo;/projects&rdquo; in angular will need a service, controller and route file.</p><p>So do I put those in resources/assets/js and add a new section to the gulp file list</p><pre><code>elixir(function(mix) {
mix
.styles(["vendor/**/*.css" ], "public/css/vendor.css")
.scripts( ["vendor/angular/angular.js", "vendor/**/*.js"], "public/js/vendor.js")
.scripts( ["custom/**/*.js"], "public/js/custom.js")
.version( ["css/vendor.css", "js/vendor.js"]);
});</code></pre><p>and run<code>gulp watch</code>. This is not my normal workflow but it sure beats putting all the files in my html file and then also doing this to concatenate them.</p></description><tags>laravel, elixir</tags></item><item><title>Quick way to Request Json from Angular and return from Laravel</title><link>https://alfrednutile.info/posts/152/</link><pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/152/</guid><description><p>I simply want to make sure to return json from my app more easily even on errors. So in Angular I set my app.js as such</p><pre><code>(function(){
'use strict';<pre><code>angular.module('app', []);
angular.module('app').run(
function($http)
{
$http.defaults.headers.common.Accept = 'application/json';
}
);</code></pre><p>})();</code></pre><p>Then in my Laravel routes I can</p></p><pre><code> public function index(Request $request)
{
$blogs = Blog::orderBy('created_at', 'desc')->paginate(5);
$customPagination = new CustomPagination($blogs);
if($request->header('Accept') == 'application/json')
return $blogs;
return view('blogs.index', compact('blogs', 'customPagination'));
}</code></pre><p>Then I can share the same route with Angular that I do with my Blade templates as needed.</p></description><tags>laravel, angular</tags></item><item><title>Laravel 5.1 Behat and Codeship</title><link>https://alfrednutile.info/posts/151/</link><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/151/</guid><description><p>The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.</p><p>Here are some steps to getting behat going on Codeship so you get full CI even of Angular.</p><p>This is all based off of<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><h2 id="behatyml">Behat.yml</h2><p>behat.yml looks like this for me</p><pre><code>default:
extensions:
Laracasts\Behat:
# env_path: .env.behat
Behat\MinkExtension:
base_url: https://microservicehub.dev:44300
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://192.168.10.1:4444/wd/hub"
browser_name: chrome<p>codeship:
extensions:
Laracasts\Behat:
env_path: .env.codeship
Behat\MinkExtension:
base_url: http://localhost:8080
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://localhost:4444/wd/hub"
browser_name: chrome</code></pre><p>This is so I can run it locally as needed. The Codeship profile will then call in the<code>.env.codeship</code> and update the url as needed.</p></p><h2 id="envcodeship">.env.codeship</h2><p>This file has</p><pre><code>APP_ENV=testing
APP_DEBUG=true
APP_KEY=f5edkkfijPDKQXPLHyYNDhiNZZrpT0Qd<p>DB_HOST=localhost
DB_DATABASE=test</p><p>CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync</p><p>MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</code></pre><h2 id="build-script-for-codeship">Build Script for Codeship</h2></p><p>Using the code they offer on their site I add that to my projects folder under tests/selenium_server.sh it is this file<a href="https://github.com/codeship/scripts/blob/master/packages/selenium_server.sh">here</a></p><p>Maybe some do not need to be there?</p><h2 id="codeship-test-settings">Codeship Test Settings</h2><p>Now in the settings I end up with inside the CodeShip UI are as follows</p><p>Here for example is the URL for my project to find these settings.</p><p><code>https://codeship.com/projects/8844/configure_tests</code></p><p>Under Setup Commands</p><pre><code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foobar
touch .env
echo "APP_ENV='testing'" >> .env
echo "DB_DATABASE='test'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "APP_KEY=DHMbPIbNLd1jI0ZEZZSxRFOHj03SU4P5" >> .env
echo "CACHE_DRIVER=file" >> .env
echo "SESSION_DRIVER=file" >> .env
echo "QUEUE_DRIVER=sync" >> .env
echo "MAIL_DRIVER=smtp" >> .env
echo "MAIL_HOST=smtp.mailgun.org" >> .env
echo "MAIL_PORT=2525" >> .env
composer install --dev
php artisan migrate
php artisan db:seed
nohup bash -c "sh tests/selenium_server.sh &amp;" &amp;&amp; sleep 9
cd public &amp;&amp; nohup bash -c "php -S localhost:8080 &amp;" &amp;&amp; sleep 9
cd ../</code></pre><p>Under Configure Test</p><pre><code>DB_DATABASE=test phpunit
php artisan migrate
php artisan db:seed
vendor/bin/behat --profile=codeship --stop-on-failure</code></pre><p>I run the migration one more time to get it ready for behat</p><p><img src="https://dl.dropboxusercontent.com/s/2uadht5426s40p8/behat_codeship.png?dl=0" alt="behat"/></description><tags>laravel, php, bdd</tags></item><item><title>Conventions to Help Minimize your ENV File</title><link>https://alfrednutile.info/posts/150/</link><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/150/</guid><description><p><strong>UPDATE</strong></p><blockquote><p>I think we can also do AWS_BUCKET=foo_$APP_ENV directly in the env file, see<a href="https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables"> https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables</a></p></blockquote><ul><li><a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a></li></ul><p>The .env file can be a real pain and get pretty big. And even though there is a<a href="https://github.com/alfred-nutile-inc/env-deployer">tool</a>, I made :), to move it around easily here is a thought on reducing it a bit so it is the same on all environments.</p><p>Typically we have dev, stage, production, testing and local. And when you consider all are services we might use it can be pretty large for example</p><ul><li>Amazon or Iron.io and different queues</li><li>Database Settings</li><li>AWS Buckets</li></ul><p>So a normal config could look like this on dev for example</p><pre><code>APP_ENV=dev<p>APP_DEBUG=false
APP_KEY=yo</p><p>DB_HOST=localhost
DB_DATABASE=db_name_dev
DB_USERNAME=username_dev
DB_PASSWORD=secret</p><p>AWS_BUCKET=some-bucket-dev
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1</p><p>IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFooDev
IRON_DIFF_QUEUE=QueueNameBarDev</p><p>DYNAMO_RT_TABLE=table_dev
DYNAMO_DIFF_TABLE=table_dev</p><p>IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken</p><p>DYNAMO_OCR_RT_TABLE=&lsquo;some_table_dev&rsquo;
OCR_IRON_TOKEN=&lsquo;sometoken&rsquo;
OCR_IRON_PROJECT_ID=&lsquo;somekey&rsquo;
OCR_IRON_QUEUE=&lsquo;foo_dev&rsquo;</code></pre><p>That is about 24 settings but if we alter our code to do this when getting settings</p></p><pre><code>'some_key' => env('OCR_IRON_QUEUE') . '_' . env('APP_ENV');</code></pre><p>Instead of</p><pre><code>'some_key' => env('OCR_IRON_QUEUE');</code></pre><p>And we name our services and resources as needed<code>_dev</code> or<code>_stage</code> or<code>_production</code> then we can simplify the list above so it is the same for most of the environments.</p><p>For example<code>OCR_IRON_QUEUE='foo_dev'</code> is now<code>OCR_IRON_QUEUE='foo'</code> and can be the same on all servers!</p><pre><code>APP_ENV=dev<p>APP_DEBUG=false
APP_KEY=yo</p><p>DB_HOST=localhost
DB_DATABASE=db_name
DB_USERNAME=username
DB_PASSWORD=secret</p><p>AWS_BUCKET=some_bucket
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1</p><p>IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFoo
IRON_DIFF_QUEUE=QueueNameBar</p><p>DYNAMO_RT_TABLE=table
DYNAMO_DIFF_TABLE=table</p><p>IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken</p><p>DYNAMO_OCR_RT_TABLE=&lsquo;some_table&rsquo;
OCR_IRON_TOKEN=&lsquo;sometoken&rsquo;
OCR_IRON_PROJECT_ID=&lsquo;somekey&rsquo;
OCR_IRON_QUEUE=&lsquo;foo&rsquo;</code></pre><p>Convention over configuration so simple yet so easy for me to forget :)</p></p></description><tags>laravel, php</tags></item><item><title>Codeship and Laravel for Continuous Integration</title><link>https://alfrednutile.info/posts/148/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/148/</guid><description><p>Getting going on Codeship and Laravel is pretty easy.</p><p>Once you setup codeship to work with your github account just pull in your repo and set your Testing scripts as follows. (they have a ui for ENV variables as well)</p><h2 id="codeship-testing-settings-easier-copy-paste-bottom-of-article">Codeship Testing Settings [easier copy paste bottom of article]</h2><p><img src="https://dl.dropboxusercontent.com/s/fh6vv3g5wpqw7ac/codeship1.png?dl=0" alt="codeship"/><p>You can do this in their UI as well. But at this point I am</p><ul><li>Setting up the composer token for any private repos that application might have</li><li>Setting up .env for their specific needs as well eg MYSQL_*</li></ul><p>For the Database to use their settings I have to edit<code>config/database.php</code></p><pre><code>&lt;?php<p>return [</p><pre><code>'fetch' =&amp;gt; PDO::FETCH_CLASS,
'default' =&amp;gt; env('DB_CONNECTION', 'mysql'),
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; env('DB_HOST', 'localhost'),
'database' =&amp;gt; env('DB_DATABASE', env('TEST_ENV_NUMBER')),
'username' =&amp;gt; env('DB_USERNAME', env('MYSQL_USER')),
'password' =&amp;gt; env('DB_PASSWORD', env('MYSQL_PASSWORD')),
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
'strict' =&amp;gt; false,
],
],
.......</code></pre><p>];</p><p/></pre><p>Adding</p></p><pre><code>env('DB_PASSWORD', env('MYSQL_PASSWORD')),
env('DB_USERNAME', env('MYSQL_USER')),
env('DB_DATABASE', env('TEST_ENV_NUMBER')),</code></pre><p>So we default to theirs if ours is not there. Finally when we run the test I set the db to the name they want</p><pre><code>DB_DATABASE=test phpunit</code></pre><h2 id="envoy-deploy">Envoy Deploy</h2><p>After it passes I can use Envoy to deploy it.</p><p>The Envoy scripts are not on Forge but use to be so a lot of the naming matches.</p><p>Under the Codeship Deployment page I set</p><pre><code>composer global require "laravel/envoy=~1.0" &amp;&amp; /home/rof/.composer/vendor/bin/envoy run deploy_dev</code></pre><p>In that script do what ever you need to make this thing deploy for example.</p><pre><code>@servers(['dev' => 'forge@foo.com'])<p>@task(&lsquo;deploy_dev&rsquo;, [&lsquo;on&rsquo; => &lsquo;dev&rsquo;])
cd /home/forge/app
git reset &ndash;hard HEAD
git pull origin dev
composer config -g github-oauth.github.com foo
rm -rf vendor
composer install
composer dump-autoload
php artisan migrate:refresh &ndash;seed
bower install
@endtask</p><p/></pre><p>We do not do this on Prod. Someone with proper permissions will run Envoy locally once the tests are passing.</p></p><p><strong>UPDATE</strong></p><p>Easier copy paste</p><pre><code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foo
touch .env
echo "APP_ENV='testing'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "APP_KEY=foo" >> .env
echo "CACHE_DRIVER=file" >> .env
echo "SESSION_DRIVER=file" >> .env
echo "QUEUE_DRIVER=sync" >> .env
echo "MAIL_DRIVER=smtp" >> .env
echo "MAIL_HOST=smtp.mailgun.org" >> .env
echo "MAIL_PORT=2525" >> .env
echo "MAIL_USERNAME=postmaster@email.foo.io" >> .env
echo "MAIL_PASSWORD=foo" >> .env
echo "MAIL_ENCRYPTION=true" >> .env
echo "STRIPE_API_SECRET='foo'" >> .env
echo "STRIPE_PUBLIC='foo'" >> .env
composer install --dev</code></pre></description><tags>laravel, testing, phpunit, php, ci, codeship</tags></item><item><title>Start to end Billing using Stripe, Cashier and Laravel 5.1</title><link>https://alfrednutile.info/posts/149/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/149/</guid><description><h1 id="start-to-end-billing-and-laravel">Start to end Billing and Laravel</h1><p>As usual the Laravel docs rock but sometimes it is nice to see this from start to end.</p><p>With that said read those<a href="http://laravel.com/docs/master/billing">docs</a> first and then come back here. Also the public repo can be seen<a href="https://github.com/alnutile/sponsors">here</a></p><h2 id="setup-your-stripe">Setup your Stripe</h2><p>Yup this is easy. Note the test/live dash board. Super nice to see the different processes.</p><p><img src="https://dl.dropboxusercontent.com/s/9k39kbjzb1eqiri/dash.png?dl=0" alt="dash"/><p>Turn it to test and make your plans. Keep in mind you will have to make the same plans for Live after the fact.</p><p>Go to Accounts -> Settings and get your API keys.</p><p>Plug them into the .env file (try this super cool<a href="https://github.com/alfred-nutile-inc/env-deployer">.env deployer tool</a> to make life easier)</p><p>So now your .env has the right settings, your config/app.php has the right<code>env</code> calls</p><pre><code> 'stripe' => [
'model' => 'App\User',
'key' => env('STRIPE_PUBLIC'),
'secret' => env('STRIPE_API_SECRET'),
],</code></pre><p>You are ready to code.</p><p>Add this to your composer.json if you are using linux</p><pre><code> "scripts": {
"post-install-cmd": [
"php artisan clear-compiled",
"php artisan optimize",
"php -r \"exec('chmod -R +x vendor/laravel/cashier/src/Laravel/Cashier/bin');\"",
],</code></pre><p>Or just remember you need to do this to print</p><p>Like that docs say go ahead and install it and setup your app.php for the Provider</p><h2 id="routes">Routes</h2><p>My main route file looked like this when I was done</p><pre><code>&lt;?php
Route::get('/', function() {
return Redirect::to('/sponsor');
});<p>require<strong>DIR</strong> . &lsquo;/routes.sponsor.php&rsquo;;</p><p>require<strong>DIR</strong> . &lsquo;/routes.profile.php&rsquo;;</p><p>require<strong>DIR</strong> . &lsquo;/routes.auth.php&rsquo;;</code></pre><p>Which is not much help :)</p></p><p>The profile one is this</p><pre><code>&lt;?php<p>Route::group([&lsquo;prefix&rsquo; => &lsquo;profile&rsquo;, &lsquo;middleware&rsquo; => &lsquo;auth&rsquo;], function () {</p><pre><code>Route::get('/', 'ProfileController@getUser');
Route::post('edit', 'ProfileController@postEdit');
Route::get('invoice/{invoice}', 'ProfileController@getPrintInvoice');
Route::get('cancel', 'ProfileController@getCancel');</code></pre><p>});</code></pre><p>And the sponsor one is</p></p><pre><code>&lt;?php
Route::group(['prefix' => 'sponsor'], function() {
Route::get('/', 'SubscribeController@getSponsorPage');
Route::post('1show', 'SubscribeController@post1Show');
Route::post('2show', 'SubscribeController@post2Show');
Route::post('fan', 'SubscribeController@postFan');
});</code></pre><h2 id="stripe-controller">Stripe Controller</h2><p>Pretty simple, which is my goal. Basically take the requests, check the plans and setup the user.</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use Illuminate\Routing\Controller;
use App\Plans;
use App\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Str;</p><p>class SubscribeController extends Controller
{</p><pre><code>public function registerUser($input, $level)
{
if($user = User::where(&amp;quot;email&amp;quot;, $input['stripeEmail'])-&amp;gt;first())
{
if($user-&amp;gt;subscribed())
{
$user-&amp;gt;subscription($level)-&amp;gt;swap();
}
else
{
$user-&amp;gt;subscription($level)-&amp;gt;create($input['stripeToken']);
}
}
else
{
$user = User::create(
[
'email' =&amp;gt; $input['stripeEmail'],
'password' =&amp;gt; Hash::make(Str::random())
]
);
$user-&amp;gt;subscription($level)-&amp;gt;create($input['stripeToken']);
}
return $user;
}
public function getSponsorPage()
{
$public_key = env('STRIPE_PUBLIC');
return view('stripe.subscribe', compact('public_key'));
}
public function post1Show()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$ONE_SHOW_A_MONTH);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}
public function post2Show()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$TWO_SHOWS_A_MONTH);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}
public function postFan()
{
$input = Input::all();
if(empty($input['stripeToken']))
return Redirect::back();
$user = $this-&amp;gt;registerUser($input, Plans::$FAN);
Auth::login($user);
return Redirect::to('profile')-&amp;gt;with(&amp;quot;message&amp;quot;, &amp;quot;Thanks!&amp;quot;);
}</code></pre><p>}</code></pre><p>We will hit the UI now</p></p><h2 id="stripe-ui">Stripe Ui</h2><p>I ended up with these view files and a theme file from<a href="https://wrapbootstrap.com/theme/responsive-pricing-tables-WB0PF9PH7">WrapBootstrap</a> which I can not include of course but just use default bootstrap and it will all work.</p><p><img src="https://dl.dropboxusercontent.com/s/nd761k0gztvj4qg/sponsor_files.png?dl=0" alt="files"/><p>You can see them all<a href="https://gist.github.com/alnutile/f6f9d49efc39fd431cca">here</a></p><p>So at this point you could have something like this</p><p><img src="https://dl.dropboxusercontent.com/s/2rrapm04wwma4dd/sponsor_page.png?dl=0" alt="page"/><p>Now how do they manage all this?</p><h2 id="profile-controller">Profile Controller</h2><p>This controller takes on the profile route to manage their subscriptions and print.
You can see those files for the view about in the image and the gist link provided above.</p><p>When all that is in place they can see this</p><p><img src="https://dl.dropboxusercontent.com/s/9dhd81vxyu78yph/subscribe.gif?dl=0" alt="the site"/></description><tags>stripe, laravel</tags></item><item><title>Logging in Iron.io Workers</title><link>https://alfrednutile.info/posts/147/</link><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/147/</guid><description><p>Previously I wrote about how to use<a href="https://alfrednutile.info/posts/143">Lumen and Iron.io</a> this adds to that by modifying the logging technique.</p><p>As noted the worker is basically a class that sets things up, hands off the payload to the handler and returns the results.</p><pre><code>&lt;?php<p>use App\CompareFuseHandler;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;</p><p>require_once<strong>DIR</strong> . &lsquo;/libs/bootstrap.php&rsquo;;</p><p>$payload = getPayload(true);</p><p>fire($payload);</p><p>function fire($payload)
{
$logs = storage_path(&lsquo;logs/lumen.log&rsquo;);
Log::info(sprintf("Starting Worker at %s", \Carbon\Carbon::now()));
try
{
//Empty Logs
$handler = App::make(&lsquo;App\CompareFuseHandler&rsquo;);
$handler->handle($payload);
echo "Success See Logs Below: \n";
Log::info(sprintf("Ending Worker at %s", \Carbon\Carbon::now()));
echo File::get($logs);
}</p><pre><code>catch(\Exception $e)
{
echo &amp;quot;Error See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now()));
echo File::get($logs);
}</code></pre><p>}</code></pre><p>The nice thing about above is that all throughout my handler class I can start the do<code>Log::info(&lsquo;foo&rsquo;)</code> to store up a report for the end of the process on either Success or Error.</p></p><p>Other options of course are<a href="https://bugsnag.com/">BugSnag</a> and<a href="https://papertrailapp.com">PaperTrail</a></p></description><tags>iron, microservices, laravel</tags></item><item><title>Writing Commands and Scheduling in Laravel 5.1</title><link>https://alfrednutile.info/posts/146/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/146/</guid><description><p>Wow, writing<a href="http://laravel.com/docs/master/artisan#command-structure">Artisan Commands</a> just become even easier. And plugging it into<a href="http://laravel.com/docs/master/scheduling">Scheduler</a> makes for a great combination.</p><p>For example we need to clean out a folder every so many minutes. The example below I also for fun play around with<code>progress</code> and table output.</p><p>Note too<code>protected $signature = 'approve:cleanuploads {--minutes=10}';</code> simplifies the<code>argument</code> and<code>options</code> features.</p><pre><code>&lt;?php namespace App\Console\Commands;<p>use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;</p><p>class CleanUploadsCommands extends Command
{
protected $rootPath = &lsquo;public/storage&rsquo;;
protected $maxMinutes = 10;
protected $deleted = [];
protected $signature = &lsquo;approve:cleanuploads {&ndash;minutes=10}';
protected $description = &lsquo;Clean all the uploads in the storage folder for security reasons&rsquo;;
protected $pdfFiles = [];
protected $files = [];</p><pre><code>public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;maxMinutes = $this-&amp;gt;option('minutes');
$this-&amp;gt;anyPdfFilesHere();
$this-&amp;gt;deletePdfFiles();
$this-&amp;gt;outputResults();
}
protected function anyPdfFilesHere()
{
$this-&amp;gt;files = File::allFiles(base_path($this-&amp;gt;rootPath));
foreach($this-&amp;gt;files as $file)
{
if (File::mimeType($file) == 'application/pdf')
{
$this-&amp;gt;pdfFiles[] = $file;
}
}
}
private function deletePdfFiles()
{
if(count($this-&amp;gt;pdfFiles) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressStart(count($this-&amp;gt;pdfFiles));
foreach($this-&amp;gt;pdfFiles as $file)
{
$modified = File::lastModified($file);
$minutes = Carbon::createFromTimestamp($modified)-&amp;gt;diffInMinutes();
if($minutes &amp;gt; $this-&amp;gt;maxMinutes)
{
$this-&amp;gt;setDeleted(['filename' =&amp;gt; $file]);
File::delete($file);
$this-&amp;gt;output-&amp;gt;progressAdvance();
}
}
}
}
private function outputResults()
{
if(count($this-&amp;gt;deleted) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressFinish();
$headers = ['File Name and Path'];
$this-&amp;gt;table($headers, $this-&amp;gt;getDeleted());
}
else
{
$this-&amp;gt;comment(sprintf(&amp;quot;No files older than %d minutes&amp;quot;, $this-&amp;gt;maxMinutes));
}
}
public function getDeleted()
{
return $this-&amp;gt;deleted;
}
public function setDeleted($deleted)
{
$this-&amp;gt;deleted[] = $deleted;
}</code></pre><p>}</code></pre><p>Then in the Kernel.php I enter</p></p><pre><code>&lt;?php namespace Approve\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
'App\Console\Commands\CleanUploadsCommands'
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
$schedule->command('approve:cleanuploads --minutes=10')
->everyMinute();
}
}</code></pre><p>And that is it.</p><p>One big thing about Commands is the power of Asynchronous processing that libraries like<a href="http://symfony.com/doc/current/components/process.html">Symfony Process</a> gives us the ability to run numerous commands at once!</p><p><img src="https://dl.dropboxusercontent.com/s/cu1v0wl61ul29qr/cleanFiles.gif?dl=0" alt="running"/></description><tags>laravel, php, commands</tags></item><item><title>Easily Create Fixture Data from Remote Services and Refresh Mock Data</title><link>https://alfrednutile.info/posts/145/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/145/</guid><description><p><strong>Oops Codeship and Laravel is<a href="https://goo.gl/k62TEB">here</a></strong></p><h1 id="easily-create-fixture-data-from-remote-services-and-refresh-mock-data">Easily Create Fixture Data from Remote Services and Refresh Mock Data</h1><p>We have integration tests that hit remote apis like Github, S3, DynomoDB, our own APIs etc and we do not want to hit those during out tests but we also want to make sure we have the real data. So when one of those APIs change then our mock data can be refreshed to see if our systems really work with it.</p><p>Using Laravel&rsquo;s new integration tests, though this works with any framework, we will swap out these Service classes with a Wrapper class ONLY if we have a matching file. This allows us to delete those files and get another one on the fly.</p><h2 id="lets-start-with-the-controller">Lets start with the Controller</h2><p>This simple Controller will talk to a Repo. Imagine the repo talking to Dynamodb or GithubApi, database etc.</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\ExampleRepo;
use Illuminate\Support\Facades\Response;</p><p>class ExampleController extends Controller
{</p><pre><code>public function mocking(ExampleRepo $exampleRepo)
{
return Response::json(&amp;quot;You are here &amp;quot; . $exampleRepo-&amp;gt;get());
}</code></pre><p>}</code></pre><p>So thanks to the dependency injection system; and the use of the Reflection Class,<code>ExampleRepo</code> get constructed as well.</p></p><h2 id="the-tests">The Tests</h2><p>First lets look at a normal test no mock</p><pre><code>&lt;?php<p>use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;</p><p>use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;</p><p>class ExampleTest extends TestCase
{
public function testDefault()
{
$this->get('/mocking')->see("You are here foo");
}
}</code></pre><p>Pretty simple. But not lets…</p></p><h2 id="swap-things-out">Swap Things Out</h2><p>Here we add an example of replacing the default instance<code>App</code> would make with our own Wrapper</p><pre><code>&lt;?php<p>use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;</p><p>use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;</p><p>class ExampleTest extends TestCase
{
public function testDefault()
{
$this->get('/mocking')->see("You are here foo");
}</p><pre><code>public function testMocking()
{
$mock = m::mock('App\ExampleRepo');
$mock-&amp;gt;shouldReceive('get')-&amp;gt;once()-&amp;gt;andReturn('bar');
App::instance('App\ExampleRepo', $mock);
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here bar&amp;quot;);
}</code></pre><p>}</p><p/></pre><p><code>testMocking</code> will now return bar!</p></p><h2 id="making-fixtures-on-the-fly">Making Fixtures on the Fly</h2><p>Same results BUT we hit my wrapper not the real services. But here is where I think it gets even better. I can return fixture data BUT at the same time I can not worry about returning stale fixture data eg the apis have changed but my fixtures have not. All of this without having my test code wrapped into the app code.</p><p>This will look for the output of a route. That Controller and Repo we will show in a moment</p><pre><code> public function testMakeFixture()
{
$wrapper = App::make('App\ExampleRepoWrapper');
App::instance('App\ExampleRepo', $wrapper);<pre><code> $this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here foo&amp;quot;);
}</code></pre><p/></pre><p>This test has a wrapper which extends the repo</p></p><pre><code>&lt;?php
namespace App;
use Illuminate\Support\Facades\File;
class ExampleRepoWrapper extends ExampleRepo
{
public function get()
{
if(File::exists(base_path('tests/fixtures/foo.json')))
{
$content = File::get(base_path('tests/fixtures/foo.json'));
return json_decode($content, true);
}
$results = parent::get();
if(!File::exists(base_path('tests/fixtures/foo.json')))
{
$content = json_encode($results, JSON_PRETTY_PRINT);
File::put(base_path('tests/fixtures/foo.json'), $content);
}
return $results;
}
}</code></pre><p>So now the Controller will talk to the Wrapper instead which will look for a file<code>(NOTE: You can easily pass in $id or $name to make the fixtures unique)</code></p><p>So now when the Controller hits our Wrapper it goes right to the real<code>ExampleRepo</code> (seen below)<strong>if there is no fixture file</strong> and then the Wrapper kicks in to make the file (as seen in the above class).</p><pre><code>&lt;?php namespace App;<p>class ExampleRepo
{</p><pre><code>protected $results;
public function get()
{
$this-&amp;gt;results = 'foo';
return $this-&amp;gt;results;
}
/**
* @return mixed
*/
public function getResults()
{
return $this-&amp;gt;results;
}</code></pre><p>}</code></pre><p>That is it you can do integration testing on your APIs and not hit external services or even databases.</p></p><h2 id="force-full-integration">Force Full Integration</h2><p>Sometimes you want to hit the external resources. This can be part of a weekly or daily test to make sure you app is working with all the external APIs. You can do this by deleting all the fixtures before running that test.</p><p>So you can setup a provider like this</p><pre><code>
class ExampleProvider extends ServiceProvider
{<p>public function register()
{
if(App::environment() == &lsquo;testing&rsquo; and env(&lsquo;FULL_INTEGRATION&rsquo;) != &lsquo;true&rsquo;)
{
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepoWrapper&rsquo;);<br>
} else {<br>
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepo&rsquo;);
}</p><p>}</p><p>}</p><p>** UPDATE **</p><p>Another good idea, by<a href="https://twitter.com/n_kirschbaum">Nathan Kirschbaum</a>, is to set the<code>FULL_INTEGRATION</code> setting by the user that is logged in.</p><p/></pre><h2 id="cons">Cons</h2></p><p>One is UI testing. Prior to this I would make wrappers as needed to then take over if say<code>APP_MOCK=true</code>. Then I could mock even on Behat testing or the UI. But that meant a lot of Providers and alot of mixing of testing and code. But it worked and ran well on services like CodeShip and locally. If you Behat/Acceptance tests are hitting the API or UI it would be nice to fake all the external responses. Though now with the above the API testing is easy. The UI (when there is javascript) not so easy :(</p><p>Since we are using<code>App::instance</code> we did not need to register a Provider Class. But to make the UI con a non issue you can go that far to register a ServiceProvider</p><pre><code>
class ExampleProvider extends ServiceProvider
{<p>public function register()
{
if(App::environment() == &lsquo;testing&rsquo;
{
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepoWrapper&rsquo;);<br>
} else {<br>
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepo&rsquo;);
}</p><p>}</p><p>}</p><p/></pre><p>Then register as normal in your config/app.php . This can be kinda tedious but would produce the same results.</p></p><p>Great book on the topic<a href="https://leanpub.com/laravel-testing-decoded">Laravel Testing Decoded</a></p><p><img src="https://s3.amazonaws.com/titlepages.leanpub.com/laravel-testing-decoded/large?1425536214" alt="decoded"/></description><tags>testing, laravel, php, phpunit, integration</tags></item><item><title>Adding Cache to your Laravel Site</title><link>https://alfrednutile.info/posts/144/</link><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/144/</guid><description><p>Using Laravel&rsquo;s built in Cache facade is super easy. I will quickly cover how to use it for showing your Posts and showing a Post.</p><h2 id="example-1-show-a-post">Example 1 Show a Post</h2><p>This example will first check the Cache to see if there is a match for post_ID of the post if not it will make one. Also I happen to do the same for the sidebar.</p><pre><code>public function show($id)
{
$post = Cache::rememberForever('post_' . $id, function() use ($id)
{
return Post::findOrFail($id);
});<pre><code> $posts = Cache::rememberForever('posts_sidebar', function()
{
return Post::all()-&amp;gt;sortBy(&amp;quot;created_at&amp;quot;, null, TRUE);
});
$active = $post-&amp;gt;id;
return View::make('posts.show', compact('post', 'posts', 'active'));
}</code></pre><p/></pre><p>Of course this could be moved into a Service and out of the Controller.</p></p><p>It really is that simple</p><h2 id="all-posts">All Posts</h2><p>Same thing.</p><p>If you are not authenticated, eg all users but me, and there is no posts cache make one else show it.</p><pre><code>if(Auth::user()) {<pre><code> $posts = Post::OrderByCreatedAt()-&amp;gt;get();
} else {
$posts = Cache::rememberForever('posts', function()
{
return Post::Published()-&amp;gt;OrderByCreatedAt()-&amp;gt;get();
});</code></pre><p>}</code></pre><h2 id="clearing-cache">Clearing Cache</h2></p><p>For this I made a PostsObeserver Class</p><p>This will reset Cache for the related caches whenever a post is made or updated.</p><pre><code>&lt;?php
use Illuminate\Support\Facades\Cache;<p>class PostObserver {</p><pre><code>public function saved($model)
{
foreach(['posts_sidebar', 'posts'] as $value)
{
Cache::forget($value);
}
Cache::forget('post_' . $model-&amp;gt;id);
}</code></pre><p>}</code></pre><p>Then I register it in the model</p></p><pre><code>
public static function boot()
{
parent::boot();
Post::observe(new PostObserver());
}</code></pre><blockquote/></description><tags>laravel, cache</tags></item><item><title>Iron.io and Lumen</title><link>https://alfrednutile.info/posts/143/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/143/</guid><description><h1 id="lumen-iron-worker">Lumen Iron Worker</h1><h2 id="what-and-why">What and why</h2><p>A worker is a great way to run tasks as needed taking the load off your applications server and greatly speeding up the process of a task as you can run numerous workers at once.</p><p>A lot of this comes from<a href="http://dev.iron.io/worker/beta/getting_started/">http://dev.iron.io/worker/beta/getting_started/</a> and<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a> and their examples</p><h2 id="topics-covered">Topics covered</h2><ul><li>Creating a Lumen Worker</li><li>Creating a statically linked binary in the worker</li><li>Testing the worker locally with Docker</li><li>Entering your docker environment</li><li>Design patterns</li></ul><h2 id="install-lumen">Install Lumen</h2><pre><code>composer create-project laravel/lumen --prefer-dist</code></pre><p>Add to composer.json</p><blockquote><pre><code> "iron-io/iron_mq": "~1.5",</code></pre></blockquote><pre><code> "iron-io/iron_worker": "~1.4"</code></pre><p>So now it looks like</p><pre><code> "require": {
"laravel/lumen-framework": "5.0.*",
"vlucas/phpdotenv": "~1.0",
"iron-io/iron_mq": "~1.5",
"iron-io/iron_worker": "~1.4"
},</code></pre><h2 id="install-iron-client">Install iron client</h2><p>See their notes here<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a></p><h2 id="install-docker">Install docker</h2><p>On a mac they have great steps here for that<a href="https://docs.docker.com/installation/mac/">https://docs.docker.com/installation/mac/</a></p><h2 id="environment-settings">Environment settings</h2><p>For Lumen we can simply use our typical .env file. For Iron you put your info in the iron.json file in the root of the app (make sure to add this to .gitignore)</p><p>The format is</p><pre><code>{ "token": "foo", "project_id": "bar" }</code></pre><h2 id="the-worker">The worker</h2><p>Make a folder called workers at the root of your app</p><p>In there place your worker file. In this case<code>ExampleOneWorker</code>. This is what gets called, as you will see soon, when the worker starts. This is what will receive the payload.</p><pre><code>workers/ExampleOneWorker.php</code></pre><p>Inside of this to start will be</p><pre><code>&lt;?php<p>require_once<strong>DIR</strong> . &lsquo;/libs/bootstrap.php&rsquo;;</p><p>$payload = getPayload(true);</p><p>fire($payload);</p><p>function fire($payload)
{
try
{
$handler = new \App\ExampleOneHandler();
$handler->handle($payload);
}</p><pre><code>catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error with worker %s&amp;quot;, $e-&amp;gt;getMessage());
echo $message;
}</code></pre><p>}</code></pre><p>For testing reasons and code clarity I do not like to put much code in here. I instantiate a handler class and pass in the payload.</p></p><p>The getPayload in the helper.php file, provided by an Iron.io example, will get the payload for us.</p><p>There is another folder to make in there called libs and for now it has this file<code>bootstrap.php</code> and<code>helper.php</code> [1] The helper is<a href="https://github.com/alnutile/lumen_worker/blob/master/workers/libs/helper.php">here</a></p><p>With the contents as seen below for bootstrap or<a href="https://github.com/alnutile/lumen_worker/tree/master/workers/libs">visit</a> to get the files.</p><pre><code>&lt;?php
require __DIR__ . '/../../vendor/autoload.php';
$app = require_once __DIR__ . '/../../bootstrap/app.php';
if(!function_exists('getPayload'))
require_once __DIR__ . '/helper.php';<p>use Illuminate\Encryption\Encrypter;
$app->boot();</p><p>function decryptPayload($payload)
{
$crypt = new Encrypter(getenv(&lsquo;IRON_ENCRYPTION_KEY&rsquo;));
$payload = $crypt->decrypt($payload);
return json_decode(json_encode($payload), FALSE);
}</code></pre><p><code>helper.php</code> I placed a gist here<a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8"><a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8">https://gist.github.com/alnutile/41ee747bb8e1810d19e8</a></a></p></p><p>Also for this example we will need a<code>payload.json</code> file in the root of our app. More on that shortly, for now put this into the file.</p><pre><code>{
"foo": "bar"
}</code></pre><p>Finally our app folder has the<code>ExampleOneHandler.php</code> file to handle the job.</p><pre><code>&lt;?php<p>namespace App;</p><p>class ExampleOneHandler {</p><pre><code>public function handle($payload)
{
echo &amp;quot;This is the Payload&amp;quot;;
echo print_r($payload, 1);
}</code></pre><p>}</code></pre><p>We will do more shortly.</p></p><p>Here is the folder/file layout</p><p><img src="https://dl.dropboxusercontent.com/s/c561wmsnv8hl2rm/worker_files.png?dl=0" alt="files"/><h2 id="round-1-exampleonehandler">Round 1 ExampleOneHandler</h2><p>Lets now run this and see what happens.</p><p>Using docker we can run this locally</p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleOneWorker.php -payload payload.json"</code></pre><p>You just ran, what ideally will be, the exact worker you will run when you upload the code. It will take a moment on the first run. After that it will be super fast.</p><p>Here is my output</p><p><img src="https://dl.dropboxusercontent.com/s/4qkq5e21jl550sg/worker_command.png?dl=0" alt="outputone"/><h3 id="uploading-to-iron">Uploading to Iron</h3><h4 id="bundle">Bundle</h4><p>This is really easy to make a script for by just adding them to an upload_worker.sh file in the root of your app and running that as needed.</p><pre><code>touch ExampleOneWorker.zip
rm ExampleOneWorker.zip
zip -r ExampleOneWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleOneWorker.zip php workers/ExampleOneWorker.php</code></pre><p>So we are touching the file so there are no errors if it is not there.
Then we rm it
And zip it ignoring .git to keep it slim
and then we upload it with the worker and point to the directory to use.</p><p><strong>Don&rsquo;t run it just yet</strong></p><p>I add my iron.json file to the root of my app as noted above.</p><p>and I make the Project on the Iron HUD</p><p><img src="https://dl.dropboxusercontent.com/s/qq2h0to2epnc0qw/worker_json.png?dl=0" alt="iron"/><p>And then I can run the<code>make_worker.sh</code> I made above</p><p>You should end up with this output</p><p><img src="https://dl.dropboxusercontent.com/s/utb478g6510rssd/worker_iron_upload.png?dl=0" alt="output"/><h4 id="looking-at-the-hud-iron-webui">Looking at the HUD (Iron WebUI)</h4><p>Under Worker and tasks we see</p><p><img src="https://dl.dropboxusercontent.com/s/7d1klwablw037wh/worker_hud_tasks.png?dl=0" alt="worker"/><p>So lets run it from the command line to see it work</p><pre><code>iron worker queue --wait -payload-file payload.json ExampleOneWorker</code></pre><p>The wait is pretty cool since we can get this output. This is key when doing master slave workers as well.</p><p>You get the same output as before. But it was run on the worker</p><p>Here is the HUD</p><p><img src="https://dl.dropboxusercontent.com/s/bxc1dolij0l2f7w/worker_run_example1.png?dl=0" alt="worker ran"/><h2 id="round-2-lets-do-something-real">Round 2 Lets do something real</h2><p>So far the payload has not done much but lets use it in this next example.</p><p>As above we make and<code>ExampleTwoWorker.php</code></p><p>Make payload2.json file</p><pre><code>{
"search_word": "batman"
}</code></pre><p>Then we use it to call our<code>ExampleTwoWorkerHandler</code></p><p><strong>warning this is not an example on good php code</strong></p><pre><code>&lt;?php namespace App;<p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
return file_get_contents($image);
}
}</code></pre><p>}</code></pre><p>I test locally</p></p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleTwoWorker.php -payload payload2.json" > output.png</code></pre><p>But this time put the output into a file and we get</p><p><img src="https://dl.dropboxusercontent.com/s/kmtuvgzhpzws6xz/worker_lego_one.png?dl=0" alt="lego guys"/><h3 id="making-a-custom-binary">Making a custom binary</h3><p>Before I get this to iron lets make it more useful since I will lose that output.png file on the worker. Some workers we have would convert that into a base64 blob and send that back in a callback.</p><p>One enter into docker like I noted above</p><p>Two run<code>apt-get update</code></p><p>Then run<code>apt-get install jp2a</code></p><p>Then make a folder called /worker/builds/</p><p>And in there follow these instructions<a href="http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html">http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html</a> replacing jp2a as needed.</p><p>Then make a folder called /worker/bin and copy jp2a from<code>/worker/builds/jp2a-1.0.6/src/jp2a</code> to this bin folder.</p><p>You should be able to see that run now by ding /worker/bin/jp2a even run<code>apt-get remove jp2a</code> to show it works as a standalone library [3]</p><p>Let&rsquo;s adjust our code</p><pre><code>&lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 4/27/15
* Time: 9:02 PM
*/<p>namespace App;</p><p>use Illuminate\Support\Facades\File;</p><p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
$path_to_worker = base_path('bin/');
exec(&amp;quot;chmod +x {$path_to_worker}/jp2a&amp;quot;);
exec(&amp;quot;TERM=xterm {$path_to_worker}/bin/jp2a $image&amp;quot;, $output);
return implode(&amp;quot;\n&amp;quot;, $output);
}
}</code></pre><p>}</code></pre><p>run locally and you might get some decent output or not :(</p></p><p><img src="https://dl.dropboxusercontent.com/s/76vbdf0iubehf5c/worker_batman.png?dl=0" alt="batman"/><h3 id="make-and-upload-the-worker">Make and upload the worker</h3><p>Then I run<code>sh ./make_worker_two.php</code></p><pre><code>touch ExampleTwoWorker.zip
rm ExampleTwoWorker.zip
zip -r ExampleTwoWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleTwoWorker.zip php workers/ExampleTwoWorker.php</code></pre><p>And run and wait</p><pre><code>iron worker queue --wait -payload-file payload2.json ExampleTwoWorker</code></pre><p>And if all goes well your console and the logs should show something like</p><p><img src="https://dl.dropboxusercontent.com/s/263tlw5vkswqqvp/worker_results.png?dl=0" alt="batman"/><h2 id="entering-your-docker-environment">Entering your docker environment</h2><p>Easy</p><pre><code>docker run -it -v "$(pwd)":/worker -w /worker iron/images:php-5.6 /bin/bash</code></pre><p>Now you can test things in there, download packages etc.</p><h2 id="mvc">MVC</h2><p>Not sure if this really is correct but I tend to see the Worker file as my route file. The handler as the controller and other classes as needed, Service, Repository etc. This makes things more testable etc and better organize imo.</p><h2 id="connecting-the-queue-to-the-worker">Connecting the Queue to the Worker</h2><p>Coming soon&hellip;</p><h2 id="numerous-environments">Numerous Environments</h2><p>Waiting on bug report<a href="https://github.com/iron-io/docs/issues/467">https://github.com/iron-io/docs/issues/467</a></p><p>But part of the process is to setup other projects at iron. For example if my worker is ExampleWorker then I would make ExampleWorker-dev.
I would then switch to my git branch dev and do my changes. Once that is done I would make sure the token and key in my iron.json file matches that new project I made for dev and that is it.</p><p>The other way is slicker cause you do not need to change your iron.json each time but in the mean time this works fine.</p><h2 id="deploy-from-codeship">Deploy from Codeship</h2><p>Codeship will allow you to set custom deploy scripts or bash shells scrips basically.</p><p>In here I placed for the branch I wanted</p><pre><code>curl -sSL -O https://github.com/iron-io/ironcli/releases/download/v0.0.6/ironcli_linux
chmod +x ironcli_linux
touch iron.json
echo "{" >> iron.json
echo '"token": "bar",' >> iron.json
echo '"project_id": "foo"' >> iron.json
echo "}" >> iron.json
zip -r PDF2PagesWorker.zip .
./ironcli_linux worker upload --stack php-5.6 PDF2PagesWorker.zip php workers/PDF2PagesWorker.php</code></pre><p>You can easily then swap out the related project id and token for the environment you are uploading to eg development, staging etc.</p><h2 id="repo">Repo</h2><p><a href="https://github.com/alnutile/lumen_worker">https://github.com/alnutile/lumen_worker</a></p><p>another example<a href="https://github.com/alnutile/thumbnail-maker">Thumbnail Maker</a></p><p>[1] These seems to be a part of the iron worker for version 1 but not sure why not for 2 maybe there is a better pattern for this.</p><p>[2] I renamed it to ExampleOneLumen</p><p>[3] So far this is a 50/50 solution it did not work for pdf2svg but it did work for pdftk</p></description><tags>laravel, php, iron, lumen</tags></item><item><title>Quick way to mock data for Behat in Laravel</title><link>https://alfrednutile.info/posts/142/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/142/</guid><description><p>Below allows me to use this type of step in my tests</p><pre><code>Scenario: Given I update a Domain get 200
Given I mock "App\Sites\Domain" with properties:
"""
id: "mock-update-1"
site_id: "mock-site-1"
domain: "foo2.com
"""
Given I have the payload:
"""
{
"data":
{
"id": "mock-update-1",
"site_id": "mock-site-1",
"domain": "foo2.com"
}
}
"""
Then I request "PUT /api/v1/sites/mock-site-1/domains/mock-update-1"
Then I get a "200" response</code></pre><p>Here is the code in my<code>FeatureContext.php</code></p><pre><code> /**
* @Given I mock :arg1 with properties:
*/
public function iMockWithProperties($model, PyStringNode $properties)
{
try
{
$this->setModel($model);
$this->makeFields($properties);
$this->removeMockIfExists();<pre><code> $this-&amp;gt;checkModelForTimeStamps();
$this-&amp;gt;createMock();
}
catch(\Exception $e)
{
$this-&amp;gt;printDebug(sprintf(&amp;quot;Error making mock&amp;quot;, $e-&amp;gt;getMessage()));
}
}
private function checkModelForTimeStamps()
{
if($this-&amp;gt;getModel()-&amp;gt;timestamps)
{
$dateTime = new DateTime('-3 day');
$created_at = $dateTime-&amp;gt;format('Y-m-d H:i:s');
$this-&amp;gt;fields['created_at'] = $created_at;
$this-&amp;gt;fields['updated_at'] = $created_at;
}
}
protected function removeMockIfExists()
{
if(isset($this-&amp;gt;fields['id']) &amp;amp;&amp;amp; $results = $this-&amp;gt;getModel()-&amp;gt;find($this-&amp;gt;fields['id']))
$results-&amp;gt;delete();
}
protected function makeFields($properties)
{
foreach($properties-&amp;gt;getStrings() as $value)
{
$field = explode(&amp;quot;:&amp;quot;, $value);
$this-&amp;gt;fields[trim($field[0])] = str_replace('&amp;quot;', '', trim($field[1]));
}
}
public function createMock()
{
$this-&amp;gt;getModel()-&amp;gt;create($this-&amp;gt;fields);
}
/**
* @return mixed
*/
public function getFields()
{
return $this-&amp;gt;fields;
}
/**
* @param mixed $fields
*/
public function setFields($fields)
{
$this-&amp;gt;fields = $fields;
}
/**
* @return mixed
*/
public function getModel()
{
return $this-&amp;gt;model;
}
/**
* @param mixed $model
*/
public function setModel($model)
{
$this-&amp;gt;model = new $model;
}</code></pre><p/></pre></p></description><tags>laravel, php, behat</tags></item><item><title>Code for making a Shortcut tool for your App</title><link>https://alfrednutile.info/posts/141/</link><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/141/</guid><description><p>This allows the user to easily make shortcuts to urls they are on and give them names.</p><p><img src="https://dl.dropboxusercontent.com/s/bwnfydndpx6ic4l/widget_shortcuts.gif?dl=0" alt="image 1"/><p><a href="http://youtu.be/tMi0tqPmnhg">video</a></p><h1 id="the-migration">The Migration</h1><pre><code>&lt;?php<p>use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;</p><p>class CreateShortcutsTable extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::create('shortcuts', function(Blueprint $table)
{
$table-&amp;gt;string('id', 36)-&amp;gt;primary();
$table-&amp;gt;string('url');
$table-&amp;gt;string('name');
$table-&amp;gt;string('user_id', 36);
$table-&amp;gt;timestamps();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('shortcuts');
}</code></pre><p>}</code></pre><h1 id="the-model">The Model</h1></p><p>You will see me using scopes as I wanted to make a really simple POC</p><pre><code>&lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 3/28/15
* Time: 8:28 PM
*/<p>namespace BehatEditor\Models;</p><p>use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;</p><p>class Shortcut extends BaseModel {</p><pre><code>public $incrementing = false;
public static $rulesCreate = [
'name' =&amp;gt; 'required|min:3',
'url' =&amp;gt; 'required'
];
protected $fillable = [
&amp;quot;id&amp;quot;,
&amp;quot;url&amp;quot;,
&amp;quot;name&amp;quot;,
&amp;quot;user_id&amp;quot;
];
public function user()
{
return $this-&amp;gt;belongsTo('BehatEditor\User');
}
public function scopeGetAllForCurrentUser($query)
{
return $query-&amp;gt;where('user_id', Auth::user()-&amp;gt;id)-&amp;gt;get();
}
public function scopeDeleteForUser($query, $shortcut_id)
{
try
{
return ($results = $query-&amp;gt;where('id', $shortcut_id)-&amp;gt;where('user_id', Auth::user()-&amp;gt;id)-&amp;gt;first()) ? $results-&amp;gt;delete() : false;
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Could not delete the shortcut %s&amp;quot;, $shortcut_id));
}
}
public function scopeCreateForUser($query, $input)
{
try
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
$this-&amp;gt;create(
[
'id' =&amp;gt; (isset($input['id'])) ? $input['id'] : $uuid,
'url' =&amp;gt; $input['url'],
'name' =&amp;gt; $input['name'],
'user_id' =&amp;gt; Auth::user()-&amp;gt;id
]
);
return $uuid;
}
catch(\Exception $e)
{
$this-&amp;gt;throw_and_log_error(sprintf(&amp;quot;Error making shortcut %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}</code></pre><p>}</code></pre><h1 id="the-controller">The Controller</h1></p><p>Typically this is a no no too much logic in the controller.</p><pre><code>&lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 3/28/15
* Time: 8:45 PM
*/<p>namespace BehatEditor\Http\Controllers;</p><p>use AlfredNutileInc\CoreApp\BaseController;
use BehatEditor\Models\Shortcut;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;</p><p>class ShortcutsController extends BaseController {</p><pre><code>public function getUserShortCuts()
{
try
{
$results['shortcuts'] = Shortcut::getAllForCurrentUser();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded Shortcuts&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
public function deleteUserShortCut($shortcut_id)
{
try
{
$results = Shortcut::deleteForUser($shortcut_id);
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Deleted Shortcut&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
public function postShortcut()
{
try
{
$input = $this-&amp;gt;getInput();
$validator = Validator::make($input, Shortcut::$rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
}
catch(\Exception $e)
{
Log::debug(sprintf(&amp;quot;Error making shortcut during validaiton %s&amp;quot;, $e-&amp;gt;getMessage()));
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond([], &amp;quot;Creation Error&amp;quot;), 500);
}
try
{
$results = Shortcut::createForUser($input);
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Created Shortcut&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting Shortcuts Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}</code></pre><p>}</code></pre><p>Then for the nav area</p></p><pre><code>&lt;li class="shortcut-form">
&lt;form class="navbar-form navbar-left" role="shortcuts">
&lt;div class="input-group">
&lt;input
placeholder="shortcut name"
type="text"
class="form-control input-sm"
ng-model="main.shortcut_new.name">
&lt;span class="input-group-btn">
&lt;button
ng-disabled="!main.shortcut_new.name"
type="button"
class="btn btn-default"
ng-click="main.addShortCut()">
&lt;i class="fa fa-plus-circle">&lt;/i>
&lt;/button>
&lt;/span>
&lt;/div>
&lt;/form>
&lt;/li>
&lt;li class="dropdown">
&lt;a class="dropdown-toggle" href="#">
&lt;i class="fa fa-thumb-tack">&lt;/i> 
Your Shortcuts&lt;span class="caret">&lt;/span>
&lt;/a>
&lt;ul class="dropdown-menu dropdown-messages">
&lt;li>
&lt;input
class="form-control"
type="text"
autofocus="{{ form_focus == 'nav' }}"
placeholder="Click Tab to enter mouse into input and search"
data-ng-model="search_shortcuts"
>
&lt;/li>
&lt;li class="divider">&lt;/li>
&lt;li ng-repeat="shortcut in main.shortcuts | filter:search_shortcuts">
&lt;div class="dropdown-messages-box">
&lt;div>
&lt;span ng-bind-html="shortcut.shortcut">&lt;/span>
&lt;a class="pull-right" href="#" ng-click="main.deleteShortcut(shortcut.id)">
&lt;i class="fa fa-trash">&lt;/i>
&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="divider">&lt;/div>
&lt;/li>
&lt;/ul>
&lt;/li></code></pre><h1 id="the-angular">The Angular</h1><p>We have a MainController for initial app setup then after that ui-router has controllers.</p><p>Also you can get the shortcuts via a http request on page load. I just inject the initial load into the blade render. But either is fine really.</p><pre><code># controller.js<pre><code> function addShortCut()
{
vm.shortcut_new.url = $location.url();
vm.ShortcutsService.create(vm.shortcut_new, vm.callbackCreateShortcutSuccess, vm.callbackShortcutError);
}
function loadShortcuts()
{
vm.shortcuts = [];
angular.forEach(vm.ENV.shortcuts, function(v,i){
var link = vm.makeLink(v);
vm.shortcuts.push( { &amp;quot;id&amp;quot;: v.id, &amp;quot;shortcut&amp;quot;: link } );
});
}
function deleteShortcut(id)
{
vm.shortcut_to_delete = id;
vm.ShortcutsService.deleteShortcut(id, vm.callbackShortcutSuccess, vm.callbackShortcutError);
}
function callbackShortcutSuccess(response)
{
vm._.remove(vm.shortcuts, function(s) {
return s.id == vm.shortcut_to_delete;
});
vm.toaster.pop(&amp;quot;success&amp;quot;, &amp;quot;Success updating shortcut&amp;quot;);
}
function callbackCreateShortcutSuccess(response)
{
vm.shortcut_new.id = response.data;
var link = vm.makeLink(vm.shortcut_new);
vm.shortcuts.push( { &amp;quot;id&amp;quot;: vm.shortcut_new.id, &amp;quot;shortcut&amp;quot;: link } );
vm.shortcut_new = {};
vm.toaster.pop('info', &amp;quot;Success creating shortcut&amp;quot;);
}
function makeLink(shortcut)
{
return &amp;quot;&amp;lt;a href='/behat#&amp;quot; + shortcut.url + &amp;quot;'&amp;gt;&amp;quot; + shortcut.name + &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;;
}
function callbackShortcutError(response)
{
vm.toaster.pop(&amp;quot;error&amp;quot;, &amp;quot;Error updating your shortcut&amp;quot;);
}</code></pre><p/></pre><h1 id="the-behat-api-tests">The Behat API Tests</h1></p><pre><code>@api
Feature: Shortcuts
Shortcuts for quick access
As an authenticated user
So I can make and use shortcuts to get from place to place
Background: Login
Given I do basic auth on behat
Scenario: Get My Shortcuts
When I request "GET /api/v1/shortcuts"
Then I get a "200" response
And scope into the "data.shortcuts.0" property
And the properties exist:
"""
url
user_id
"""
Scenario: Delete My Shortcuts
When I request "DELETE /api/v1/shortcuts/mock-shortcut-5"
Then I get a "200" response
Scenario: Can Create a Shortcut
Given I reseed the database
Given I have the payload:
"""
{ "data":
{
"name": "New ShortCut",
"url": "/dashboard"
}
}
"""
When I request "POST /api/v1/shortcuts"
Then I get a "200" response</code></pre><blockquote/></description><tags>angular, laravel</tags></item><item><title>PHP Error: Maximum function nesting level of '100' reached, aborting Behat</title><link>https://alfrednutile.info/posts/137/</link><pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/137/</guid><description><p>This started to happen on Codeship and local for me and other developers. Though one developer had a higher setting for max nesting as noted<a href="http://stackoverflow.com/questions/17488505/php-error-maximum-function-nesting-level-of-100-reached-aborting">here</a> I wanted to not worry about this so I just locked down Symfony and Behat in our composer.json file</p><pre><code> "require-dev": {
"symfony/dependency-injection": "2.7.x-dev#9fcd589dfb67697f1e3e34611b97eb1be2cd85be",
"php-vcr/php-vcr": "dev-master",
"phpunit/phpunit": "~4.0",
"phpspec/phpspec": "~2.1",
"php-vcr/phpunit-testlistener-vcr": "dev-master",
"mockery/mockery": "*@dev",
"fzaninotto/faker": "*",
"guzzlehttp/guzzle": "4.*",
"pda/pheanstalk": "~3.0",
"knplabs/github-api": "1.2.1",
"way/generators": "~3.0",
"symfony/Yaml":"2.1.x-dev",
"behat/behat": "dev-master#ec1e3890d3753908695483ca1f3cf7304c02251f",
"behat/mink": "dev-master#30014f0a15579176b7fca879cb461aad900f4db5",
"behat/mink-extension": "dev-master#ba5329be65a816adfc2d9ba9b639a92f548371da",
"laracasts/behat-laravel-extension": "dev-master#205a3d217d33d4315d20d0f3497edd65a8b5443e"
},</code></pre><p>And then</p><pre><code>rm -rf vendor composer.lock &amp;&amp; composer install</code></pre><p>And<code>bin/behat -dl</code> and other behat tests worked again</p></description><tags>behat, laravel</tags></item><item><title>Iron.io Laravel and Workers, Microservices</title><link>https://alfrednutile.info/posts/136/</link><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/136/</guid><description><p>We are starting to use Iron.io and their workers for a lot of the tasks that our apps need to do. For example one app needs to scan websites for images and text and report on them. In our case that is 2 workers, one with the code needed to get the text we want and the other images. Another worker runs behat tests to take screenshots and reports back to the called with the results.</p><p>Using Iron.io has made this whole process easy and scalable. One request can be for say 100 urls and with Iron.io we can run one worker per url or using the Symfony Process library we can even use a worker to run a multi-threaded processes.</p><p>Some of the resources out there like<a href="https://github.com/iron-io/iron_worker_examples/tree/master/php/laravel">iron`s example</a> are great. And using<a href="https://github.com/iron-io/laraworker">this</a> library has made it super easy. Below I cover how exactly to set this up. (hopefully this week we will have a Laravel 5 version of it out)</p><h2 id="step-1-install">Step 1 Install</h2><p>Install 4.2 work. (5 might be ready soon)</p><pre><code>composer create-project laravel/laravel=4.2 example_worker --prefer-dist</code></pre><p>Set your minimum stability in your composer.json</p><pre><code> },
"config": {
"preferred-install": "dist"
},
"minimum-stability": "dev"
}<p/></pre><p>Then pull in the library</p></p><pre><code>composer require iron-io/laraworker</code></pre><p>And add this one patch for PHP 5.6<strong>TODO add code snippet</strong></p><p><a href="https://github.com/iron-io/laraworker/issues/5">https://github.com/iron-io/laraworker/issues/5</a></p><p>and</p><p><a href="https://github.com/iron-io/iron_core_php/blob/master/src/IronCore.php#L269">https://github.com/iron-io/iron_core_php/blob/master/src/IronCore.php#L269</a></p><p>And of course as the readme.md notes for Laraworker</p><pre><code>php vendor/iron-io/laraworker/LaraWorker.php -i true</code></pre><p>As the developer notes this makes a new folder and file</p><p><a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/workers/libs/worker_boot.php">/worker/libs/worker_boot.php</a>
and<a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/workers/ExampleLaraWorker.php">/worker/ExampleLaraWorker.php</a></p><h2 id="step-2-configure">Step 2 Configure</h2><p>We will use the .env to do configuration not the way noted in the laraworker docs so lets install that. Just use<a href="https://alfrednutile.info/posts/113">this post</a> to set that up.</p><p>So after you are done your, as in the Laraworker docs, we need to set the queue config.</p><blockquote><p>Set Iron.io credentials in app/config/queue.php and set default to iron &ndash;> &lsquo;default&rsquo; => &lsquo;iron&rsquo;,</p></blockquote><p>So yours will look like</p><pre><code># https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/config/queue.php
'default' => getenv('QUEUE_DRIVER'),<pre><code>'connections' =&amp;gt; array(
'iron' =&amp;gt; array(
'driver' =&amp;gt; 'iron',
'host' =&amp;gt; 'mq-aws-us-east-1.iron.io',
'token' =&amp;gt; getenv('IRON_TOKEN'),
'project' =&amp;gt; getenv('IRON_PROJECT_ID'),
'queue' =&amp;gt; 'your-queue-name',
'encrypt' =&amp;gt; true,
),
),</code></pre><p/></pre><p>Then make your project on Iron and get the Token and Project ID</p></p><h2 id="step-3-see-if-example-worker-works">Step 3 See if Example Worker works</h2><p>Lets see if the Example works before we move forward.</p><pre><code>php artisan ironworker:upload --worker_name=ExampleLaraWorker --exec_worker_file_name=ExampleLaraWorker.php</code></pre><p>If it worked you will see</p><p><img src="https://dl.dropboxusercontent.com/u/54803135/example_command.png" alt="example"/><p>This will upload a worker related queue</p><p><img src="https://dl.dropboxusercontent.com/u/54803135/example_queue.png" alt="example"/><h2 id="step-4-make-our-own-worker">Step 4 Make our own worker!</h2><p>The goal of this worker</p><ul><li>It will get a JSON object of the info needed to do a job</li><li>It will do the job by getting the json file from the S3 file system where it lives (it could live in a db or other location)</li><li>Using the JSON object&rsquo;s callback it will send back the results to the caller</li></ul><p>That is it.</p><p>This example will be used in real life to later on parse say 100 urls for already created json render tree objects of the urls data including images and text. This job only cares about the text. Cause the job is fairly easy I will be sending to each worker 5 urls to process.</p><h3 id="copy-the-worker-in-workers-folder-to-the-new-worker-name">Copy the worker in /workers folder to the new Worker name</h3><p>Due to bad naming abilities I am calling this<code>RenderTreeTextGrepper.php</code></p><p>So now my worker folder has</p><pre><code>RenderTreeTextGrepper.php</code></pre><p>But I do not want that class to have all my code so I will start to build out a namespace for all of this and the 2 classes I want to manage ALL of this work.</p><h3 id="class-1-fire">Class 1 @fire</h3><p>So the worker will fire the class I have to handle all of this.</p><pre><code> "autoload": {
"classmap": [
"app/commands",
"app/controllers",
"app/models",
"app/database/migrations",
"app/database/seeds",
"app/tests/TestCase.php"
],
"psr-4": {
"AlfredNutileInc\\RenderTreeTextGrepperWorker\\": "app/"
}
},</code></pre><p>then</p><pre><code>composer dump</code></pre><p>Then in<code>app/RenderTreeTextGrepperWorker</code> folder I have</p><p><img src="https://dl.dropboxusercontent.com/u/54803135/example_folders.png" alt="example_folder"/><p><a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/RenderTreeTextGrepperWorker/RenderTreeGrepperHandler.php">/projects/example_worker/app/RenderTreeTextGrepperWorker/RenderTreeGrepperHandler.php</a> is the class to handle the incoming request and process it.</p><h3 id="class-2-event-listener">Class 2 Event Listener</h3><p>Then I register the event listener with the app/config/app.php to make it easier to handle the results of the output. You can do all of this in class 1
as well.</p><pre><code>#app/config/app.php
'AlfredNutileInc\RenderTreeTextGrepperWorker\GrepCallbackListener'</code></pre><p>And that is it.</p><p>What is it?</p><p>So we are going to upload and run this and here is what will happen. NO WAIT!</p><p>First lets make a test so we can see locally if all the logic is there.</p><h3 id="local-test">Local Test</h3><p>Just a quick test to see if the handler will handle things and pass results</p><pre><code>&lt;?php<p>class RenderTreeTextTest extends \TestCase {</p><pre><code>/**
* @test
*/
public function should_populate_results()
{
$handle = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeGrepperHandler();
$payload = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO(
'foo-bar',
['foo', 'bar', 'baz'],
['text1', 'text2'],
[
'caller' =&amp;gt; 'http://someposturl.dev/rendertree_results',
'params' =&amp;gt; ['foo', 'bar']
],
false,
false
);
$results = $handle-&amp;gt;handle($payload);
var_dump($results);
$this-&amp;gt;assertNotNull($results);
}</code></pre><p>}</code></pre><p>Running this</p></p><pre><code>phpunit --filter=should_populate_results</code></pre><p>Produces this</p><pre><code> class AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO#334 (6) {
public $uuid =>
string(7) "foo-bar"
public $urls =>
array(3) {
[0] =>
string(3) "foo"
[1] =>
string(3) "bar"
[2] =>
string(3) "baz"
}
public $text =>
array(2) {
[0] =>
string(5) "text1"
[1] =>
string(5) "text2"
}
public $callback =>
array(2) {
'caller' =>
string(41) "http://someposturl.dev/rendertree_results"
'params' =>
array(2) {
...
}
}
public $results =>
array(1) {
[0] =>
string(21) "Listener is listening"
}
public $status =>
bool(false)
}
}</code></pre><p>Of course I need to go into more testing for the two classes to see how they react to different data going in but just to see that there are not obvious issues before I upload the worker.</p><h3 id="upload-the-worker-we-just-made">Upload the worker we just made</h3><pre><code>php artisan ironworker:upload --worker_name=RenderTreeTextGrepper --exec_worker_file_name=RenderTreeTextGrepper.php</code></pre><p>And then we see on Iron.io</p><p><img src="https://dl.dropboxusercontent.com/u/54803135/example_worker_run.png" alt="new worker"/><p>Then we run it</p><pre><code>php artisan ironworker:run --queue_name=RenderTreeTextGrepper</code></pre><p>Before that though I updated<a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/commands/RunWorker.php#L26">app/commands/RunWorker.php:26</a> to make a better payload</p><pre><code> public function fire()
{
$queue_name = $this->option('queue_name');
$payload = "This is Hello World payload :)";<pre><code> if($queue_name == 'RenderTreeTextGrepper')
{
$payload = new \AlfredNutileInc\RenderTreeTextGrepperWorker\RenderTreeTextDTO(
'foo-bar',
['foo', 'bar', 'baz'],
['text1', 'text2'],
[
'caller' =&amp;gt; 'http://someposturl.dev/rendertree_results',
'params' =&amp;gt; ['foo', 'bar']
],
false,
false
);
}</code></pre><p/></pre><p>We then see the Task</p></p><p><img src="https://dl.dropboxusercontent.com/u/54803135/task.png" alt="task"/><p>And the example log output</p><p><img src="https://dl.dropboxusercontent.com/u/54803135/log.png" alt="log"/><h2 id="guzzle-and-the-callback">Guzzle and the Callback</h2><p>How to format the callback?</p><p>Let&rsquo;s require guzzle</p><pre><code>composer require guzzlehttp/guzzle</code></pre><p>At this point we have a working example. The queue takes the json and the worker processes it!</p><p><a href="https://github.com/alnutile/laravel_guide/blob/master/projects/example_worker/app/RenderTreeTextGrepperWorker/GrepCallbackListener.php">/projects/example_worker/app/RenderTreeTextGrepperWorker/GrepCallbackListener.php</a></p><p>Thanks to the library and Iron.io it really is that simple.</p></description><tags>microservices, laravel, iron.io</tags></item><item><title>Sending Dates to Angular from Laravel</title><link>https://alfrednutile.info/posts/134/</link><pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/134/</guid><description><p>This might not be ideal but so far it allows me to more easily sort dates and filter dates in Angular.</p><p>From the Laravel model I add these two methods</p><pre><code>
/**
* See docs http://laravel.com/docs/5.0/eloquent#date-mutators
*/
public function getDates()
{
return array('created_at');
}<pre><code>public function getCreatedAtAttribute($attr) {
return Carbon::parse($attr)-&amp;gt;timestamp; //Change the format to whichever you desire
}</code></pre><p/></pre><p>Then in Angular I can use the filters</p></p><pre><code>{{ vm.created_at | date:'medium'}}</code></pre><blockquote/></description><tags>laravel, angular</tags></item><item><title>Dealing with Oauth2 Server and Laravel for both a local app login and for remote apps using Lucadegasperi/oauth2-server-laravel</title><link>https://alfrednutile.info/posts/133/</link><pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/133/</guid><description><p>This is all based around this library<a href="https://github.com/lucadegasperi/oauth2-server-laravel">https://github.com/lucadegasperi/oauth2-server-laravel</a></p><p>I am building and API to be used by an iOs and Android client I will be making soon.<strong>But</strong> I also needed the filter system to deal with my local Laravel view that was using the api via an Angular driven widget so the user can go to the website as well.</p><p>So the website is where the user can go to do change settings, subscription updates etc, but in that case they are logged in via the Laravel login form. From there they land on the profile page where the Angular widget will do n xhr request to the api to fill in the table/settings.</p><p>The routes ends up looking like this</p><pre><code>
Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});<p>//The view they see using Laravel Blade and an embedded angular widget
Route::get(&lsquo;profile&rsquo;, [&lsquo;middleware&rsquo; => &lsquo;auth&rsquo;, &lsquo;uses&rsquo; => &lsquo;ProfileController@getProfile&rsquo;]);</p><p>//The API
Route::group([&lsquo;prefix&rsquo; => &lsquo;api/v1&rsquo;, &lsquo;before&rsquo; => &lsquo;oauth|setUser|auth&rsquo;], function() {
Route::get(&lsquo;profile&rsquo;, &lsquo;ProfileController@getApiProfile&rsquo;);
});</code></pre><p>The thing is the Oauth2 filter was causing some issues</p></p><p>1 Looks for a access_token query string or header
2 Does not load the user like I need</p><p>The first issue I just made a class to extend the core filter for the Oauth2 library.</p><h3 id="my-provider">My provider</h3><pre><code>&lt;?php namespace App\Providers;<p>use App\Filters\OauthTotalRecalls;
use Illuminate\Support\ServiceProvider;
class OauthFilterProvider extends ServiceProvider {
public function boot()
{
$this->app->bindShared(&lsquo;LucaDegasperi\OAuth2Server\Filters\OAuthFilter&rsquo;, function ($app) {
$httpHeadersOnly = $app[&lsquo;config&rsquo;]->get(&lsquo;oauth2.http_headers_only&rsquo;);
return new OauthTotalRecalls($app[&lsquo;oauth2-server.authorizer&rsquo;], $httpHeadersOnly);
});
}
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
// TODO: Implement register() method.
}
}</code></pre><p>Then I register that in my app.conf after I register his.</p></p><h3 id="my-filter">My Filter</h3><p>It overrides the filter to do one thing and that is to check if the user is a guest. Which they would not be if they are logging in via the Laravel login form.</p><pre><code>&lt;?php namespace App\Filters;
use Illuminate\Support\Facades\Auth;
use LucaDegasperi\OAuth2Server\Filters\OAuthFilter;
class OauthTotalRecalls extends OAuthFilter {
/**
* Run the oauth filter
*
* @internal param mixed $route, mixed $request, mixed $scope,...
* @return void a bad response in case the request is invalid
*/
public function filter()
{
if(Auth::guest())
{
if (func_num_args() > 2) {
$args = func_get_args();
$this->scopes = array_slice($args, 2);
}
$this->authorizer->validateAccessToken($this->httpHeadersOnly);
$this->validateScopes();
}
}
}</code></pre><h3 id="loading-user">Loading user</h3><p>So at this point the user is logged in via Laravel so the Auth::user() is fully set. But lastly if this was the token based log in the &ldquo;setUser&rdquo; filter will kick in and load the user from the token. If the token is wrong then this all will fail.</p><pre><code>Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});</code></pre></description><tags>oauth, laravel, apis</tags></item><item><title>Simple Look at Laravel Events</title><link>https://alfrednutile.info/posts/132/</link><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/132/</guid><description><h1 id="events">Events</h1><h2 id="getting-started">Getting Started</h2><p>This is part of a larger<a href="https://github.com/alnutile/laravel_guide/blob/master/index.md">Laravel Guide</a> I am working on in this case the example is in the Events<a href="https://github.com/alnutile/laravel_guide/tree/master/projects/events">folder</a></p><p>Start the example</p><pre><code>php artisan serve --port=8081</code></pre><p>Then visit</p><pre><code>http://localhost:8081/example1</code></pre><p>So if you look in</p><pre><code>app/routes.php</code></pre><p>You see route example1 will fire and event and there are two listeners</p><h2 id="do-they-run-async-or-sync">Do they run async or sync</h2><p>If you hit that<a href="http://localhost:8081/example1">route</a> you see the sleep taking effect so it is syncronous</p><p>See in the image below an example. I reload the page and the results are staggered by the sleep amount in the route.</p><p><img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/events_delay.png" alt="sleep"/><p>On the left I have</p><pre><code>php artisan tail</code></pre><p>Here is the route</p><pre><code>Event::listen('example1', function()
{
sleep(5);
Log::info("Event one is Triggered");
});<p>Event::listen(&lsquo;example1&rsquo;, function()
{
sleep(5);
Log::info("Event two is Triggered");
});</p><p>Route::get('/example1', function()
{
Event::fire(&lsquo;example1&rsquo;);
return "Event Example 1";
});</code></pre><p>So if you did not want to hold up the process you would place these into a queue.</p></p><h2 id="passing-data-to-events">Passing data to events</h2><p>How can Event 1 alter Event 2 and Event 3</p><p>See route would be<a href="http://localhost:8081/example2">/example2</a></p><p>Also there is a registered event listener seen in the route file
that</p><pre><code>$subscriber = new \Acme\ExampleEventHandler;
Event::subscribe($subscriber);</code></pre><p>Which shows how that made it hard to pass a state</p><pre><code>$subscriber = new \Acme\ExampleEventHandler;<p>Event::subscribe($subscriber);</p><p>Event::listen(&lsquo;example2&rsquo;, function($state)
{
$state->total = $state->total + 5;
var_dump(sprintf("From The listener one state %s &lt;br>", $state->total));</p><pre><code>Log::info(sprintf(&amp;quot;Event two listener 1 is Triggered total %s&amp;quot;, $state-&amp;gt;total));</code></pre><p>});</p><p>Event::listen(&lsquo;example2&rsquo;, function($state)
{
$state->total = $state->total + 5;
var_dump(sprintf("From The listener two state %s &lt;br>", $state->total));</p><pre><code>Log::info(sprintf(&amp;quot;Event two listener 2 is Triggered total %s&amp;quot;, $state-&amp;gt;total));</code></pre><p>});</p><p>Route::get('/example2', function()
{
$state = new stdClass();
$state->total = 0;
Event::fire(&lsquo;example2&rsquo;, array($state));</p><pre><code>return sprintf(&amp;quot;Event Example 2 data total state %s&amp;quot;, $state-&amp;gt;total);</code></pre><p>});</code></pre><p>This one you just see in the browser</p></p><p><img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/example2.png" alt="example2"/></description><tags>laravel, events, php</tags></item><item><title>Laravel-Flysystem and Creating Time Limited Public Urls on S3</title><link>https://alfrednutile.info/posts/131/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/131/</guid><description><p>We needed to offer timed links to the urls and we are using<a href="https://github.com/GrahamCampbell/Laravel-Flysystem">Laravel-Flysystem</a></p><p><a href="https://github.com/crypticsymbols">Aaron Smith</a> found this<a href="https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php">how to</a> but I wanted it to work with existing use of FlySystem.</p><p>I ended up moving the code into a trait so we could use this one feature</p><pre><code>&lt;?php namespace AlfredNutileInc\CoreApp\Helpers;
use GrahamCampbell\Flysystem\Facades\Flysystem;
use Illuminate\Support\Facades\Log;<p>trait S3Helper {</p><pre><code>protected $path_for_assets;
protected $expire_time;
public $driver = 'awss3';
/**
* @return string
*/
public function getDriver()
{
return $this-&amp;gt;driver;
}
/**
* @param string $driver
*/
public function setDriver($driver)
{
$this-&amp;gt;driver = $driver;
}
public function iterateOverFiles($files)
{
foreach($files as $key =&amp;gt; $file)
{
if(isset($file['path'])) {
$files[$key]['url'] = $this-&amp;gt;getSignedUrl($file['path']);
}
}
return $files;
}
protected function getFiles()
{
$this-&amp;gt;path_for_assets = $this-&amp;gt;project_id . '/' . $this-&amp;gt;id;
$files = Flysystem::listContents($this-&amp;gt;path_for_assets);
if(!$files)
return [];
return $this-&amp;gt;iterateOverFiles($files);
}
/**
* https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php
*/
protected function getSignedUrl($filename)
{
$awsKeyId = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['key'];
$awsSecret = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['secret'];
$expires = $this-&amp;gt;getExpireTime();
$httpVerb = &amp;quot;GET&amp;quot;;
$contentMD5 = &amp;quot;&amp;quot;;
$contentType = &amp;quot;&amp;quot;;
$amzHeaders = &amp;quot;&amp;quot;;
$amzResource = &amp;quot;/&amp;quot; . Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['bucket'] . &amp;quot;/&amp;quot; . $filename;
$request = sprintf(&amp;quot;%s\n%s\n%s\n%s\n%s%s&amp;quot; , $httpVerb , $contentMD5 , $contentType , $expires , $amzHeaders , $amzResource );
$base64signed = urlencode(base64_encode( hash_hmac( 'sha1' , $request, $awsSecret , true ) ));
$url = &amp;quot;http://s3.amazonaws.com%s?AWSAccessKeyId=%s&amp;amp;Expires=%s&amp;amp;Signature=%s&amp;quot;;
$url = sprintf( $url , $amzResource , $awsKeyId , $expires , $base64signed );
return $url;
}
public function setExpireTime($time = false)
{
if($time == false)
{
$time = time() + (10*60);
}
$this-&amp;gt;expire_time = $time;
}
public function getExpireTime()
{
if($this-&amp;gt;expire_time == false)
{
$this-&amp;gt;setExpireTime();
}
return $this-&amp;gt;expire_time;
}</code></pre><p>}</p><p/></pre><p>Ideally seconds could be passed in too.</p></p><p>Then in any model/repo I can use it like this</p><pre><code> public function assets()
{
try
{
$files = $this->getFiles();
return ['images' => $files, 'videos' => []];
} catch(\Exception $e)
{
throw new \Exception(sprintf("Error getting files %s", $e->getMessage()));
}
}</code></pre></description><tags>laravel, php</tags></item><item><title>Laravel Behat and Selenium</title><link>https://alfrednutile.info/posts/130/</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/130/</guid><description><p>Laracasts has some great videos and libraries for Laravel 5 and Behat integration.</p><p>Examples</p><p><a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><p>and</p><p><a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs</a></p><p>Two things that I still need and get from this though that I do not think I can get from those are</p><ul><li>Laravel 4.2 support which obviously is not going to work with the above L5 libraries :)</li><li>Mocking APIs when running under APP_ENV=local or testing</li></ul><p>Also I think with the libraries above only goutte drivers work for the APP_ENV setting.</p><h2 id="dealing-with-apis">Dealing with APIs</h2><p>We use a lot of APIs. One for example is Github so make a provider like this</p><h3 id="the-provider">The Provider</h3><p>I register an API Provider like this</p><pre><code>&lt;?php<p>namespace BehatEditor\Services;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;
class GitApiServiceProvider extends ServiceProvider {
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(App::environment() == &lsquo;testing&rsquo; || Config::get(&lsquo;app.mock&rsquo;) == true)
{
$this->app->singleton(&lsquo;GithubClientInstance&rsquo;, function($app){
$git = new GithubApiMockService();
$username = getenv(&lsquo;GIT_USERNAME&rsquo;);
$token = getenv(&lsquo;GIT_TOKEN&rsquo;);
$git->setUsername($username);
$git->setToken($token);
$git->setLogger($app[&lsquo;log&rsquo;]);
$git->setLogging(true);
$git->authenticate();
return $git;
});
} else
{
$this->app->singleton(&lsquo;GithubClientInstance&rsquo;, function($app){
$git = new GithubApiService();
$username = getenv(&lsquo;GIT_USERNAME&rsquo;);
$token = getenv(&lsquo;GIT_TOKEN&rsquo;);
$git->setUsername($username);
$git->setToken($token);
$git->setLogger($app[&lsquo;log&rsquo;]);
$git->setLogging(true);
$git->authenticate();
return $git;
});
}
}
}</code></pre><p>The “app.mock” I set in two places</p></p><pre><code>config/local/app.php</code></pre><p>and</p><pre><code>config/testing/app.php</code></pre><pre><code>&lt;?php<p>return array(</p><pre><code>'chat_on' =&amp;gt; false,
'mock' =&amp;gt; true,
'debug' =&amp;gt; true,
'providers' =&amp;gt; append_config(array(
'GuilhermeGuitte\BehatLaravel\BehatLaravelServiceProvider'
))</code></pre><p>);</code></pre><p>Testing works well for Codeship.</p></p><p>Then if we have mock as true for local and I run</p><pre><code>php artisan behat:run --profile=als_local_ui --stop-on-failure ui/people_ui.feature</code></pre><p>I can test all my Angular ui for People</p><p>Here is the behat.yml for that, keep in mind I run this from inside of Vagrant (Homestead) and Selenium is running on my Mac thanks to &ldquo;webdriver-manager&rdquo; and brew install chromedriver you can see more on that<a href="https://www.alfrednutile.info/posts/129">here</a></p><pre><code>default:
filters:
tags: "~@wip"
formatter:
name: pretty
parameters:
decorated: true
verbose: false
time: true
language: en
output_path: null
multiline_arguments: true
paths:
features: app/tests/acceptance/features
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: http://behat.dev
asset_path: '/tmp/'<p>als_local_ui:
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte:
guzzle_parameters:
curl.options:
CURLOPT_SSL_VERIFYPEER: false
CURLOPT_CERTINFO: false
CURLOPT_TIMEOUT: 120
ssl.certificate_authority: false
selenium2:
wd_host: "http://192.168.33.1:4444/wd/hub"
base_url: &lsquo;<a href="https://admin:foo@behat.dev">https://admin:foo@behat.dev</a>:44300&rsquo;
browser_name: chrome</code></pre><h3 id="the-mock-class">The Mock Class</h3></p><p>The mock class just extends the real class but takes over</p><p>If mock is on it looks for a matching fixture file and uses that, else it makes one real call, saves the fixture and then uses that next time.</p><pre><code>&lt;?php
namespace BehatEditor\Services;<p>use AlfredNutileInc\Fixturizer\FixturizerReader;
use BehatEditor\Exceptions\ModelException;
use BehatEditor\Helpers\BuildFileObject;
use BehatEditor\Helpers\ThrowAndLogErrors;
use BehatEditor\Providers\GithubClientInterface;
use Github\Client;
use Github\ResultPager;
use BehatEditor\Interfaces\BehatUIInterface;
use BehatEditor\Repositories\ProjectsRepository;
use Illuminate\Support\Facades\Log;</p><p>class GithubApiMockService extends GithubApiService implements GithubClientInterface {</p><pre><code>public $sha;
protected $application;
/**
* @var \Github\Client
*/
public $client;
protected $username;
protected $token;
protected $branch;
protected $parent_file;
protected $reponame;
protected $folder;
protected $logging = false;
protected $logger;
/**
* @var RepoSettingRepository
*/
private $repoSettingRepository;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
$this-&amp;gt;path = base_path() . '/tests/fixtures/';
}
public function seeIfRepoHasCustomSteps()
{
$this-&amp;gt;logMock('repo_has_custom_steps');
$results = FixturizerReader::getFixture('git_show_repo_custom_steps.yml', $this-&amp;gt;path);
return $results;
}</code></pre><p/></pre><p>I am using this library to quickly make fixtures<a href="https://packagist.org/packages/alfred-nutile-inc/fixturizer"><a href="https://packagist.org/packages/alfred-nutile-inc/fixturizer">https://packagist.org/packages/alfred-nutile-inc/fixturizer</a></a></p></p><p>That makes our tests super fast since we are never hitting out APIs like Github, Pusher, etc.</p><p>I cover it<a href="https://www.alfrednutile.info/posts/120">Mocking Queue Service for faster Behat Testing</a> as well.</p><h2 id="api-testing">API Testing</h2><p>We use Behat to test our API endpoints as seen in the book<a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&rsquo;t Hate</a></p><p>For hitting the API we use basic.once</p><pre><code>#filter.php
Route::filter('basic.once', function()
{<pre><code> if(Auth::guest())
{
/**
* First authenticate as normal
*/
if ($results = Auth::onceBasic() )
{
return $results;
}
}</code></pre><p>});</code></pre><p>And the route would be</p></p><pre><code>Route::group(['prefix' => 'api/v1', 'before' => 'basic.once|auth'], function() {
///routes
}</code></pre><p>This allows our Angular app which happens to live inside the same codebase of the API to login using a standar Laravel Form but also allows other apps to access the API (Oauth coming soon)</p><h2 id="reseeding-the-db">Reseeding the DB</h2><p>This step helps with that</p><pre><code> /**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
$env = getenv('APP_ENV');
if(getenv('APP_ENV') != 'production')
{
try
{
if(getenv('APP_ENV') == 'testing')
{
copy(__DIR__ . '/../../../../app/database/stubdb.sqlite', __DIR__ . '/../../../../app/database/testing.sqlite');
}
else
{
exec("php artisan migrate:refresh --seed -n --env=$env");
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf("Error seeding the database %s", $e->getMessage()));
}
} else {
throw new \Exception(sprintf("You can not seed production"));
}
}</code></pre><p>I cover more on that<a href="https://www.alfrednutile.info/posts/117">PHP quick fixture data for phpunit testing</a></p><h2 id="loading-app">Loading APP</h2><p>FeatureContext has a BaseContext that has these methods</p><pre><code> public function setApp()
{
$app = new Illuminate\Foundation\Application;
$env = $app->detectEnvironment(
function()
{
if(!getenv('APP_ENV'))
{
Dotenv::load(__DIR__ .'/../../../../');
}
return getenv('APP_ENV');
}
);
$app->bindInstallPaths(require __DIR__ . '/../../../../bootstrap/paths.php');
$framework = $app['path.base'].
'/vendor/laravel/framework/src';
require $framework.'/Illuminate/Foundation/start.php';
$this->app = $app;
$this->app->boot();
$this->env = $env;
}<pre><code>public function getApp()
{
return $this-&amp;gt;app;
}</code></pre><p/></pre><p>On the __construct it does</p></p><pre><code> public function __construct(array $parameters) {
$config = isset($parameters['guzzle']) &amp;&amp; is_array($parameters['guzzle']) ? $parameters['guzzle'] : [];
$config['base_url'] = (isset($parameters['base_url'])) ? $parameters['base_url'] : false;
$this->parameters = $parameters;
$this->client = new Client($config);
$this->iSetCredentials();
Factory::$factoriesPath = 'app/tests/factories';
$this->setApp();
}</code></pre><h2 id="laracast-testdummy--factories">Laracast TestDummy / Factories</h2><p>One example of using factories is a step like this</p><pre><code> /**
* @Given /^I create person fixture with "([^"]*)" id$/
*/
public function iCreatePersonFixtureWithId($arg1)
{
Factory::create('TheHub\Profile\User', [ 'id' => $arg1 ]);
}</code></pre><p>Using the Laracast TestDummy library I can quickly stub out data for the test.</p></description><tags>laravel, php, behat, angular</tags></item><item><title>Sqlite and Laravel</title><link>https://alfrednutile.info/posts/128/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/128/</guid><description><p>It is really really nice to use this for testing and local since any reseed work is quick.</p><p>Overall the swap out is easy and I do not think, so far, there has been any issues going to mysql on production.</p><p>The only two things to set over all is</p><h2 id="seeding">Seeding</h2><p>In my DatabaseSeeder.php file I set this</p><pre><code>&lt;?php<p>use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;</p><p>class DatabaseSeeder extends Seeder {</p><pre><code>/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Eloquent::unguard();
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}</code></pre><p>}</p><p/></pre><p>This allows me to reseed without issues.</p></p><h2 id="null-fields">Null fields</h2><p>On fields that are allowed to be null just add this</p><pre><code>&lt;?php<p>use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;</p><p>class AddGithubTokenToUsersTable extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;string('name')-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('name');
});
}</code></pre><p>}</p><p/></pre><p>Check out<a href="https://www.alfrednutile.info/posts/112">Speeding up PHPunit tests and Behat in Laravel for Database refreshes</a> to see more info of how you can use this.</p></p><p>Also see<a href="https://www.alfrednutile.info/posts/63">php artisan migrate:reset not working</a> for some extra setup.</p><h2 id="update-2-11-2015">Update 2-11-2015</h2><p><a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a> noted that since renameColumn does not work with Sqlite you can do this to drop and make the column. Also without the two steps in<code>up()</code> seeding failed.</p><pre><code> /**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table->dropColumn('bundle_id');
});<pre><code> Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;string('project_id', 36)-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('project_id');
$table-&amp;gt;string('bundle_id', 36)-&amp;gt;nullable();
});
}</code></pre><p/></pre></p></description><tags>laravel, php, sqlite</tags></item><item><title>Reusable UI/API CRUD Laravel and Angular</title><link>https://alfrednutile.info/posts/126/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/126/</guid><description><p><a href="https://github.com/alnutile/angular_stubber">related repo</a></p><p>Working on a recent project it finally hit me how repetitive then need was to make a Resource at the API level and to make the UI to Create, Retrieve, Update, Delete, Index. And how easy it would be to make a foundation for this to use for each Resource keeping the UI goals consistent and simple between these Resources. With this came also a set of API tests in Behat that could also be used with the project.</p><p>What I will cover below is building out the foundation for this code and using it in a &lsquo;real life&rsquo; example.</p><p>You will end up with a UI like this</p><h2 id="index">Index</h2><p>Simple search, create and edit</p><p><img src="https://dl.dropboxusercontent.com/s/9hwu9xzxvlriapc/index.png?dl=0" alt="index"/><h2 id="modal-create">Modal Create</h2><p>Simple Create leaving complexities for Edit</p><p><img src="https://dl.dropboxusercontent.com/s/x5k1zkixgp3a95j/create.png?dl=0" alt="create"/><h2 id="modal-edit">Modal Edit</h2><p><img src="https://dl.dropboxusercontent.com/s/tix8hql68omwvxh/edit.png?dl=0" alt="edit"/><h1 id="now-for-the-code">Now for the code</h1><h2 id="api">API</h2><p>The API follows this pattern</p><h3 id="route">Route</h3><p>Build all the info into one namespace. For example using the a resource like the one in the images above call People and a name space of CoreApp.</p><pre><code>CoreApp\PeopleApi</code></pre><p>What is in here is (we will cover each in detail)</p><p><img src="https://dl.dropboxusercontent.com/s/2go33ai45av8syr/people.png?dl=0" alt="people"/><p>The route file then has</p><pre><code>&lt;?php<p>Route::get(&lsquo;people&rsquo;, &lsquo;CoreApp\People\PeopleController@getAll&rsquo;);
Route::get(&lsquo;people/{uuid}&rsquo;, &lsquo;CoreApp\People\PeopleController@getOne&rsquo;);
Route::post(&lsquo;people&rsquo;, &lsquo;CoreApp\People\PeopleController@postResource&rsquo;);
Route::put(&lsquo;people/{uuid}&rsquo;, &lsquo;CoreApp\People\PeopleController@putResource&rsquo;);</code></pre><p>By using put and post Resource we all of this easier to reuse.</p></p><p>Then include this in your main route file for Laravel or register it with a provider.</p><pre><code>#app/routes.php
require_once(__DIR__ . '/App/PeopleApi/routes.php');</code></pre><p>So now the routes are in place lets go to the Controller</p><h3 id="controller">Controller</h3><pre><code>&lt;?php<p>namespace App\People;</p><p>use App\Teams\Team; //some other model
use App\Users\User; //some other model we rely on
use App\BaseController;
use App\People\PeopleService;//keep logic out of controller
use App\Services\ResponseServices; //just an example of a consistent response patter
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;</p><p>class PeopleController extends BaseController {</p><pre><code>/**
* @var PeopleService
*/
private $peopleService;
public function __construct(PeopleService $service, ResponseServices $responseServices)
{
$this-&amp;gt;service = $peopleService; //@NOTE name it service not people service to ease the reuse.
$this-&amp;gt;responseServices = $responseServices;
}
/**
* @Get('api/v1/people
*/
public function getAll()
{
try
{
$results['people'] = $this-&amp;gt;service-&amp;gt;getAll();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Get('api/v1/people/{uuid}
*/
public function getOne($uuid)
{
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;getOne($uuid);
if(!empty($results['person']))
{
$results['roles'] = Role::all();
$results['teams'] = Team::all();
}
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Post('api/v1/people')
*/
public function postResource()
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;postPerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Team&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Put('api/v1/people/{uuid}
*/
public function putResource($uuid)
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results = $this-&amp;gt;service-&amp;gt;updatePerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Person&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}</code></pre><p>}</code></pre><p>The Controller talks to the service to get the respond to the request and the consistently responds back using the responseService. (more on that shortly)</p></p><h3 id="the-service">The Service</h3><pre><code>&lt;?php<p>namespace CoreApp\People;</p><p>use CoreApp\Models\User;
use CoreApp\Services\UserService;
use CoreApp\Helpers\RoleHelper;
use CoreApp\Helpers\ThrowAndLogErrors;
use CoreApp\Services\BaseServices;
use CoreApp\Helpers\UuidHelper;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;</p><p>class PeopleService extends BaseServices {
use RoleHelper;
use ThrowAndLogErrors;
use UuidHelper;</p><pre><code>/**
* @var User
*/
private $user;
public $rulesCreate = [
'email' =&amp;gt; 'required|email'
];
public function __construct(UserService $user)
{
$this-&amp;gt;user = $user;
}
public function getAll()
{
try
{
$user_id = Auth::user()-&amp;gt;id;
if($this-&amp;gt;isInRole($user_id, ['role-admin']))
{
$results = $this-&amp;gt;user-&amp;gt;all();
} else {
$results = [];
}
}
catch(NotInRoleException $e)
{
$results = [];
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function getOne($uuid)
{
try
{
if($this-&amp;gt;isAdminRoleOrOwner($uuid))
{
$results = $this-&amp;gt;user-&amp;gt;getPerson($uuid);
} else {
$results = [];
}
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function updatePerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
try
{
$user = User::findOrFail($store['id']);
$store = (array) $store;
$user-&amp;gt;email = $store['email'];
(isset($store['image'])) ? $user-&amp;gt;image = $store['image'] : false;
$user-&amp;gt;save();
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error updating team %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
public function postPerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
$user = new User();
try
{
/**
* @TODO move this into a CoreApp service
* I am moving away from the BehatEditor Service
*/
$uuid = (!isset($store['id'])) ? $this-&amp;gt;generateNewId()-&amp;gt;toString() : $store['id'];
$user-&amp;gt;id = $uuid;
$user-&amp;gt;email = $store['email'];
$user-&amp;gt;password = Hash::make(Str::random(32));
$user-&amp;gt;image = $user-&amp;gt;default_image;
$user-&amp;gt;save();
$user = User::with('roles')-&amp;gt;find($uuid); //due to uuid work
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error creating user %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
protected function syncRoles($user, $store)
{
if(isset($store['roles']))
{
foreach($store['roles'] as $role)
{
$roles[] = $role['id'];
}
$user-&amp;gt;roles()-&amp;gt;sync($roles);
}
return $user;
}</code></pre><p>}</code></pre></p></description><tags>laravel, php, angular</tags></item><item><title>Laravel Blade and Angular brackets</title><link>https://alfrednutile.info/posts/124/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/124/</guid><description><p>I use one AngularController.php to render main.blade.php file that then renders angular. The only other blade file is the login page.
I could have done this in the routes.php file but since the routes file has the login page I decided to place it in this controller.</p><pre><code>&lt;?php namespace App\Http\Controllers;<p>use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\View;
use Laracasts\Utilities\JavaScript\Facades\JavaScript;</p><p>/**</p><ul><li><p>@Middleware("auth")
*/
class AngularController extends BaseController {</p><p>use UserHelper;</p><p>/**</p><ul><li>@var UserService
*/
private $userService;</li></ul><p>public function __construct(UserService $userService)
{
$this->userService = $userService;
}</p><p>/**</p><ul><li><p>@Get("behat", as="behat.dash")
*/
public function index()
{</p><p>Blade::setContentTags('&lt;%', &lsquo;%>'); // for variables and all things Blade
Blade::setEscapedContentTags('&lt;%%&rsquo;, &lsquo;%%>'); // for escaped data
$user_id = $this->getUserId();
$profile = $this->userService->getPerson($user_id);
$token = csrf_token();
$chat_on = Config::get(&lsquo;app.chat_on&rsquo;, true);
JavaScript::put(
[
&lsquo;pusher_public_key&rsquo; => $_ENV[&lsquo;PUSHER_PUBLIC&rsquo;],
&lsquo;sauce_key&rsquo; => $_ENV[&lsquo;SAUCE_TOKEN&rsquo;],
&lsquo;sauce_user&rsquo; => $_ENV[&lsquo;SAUCE_USER&rsquo;],
&lsquo;profile&rsquo; => $profile,
&lsquo;token&rsquo; => $token,
&lsquo;debug&rsquo; => Config::get(&lsquo;app.debug&rsquo;),
]
);
return View::make(&lsquo;layouts.main&rsquo;, compact(&lsquo;chat_on&rsquo;));
}</p></li></ul></li></ul><p>}</code></pre><p>Thanks to<a href="http://scotch.io/bar-talk/quick-tip-using-laravel-blade-with-angularjs"><a href="http://scotch.io/bar-talk/quick-tip-using-laravel-blade-with-angularjs">http://scotch.io/bar-talk/quick-tip-using-laravel-blade-with-angularjs</a></a> for the tip</p></p></description><tags>note2self, angularjs, laravel</tags></item><item><title>Embed Template Data in View (Angular, Laravel)</title><link>https://alfrednutile.info/posts/122/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/122/</guid><description><p>Sometimes, when your frontend shares the same view rendering of the backend, you can store data in the window object. This can save you queries to the backend when, for example, Profile Data that shows on every pages request.</p><p><img src="https://dl.dropboxusercontent.com/s/app0y31xxi3uk80/profile_example.png?dl=0" alt="profile"/><h1 id="embed-output-into-window-or-window">Embed output into window or $window</h1><p>In the Controller I am using to output the Angular template (app/views/main.blade.php for example) I inject the window data that I want all pages to have.</p><pre><code> public function index()
{
$user_id = $this->getUserId();
$profile = $this->userService->getJustProfile($user_id);
$token = csrf_token();
JavaScript::put(
[
'profile' => $profile,
'token' => $token
]
);
return View::make('layouts.main');
}</code></pre><p>So every time the template is rendered it will add this data to the output. Later on I make use of that inside my Angular app using a MainCtrl.</p><h1 id="mainctrl-wrapping-it-all">MainCtrl Wrapping it All</h1><pre><code>&lt;body ng-controller="MainCtrl as main"></code></pre><p>This controller gets called at every page load to setup this base info for the site.</p><pre><code>(function(){
'use strict';<pre><code>function MainCtrl($rootScope, $window) {
var vm = this;
vm.profile = {};
vm.activate = activate;
vm.activate();
///////
function activate()
{
vm.profile = $window.profile;
}
}
/**
*
* Pass all functions into module
*/
angular
.module('app')
.controller('MainCtrl ', MainCtrl)</code></pre><p>})();</code></pre><h1 id="template-calling-to-main">Template calling to Main</h1></p><p>Now on those page that renders the profile image, name and email on the top left of the site I call to that scope.</p><pre><code>&lt;nav class="navbar-default navbar-static-side" role="navigation">
&lt;div class="sidebar-collapse">
&lt;ul side-navigation class="nav" id="side-menu">
&lt;li class="nav-header"><pre><code> &amp;lt;div class=&amp;quot;dropdown profile-element&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-6 col-md-6 col-sm-6 col-xs-6&amp;quot;&amp;gt;
&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;
&amp;lt;img alt=&amp;quot;image&amp;quot; class=&amp;quot;img-responsive img-circle&amp;quot; src=&amp;quot;img/profiles/{{main.profile.image}}&amp;quot;/&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;dropdown-toggle&amp;quot; href&amp;gt;
&amp;lt;span class=&amp;quot;clear&amp;quot;&amp;gt;
&amp;lt;span class=&amp;quot;block m-t-xs&amp;quot;&amp;gt;
&amp;lt;strong class=&amp;quot;font-bold&amp;quot;&amp;gt;
{{ main.profile.email }}
&amp;lt;/strong&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;text-muted text-xs block&amp;quot;&amp;gt;Profile&amp;lt;b class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;ul class=&amp;quot;dropdown-menu animated fadeInRight m-t-xs&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;Profile&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/auth/logout&amp;quot;&amp;gt;Logout&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;logo-element&amp;quot;&amp;gt;
BE
&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;</code></pre><p/></pre></p></description><tags>php, laravel, angularjs</tags></item><item><title>Quick fixture data and mocking external APIs</title><link>https://alfrednutile.info/posts/121/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/121/</guid><description><p>We are using a number of external APIs on a project (Pusher, Iron.io, Github, Saucelabs etc). Github is key as we are using it to store and retrieve files from for editing on the site. When running phpunit it is easy to mock these Classes but when running behat tests or protractor we had to do to things to make it possible to mock the tests and not hit the external APIs.</p><h1 id="swapping-out-providers">Swapping out Providers</h1><p>Using Laravel&rsquo;s config/app.php settings we can easily swap out providers for different environments. For example config/testing/app.php could register my GithubMock class.</p><p>The GithubMock class just extends the real Github Service but overrides the methods that I do not want to really call out to Github eg create file, update file etc.</p><p>That is super easy but now how to return good data.</p><h1 id="quick-fixtures">Quick Fixtures</h1><p>I made a Facade package called Fixturizer<a href="https://github.com/alfred-nutile-inc/fixturizer">https://github.com/alfred-nutile-inc/fixturizer</a></p><p>You can see in the readme.md how to use it to quickly write and read fixture data that you can get from any of these requests. Then when it is the turn of the mocked provider to return the results it just loads up this fixture and you are set. (PHP VCR is another option as well)</p><p>One example</p><pre><code> public function tokens($path)
{
$this->logMock('tokens');
$files = FixturizerReader::getFixture('github_token_show.yml', $this->path);
return $files;
}</code></pre><p>The method overrides the parent class (the real provider) &ldquo;tokens&rdquo; and returns the needed fixture info. I log it as well so I can double check the status of it.</p><p>Now the tests not only run faster but are less fragile since sometimes the services would timeout.</p></description><tags>laravel, php</tags></item><item><title>Mocking Queue Service for faster Behat Testing</title><link>https://alfrednutile.info/posts/120/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/120/</guid><description><p>As I wrote about<a href="http://www.alfrednutile.info/posts/103/edit">here</a> I am using behat to tests our APIs. I could have used Laravel&rsquo;s guzzle and phpunit integration to test the controllers but I decided to go with Behat. But this means when hitting those endpoints I need to find another way to mock services.</p><p>Since Laravel has you register Providers you can easily replace or override a provider. In this case the &ldquo;&lsquo;Illuminate\Queue\QueueServiceProvider&rsquo;&rdquo; provider with my own.</p><p>This allows me to test in my endpoints leaving the queue related classes to be tested during phpunit testing. Using the queue &ldquo;sync&rdquo; driver would help too but it would then cause this to not be an isolated tests since the queue would trigger another classes method. (@fire).</p><h2 id="setup-a-class-to-use-as-the-new-provider">Setup a class to use as the new provider</h2><pre><code>&lt;?php<p>namespace App\Providers;</p><p>use Illuminate\Queue\QueueServiceProvider;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\ServiceProvider;
use Mockery as m;</p><p>class MockedQueue {
public function push($args)
{
return true;
}
}</p><p>class QueueMockProvider extends QueueServiceProvider {</p><pre><code>/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(getenv('APP_ENV') == 'local' || getenv('APP_ENV') == 'testing')
{
$this-&amp;gt;app-&amp;gt;bind('queue', function(){
$queue = new MockedQueue();
Log::info(&amp;quot;Mock queue in use&amp;quot;);
return $queue;
});
} else {
parent::register();
}
}</code></pre><p>}</code></pre><h2 id="register-mocked-queue-over-real-queue">Register Mocked Queue over Real Queue</h2></p><p>Instead of setting it for config/local/queue.php and config/testing/queue.php I set it in the main config/app.php. I would like to come back to using the config/app.php but had some issues.</p><pre><code>'Illuminate\Queue\QueueServiceProvider',</code></pre><p>becomes</p><pre><code>'App\Providers\QueueMockProvider',</code></pre><p>That was it. From there on my queue related API tests did not trigger a queued job which in this case was supper helpful those where calling external APIs.</p></description><tags>behat, laravel, php</tags></item><item><title>Docker, MailCatcher and Laravel</title><link>https://alfrednutile.info/posts/118/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/118/</guid><description><p>I wrote an article on Mailcatcher and Homestead<a href="http://www.alfrednutile.info/posts/93">here</a> but as I move into docker I wanted the same setup for my docker website container which was super easy.</p><p>First I downloaded this<a href="https://registry.hub.docker.com/u/schickling/mailcatcher/">docker images</a> and ran the command as he noted. Once done I had the website up and running.</p><p><img src="https://dl.dropboxusercontent.com/s/w1mxwcw8129raxg/docker_behat.png?dl=0" alt="mailcatcher_docker"/><p>From there I just started my website container and made a link.</p><pre><code>docker run -d -p 80:80 --name website --link mailcatcher:mailcatcher -v $PWD:/share alnutile/nginxlaravel:0.3.4 /sbin/my_init</code></pre><p>From there I was able to use the server set environments to connect to it as needed. Or more simply I just updated my local/mail.php as follows</p><pre><code>&lt;?php<p>return array(</p><pre><code>'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; getenv('MAILCATCHER_PORT_1080_TCP_ADDR'),
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'foobar@gmail.com', 'name' =&amp;gt; 'Behat Editor Admin'),
'encryption' =&amp;gt; '',
'username' =&amp;gt; null,
'password' =&amp;gt; null,
'pretend' =&amp;gt; false,</code></pre><p>);</p><p/></pre><p>Now I get to see the email as a user would see it and click around as needed!</p></p></description><tags>laravel, php</tags></item><item><title>Redirecting back to original Angular.js destination from Laravel Auth</title><link>https://alfrednutile.info/posts/119/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/119/</guid><description><p><strong>UPDATE</strong></p><p>You can see in the<a href="https://www.alfrednutile.info/posts/119#comment-2448723710">comments</a> some updated info.</p><p>When a user visits an Angular url (not html5) like<a href="http://foo.com/app#some/long/path">http://foo.com/app#some/long/path</a></p><p>Then gets redirected to<a href="http://foo.com/auth/login">http://foo.com/auth/login</a> because they are not logged in. It would be nice to send them right back after that.</p><p>These steps will make that possible.</p><p>Include this file in your authentication page.</p><pre><code>#intended.js
(function(){
'use strict';<pre><code>var intended = window.location.hash;
(intended.length &amp;gt; 0) ? jQuery.cookie('intended', '/app' + intended) : jQuery.cookie('intended', '/app');</code></pre><p>})();</code></pre><p>Then add this library to your app jquery.cookies.js and load that, this script and of course jquery.</p></p><p>Finally after an successful auth add this</p><pre><code>return Redirect::to($_COOKIE['intended']);</code></pre><p>Laravel 4.2 = app/controllers/AuthController.php:61</p><p>Laravel 5 = app/Http/Controllers/AuthController.php:52</p></description><tags>laravel, php, angular</tags></item><item><title>Laravel and Angular Time/Date Display</title><link>https://alfrednutile.info/posts/114/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/114/</guid><description><p>Angular seems to, by default, easily deal with milliseconds,<a href="https://docs.angularjs.org/api/ng/filter/date">https://docs.angularjs.org/api/ng/filter/date</a>.</p><p>Laravel outputs created_at as a YYYY-MM-DD HH:MM:SS format that just does not work well with the Angular date filter.</p><p>It is really simple to change the output of the date in Laravel just add this to your Model or BaseModel or even better Trait</p><pre><code> /**
* Leave as Timestamps for Angular
* @return array
*/
public function getDates()
{
return [];
}<pre><code>public function getCreatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
public function getUpdatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}</code></pre><p/></pre><p>This is noted in the docs as well<a href="http://laravel.com/docs/4.2/eloquent#date-mutators"><a href="http://laravel.com/docs/4.2/eloquent#date-mutators">http://laravel.com/docs/4.2/eloquent#date-mutators</a></a> and<a href="http://laravel.com/docs/4.2/eloquent#accessors-and-mutators"><a href="http://laravel.com/docs/4.2/eloquent#accessors-and-mutators">http://laravel.com/docs/4.2/eloquent#accessors-and-mutators</a></a></p></p><p>Then in Angular I can easily format the date</p><pre><code>&lt;small>Created: {{ project.created_at | date:'yyyy-MM-dd' }}&lt;/small></code></pre></description><tags>laravel, php</tags></item><item><title>Moving Forge Deploy Script to Envoy</title><link>https://alfrednutile.info/posts/115/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/115/</guid><description><p>As we start to move off of Forge I still want the automation to take place after all tests pass.</p><p>In Codeship or Locally I just follow some instructions from here<a href="http://laravel.com/docs/4.2/ssh">http://laravel.com/docs/4.2/ssh</a></p><h1 id="locally">Locally</h1><p>Setup Envoy globally as noted.</p><p>Run envoy init</p><p>And then I pasted this into my Envoy.blade.php</p><pre><code>@servers(['dev' => 'behat_dev'])<p>@task(&lsquo;deploy_dev&rsquo;, [&lsquo;on&rsquo; => &lsquo;dev&rsquo;])
date
cd /home/forge/foo-dev
git pull origin dev
composer config -g github-oauth.github.com sometoken
composer install
composer dump-autoload
php artisan dump-autoload
php artisan migrate
php artisan migrate:refresh &ndash;seed
~/node_modules/bower/bin/bower install
npm install
php artisan queue:restart
@endtask</code></pre><h1 id="setup-you-ssh-config">Setup you .ssh config</h1></p><p>The behat_dev is a shortcut to the server I made in my ~/.ssh/config</p><pre><code>Host foo_dev
Hostname 104.111.111.111
User forge</code></pre><p>So now locally I can run</p><pre><code>envoy run deploy_dev</code></pre><h1 id="codeship">Codeship</h1><p>Setup the server</p><pre><code>sudo composer global require "laravel/envoy=~1.0"</code></pre><p>Edit your ~/.ssh/config</p><pre><code>Host behat_dev
Hostname localhost
User forge</code></pre><p>Make sure to put your key into authorized keys</p><pre><code>cd .ssh
cat id_rsa.pub >> authorized_keys</code></pre><p>Try logging in</p><pre><code>ssh behat_dev</code></pre><p>Then setup codeship</p><p>Under the Deployment settings use script</p><pre><code>ssh forge@104.111.111.111 'cd ~/foo-dev &amp;&amp; envoy run deploy_dev'</code></pre><p>Make sure you codeship public key is also on the destination server</p></description><tags>laravel, php</tags></item><item><title>Laravel 4.2 and Dotenv to set environment</title><link>https://alfrednutile.info/posts/113/</link><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/113/</guid><description><p>To start using Dotenv now it is very simple.</p><h1 id="one-include-the-library">One include the library</h1><pre><code>#composer.js
"require": {
"laravel/framework": "4.2.*",
"vlucas/phpdotenv": "1.0.*@dev"
},</code></pre><h1 id="two-update-your-startphp">Two update your start.php</h1><pre><code>#bootstrap/start.php line 27
Dotenv::load(__DIR__ .'/../');<p>$env = $app->detectEnvironment(
function()
{
return getenv(&lsquo;APP_ENV&rsquo;);
}
);</p><p/></pre><h1 id="make-sure-to-set-your-env-file">Make sure to set your .env file</h1></p><pre><code>#.env
APP_ENV='local'</code></pre><p>That is it you are set to use it for all your environments.</p><p><strong>Update</strong></p><p>For Heroku I used this instead</p><pre><code>$env = $app->detectEnvironment(
function()
{
if(!isset(getenv('APP_ENV')))
{
Dotenv::load(__DIR__ .'/../');
}
return getenv('APP_ENV');
}
);</code></pre><p>Setting the initial APP_ENV using heroku config:set APP_ENV=stage</p></description><tags>laravel, php</tags></item><item><title>Speeding up PHPunit tests and Behat in Laravel for Database refreshes</title><link>https://alfrednutile.info/posts/112/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/112/</guid><description><p>This<a href="http://www.chrisduell.com/blog/development/speeding-up-unit-tests-in-php/">article</a> covers some good tips on this. Ideally you do not hit the database in unit tests but sometimes you do. Also in behat it hits the db all the time since it is at the Acceptance level.</p><h1 id="sqlite">Sqlite</h1><p>It is a great database and works. We easily can use it on running tests. When seeding the db I have my main seeding class doing this</p><pre><code>&lt;?php<p>use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;</p><p>class DatabaseSeeder extends Seeder {</p><pre><code>/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Model::unguard();
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
$this-&amp;gt;call('ParentRequestExample');
$this-&amp;gt;call('ProductionSeeder');
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}</code></pre><p>}</p><p/></pre><p>Since sqlite does not like this we skip it for it but not for production etc.</p></p><p>Second my config/testing/database.php looks like this (as noted in the article)</p><pre><code>&lt;?php<p>return [</p><pre><code>'default' =&amp;gt; 'sqlite',
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; $_ENV['DB_URL'],
'database' =&amp;gt; $_ENV['DB_NAME'],
'username' =&amp;gt; $_ENV['MYSQL_USER'],
'password' =&amp;gt; $_ENV['MYSQL_PASSWORD'],
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
],
'pgsql' =&amp;gt; [
'driver' =&amp;gt; 'pgsql',
'host' =&amp;gt; 'localhost',
'database' =&amp;gt; 'homestead',
'username' =&amp;gt; 'homestead',
'password' =&amp;gt; 'secret',
'charset' =&amp;gt; 'utf8',
'prefix' =&amp;gt; '',
'schema' =&amp;gt; 'public',
],
'setup' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__.'/../../database/stubdb.sqlite',
'prefix' =&amp;gt; '',
),
'sqlite' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__ . '/../../database/testing.sqlite',
'prefix' =&amp;gt; '',
),
],</code></pre><p>];</code></pre><p>Which makes the below seeding command to setup the stub db work</p></p><pre><code>php artisan migrate:refresh --seed --database="setup" --env="testing"</code></pre><h1 id="phpunit">PHPUnit</h1><p>What I ended up with is a base TestCase like this</p><pre><code>
public function setUp()
{
parent::setUp();
$this->faker = Faker::create();
$this->prepareForTests();
}<pre><code>private function prepareForTests()
{
if(!file_exists(base_path() . '/app/database/testing.sqlite'))
{
$this-&amp;gt;refreshDb();
}
}
public function refreshDb()
{
copy(base_path() . '/app/database/stubdb.sqlite', base_path() . '/app/database/testing.sqlite');
}</code></pre><p/></pre><p>And with any new migrations I run this command</p></p><pre><code>php artisan migrate:refresh --seed --database="setup" --env="testing"</code></pre><p>That file is kept in git since it is just seed data. If there are any conflicts just rm and start over. Testing.sqlite is not kept in git.</p><p>#Behat</p><p>Behat is the same idea. In the main FeatureContext file I have</p><pre><code>
/**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
try
{
dd(getenv('APP_ENV'));
//exec("php artisan migrate:refresh --seed");
copy(__DIR__ . '/../../../../database/stubdb.sqlite', __DIR__ . '/../../../../database/testing.sqlite');
}
catch(\Exception $e)
{
throw new \Exception(sprintf("Error seeding the database %s", $e->getMessage()));
}
}</code></pre><p>So as we test the ui or api we can reload the data.</p><p>#Behat / Laravel</p><p>This package<a href="https://github.com/GuilhermeGuitte/behat-laravel">https://github.com/GuilhermeGuitte/behat-laravel</a></p><p>This integrates behat into artisan command line helping with environment settings for behat.</p></description><tags>laravel, php, behat, phpunit</tags></item><item><title>Angular Pusher Factory to Centralize Code (also using Laravel to set constants and properties)</title><link>https://alfrednutile.info/posts/111/</link><pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/111/</guid><description><p>This will cover</p><ul><li>Making an Angular factory to centralize Pusher setup in Angular</li><li>Passing settings form Laravel to Angular (though could be just Angular and a .env file as well)</li><li>Passing Constants into the Angular App to pass these settings around, in this case to the Pusher Factory.</li></ul><h2 id="setup-your-constants">Setup your constants</h2><p>This is where I call in the info I need to use later on.</p><pre><code>(function(){<p>function config($stateProvider, $urlRouterProvider) {
$urlRouterProvider.otherwise("/dashboard");
$stateProvider
.state(&lsquo;dashboard&rsquo;, {
url: "/dashboard",
views: {
&lsquo;': {
controller: &lsquo;DashCtrl&rsquo;,
controllerAs: &lsquo;vm&rsquo;,
resolve: {
reports: [&lsquo;ReportsService&rsquo;, function(ReportsService)
{
return ReportsService.get();
}]
},
templateUrl: "/assets/js/dashboard/templates/dashboard.html"
};
}</p><p>function constants() {
return { &lsquo;pusher_public_key&rsquo;: window.pusher_public_key }
}</p><p>angular
.module(&lsquo;app&rsquo;)
.config(config)
.constant(&lsquo;ENV&rsquo;, constants())
.run(function($rootScope, $state) {
$rootScope.$state = $state;
});
})();</code></pre><p>So now we have the constants in place that are used by our factory below</p></p><h2 id="the-pusher-factory">The Pusher Factory</h2><pre><code>(function(){
'use strict';
function PusherService(ENV)
{
var vm = this;
vm.pusher = {};
vm.ENV = ENV; //We set this up above on the constants area.
vm.channelSet = {};
vm.activate = activate;
vm._subscribeToChannel = _subscribeToChannel;
vm._channelBind = _channelBind;<pre><code> vm.PusherService = {
setPusher: setPusher
};
vm.activate();
////
function activate()
{
console.log(vm.ENV);
vm.pusher = new Pusher(vm.ENV.pusher_public_key);
}
function setPusher(channel, event, callback)
{
vm._subscribeToChannel(channel);
vm._channelBind(event, callback);
}
function _subscribeToChannel(channel)
{
vm.channelSet = vm.pusher.subscribe(channel);
}
function _channelBind(event_name, callback)
{
vm.channelSet.bind(event_name, callback);
}
return vm.PusherService;
}
angular.module('app')
.factory('PusherService', PusherService);</code></pre><p>})();</code></pre><h2 id="laravel-now-need-to-load-the-settings-in-the-env-file-so-angular-can-access-them-later">Laravel now need to load the settings in the .env file so Angular can access them later.</h2></p><p>Of course this could purely be Angular.js loading them from a config file that is not in git but relative to a server, local dev area etc.</p><p>I set this all up user<a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">https://github.com/laracasts/PHP-Vars-To-Js-Transformer</a></p><p>I run the config command<em>note the change</em></p><pre><code>php artisan publish:config laracasts/utilities</code></pre><p>Then I edit that file</p><pre><code>config/packages/laracasts/utilities/config.php</code></pre><p>To be</p><pre><code>&lt;?php<p>return [</p><pre><code>/*
|--------------------------------------------------------------------------
| View to Bind JavaScript Vars To
|--------------------------------------------------------------------------
|
| Set this value to the name of the view (or partial) that
| you want to prepend the JavaScript variables to.
|
*/
'bind_js_vars_to_this_view' =&amp;gt; 'layouts/main',
/*
|--------------------------------------------------------------------------
| JavaScript Namespace
|--------------------------------------------------------------------------
|
| By default, we'll add variables to the global window object.
| It's recommended that you change this to some namespace - anything.
| That way, from your JS, you may do something like `Laracasts.myVar`.
|
*/
'js_namespace' =&amp;gt; 'window'</code></pre><p>];</code></pre><p>The resources/views/layouts/main.blade.php the only trick here is any Angular related {{ brackets need to be @{{ to tell blade to ignore them.</p></p><p>Finally my AngularController which renders the ONE page Laravel is in charge of besides login.</p><pre><code>&lt;?php namespace App\Http\Controllers;<p>use Laracasts\Utilities\JavaScript\Facades\JavaScript;</p><p>/**</p><ul><li><p>@Middleware("auth")
*/
class AngularController extends BaseController {</p><p>/**</p><ul><li>@Get("dash", as="dash")
*/
public function index()
{
JavaScript::put([
&lsquo;pusher_public_key&rsquo; => $_ENV[&lsquo;PUSHER_PUBLIC&rsquo;]]);
return view(&lsquo;layouts.main&rsquo;);
}</li></ul></li></ul><p>}</code></pre><p>If you have more than on View the share option might work<a href="http://laravel.com/docs/master/views"><a href="http://laravel.com/docs/master/views">http://laravel.com/docs/master/views</a></a></p></p></description><tags>angular, laravel</tags></item><item><title>CSRF Tokens and Angular.js</title><link>https://alfrednutile.info/posts/110/</link><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/110/</guid><description><p>This is key to preventing<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery</a>. Basically you log in and do some work on one site, then go to a malicious site and now they can send POST requests to the sites you have authentication to. But by passing a token we can prevent that issue.</p><p>The steps</p><ul><li>Make a token path</li><li>Make a token service to use again and again in Angular.js</li><li>Add it as a resolve to the route in Angular.js</li><li>Add it to your forms</li></ul><h2 id="make-a-token-path">Make a token path</h2><p>In this case it is Laravel and I just add this route (in a Controller or route.php same idea)</p><pre><code> /**
* @Get("auth/token")
*/
public function getToken()
{
return csrf_token();
}</code></pre><h2 id="make-your-angular-service-and-inject-it-into-the-controller">Make your Angular Service and inject it into the Controller</h2><p>Service in this case is</p><pre><code>(function(){
'use strict';<pre><code>function TokenService($http)
{
return {
get: get
};
////
function get() {
return $http.get('auth/token').then(
success,
fail
);
}
function success(response) {
return response;
}
function fail(response) {
return response;
}
}
angular
.module('app')
.factory('TokenService', TokenService);</code></pre><p>})();</code></pre><p>The ui router passes it in on this POST related route</p></p><pre><code> .state('projects_create', {
url: '/projects/create',
views: {
'': {
templateUrl: 'assets/js/projects/templates/projects.edit.html',
resolve: {
project: ['ProjectsService', function(ProjectsService){
return ProjectsService.create();
}],
token: ['TokenService', function(TokenService) {
return TokenService.get();
}]
},
controller: 'ProjectsCreateCtrl',
controllerAs: 'vm'
}
}
})</code></pre><p>Since it is a promise and in the resolve we get the benefits of not loading the page till this is done loading. A nice addition here could be getting is current_user info etc.</p><p>Add it to your Angular Controller</p><pre><code> function ProjectsCreateCtrl(project, token, ProjectHelpers, $window, Noty)
{
var vm = this;
vm.token = token.data;</code></pre><p>Later, using<a href="https://github.com/mgonto/restangular">Restangular</a>, during the post I add it to the payload. So when the user clicks Create Project they trigger this.</p><pre><code>function saveProject()
{
vm.rest.route = 'api/v1/projects';
vm.rest._token = vm.token;
vm.rest.post()
.then(function(response) {
vm.success(response);
}, function(response){
vm.fail(response);
});
}</code></pre><p>That is it. You can see it in the form</p><p><img src="https://dl.dropboxusercontent.com/s/hilfee68v8acyx7/intheform.png?dl=0" alt="form"/><p>And you can remove it to show the form fail.</p><p>You can also see it in the payload we are posting.</p><p><img src="https://dl.dropboxusercontent.com/s/4vy90lut4l12o55/Screenshot%202014-10-15%2014.38.35.png?dl=0" alt="post"/></description><tags>angularjs, laravel, l5, csrf</tags></item><item><title>Temporary Auth Updates L5</title><link>https://alfrednutile.info/posts/109/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/109/</guid><description><h1 id="auth-updates">Auth updates</h1><p>First make sure your composer update has the latest Laravel and check that
there are not relevant fixes already via laravel/docs master laravel/framework master or laravel/laravel dev</p><p>Moved evn files to the new format and only 1 is needed now having the</p><pre><code>APP_ENV='local'</code></pre><p>setting for the environment.</p><p>Then update the path in the AuthController to go to auth/login</p><pre><code>#app/Http/Controllers/Auth/AuthController<pre><code>public function login(LoginRequest $request)
{
if ($this-&amp;gt;auth-&amp;gt;attempt($request-&amp;gt;only('email', 'password')))
{
return redirect('/');
}
return redirect('/auth/login')-&amp;gt;withErrors([
'email' =&amp;gt; 'The credentials you entered did not match our records. Try again?',
]);
}</code></pre><p/></pre><p>Here is a good article on using annotations which are needed now in the controller.</p></p><p><a href="http://mattstauffer.co/blog/laravel-5.0-route-annotations">http://mattstauffer.co/blog/laravel-5.0-route-annotations</a></p><p>For example I remove api/v1/projects from routes.php (which is key it can not be in both)</p><p>Then in the ProjectsController.php I added this to the top of the class</p><pre><code>/**
* @Middleware("BehatEditor\Http\Middleware\AuthMiddleware")
* @Before("auth")
*/
class ProjectsController extends BaseController {</code></pre><p>and in the index function</p><pre><code>
/**
* @Get("api/v1/projects", as="api.v1.projects")
* @return mixed
*/
public function index()
{
try
{
$results = $this->service->getAllProjectsForThisUser();
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this->responseServices->respond($results, "Loaded Projects"), 200);
}
catch(\Exception $e) {
return Response::json($this->responseServices->respond($e->getMessage(), "Error Getting Project Failed"), 422);
}<pre><code>}</code></pre><p/></pre><p>So the route is now api/v1/projects using Get and the route name for ease of use is api.v1.projects</p></p><p>Then I ran</p><pre><code>php artisan route:scan</code></pre><p>to get this file made for me</p><pre><code>storage/framework/routes.scanned.php</code></pre><p>Inside we see</p><pre><code>&lt;?php<p>$router->get(&lsquo;auth/login&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@showLoginForm&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->post(&lsquo;auth/login&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@login&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;auth/logout&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@logout&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;api/v1/sites/reports&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\DashController@getDash&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;sites.reports&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;api/v1/projects&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\ProjectsController@index&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;api.v1.projects&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;sites&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\SitesController@index&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;sites.index&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);</p><p/></pre><p>All the App namespaces can really be your App or the default Laravel app files.</p></p><p>This file is auto generated from that command so do not edit it.</p><p>The one we just made is</p><pre><code>$router->get('api/v1/projects', ['uses' => 'App\Http\Controllers\ProjectsController@index', 'domain' => NULL, 'as' => 'api.v1.projects', 'middleware' => array (
0 => 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' => array (
)]);</code></pre></description><tags>laravel, laravel 5, auth</tags></item><item><title>Multi Threaded Queue Processing</title><link>https://alfrednutile.info/posts/106/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/106/</guid><description><p>I needed a way to run a bunch of jobs in parallel and I am use to using the Symfony Process Component for that.</p><p>So this post will show how I did this in Laravel 4.3 via the Queue so I can remember next time.</p><p>What will come out of this is a workflow as seen here</p><div markdown=0><img src="ttps://dl.dropboxusercontent.com/s/url0i1ibk40u5o7/Screenshot%202014-09-10%2007.59.23.png?dl=" width="0"/><p>We will create two Artisan Commands. This allows us to use Symfony Process to run numerous<strong>console commands</strong> in the background.</p><p>I will not go over how to add a job to the queue there is plenty on that. I will show the class I used for the Queue and it&rsquo;s attributes.</p><pre><code>{
"job":"Foo\\\\Reporting\\\\RequestsCommandQueueRunner",
"data":{
"results_uuid":"4a13aaee-4289-4f95-afe5-ea5abaaed869"
}
}</code></pre><p>This gets pushed into the Queue. It is the &ldquo;Parent&rdquo; that will run x number of children commands. The x is defined in my .env.local.php or .env.production.php files. This way I can increase or decrease the number of threads it will run as needed.</p><p>The results_uuid is the data I need to get the children. In this case the children have that uuid in their table as belongsTo that parent.</p><h2 id="requestscommandqueuerunner">RequestsCommandQueueRunner</h2><p>This Artisan command is quite simple</p><pre><code>&lt;?php<p>#app/Foo/RequestsCommandQueueRunner.php</p><p>namespace Foo\Reporting;</p><p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\QueueServices\QueueInterface;</p><p>class RequestsCommandQueueRunner implements QueueInterface {</p><pre><code>protected $job_limit;
protected $results_uuid;
public function __construct()
{
$this-&amp;gt;job_limit = $_ENV['RESULTS_QUEUE_LIMIT'];
}
public function fire($job, $params)
{
$this-&amp;gt;results_uuid = $params['results_uuid'];
exec(&amp;quot;php artisan request:trigger $this-&amp;gt;results_uuid&amp;quot;, $results);
$job-&amp;gt;delete(); //@TODO make delete if all goes well catch error though and fail it
}</code></pre><p>}</code></pre><p>All it does is passes the parent id to the trigger command. Below is the trigger command.</p></p><p>Note too I am not using the job limit yet. Later I will make x number of Queue jobs as I divide the number of children that parent has by the limit set.</p><h2 id="requestsqueuecommand">RequestsQueueCommand</h2><pre><code>&lt;?php namespace Foo\Console;<p>#app/Foo/Console/RequestsQueueCommand.php</p><p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Process\Process;</p><p>class RequestsQueueCommand extends Command {</p><pre><code>protected $name = 'request:trigger';
protected $run = [];
protected $description = 'Trigger the running of related jobs';
protected $request_uuid;
protected $projects;
/**
* @var \Foo\Models\ReportingOverviewBatchRequestJob
*/
private $reporting_overview_batch_request_jobs;
public function __construct(
ReportingOverviewBatchRequestJob $reporting_overview_batch_request_jobs
)
{
parent::__construct();
$this-&amp;gt;reporting_overview_batch_request_jobs = $reporting_overview_batch_request_jobs;
}
public function fire()
{
$this-&amp;gt;request_uuid = $this-&amp;gt;argument('request_uuid');
$this-&amp;gt;setRelatedProjects();
$this-&amp;gt;setRun();
$this-&amp;gt;runRelatedProjectsCommand();
return &amp;quot;Fired&amp;quot;;
}
protected function getArguments()
{
return array(
array('request_uuid', InputArgument::REQUIRED, 'The uuid of the Request to trigger the jobs for'),
);
}
protected function setRelatedProjects()
{
$projects =
$this-&amp;gt;reporting_overview_batch_request_jobs-&amp;gt;getAllJobsForReportOverviewBatchRequestUuid($this-&amp;gt;request_uuid);
$this-&amp;gt;projects = $projects-&amp;gt;toArray();
return $this-&amp;gt;projects;
}
protected function setRun()
{
foreach($this-&amp;gt;projects as $project)
{
$this-&amp;gt;addToRun($project['id']);
}
}
protected function runRelatedProjectsCommand()
{
foreach($this-&amp;gt;run as $process)
{
$process-&amp;gt;start();
}
while(count($this-&amp;gt;run) &amp;gt; 0)
{
foreach($this-&amp;gt;run as $key =&amp;gt; $process)
{
if(!$process-&amp;gt;isRunning())
{
\Log::info(&amp;quot;Done running process&amp;quot;);
unset($this-&amp;gt;run[$key]);
}
}
}
}
protected function addToRun($project_id)
{
$this-&amp;gt;run[] = new Process(&amp;quot;php artisan request:run $project_id&amp;quot;);
}</code></pre><p>}</p><p/></pre><p>Here is where things get interesting. I begin the work of finding the children Ids then making an array of<strong>console commands</strong> to run using the children id as the argument I pass.</p></p><p>The Process Component allows me to<strong>start them in the background</strong> and then check on them while they are running.</p><p>Now for the command it runs &ldquo;php artisan request:run $project_id&rdquo;</p><h2 id="requestsjobruncommand">RequestsJobRunCommand</h2><p>This is the process that does the long running work. In this case logs into Github, get some info and reports on it.</p><pre><code>&lt;?php namespace Foo\Console;<p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\Services\RequestJobRunService;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;</p><p>class RequestsJobRunCommand extends Command {</p><pre><code>protected $name = 'request:run';
protected $description = 'Run the related job';
protected $job_uuid;
/**
* @var RequestJobRunService
*/
private $requestJobRunService;
/**
* Id of the job we will run
* @var
*/
protected $related_job;
public function __construct(RequestJobRunService $requestJobRunService)
{
parent::__construct();
$this-&amp;gt;requestJobRunService = $requestJobRunService;
}
public function fire()
{
$this-&amp;gt;job_uuid = $this-&amp;gt;argument('job_uuid');
$this-&amp;gt;loadTheJobsInfo();
$this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()-&amp;gt;authenticate();
$this-&amp;gt;getJobsAndCount();
return &amp;quot;Fired&amp;quot;;
}
protected function getJobsAndCount()
{
try {
$tests = $this-&amp;gt;getRelatedTests();
$tests_count = count($tests);
\Log::info(sprintf(&amp;quot;Updating ReportingOverviewRequest with uuid %s&amp;quot;, $this-&amp;gt;job_uuid));
$this-&amp;gt;related_job-&amp;gt;status = 1;
$this-&amp;gt;related_job-&amp;gt;number_of_tests = $tests_count;
$this-&amp;gt;related_job-&amp;gt;save();
} catch(\Exception $e) {
$this-&amp;gt;related_job-&amp;gt;status = 1; // mark done for now though a fail noted in message box
$this-&amp;gt;related_job-&amp;gt;message = $e-&amp;gt;getMessage();
$this-&amp;gt;related_job-&amp;gt;save();
\Log::error(sprintf(&amp;quot;Error processing job %s for request job request parent uuid %s error &amp;quot;, $this-&amp;gt;related_job-&amp;gt;id, $this-&amp;gt;related_job-&amp;gt;reporting_overview_batch_request_id, $e-&amp;gt;getMessage()));
}
}
protected function getRelatedTests()
{
try {
return $this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()
-&amp;gt;setReponame($this-&amp;gt;related_job-&amp;gt;repo_name)
-&amp;gt;setAccountName($this-&amp;gt;related_job-&amp;gt;account_name)
-&amp;gt;setBranch($this-&amp;gt;related_job-&amp;gt;branch)
-&amp;gt;index($this-&amp;gt;related_job-&amp;gt;folder);
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting index of github &amp;quot; . $e-&amp;gt;getMessage());
}
}
protected function loadTheJobsInfo()
{
$this-&amp;gt;related_job = $this-&amp;gt;requestJobRunService-&amp;gt;getReportingOverviewBatchRepository()-&amp;gt;getReportingOverviewBatchRequestJobsModelInterface()
-&amp;gt;findOrFail($this-&amp;gt;job_uuid);
}
protected function getArguments()
{
return array(
array('job_uuid', InputArgument::REQUIRED, 'The uuid of the related request job to run'),
);
}</code></pre><p>}</code></pre><p>There still is some work to do. I have to set the limit so my initial run does not timeout. I also need to clean up some code so that these classes are digging so deep into the other classes.</p></p><p>But this was just to show how to use Symfony Process Component, Laravel Queue, and Laravel Artisan to run a multi threaded task.</p></description><tags>laravel, php, note2self, 4.3</tags></item><item><title>Sorting related models in Laravel</title><link>https://alfrednutile.info/posts/104/</link><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/104/</guid><description><p>There are a number of related models to this one model that I store in the Models $relations property</p><pre><code> protected static $relations = [
'owner',
'apns',
'zoning_urls',
'structures.address',
'structures.comments.user.profiles',
'listings',
'attachments',
'structures.structure_type',
'property_owner',
'primary_property_type',
'address',
'property_specialist.profiles',
'listings.team'
];</code></pre><p>This allows me to easily reuse this for each query</p><pre><code>$found = $found->load(static::$relations);</code></pre><p>But there is one model I removed from that list to do a dynamic query/sorting on it</p><pre><code> $found = $this->property->with([
'verifiers' => function($query) {
$query->with('user.profiles')->orderBy('id', 'DESC');
},
])->findOrFail($id);
$found = $found->load(static::$relations);</code></pre><p>veifiers was part of the protected static $relations list but I moved it out since, for each query, I need to sort them from last to first.</p></description><tags>laravel, php, note2self</tags></item><item><title>Drush and Homestead Vagrant Box</title><link>https://alfrednutile.info/posts/100/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/100/</guid><description><p>Had some trouble doing the normal composer install so I went with the manual install noted here<a href="https://github.com/drush-ops/drush">https://github.com/drush-ops/drush</a></p><p>Basically I downloaded and unzipped the repo to /usr/local/sbin. Then I did a symlink to /usr/bin</p><pre><code>cd /usr/bin
sudo ln -s /usr/local/sbin/drush/drush .</code></pre><p>Then in /usr/local/sbin/drush I ran</p><pre><code>sudo composer install</code></pre></description><tags>drush, drupal, laravel, homestead</tags></item><item><title>Polymorphic relationship Laravel</title><link>https://alfrednutile.info/posts/99/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/99/</guid><description><p>This example will show a typical &ldquo;Attachment&rdquo; need. The Laravel docs really do cover alot as seen<a href="http://laravel.com/docs/eloquent#polymorphic-relations">here</a> especially<strong>&ldquo;Polymorphic Relation Table Structure”</strong>. I cover many to many polymorphic relationships<a href="http://www.alfrednutile.info/posts/95">here</a></p><p>I will cover an example of an Attachment that has some fields. And it is related to a model, in this example &ldquo;Post&rdquo;</p><p>Using the<a href="https://github.com/JeffreyWay/Laravel-4-Generators">Way Generators</a> to make this resource.</p><pre><code>php artisan generate:resource attachment --fields="attachable_type:string, attachable_id:integer, name:string, file_name:string, note:text, tag:string”</code></pre><p>As noted in the laravel docs our table for Attachments would look something like this</p><pre><code>post
id - integer
name - string
body - text<p>attachments
id - integer
file_name - string
attachable_id - integer
attachable_type - string</code></pre><p>So we are making a table/model Attachment. The model will use the “attachable” syntax to dynamically reference another model and model id.</p></p><p>In the Post model I set that this relationship exists</p><pre><code>#app/models/Post.php
public function attachments()
{
return $this->morphTo("Attachment", "attachable");
}</code></pre><p>The Attachment model file is this</p><pre><code>
&lt;?php
#app/models/Attachment.php
class Attachment extends \Eloquent {
protected $fillable = [
"attachable_type",
"attachable_id",
"name”,
“file_name”,
"note",
"tag"
];<pre><code>public function attachable()
{
return $this-&amp;gt;morphTo();
}</code></pre><p>}</code></pre><p>Finally if we where to seed the db or add content the table for Attachments would look like this</p></p><p><img src="https://photos-1.dropbox.com/t/0/AADRAfBTNcMG8puEahtElixkH6F6rsoCXD1zgM_aFoUiRQ/12/54803135/png/1024x768/3/1405868400/0/2/Screenshot%202014-07-20%2009.12.12.png/bA938wfNJbWkPlOIKMlD5gJKsBGGGJCH-RTweCGQqwk" alt="example"/><p>the attachable_type is the model class so if the namespace was Acme\Post then that would be &ldquo;Acme\Post</p><p>That is it. As long as you include it in your results you will see it in your output.</p></description><tags>laravel, php, note2self</tags></item><item><title>Many to Many Polymorphic Relations from Laravel to Angular and back</title><link>https://alfrednutile.info/posts/95/</link><pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/95/</guid><description><p>This will cover having a polymorphic relationship in Laravel, showing it on a form in Angular and saving it back to Laravel. Overall it is well documented<a href="http://laravel.com/docs/eloquent#many-to-many-polymorphic-relations">here</a> at the great docs at Laravel but this post might help in a few areas.</p><p>As someone defines Polymorphic Relationships there</p><blockquote><p>&ldquo;Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model. "</p></blockquote><h2 id="output-the-data-to-angular">Output the data to Angular</h2><p>Taking the User Model as an example I query the user but then before returning the data to Angular I append the polymorphic results. In this case we will call it Specialties</p><pre><code>protected function transformOutgoingData($data)
{
$data->specialties = $data->specialties()->getResults()->lists('id');
return $data;
}</code></pre><p>This returns just an array to Angular to deal with. When sending it an Object trouble getting Angular to set the selected options. The hard part, since by default it just worked, was to send not only the 2 selected Specialties but the 20 other possible ones and make the list out of that.</p><pre><code>#angular html file
&lt;div class="form-group" ng-if="userHasAdminRole(user)" markdown="1">
&lt;label>Specialties:&lt;/label>
&lt;select ng-options="specialty.id as specialty.name for specialty in user.specialties_all"
name="specialty"
multiple
ng-model="user.specialties"
ng-required="true"
class="form-control">
&lt;/select>
&lt;/div></code></pre><p>The specialties_all comes from the method I run on the data before output it which I do anyways on many data models. This comes right before the transformOutgoingData.</p><pre><code> protected function addDataToOutGoingModel($user)
{
$user = $this->addAllSpecialtiesToModel($user);
return $user;
}</code></pre><p>This way all my select lists on that page and other data lists, checkboxes etc have the data they need.</p><p>Finally when the person clicks Submit it is sent back to Laravel. So far I could not just save or update the user with this info. For example</p><pre><code>#app/models/User.php
public function update($user_id, $all)
{
$all = $this->transformIncomingData($all);
try {
$user = \User::findOrFail($user_id);
}
catch(\Expection $e){
throw new \Exception("User not found");
}<pre><code> $user-&amp;gt;update($all);
$user = $this-&amp;gt;saveDataToModel($user);
return $user;
}</code></pre><p/></pre><p>The $user->update($all); will crash with this extra “specialties” data coming in with this error.</p></p><blockquote><p>&ldquo;preg_replace(): Parameter mismatch, pattern is a string while replacement is an array&rdquo;</p></blockquote><p>So instead I do a step before and after</p><p>Before I run transformIncomingData and unset the $all[&lsquo;specialties&rsquo;] key I get from Input::all() and save that to a property</p><pre><code> protected function transformIncomingData($data)
{
$data = ( isset($data['specialties'])) ? $this->transformSpecialtiesIncoming($data) : $data;
return $data;
}</code></pre><p>which goes to</p><pre><code> protected function transformSpecialtiesIncoming($data)
{
$this->original_specialities = $data['specialties'];
unset($data['specialties']);
return $data;
}</code></pre><p>Then after I update the User I run saveDataToModel($user) which triggers this method</p><pre><code> protected function setSpecialties($user)
{
$user->specialties()->sync($this->original_specialities);
return $user;
}</code></pre><p>Finally back to Angular with the results.</p><p>Another good way to tie all this together is the Model Observer Pattern noted here<a href="http://laravel.com/docs/eloquent#model-observers">http://laravel.com/docs/eloquent#model-observers</a></p></description><tags>laravel, php, angular.js</tags></item><item><title>Laravel Homestead and MailCatcher</title><link>https://alfrednutile.info/posts/93/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/93/</guid><description><p>Using MailCatcher<a href="http://mailcatcher.me/">http://mailcatcher.me/</a> I can see the emails sent by the website.</p><p>First checkout<a href="https://github.com/fideloper/Vaprobash/pull/348">https://github.com/fideloper/Vaprobash/pull/348</a> to get your box ready
All I did was</p><h2 id="log-into-the-vagrant-box-and-run">Log into the vagrant box and run</h2><pre><code>sudo apt-get install libsqlite3-dev</code></pre><p>Then</p><pre><code>sudo apt-get install ruby1.9.1-dev -y
sudo gem install mailcatcher</code></pre><p>Then</p><pre><code>sudo gem install mailcatcher -V</code></pre><h2 id="set-your-mailphp-config">Set your mail.php config</h2><p>This is found in app/config and should be copied to app/config/local so it only applies to local</p><pre><code>#app/config/local/mail.php
&lt;?php
return array(<pre><code>'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; '192.168.33.10',
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'admin@test.com', 'name' =&amp;gt; 'Foo Bar'),
'encryption' =&amp;gt; '',</code></pre><p>// &lsquo;username&rsquo; => null,
// &lsquo;password&rsquo; => null,</p><p>);</code></pre><p>Finally reload vagrant</p></p><pre><code>vagrant reload</code></pre><p>And start up mailcatcher inside of vagrant.</p><pre><code>mailcatcher --ip=192.168.33.10</code></pre><p>And you are set. http://192.168.33.10:1080 works</p><h3 id="links">Links</h3><ul><li><a href="https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0">https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0</a></li></ul></description><tags>laravel, php, homestead</tags></item><item><title>Laravel Sentry and UUID</title><link>https://alfrednutile.info/posts/94/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/94/</guid><description><h2 id="update-october-10-1007">Update October 10 10:07</h2><p>Have hit a few issues with this model but still working okay.</p><p>To start this trait does some of the work to manage incoming POST data.</p><pre><code>&lt;?php namespace BehatEditor\Helpers;<p>use Rhumsaa\Uuid\Uuid;</p><p>trait UuidHelper {</p><pre><code>protected $uuid;
protected $saved;
public function getUuid()
{
return $this-&amp;gt;uuid;
}
public function setUuid($uuid = null)
{
if($uuid === null)
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
}
$this-&amp;gt;uuid = $uuid;
return $this;
}
/**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}
protected function setModelParamsIdWithUuid($params)
{
if(!isset($params['id'])) {
$this-&amp;gt;setUuid($this-&amp;gt;generateNewId()-&amp;gt;toString());
$params['id'] = $this-&amp;gt;getUuid();
}
$this-&amp;gt;uuid = $params['id'];
return $params;
}
public function dealWithUsingUuidNotReturningIdFromCreate($model)
{
$this-&amp;gt;saved = $model-&amp;gt;find($this-&amp;gt;uuid);
}</code></pre><p>}</code></pre><p>Here is an example of me using it.</p></p><pre><code>
/**
* Incoming Post request from the Controller to a Service and finally to this Repository Class.
*/
public function createNewBatch($batch)
{
try {
$this->post = $batch; //Incoming post data
$this->setRelatedObjectsFromPost(); //I deal with some of the related data or incoming data before hand
$setUuid = $this->setModelParamsIdWithUuid($batch); //this is the traits setting the UUID on the incoming POST data.
$this->batch->create($setUuid); //Finally I create using the auto-generated UUID OR the id/uuid that came in via the post
/**
* Again the trait takes care of this ONE issue I can not get around is returning the results of Create with the an ID
* It works and saves the data but the ID is missing. Though looking at Eloquent this most likely is because I need to be using save.
* Any ways I load it back up again for further processing.
* Also some of this work started when I was using Eloquent outside of Laravel so it may need to be refactored since we are back in Laravel.
*/
$this->dealWithUsingUuidNotReturningIdFromCreate($this->batch);
$this->extractAndSyncRelatedObjects(); //This is the further processing I do not really related to this post
return $this->uuid; //This was set in the Trait see the trait class for this uuid field.
} catch (\Exception $e) {
throw new \Exception('The batch could not be created ' . $e->getMessage());
}
}</code></pre><p>Also note the model class needs this property set</p><pre><code>public $incrementing = false;</code></pre><h2 id="end-updates">END UPDATES</h2><hr><p>I needed to have UUID setup for users since we will be syncing users from site to site. I also wanted to use sentry as a starting point for user auth, roles and groups.</p><p>Using this starter package for a demo<a href="https://github.com/alnutile/L4withSentry/tree/uuid">https://github.com/alnutile/L4withSentry/tree/uuid</a> which is a fork of<a href="https://github.com/rydurham/L4withSentry">https://github.com/rydurham/L4withSentry</a></p><p>A lot of this comes from<a href="http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/">http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/</a></p><p><a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba">The repo will show the changes</a></p><h2 id="add-the-method-and-class-to-the-base-controllerhttpsgithubcomalnutilel4withsentrycommit8584933cda24e4101ed96cd5c3e8547b8fe249badiff-672d7136f99d93d53f1316b3fc946826r3"><a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-672d7136f99d93d53f1316b3fc946826R3">Add the method and class to the base controller</a></h2><p>This way we can call to it from other controllers as needed</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-0ad2286fb1ab9c8b1ec84d26853bf8f1L117">Update the UserController</a></p><p>There are lots of changes in here to replace is_numeric wtih $this->isValue($id) to check the uuid</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-31ad8f46f16744031d2d9092c100ffc1R3">Update the seeder</a></p><p>This will setup our seed data to work as well</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b7b60617536fe5447b0ab052b1878990R5">Update the user model</a></p><p>We call the boot method to generate a uuid if there is none being passed in.</p><h2 id="update-october-10-1018">Update October 10 10:18</h2><p>This below setup for the model has not worked which is why I have the update at the start of this article</p><h2 id="end-update">End update</h2><pre><code>/**
* The "booting" method of the model.
*
* @return void
*/
public static function boot()
{
parent::boot();<pre><code> /**
* Attach to the 'creating' Model Event to provide a UUID
* for the `id` field (provided by $model-&amp;gt;getKeyName())
*/
static::creating(function ($model) {
$model-&amp;gt;id = (string)$model-&amp;gt;generateNewId();
});
}</code></pre><p/></pre><p>and then generateNewId method down below</p></p><pre><code> /**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}</code></pre><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-4a87548edb6f75cbf33358b912d43775L22">Update Route file</a></p><p>Replace the regular expressions to allow uuid</p><pre><code>+Route::get('users/{id}/reset/{code}', 'UserController@reset')->where('id', '[a-z0-9\-]+');
Route::get('users/{id}/suspend', array('as' => 'suspendUserForm', function($id)
{
return View::make('users.suspend')->with('id', $id);
}));</code></pre><p>There are a number of them in there</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780R5">Composer</a></p><p>Of course you need it in your composer file</p><pre><code> "require": {
"laravel/framework": "4.2.*",
"cartalyst/sentry": "~2.1",
"r15ch13/peculiar": "1.0.*@dev"
},</code></pre><p>##User Migration file</p><p>This repo the sentry migration files are copied into app/database/migrations</p><p>This being key</p><pre><code>$table->string('id', '36')->primary();</code></pre><pre><code>#app/database/migrations/2012_12_06_225921_migration_cartalyst_sentry_install_users.php<p>&lt;?php</p><p>use Illuminate\Database\Migrations\Migration;</p><p>class MigrationCartalystSentryInstallUsers extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::create('users', function($table)
{
$table-&amp;gt;string('id', '36')-&amp;gt;primary();
$table-&amp;gt;string('email');
$table-&amp;gt;string('password');
$table-&amp;gt;text('permissions')-&amp;gt;nullable();
$table-&amp;gt;boolean('activated')-&amp;gt;default(0);
$table-&amp;gt;string('activation_code')-&amp;gt;nullable();
$table-&amp;gt;timestamp('activated_at')-&amp;gt;nullable();
$table-&amp;gt;timestamp('last_login')-&amp;gt;nullable();
$table-&amp;gt;string('persist_code')-&amp;gt;nullable();
$table-&amp;gt;string('reset_password_code')-&amp;gt;nullable();
$table-&amp;gt;string('first_name')-&amp;gt;nullable();
$table-&amp;gt;string('last_name')-&amp;gt;nullable();
$table-&amp;gt;timestamps();
// We'll need to ensure that MySQL uses the InnoDB engine to
// support the indexes, other engines aren't affected.
$table-&amp;gt;engine = 'InnoDB';
$table-&amp;gt;unique('email');
$table-&amp;gt;index('activation_code');
$table-&amp;gt;index('reset_password_code');
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('users');
}</code></pre><p>}</code></pre></p></description><tags>laravel, php</tags></item><item><title>Laravel Homestead and Beanstalkd Console</title><link>https://alfrednutile.info/posts/92/</link><pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/92/</guid><description><p>I am doing some queue work and wanted beanstalkd console installed so I can see the status of the queue</p><p><img src="https://camo.githubusercontent.com/1465416717c26b64eb6bc2647a2e8def90ee6da0/68747470733a2f2f7261772e6769746875622e636f6d2f7074726f66696d6f762f6265616e7374616c6b5f636f6e736f6c652f6d61737465722f636f7665722f6274636f6e736f6c652e706e67" alt="beanstalkd_console"/><p>Using Laravel Homestead as the vagrant box<a href="http://laravel.com/docs/homestead">http://laravel.com/docs/homestead</a> I needed to</p><ul><li>Download beanstalkd console<a href="https://github.com/ptrofimov/beanstalk_console">https://github.com/ptrofimov/beanstalk_console</a></li><li>Setup Homesteads yml file</li><li>Provision the box</li><li>Setup my local hosts file to a url</li><li>Finally run php artisan queue:listen to have my app call to the queue.</li></ul><p>And that was about it.</p><h3 id="download-beanstalkd-console">Download Beanstalkd Console</h3><p><a href="https://github.com/ptrofimov/beanstalk_console">https://github.com/ptrofimov/beanstalk_console</a>
have it stored in the</p><pre><code>/home/vagrant/Code/
vagrant@homestead:~/Code/</code></pre><h3 id="homestead-yml-file">Homestead YML file</h3><pre><code>//Homestead.yaml in root of your Homestead Vagrant install
sites:
- map: beanstalkd.dev
to: /home/vagrant/Code/beanstalk_console/public</code></pre><h3 id="provision-the-new-site">Provision the new site</h3><p>With Vagrant running do</p><pre><code>#on my local box not in vagrant
> vagrant provision</code></pre><h3 id="host-file">Host file</h3><p>Just make sure to match 127.0.0.1 to what the domain above or what ever you want</p><pre><code>#/etc/hosts
127.0.0.1 beanstalkd.dev</code></pre><p>Then in the vagrant box make sure beanstalkd is running ideally every time you start the box. Which by default the box does this.</p><p>Finally you should be able to go to<a href="http://beanstalkd.dev">http://beanstalkd.dev</a>:8000/
and see<img src="https://photos-5.dropbox.com/t/0/AACD6vphteXY02OPF-VQUHG2lqRAXmp9UM4eLAltF-yRmQ/12/54803135/png/1024x768/3/1404136800/0/2/Screenshot%202014-06-30%2008.13.36.png/MO7OiL6camSR4kN6RVakDKfDYAwXCatCA5R1x00sCT4" alt="done"/><h3 id="queue-listen">Queue Listen</h3><pre><code>#folder of project
php artisan queue:listen</code></pre><p>Now as you put things in the queue you can see them come and go at<a href="http://beanstalkd.dev">http://beanstalkd.dev</a>:8000/</p></description><tags>laravel, beanstalkd, vagrant, homestead</tags></item><item><title>Showing nested relationships details</title><link>https://alfrednutile.info/posts/87/</link><pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/87/</guid><description><p>This is soooo easy but this is always something this easy can be missed.
In this example we have a Property Model with Buildings that have an address.</p><p>So the model files look like this</p><pre><code>//Property.php<pre><code>//structures = buildings
public function structures()
{
return $this-&amp;gt;hasMany('Structure');
}</code></pre><p/></pre><pre><code>//Structure.php
public function address()
{
return $this->belongsTo("Address");
}</code></pre><p>So when I query a property I now get</p></p><pre><code> {
"id": 1,
"structures": [
{
"id": 6,
"address_id": 9,
"address": {
"id": 9,
"city": "Melvinport",
"state": "MT",
"zip": "75182",
"lat": -18.370000839233,
"lng": 36.270000457764,
"created_at": "2014-06-09 16:18:40",
"updated_at": "2014-06-09 16:18:40"
}</code></pre><p>Then in my query for properties I just included this with statement.</p><pre><code>
public function search($args)
{
$term = $args['terms'];
$found = $this->property->with('structures.address')
->where("name", "LIKE", "%{$term}%")
->get();
return $found;
}</code></pre><p>the dot notation basically showing load Structures and the Address data related to those.</p></description><tags>laravel, php, note2self</tags></item><item><title>Simple Laravel CMS Example</title><link>https://alfrednutile.info/posts/86/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/86/</guid><description><h2 id="quick-intro-to-laravel-using-a-custom-cms-app-i-made">Quick intro to Laravel using a custom CMS app I made</h2><p>The repo is<a href="https://github.com/alnutile/l4cms">here</a></p><p><img src="https://dl-web.dropbox.com/get/Screenshots/intro_image.png?_subject_uid=54803135&amp;w=AADdI8YLw5iRjK91_3LjSHq7b7z0ibM8KY4P7MicRH9UFA" alt="intro"/><p>This is mainly to show an example of a small CMS being built in Laravel. CMS (Content Management System) that is at it&rsquo;s most basic level, Authentication, Simple Content Types etc.</p><p>What we will cover.</p><ul><li>Installing the &ldquo;CMS&rdquo; and what Page Types it comes with</li><li>Looking at the folder layout &ldquo;Where is&hellip;.&rdquo;</li><li>App config setting up the site</li><li>PHP Artisan command to migrate the site</li><li>Routes</li><li>Page example looking at the wysiwyg, Controller, View etc</li><li>Tags - lets add a many to many relationship</li></ul><p>This is NOT the end all setup just an example. There are links below to quality videos, blogs posts docs etc to take you to the next level, not only in Laravel but just Object Oriented Design and good Architecture in general.</p><p>Note the theme has it&rsquo;s own license and you need to purchase it<a href="https://wrapbootstrap.com/theme/colorfrog-WB01PG0H4">here</a> in order to use it.</p><h2 id="install-the-cms-and-what-page-types-it-comes-with">Install the &ldquo;CMS&rdquo; and what Page Types it comes with</h2><p>The repo is here<a href="https://github.com/alnutile/cms">https://github.com/alnutile/cms</a></p><p>In time I will add more features but it really is an app that was made for a client that the base of it I wanted to fork off for later use.</p><p>Run the basic laravel install steps noted on their site<a href="http://laravel.com/docs/quick">http://laravel.com/docs/quick</a></p><h2 id="what-page-types">What Page Types</h2><ul><li>Pages are the main landing pages for most of the site with a slug to manage the url [1]. More on Pages shortly.</li><li>Portfolios was how this project started. Basically you make One and then make projects that reference it.</li><li>Projects are just that. They fit in a Portfolio</li><li>Menu Sorting there is an admin area for menu sorting as well. Right now it is just for the top left menu. (not the black top nav)</li></ul><p>All these &ldquo;Admin&rdquo; links can be seen below</p><p><img src="https://dl-web.dropbox.com/get/Screenshots/admin_link.png?_subject_uid=54803135&amp;w=AAAXvu_aZZUUGLFbgByRli-WjFgDpVmUDnQxverzi5_ISg" alt="admin_bar"/><h3 id="every-landing-page-is-a-page">Every landing page is a Page</h3><p>Every URLs is Page, Project or Portfolio so the editor can always edit the description of the page even if there is a &ldquo;collection&rdquo; under it. For example /all_projects is a Page that just happens to also show a collection of &ldquo;Projects&rdquo; under it. Ideally this will be a less hard coded relationship BUT this particular example just needed a simple data set.</p><p>There are Portfolio and Project pages as well that the edit can edit the description on etc.</p><h2 id="looking-at-the-folder-layout">Looking at the folder layout</h2><p>This is a standard Laravel App. The one key folder is<strong>app/CMS</strong> for some items. But otherwise the Controllers, Models etc have all the needed data. [2]</p><p>In app/CMS there is the Menu Facade, and the MenuService to make managing the menu system easier. [3]</p><p>The system puts it&rsquo;s uploaded files under public/img in settings, banners etc</p><h2 id="app-config-setting-up-the-site">App config setting up the site</h2><p>The app default to sqlite and the bootstrap/start.php will default to local without you needing to set anything.</p><p>Running migrations will get you a good sample set of data. You can always turn this off in app/database/seeds</p><p>In the app/database/seeds/UsersTableSeeder.php file is the admin and test user emails and passwords to login.</p><h2 id="routes">Routes</h2><p>The app/routes.php is where you can manage routes and see what is there right now.</p><h2 id="page-example">Page Example</h2><p>You can edit a page or add a page.</p><p>Once in there you will see this</p><p><img src="https://dl-web.dropbox.com/get/Screenshots/edit.png?_subject_uid=54803135&amp;w=AADonXAFhGpiKY5JL9u6d248TPQKJMPCDcHTwUi2s2Hk5Q" alt="image_page_edit"/><p>You can give the page a title, SEO title, upload images and files via the wysiwyg and set the slug (Published coming soon so there can be a workflow)</p><h2 id="tags">Tags</h2><p>There is a tagging feature that does not yet have the UI setup. (coming soon). The resource is setup but needs to be placed in the view</p><p>In php artisan tinker we can mess around with tags thought</p><pre><code>
php artisan tinker
$tag = new Tag(['name' => "Test 4"]);
Portfolio::find(1)->tags()->save($tag);
Portfolio::find(1)->tags->toArray();
Tag::find(1)->portfolios->toArray();
Portfolio::find(1)->tags()->detach(1);
Portfolio::find(1)->tags()->attach(1);</code></pre><p>So we are making a tag, saving it to Portfolio 1. Seeing it attached to Portfolio 1 and Seeing Portfolios attached to it.</p><h2 id="links">Links</h2><ul><li>Great videos on Laravel, Oop and design patters<a href="https://laracasts.com/">https://laracasts.com/</a></li><li>Laravel own docs are great<a href="http://laravel.com/docs">http://laravel.com/docs</a></li><li>Forums and Chat room<a href="http://laravel.io/forum">http://laravel.io/forum</a></li><li>Great overview of Laravel app building<a href="http://culttt.com/2013/04/29/getting-started-with-laravel-4/">http://culttt.com/2013/04/29/getting-started-with-laravel-4/</a></li></ul><h2 id="footnotes">Footnotes</h2><ul><li>[1] This will be refactored shortly</li><li>[2] This will be moved shortly to make it way more extendable but leaving the core easy to manage.</li><li>[3] Refactor this out so menu is a manyToMany relationship with the models that will use it.</li></ul></description><tags>laravel, php, cms</tags></item><item><title>Quick Gulp file to run php-unit tests</title><link>https://alfrednutile.info/posts/85/</link><pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/85/</guid><description><p><strong>MUCH BETTER WAY<a href="https://gist.github.com/laracasts/8659865">HERE</a></strong></p><hr><p>This is setup for Laravel but can work for any app. Most of this is due to the great<a href="https://laracasts.com/lessons/gulp-this">Laracasts on Gulp</a></p><p>Download and setup gulp</p><p>First make a package.json file in the root of your app and just put curly brackets in it.</p><pre><code>touch package.json
vim package.json</code></pre><pre><code>//package.json
{<p>}</code></pre><p>Then run the needed node commands</p></p><pre><code>npm install -g gulp
npm install gulp --save-dev
npm install gulp-notify --save-dev
npm install gulp-phpunit --save-dev</code></pre><p>Now the package.json should look like this thanks to the save switch.</p><pre><code>{
"devDependencies": {
"gulp": "^3.6.2",
"gulp-phpunit": "^0.5.3",
"gulp-notify": "^1.3.0"
}
}</code></pre><p>Now to setup the gulpfile, again in the root of your app</p><pre><code>//gulpfile.js
var phpunit = require('gulp-phpunit');
var gulp = require('gulp'),
notify = require('gulp-notify'),
phpunit = require('gulp-phpunit');
gulp.task('phpunit', function() {
var options = {debug: false, notify: true};
gulp.src('app/tests/*.php')
.pipe(phpunit('', options))
.on('error', notify.onError({
title: "Failed Tests!",
message: "Error(s) occurred during testing..."
}));
});
gulp.task('default', function(){
gulp.run('phpunit');
gulp.watch('app/**/*.php', function(){
gulp.run('phpunit');
});
});</code></pre><p>Basically we are saying watch the app folder recursively for file changes to files ending in php then run all the tests in app/tests/*.php.</p><p>Finally run gulp at the command line and it will run keeping an eye on changes.</p><pre><code>gulp</code></pre><p>That is it. From here you will get typically phpunit output as you work BUT also a notice if you break something.</p></description><tags>gulp, phpunit, laravel</tags></item><item><title>Laravel and non email authentication</title><link>https://alfrednutile.info/posts/84/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/84/</guid><description><p>Note to self. The Laravel docs are here that cover Authentication. But when it came time to use a filter and a non email based user name I had to modify the auth.basic filter, or any filter you want to use.</p><p>It ended up looking like this since I wanted user_account and not email to be the username for authentication.</p><pre><code>//app/filters.php
Route::filter('auth.basic', function()
{
return Auth::basic('user_account');
});</code></pre><p>You can see this option here</p><pre><code>//vendor/laravel/framework/src/Illuminate/Auth/Guard.php
public function basic($field = 'email', Request $request = null)</code></pre></description><tags>laravel, php, note2self</tags></item><item><title>Using Beanstalkd to Schedule the release of a post in Laravel</title><link>https://alfrednutile.info/posts/78/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/78/</guid><description><p>Phase 1 of my master plan is to regularly write more posts on misc web and coding in general related topics. And sometimes I can sit and write a few of them but it would be best not to release them all at once for a lot of reason.</p><p>So this will cover the way I setup a schedule feature to my post creation process. Yes there are libraries for this but I just wanted to have fun making this feature. There are three key posts that helped me get through this.</p><ul><li><a href="http://laravel.com/docs/queues">Laravel Docs</a></li><li><a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper</a></li><li><a href="https://laracasts.com/search?q=beanstalkd">Laracasts</a></li><li><a href="https://help.ubuntu.com/community/UFW">Ubuntu Firewall Rules</a></li></ul><p>I will not repeat what they offer but link to them as needed.</p><h4 id="we-will-cover">We will cover</h4><ul><li>Setup up a schedule field</li><li>Setting up a Beanstalkd server</li></ul><h4 id="setting-up-the-field">Setting up the field</h4><p>My Post model has a published or active field and now a scheduled field. It is just a timestamp format field. I could have done other solutions and tighten this up a bit so any feedback is welcome below. When making a post I have two options at the bottom.</p><p>I also use the<a href="http://trentrichardson.com/examples/timepicker">Timepicker addon</a></p><p><img src="https://photos-1.dropbox.com/t/0/AAAsUCPPbu9uo1HSy-yLiCUzN2lytkbgUtaef0dYAGMUyg/12/54803135/png/2048x1536/3/1400529600/0/2/Screenshot%202014-05-19%2014.44.00.png/xW1tZgTGBYh1YDH0M1ThFzeg7PnA1tegBAscZQDwM6E" alt="Schedule Options"/><p>If the new post is not Active &amp;&amp; has a Scheduled date then this method kicks into place in my Posts controller during the creation process. I will most likely move this to a Service or Model since it really is not the job of the Controller but this is v1 of my idea.</p><pre><code>//app/controllers/PostsController.php<pre><code> public function __construct(MarkdownExtraParser $mk = null, SchedulerAls $scheduler = null)
{
//other code here
$this-&amp;gt;scheduler = ($scheduler == null) ? new SchedulerAls() : $scheduler;
}
/**
* Store a newly created post in storage.
*
* @return Response
*/
public function store()
{
//basic code here for laravel
$this-&amp;gt;scheduler-&amp;gt;sendToQueue($post);</code></pre><p/></pre><h4 id="first">First</h4></p><p>The<strong>SchedulerAls Class</strong> is pretty simple, using the<a href="http://laravel.com/docs/queues">Laravel Queue</a></p><p>The sendToQueue($post) method just does that</p><pre><code>//app/Als/Services/SchedulerAls.php<p>class SchedulerAls</p><p>public function sendToQueue($post) {
if(!empty($post->scheduled)) {
\Log::info("Testing: PushJob {$post->id}");
\Queue::push(&lsquo;Als\Services\SchedulerAls&rsquo;, array(&lsquo;post&rsquo; => $post->id));
}
}</code></pre><p>This adds a row to the queue to check the “Als\Services|SchedulerAls” class and trigger the fire method (more on that below) passing it the $post->id.</p></p><p>I make my fire method call to a<strong>processPost</strong> method that decides if this post is not active and if it has a date set. If so and that date is not greater than today make it active else release it for 30 minutes and the next command needed into the queue.</p><p>Eg if I post 1 for tomorrow (#100) and after that one for today (#101), it will see #100 is not ready and move on to #101.</p><p>Here is that the fire method and the processPost. Really it can all be in the fire method.</p><pre><code>//app/Als/Facades/Services/SchedulerAls.php
class SchedulerAls {<pre><code>public function fire($job, $data)
{
$this-&amp;gt;processPost($job, $data);
}
protected function processPost($job, $data)
{
$id = $data['post'];
$post = \Post::find($id);
$scheduled = Carbon::createFromFormat('Y-m-d H:i:s', $post-&amp;gt;scheduled);
$now = Carbon::create();
if($scheduled-&amp;gt;lt($now)) {
$post-&amp;gt;active = 1;
$post-&amp;gt;save();
$job-&amp;gt;delete();
} else {
$job-&amp;gt;release(30);
}
}</code></pre><p/></pre><p>So that is it really. Set to active or not. Delete job or release it back to the queue with a 30 minute delay etc.</p></p><h3 id="setting-up-the-server">Setting up the server.</h3><p>This was really not bad. I ended up using the existing server but will move to another server shortly. One thing to keep in mind is your firewall. You really want to make sure that you are only allowing certain IPs to visit this server or limit beanstalkd to localhost.</p><p>As noted this tutorial handles most of this really well<a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper</a></p><p>Finally<a href="https://github.com/ptrofimov/beanstalk_console">beanstalk console</a> is a great way, especially locally if you are not using &ldquo;sync&rdquo; driver to see what is going on. Just make sure to block it with htaccess so no one can just visit it on your server.</p><p>That is about it. Later I will add an even to allow other things to be triggered maybe via IFTT!</p></description><tags>laravel, php, queue</tags></item><item><title>Using Dot Env files to manage settings</title><link>https://alfrednutile.info/posts/76/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/76/</guid><description><p>Wow. Included in Laravel<a href="http://laravel.com/docs/configuration#protecting-sensitive-configuration">http://laravel.com/docs/configuration#protecting-sensitive-configuration</a></p><ol><li><p>removed due to old news</p></li><li><p><a href="http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/">http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/</a></p></li></ol><h2 id="update">Update</h2><p>I really like the second link and how it sets up a .env file first to just return a simple string. After that you can have the .env.production.php or .env.local.php that laravel can look for.</p><pre><code>//bootstrap/start.php
$env = $app->detectEnvironment(function()
{
if (file_exists(__DIR__ . '/../.env')) {
return include(__DIR__ . '/../.env');
} else {
return 'production';
}
});</code></pre><p>Quite simple at that point to separate all of the environments.</p></description><tags>laravel, php, note2self</tags></item><item><title>Using Scopes in Laravel</title><link>https://alfrednutile.info/posts/69/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/69/</guid><description><p>I have about 4 models that all share 2 common queries. I want all of them that are &ldquo;Published&rdquo; and or Ordered by a field called Order.</p><p>This does help with some<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> goals, but you could easily change or add to a scope as needed to update all the queries involved etc. Especially if at a later point you break this out into a Repository Patter to use a different ORM.</p><p>So using<a href="http://laravel.com/docs/eloquent#query-scopes">Scopes</a> I can make one shared query. All my Model classes extend a BaseModel class I made that looks like this</p><pre><code>//app/models/BaseModel.php
&lt;?php<p>class BaseModel extends \Eloquent {</p><pre><code>public function scopePublished($query)
{
return $query-&amp;gt;where(&amp;quot;published&amp;quot;, &amp;quot;=&amp;quot;, 1);
}
public function scopeOrderByOrder($query)
{
return $query-&amp;gt;orderBy('order');
}</code></pre><p>}</code></pre><p>So with any of the three class all I have to do is use these scopes.</p></p><pre><code>//app/controllers/PortfoliosController.php
public function adminIndex()
{
$portfolios = Portfolio::OrderByOrder()->get();
return View::make('portfolios.admin_index', compact('portfolios'));
}</code></pre><p>or even a Models relationships</p><pre><code>//app/models/Portfolio.php
public function projects()
{
return $this->hasMany('Project')->Published()->OrderByOrder();
}</code></pre><blockquote/></description><tags>laravel, php, note2self</tags></item><item><title>Adding Column using sqlite caused error 'Cannot add a NOT NULL column with default value NULL'</title><link>https://alfrednutile.info/posts/64/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/64/</guid><description><p>After the<a href="http://laravel.com/docs/upgrade#upgrade-4.1.26">security update</a> I had to add a remember_token to my user table.<a href="">security update</a></p><p>Since I am using sqllite locally I ended up with this error</p><pre><code>>php artisan migrate<p>[Illuminate\Database\QueryException]
SQLSTATE[HY000]: General error: 1 Cannot add a NOT NULL column with default value NULL (SQL: alter table "users" add column "remember_token" text not null)</code></pre><p>Finally<a href="http://forumsarchive.laravel.io/viewtopic.php?id=13320">this post</a> made it clear I had to make this nullable</p></p><pre><code>//migration file
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table->text('remember_token')->nullable();
});
}</code></pre><blockquote/></description><tags>laravel, php, note2self</tags></item><item><title>php artisan migrate:reset not working</title><link>https://alfrednutile.info/posts/63/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/63/</guid><description><p>This was an issue for me using sqlite. There was a simple fix noted in the<a href="http://irclogs.laravel.io/2014-03-02/04:41#log-5312b66d1937b8f547005cde">irclogs</a> of Laravel!</p><p>So under my require-dev or require I placed</p><pre><code>//composer.json
"require": {
"laravel/framework": "4.1.*",
"way/generators": "dev-master",
"doctrine/dbal": "~2.3"
},</code></pre><p>ran composer update and all was well again!</p></description><tags>laravel, php</tags></item><item><title>Adding Markdown Editor to your Blog/CMS</title><link>https://alfrednutile.info/posts/60/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/60/</guid><description><p>In this case it is Laravel but any PHP framework could use this.</p><h2 id="get-the-library">Get the Library</h2><p>I used the<a href="https://github.com/dflydev/dflydev-markdown">dflydev-markdown</a> library which uses<a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown</a> as it&rsquo;s base.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p><p>As it notes I load it up with composer.json and I am ready to use it.</p><h2 id="inject-the-class-into-your-controller">Inject the class into your controller</h2><p>At the controller level I inject it like this</p><pre><code>//BaseController.php<p>use dflydev\markdown\MarkdownExtraParser;</p><p>class BaseController {</p><pre><code>public $mk;
public function __construct(MarkdownExtraParser $mk = null)
{
$this-&amp;gt;mk = ($mk == null) ? new MarkdownExtraParser() : $mk;
}</code></pre><p/></pre><p>Later on I call to it on both update and store on any of my Controllers that extend this class.</p></p><h2 id="add-a-new-field-to-your-posts-or-other-content-type">Add a new field to your Posts or other content type</h2><p>But the other step here is to add a rendered_body field to my models/tables. Then on store and update I write to these but on edit I am working on the body field which is markdown.</p><pre><code>$data['rendered_body'] = $this->mk->transformMarkdown($data['body']);</code></pre><h2 id="render-it-in-the-view">Render it in the View</h2><p>And in my Views I render the rendered_body field and NOT the body field which stores the raw text. This idea I got from<a href="http://www.danneu.com/posts/9-rails-3-2-markdown-pygments-redcarpet-heroku/">danneu.com</a></p><p>Now with the help of the docs on<a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown</a> I can do most of the work I need to make a post, embed video, images etc.</p><h2 id="thoughts">Thoughts</h2><p>As far as uploading<strong>images</strong> I use Dropbox for that so it is really not part of my needs. With dropbox I just take a snapshot and it auto uploads the image and I get the url in my clipboard. Though I then have to go to the URL and get the real URL. Still working on that.</p><pre><code>{
"name": "laravel/laravel",
"description": "The Laravel Framework.",
"keywords": ["framework", "laravel"],
"license": "MIT",
"repositories": [
{
"type": "git",
"url": "https://github.com/alnutile/dflydev-markdown"
}
],
"require": {
"laravel/framework": "4.1.*",
"dflydev/markdown": "dev-master"
},
"autoload": {
"classmap": [
"app/commands",
"app/controllers",
"app/models",
"app/database/migrations",
"app/database/seeds",
"app/tests/TestCase.php"
]
},
"require-dev": {
"way/generators": "2.*",
"schickling/backup": "dev-master"
},
"scripts": {
"post-install-cmd": [
"php artisan clear-compiled",
"php artisan optimize"
],
"post-update-cmd": [
"php artisan clear-compiled",
"php artisan optimize"
],
"post-create-project-cmd": [
"php artisan key:generate"
]
},
"config": {
"preferred-install": "dist"
},
"minimum-stability": "stable"
}</code></pre><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn:1" role="doc-endnote"><p>I may start using this<a href="https://github.com/michelf/php-markdown">michelf</a> since the one I am using now is marked depreciated. But I have already made a change to this one so it works a little better with my settings. My fork is here<a href="https://github.com/alnutile/dflydev-markdown">my fork</a> and my composer.json looks below<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:2" role="doc-endnote"><a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></li></ol></section></description><tags>laravel, php</tags></item><item><title>Angular and Laravel Partials</title><link>https://alfrednutile.info/posts/55/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/55/</guid><description><p>Blade uses {{ }} so it does not play well with Angular.js but I decided to use partials. I am not using Angular routes so I am just including partials in my controller file.</p><h3>My blade file has this.</h3><div class="code"><p>&lt;div ng-include="template.url">&amp;nbsp;&lt;/div></p></div><h3>Then the partial has this</h3><div class="code"><p>&lt;div class="issues-to-get" ng-show="issues.length > 0"><br/>
&lt;ul><br/>
&nbsp;&nbsp; &nbsp;&lt;li>&lt;label>&lt;input type="checkbox" value="all" />All&lt;/label>&lt;/li><br/>
&nbsp;&nbsp; &nbsp;&lt;li ng-repeat="issue in issues">&lt;label>&lt;input type="checkbox" value="{{ issue.id }}" />{{ issue.title }}&lt;/label>&lt;/li><br/>
&lt;/ul><br/>
&lt;/div></p></div><h3>The partial lives here</h3><p>/public/assets/js/templates/</p><p>which / is the root of my Laravel app.</p><h3>Finally my controller has this</h3><div class="code"><p>$scope.template = { name: 'project_issues', url: '/assets/js/templates/project_show.html'};</p><p>&nbsp;</p></div></description><tags>laravel</tags></item><item><title>Laravel Project Management Site</title><link>https://alfrednutile.info/posts/44/</link><pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/44/</guid><description><p>Still has some work to be done for sure.&nbsp;</p><p><a href="https://github.com/alnutile/pml4" target="_blank">https://github.com/alnutile/pml4</a></p><p><img alt="" src="https://photos-6.dropbox.com/t/0/AAA1GCF2mTtb0s1auSN8bHpD-o35nmPWCiaS4tFzyvpV_Q/12/54803135/png/2048x1536/3/1391400000/0/2/Screenshot%202014-02-02%2021.00.03.png/1aYJjmaoGuRzexlxQJFxDzid7urK3GRs-8P0nvQ8SzY" style="width: 600px; height: 254px; margin: 5px; border-width: 1px; border-style: solid;"/></p><p><img alt="" src="https://photos-1.dropbox.com/t/0/AAA4lWC850wd95jWn1-EynEI5Q46dVP2DESbLQTqMO0PEQ/12/54803135/png/2048x1536/3/1391407200/0/2/Screenshot%202014-02-02%2023.00.10.png/1j3TfBbkROJPsr773gyeXy1mLsVzHnoQxuW-V_07cdM" style="width: 500px; height: 269px; border-width: 1px; border-style: solid; margin: 5px;"/></p><p>The goal will be a PM site that integrates with the github api since I have endless issues with clients getting confused using the Github interface for tickets. So this system will wrap around that.</p><p>In the mean time</p><p>Projects are&nbsp;in place with many to many on Users</p><p>Issues are&nbsp;in place with a one to many on Projects, a One to One User</p><p>Comments are that have one to one relationship to Issues.</p><p>It is use the<a href="https://github.com/Zizaco/confide" target="_blank">Confide</a> auth system but right now only with an Admin role. Soon there will be Enforce, see notes below.</p><p>Road map</p><p>1. Email message to team on Project with new Issue and Comment</p><p>2. Project links to GithubRepo</p><p>3. Issue links to GithubRepo</p><p>4. Comment links to GithubComment&nbsp;</p><p>5. Freshbook integration</p><p>6. Behat&nbsp;intergration&nbsp;using my<a href="https://github.com/alnutile/behat_editor" target="_blank">Behat Editor</a> work I did on drupal.</p><p>7. Better user managment</p><p>&nbsp;</p></description><tags>laravel</tags></item><item><title>Nesting Laravel 4 Routes</title><link>https://alfrednutile.info/posts/41/</link><pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/41/</guid><description><p>Make sure your route file is set to show this</p><p>For my example is is projects and they have issues</p><p>So my route looks like this</p><pre><code>#routes.php
Route::resource('projects', 'ProjectsController');
Route::resource('projects.issues', 'IssuesController');</code></pre><p>So now my URLs will look lik this</p><pre><code>/projects/4/issues &lt;--shows all issues<p>/projects/4/issues/2 &lt;&ndash;shows issue 2 in project 4</code></pre><p>Finally on the Project Show page I have these linkRoute’s in place</p></p><pre><code> &lt;tr>
@endif
&lt;td>{{ $issue['id'] }}&lt;/td>
&lt;td>{{ HTML::linkRoute('projects.issues.show', $issue['name'], array($project->id, $issue['id'])) }}&lt;/td>
&lt;td>{{ $issue['active'] }}&lt;/td>
&lt;td>{{ $issue['description'] }}&lt;/td>
&lt;/tr></code></pre><p>and</p><pre><code>{{ HTML::linkRoute('projects.issues.create', 'Create Issue', $project->id, array('class' => 'btn btn-info')) }}</code></pre><p>That is it. I will post my Controller shortly for Issues.</p><p>More help</p><p><a href="https://tutsplus.com/lesson/nested-resources/">https://tutsplus.com/lesson/nested-resources/</a></p></description><tags>laravel</tags></item><item><title>Vagrant and Laravel</title><link>https://alfrednutile.info/posts/13/</link><pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/13/</guid><description><p>Most likely for any internal server I had to run command</p><p>php artisan serve &ndash;host=&ldquo;0.0.0.0&rdquo;</p><p>to access the port forwarding feature of vagrant</p><p>Update:
I had to also make sure to set the forward to the same as the original 8000
So my Vagrant file looked like this<a href="https://gist.github.com/alnutile/5857999">gist</a></p></description><tags>laravel</tags></item></channel></rss>