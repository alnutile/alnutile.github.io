<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>patterns on Alfred Nutile</title><link>https://alnutile.github.io/tags/patterns/</link><description>Recent content in patterns on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Jun 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://alnutile.github.io/tags/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Transforming Output from the Database to the View/REST layer</title><link>https://alnutile.github.io/posts/88/</link><pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate><guid>https://alnutile.github.io/posts/88/</guid><description>Having watched the screen cast here by Jeffery Way and reading Phil Sturgeon&amp;rsquo;s Build APIs You Won&amp;rsquo;t Hate I used this approach on a recent project.
Basically, and they both cover it really well, instead of returning the data right to the ui/rest endpoint from the database I pass it through a class to transform the data formats, field name etc. This has been extremely helpful as we also work out some wording of fields that I can not do easily in this one class.</description></item><item><title>Keep it (functions/methods) small and simple</title><link>https://alnutile.github.io/posts/36/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://alnutile.github.io/posts/36/</guid><description>I have been doing some work using&amp;nbsp;Oop and have a lot of re-factoring to do since I did not keep my methods small and simple. Often they use other methods or presume a certain amount of constructed parameters.
When I was working strictly in procedural programming I would make my functions small and tie them together like the Unix command line tools. But then I had issues with having to pass too many variables all around.</description></item></channel></rss>