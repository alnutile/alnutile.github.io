<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>patterns on Alfred Nutile</title><link>https://alfrednutile.info/tags/patterns/</link><description>Recent content in patterns on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Jun 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Transforming Output from the Database to the View/REST layer</title><link>https://alfrednutile.info/posts/88/</link><pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/88/</guid><description><p>Having watched the screen cast<a href="https://laracasts.com/series/incremental-api-development/episodes/4">here</a> by Jeffery Way and reading Phil Sturgeon&rsquo;s<a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&rsquo;t Hate</a> I used this approach on a recent project.</p><p>Basically, and they both cover it really well, instead of returning the data right to the ui/rest endpoint from the database I pass it through a class to transform the data formats, field name etc. This has been extremely helpful as we also work out some wording of fields that I can not do easily in this one class.</p><p>Also I can do output alterations using this Class and replace text depending on say a users permission level or maybe just to set a default image if there is none. So that user gets and Address Value Object that only shows the State.</p><p>Another good example was one server was LAMP and the other Nginx. Same db, etc but one has a setting to output a boolean as &ldquo;1&rdquo; and the other 1 so again I could verify and set these as needed as I built out the output. (yes I could have just Google the setting or better yet use a Vagrant box running Nginx to dev on)</p><p>Anyways just a really simple layer to add to a project.</p><p>Some good learning</p><ul><li>Incremental API<a href="https://laracasts.com/series/incremental-api-development/episodes/4">https://laracasts.com/series/incremental-api-development/episodes/4</a></li><li>Build APIs You Won&rsquo;t Hate<a href="https://leanpub.com/build-apis-you-wont-hate">https://leanpub.com/build-apis-you-wont-hate</a></li><li>Fractal<a href="http://fractal.thephpleague.com/simple-example/">http://fractal.thephpleague.com/simple-example/</a></li><li>Fractal Class<a href="https://github.com/thephpleague/fractal">https://github.com/thephpleague/fractal</a></li></ul></description><tags>REST, php, patterns</tags></item><item><title>Keep it (functions/methods) small and simple</title><link>https://alfrednutile.info/posts/36/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/36/</guid><description><p>I have been doing some work using&nbsp;Oop and have a lot of re-factoring to do since I did not keep my methods small and simple. Often they use other methods or presume a certain amount of constructed parameters.</p><p>When I was working strictly in procedural programming I would make my functions small and tie them together like the Unix command line tools. But then I had issues with having to pass too many variables all around. So that is the next step for me, figure out the balance of keeping things small but not always passing around or re-constructing numerous variables.</p><p>Pattern:&nbsp;<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">Single responsibility principle</a></p></description><tags>patterns</tags></item></channel></rss>