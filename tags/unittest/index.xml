<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unittest on Alfred Nutile</title><link>https://alfrednutile.info/tags/unittest/</link><description>Recent content in unittest on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/unittest/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocking in Python</title><link>https://alfrednutile.info/posts/263/</link><pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/263/</guid><description>&lt;p>Serious note to self.&lt;/p>
&lt;p>I wanted to mock the Github module for python.&lt;/p>
&lt;p>My simple class will get the ID of the team.&lt;/p>
&lt;pre>&lt;code>from github import Github, Team
from dotenv import load_dotenv
import os
import sys
import json
class GetTeamId:
def __init__(self):
load_dotenv()
self.team_id = 5555
self.token = os.environ.get(&amp;quot;GITHUB_TOKEN&amp;quot;)
self.client = Github(self.token)
self.org = self.client.get_organization('FooBar')
def handle(self, team_name):
teams = self.org.get_teams()
for team in teams:
if team_name == team.name:
print(&amp;quot;Team id&amp;quot;, team.id)
return team.id
if __name__ == &amp;quot;__main__&amp;quot;:
client = GetTeamId()
team = sys.argv[1]
print(&amp;quot;Going to get team&amp;quot;, team)
client.handle(team)
&lt;/code>&lt;/pre>&lt;p>But I need test coverage on this so I made this test.&lt;/p>
&lt;pre>&lt;code>from unittest import TestCase
import unittest
from unittest.mock import patch, Mock
import json
from src.get_team_id import GetTeamId
class Team:
def __init__(self):
self.id = 4444444
self.name = &amp;quot;foo-team&amp;quot;
class TestGetTeamId(TestCase):
@patch(&amp;quot;src.get_team_id.Github.get_organization&amp;quot;)
def test_can_get_id(self, mock_github):
mock_github.return_value.get_teams.return_value = [
Team()
]
client = GetTeamId()
results = client.handle(&amp;quot;foo-team&amp;quot;)
self.assertEqual(4444444, results)
&lt;/code>&lt;/pre>&lt;p>Know how long that took!&lt;/p>
&lt;h2 id="example-two">Example Two&lt;/h2>
&lt;p>Mocking JIRA:&lt;/p>
&lt;pre>&lt;code>from unittest import TestCase
import unittest
from unittest.mock import patch, Mock
import json
from src.jira_ticket import JiraTicket
class TestJiraCreateTicket(TestCase):
@patch(&amp;quot;src.jira_ticket.JIRA.create_issue&amp;quot;)
def test_can_make_ticket(self, mock_jira):
mock_jira.return_value.create_issue.return_value.update.return_value = True
client = JiraTicket()
title = &amp;quot;(RENOVATE PR OPEN) Update dependency @ionic/core to v4.6.0 292416206&amp;quot;
project = &amp;quot;PENG&amp;quot;
message = &amp;quot;\nTitle: Foo Bar\nIssue Url: https://boo.baz\nState: open\n&amp;quot;
label = &amp;quot;renovate&amp;quot;
client.create_ticket(title, message, project, label)
mock_jira.assert_called_once()
&lt;/code>&lt;/pre>&lt;p>and the class:&lt;/p>
&lt;pre>&lt;code>import json
from dotenv import load_dotenv
from collections import Counter
from jira import JIRA
import os
class JiraTicket:
def __init__(self):
self.jira = None
self.auth()
def auth(self):
load_dotenv()
username = os.getenv(&amp;quot;JIRA_USERNAME&amp;quot;)
password = os.getenv(&amp;quot;JIRA_PASSWORD&amp;quot;)
self.jira = JIRA(server=&amp;quot;https://foo.atlassian.net&amp;quot;,
basic_auth=(username, password))
def handle(self, title, message=None, label=None, project=&amp;quot;FOO&amp;quot;):
&amp;quot;&amp;quot;&amp;quot; see if exists if does update &amp;quot;&amp;quot;&amp;quot;
def see_if_exists(self, title, project):
results = self.jira.search_issues(&amp;quot;title ~ \&amp;quot;%s\&amp;quot; and project= \&amp;quot;%s\&amp;quot;&amp;quot; % (title, project))
if len(results) &amp;gt; 0:
for issue in results:
print(issue)
return False
&lt;/code>&lt;/pre>&lt;h2 id="good-reads">Good reads&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.python.org/3/library/unittest.mock.html">https://docs.python.org/3/library/unittest.mock.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.toptal.com/python/an-introduction-to-mocking-in-python">https://www.toptal.com/python/an-introduction-to-mocking-in-python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832">https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832&lt;/a>&lt;/li>
&lt;/ul></description>
python, mocking, tdd, unittest</item></channel></rss>