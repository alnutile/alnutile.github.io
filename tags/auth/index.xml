<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>auth on Alfred Nutile</title><link>https://alfrednutile.info/tags/auth/</link><description>Recent content in auth on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/auth/index.xml" rel="self" type="application/rss+xml"/><item><title>API Token Based Access Laravel 5.1 (Yet another article on this)</title><link>https://alfrednutile.info/posts/183/</link><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/183/</guid><description><h2 id="api-token">API Token</h2><p>Laravel 5.2 introduces the auth token guard setup which is way simpler than Oauth. Also it does not assume a certain level of complexity in needs like Scopes and expirations of tokens that we do not need for our internal app to app communications.</p><p>We are using 5.1 so this will implement it.</p><p>See some docs here<a href="https://gistlog.co/JacobBennett/090369fbab0b31130b51">https://gistlog.co/JacobBennett/090369fbab0b31130b51</a></p><p>For creating a user the AppServiceProvider boots the user record and if no api_token
is present it will set one. As well as the UUID (we use<a href="https://packagist.org/packages/ramsey/uuid">https://packagist.org/packages/ramsey/uuid</a> for this)</p><p><code>app/Providers/AppServiceProvider.php:18</code></p><pre><code> User::creating(function($user) {
if (!$user->id)
{
$user->id = Uuid::uuid4()->toString();
}<pre><code> if (!$user-&amp;gt;api_token)
{
$user-&amp;gt;api_token = Uuid::uuid4()-&amp;gt;toString();
}
});</code></pre><p/></pre><p>The factory includes this as well<code>database/factories/ModelFactory.php</code></p></p><pre><code>$factory->define(App\User::class, function ($faker) {
return [
'id' => $faker->uuid,
'name' => $faker->name,
'email' => $faker->email,
'api_token' => $faker->uuid,
'password' => str_random(10),
'remember_token' => str_random(10),
];
});</code></pre><p>Note in the<code>\App\User</code> model has this field hidden like the password field<code>app/User.php</code></p><pre><code>///
class User extends Model implements AuthenticatableContract, CanResetPasswordContract
{
use Authenticatable, CanResetPassword;
protected $hidden = ['password', 'remember_token', 'api_token'];
///</code></pre><p>And of course we need the migration for this</p><pre><code>&lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class AddApiTokenToUsersTable extends Migration
{
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table->string('api_token', 60)->unique();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
if(Schema::hasColumn('users', 'api_token'))
$table->dropColumn('api_token');
});
}
}</code></pre><p>This is all happening using the<code>api_token</code> middleware seen here<code>app/Http/Middleware/ApiToken.php</code></p><pre><code>&lt;?php
namespace App\Http\Middleware;
use App\User;
use Closure;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\App;
class ApiToken
{
protected $auth;
public function __construct(Guard $auth)
{
$this->auth = $auth;
}
public function handle($request, Closure $next)
{
if($request->input('api_token') &amp;&amp; $this->hasMatchingToken($request->input('api_token'))) {
return $next($request);
}
/**
* This assumes it is behind auth at all times
* so if the above fails we then let auth manage it
*/
if ($this->auth->guest()) {
if ($request->ajax()) {
return response('Unauthorized.', 401);
} else {
return redirect()->guest('auth/login');
}
}
return $next($request);
}
/**
* Laravel 5.2 uses vendor/laravel/framework/src/Illuminate/Auth/TokenGuard.php:66 and then
* vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:87 to get
* a user based on the password
*
* @NOTE
* We can load the user if we want to manage scopes/roles etc but right now it is
* just pass fail
*/
public function hasMatchingToken($token)
{
if($user = User::where('api_token', $token)->first())
return true;
}
}</code></pre><p>And plug that into the Kernel<code>app/Http/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Http;
use Illuminate\Foundation\Http\Kernel as HttpKernel;
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];
/**
* The application's route middleware.
*
* @var array
*/
protected $routeMiddleware = [
'auth' => \App\Http\Middleware\Authenticate::class,
'auth.token' => \App\Http\Middleware\ApiToken::class,
'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
];
}</code></pre><h2 id="tests">Tests</h2><p>You can see the tests<code>tests/UserTokenTest.php</code></p><pre><code>&lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
class UserTokenTest extends TestCase
{
use DatabaseMigrations;
/**
* @test
*/
public function should_pass_auth_with_no_token_since_they_auth()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_auth_user_since_they_have_token()
{
$user = factory(\App\User::class)->create();
$results = $this->call('GET', sprintf("/example/auth_token?api_token=%s", $user->api_token));
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_fail_user_no_token_no_auth()
{
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(302, $results->status());
}
}</code></pre><h2 id="console-commands-to-make-tokens">Console Commands to Make Tokens</h2><p>You can see the commands<code>app/Console/Commands/UserTokenCrud.php</code></p><pre><code>&lt;?php
namespace App\Console\Commands;
use App\User;
use Illuminate\Console\Command;
use Ramsey\Uuid\Uuid;
class UserTokenCrud extends Command
{
/**
* @TODO
* Show, Update, Delete
*/
protected $signature = 'cat:create-token {user_email} {--show=false : Just show the token} ';
protected $description = 'Create the token for the user';
public function __construct()
{
parent::__construct();
}
public function handle()
{
try
{
$user = User::where('email', $this->argument('user_email'))->first();
if(!$user)
throw new \Exception(sprintf("User not found for %s", $this->argument("user_email")));
if($this->option('show'))
{
$this->info(sprintf("User token is %s", $user->api_token));
return false;
}
$token = Uuid::uuid4()->toString();
$user->api_token = $token;
$user->save();
$this->info(sprintf("User with email %s now has token %s", $user->email, $token));
}
catch(\Exception $e)
{
$this->error(sprintf("Error finding user %s", $e->getMessage()));
}
}
}</code></pre><p>Plug that into the Console Kernel<code>Console/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
//\App\Console\Commands\Inspire::class,
\App\Console\Commands\UserTokenCrud::class
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
//$schedule->command('inspire')
->hourly();
}
}</code></pre><p>Allowing to update, delete and see tokens</p><h2 id="example-routes">Example Routes</h2><pre><code>Route::group(['middleware' => 'auth.token'], function () {
Route::get('example/auth_token', function () {
return "foo";
});
});</code></pre><p>I added some testing / example routes. Once you have your api_token give them a try</p><ul><li>/example/auth_token?api_token=foo to show the API Token working</li><li>/s3?api_token=foo</li><li>/rds?api_token=foo</li><li>/dynamodb?api_token=foo</li></ul><p>Note the token might change if you seed the database. You can ssh into the server and run</p><pre><code>php artisan cat:create-token foo@gmail.com --show</code></pre><p>To get the token.</p></description><tags>php, auth, laravel, api</tags></item><item><title>Temporary Auth Updates L5</title><link>https://alfrednutile.info/posts/109/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/109/</guid><description><h1 id="auth-updates">Auth updates</h1><p>First make sure your composer update has the latest Laravel and check that
there are not relevant fixes already via laravel/docs master laravel/framework master or laravel/laravel dev</p><p>Moved evn files to the new format and only 1 is needed now having the</p><pre><code>APP_ENV='local'</code></pre><p>setting for the environment.</p><p>Then update the path in the AuthController to go to auth/login</p><pre><code>#app/Http/Controllers/Auth/AuthController<pre><code>public function login(LoginRequest $request)
{
if ($this-&amp;gt;auth-&amp;gt;attempt($request-&amp;gt;only('email', 'password')))
{
return redirect('/');
}
return redirect('/auth/login')-&amp;gt;withErrors([
'email' =&amp;gt; 'The credentials you entered did not match our records. Try again?',
]);
}</code></pre><p/></pre><p>Here is a good article on using annotations which are needed now in the controller.</p></p><p><a href="http://mattstauffer.co/blog/laravel-5.0-route-annotations">http://mattstauffer.co/blog/laravel-5.0-route-annotations</a></p><p>For example I remove api/v1/projects from routes.php (which is key it can not be in both)</p><p>Then in the ProjectsController.php I added this to the top of the class</p><pre><code>/**
* @Middleware("BehatEditor\Http\Middleware\AuthMiddleware")
* @Before("auth")
*/
class ProjectsController extends BaseController {</code></pre><p>and in the index function</p><pre><code>
/**
* @Get("api/v1/projects", as="api.v1.projects")
* @return mixed
*/
public function index()
{
try
{
$results = $this->service->getAllProjectsForThisUser();
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this->responseServices->respond($results, "Loaded Projects"), 200);
}
catch(\Exception $e) {
return Response::json($this->responseServices->respond($e->getMessage(), "Error Getting Project Failed"), 422);
}<pre><code>}</code></pre><p/></pre><p>So the route is now api/v1/projects using Get and the route name for ease of use is api.v1.projects</p></p><p>Then I ran</p><pre><code>php artisan route:scan</code></pre><p>to get this file made for me</p><pre><code>storage/framework/routes.scanned.php</code></pre><p>Inside we see</p><pre><code>&lt;?php<p>$router->get(&lsquo;auth/login&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@showLoginForm&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->post(&lsquo;auth/login&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@login&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;auth/logout&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\Auth\AuthController@logout&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => NULL, &lsquo;middleware&rsquo; => array (
0 => &lsquo;csrf&rsquo;,
1 => &lsquo;guest&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;api/v1/sites/reports&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\DashController@getDash&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;sites.reports&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;api/v1/projects&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\ProjectsController@index&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;api.v1.projects&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);
$router->get(&lsquo;sites&rsquo;, [&lsquo;uses&rsquo; => &lsquo;App\Http\Controllers\SitesController@index&rsquo;, &lsquo;domain&rsquo; => NULL, &lsquo;as&rsquo; => &lsquo;sites.index&rsquo;, &lsquo;middleware&rsquo; => array (
0 => &lsquo;App\Http\Middleware\AuthMiddleware&rsquo;,
), &lsquo;where&rsquo; => array (
)]);</p><p/></pre><p>All the App namespaces can really be your App or the default Laravel app files.</p></p><p>This file is auto generated from that command so do not edit it.</p><p>The one we just made is</p><pre><code>$router->get('api/v1/projects', ['uses' => 'App\Http\Controllers\ProjectsController@index', 'domain' => NULL, 'as' => 'api.v1.projects', 'middleware' => array (
0 => 'App\\Http\\Middleware\\AuthMiddleware',
), 'where' => array (
)]);</code></pre></description><tags>laravel, laravel 5, auth</tags></item></channel></rss>