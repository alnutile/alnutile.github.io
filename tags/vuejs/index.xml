<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vuejs on Alfred Nutile</title><link>https://alfrednutile.info/tags/vuejs/</link><description>Recent content in vuejs on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/vuejs/index.xml" rel="self" type="application/rss+xml"/><item><title>JSONEditor, Vue and Vuex</title><link>https://alfrednutile.info/posts/256/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/256/</guid><description><p>As I post<a href="https://alfrednutile.info/posts/222">here</a> I wanted to use JSONEditor as a component. But with Vuex I was able to reduce the work quite a ton.<img src="https://dl.dropboxusercontent.com/s/g8n5brbtjom1ulp/Screenshot%202017-11-02%2013.17.32.png?dl=0" alt="">
Here is my store for the json_field:</p><pre><code>export default {
state: {
json_field: null,
},
getters: {
json_field: state => {
return state.json_field;
}
},
mutations: {
jsonField(state, json_field) {
state.json_field = json_field;
}
},
};</code></pre><p>Then my JSONEditor.vue component:</p><pre><code>&lt;template>
&lt;div id="jsoneditor" ref="editor">&lt;/div>
&lt;/template><p>&lt;script>
import JSONEditor from &lsquo;jsoneditor&rsquo;;
import { mapGetters } from &lsquo;vuex&rsquo;</p><pre><code>export default Vue.extend({
computed: {
...mapGetters(
{ json_field: 'json_field' }
),
},
mounted() {
let container = this.$refs.editor;
let options = {
onChange: () =&amp;gt; {
this.$store.commit(&amp;quot;jsonField&amp;quot;, editor.get());
},
modes: [&amp;quot;tree&amp;quot;, &amp;quot;text&amp;quot;],
};
let editor = (container) ? new JSONEditor(container, options) : null;
if(container) {
editor.set(this.json_field);
}
}
});</code></pre><p>&lt;/script></p><p>&lt;style type="text/css">
#jsoneditor {
width: 1000px;
height: 600px;
}
&lt;/style></p><p/></pre><p>Finally the component that will use it:</p></p><pre><code>&lt;template>
    &lt;section>
&lt;b-form-group id="metrics"
label="Metrics"
label-for="metrics"
description="Paste as it should be">
&lt;cat-json-editor v-if="show_editor">&lt;/cat-json-editor>
&lt;/b-form-group>
&lt;/section>
&lt;/template>
&lt;script>
import JSONEditor from 'jsoneditor';
export default {
data() {
return {
form: {},
show_editor: false
}
},
created() {
this.getStandardMetrics();
},
methods: {
getStandardMetrics() {
axios.get('/api/standards').then(res => {
this.$snotify.success("Loading Standards", "Success");
this.$store.commit("jsonField", res.data);
this.show_editor = true;
}).catch(err => {
this.$snotify.warning("error getting metric standars", "Error");
})
}
}
}
&lt;/script></code></pre><p>If do the<code>v-if</code> to load the editor AFTER I have some state for it. I am sure I could have done some watcher but this worked.</p></description><tags>vuejs, laravel</tags></item><item><title>Query Strings, Vue and Bootstrap Active Tab</title><link>https://alfrednutile.info/posts/254/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/254/</guid><description><p>In order to have the tabs and URL change as needed when the user lands on the page or clicks the tab I had to setup a few things.</p><p><img src="https://dl.dropboxusercontent.com/s/bdawx8hl7gisijs/tabs.gif?dl=0" alt=""/><p>First I setup the Vue.js router as seen<a href="https://alfrednutile.info/posts/244">here</a></p><p>Then my component will work out the rest.</p><p>Using<a href="https://bootstrap-vue.js.org/docs/components/tabs">BV</a></p><p>I have tabs and then I set those tabs as needed.</p><pre><code> &lt;b-tabs v-model="activeTab">
&lt;b-tab title="Settings" active >
&lt;div class="mt-4 alert alert-info">
Manage related policies by clicking on the Tabs.<pre><code> &amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;See Results&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Add Policies&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Update Policies&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Quality Metrics&amp;quot;&amp;gt;
&amp;lt;quality-metrics-report class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 1&amp;quot;&amp;gt;&amp;lt;/quality-metrics-report&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;b-tab title=&amp;quot;Travis File Report&amp;quot;&amp;gt;
&amp;lt;travis-subscription-root class=&amp;quot;mt-4&amp;quot; v-if=&amp;quot;this.$store.state.tabIndex == 2&amp;quot;&amp;gt;&amp;lt;/travis-subscription-root&amp;gt;
&amp;lt;/b-tab&amp;gt;
&amp;lt;/b-tabs&amp;gt;</code></pre><p/></pre><p>When I user clicks on the tabs the state changes since the<code>activeTab</code> is a computed property.</p></p><pre><code> computed: {
activeTab: {
get: function() {
return this.$store.state.tabIndex;
},
set: function(newTab) {
let tabs = {
tab: _.findKey(this.tabs, function(o) {return o == newTab;})
}
this.$router.push({
query: tabs
});
console.log(this.$router.history.current);
this.$store.commit('tabIndex', newTab);
},
},</code></pre><p>Using lodash I can easily find my tab name from the value of the tabe we are looking at.</p><pre><code> data() {
return {
tabs: { travis_policy_results: 2, quality_metrics_report: 1 }
}
},</code></pre><p>That takes care of the user clicking. I could store the state right in the component but I am doing this in vuex which should not matter here really.</p><p>Now when the user lands on the page my<code>mounted</code> method acts on the url:</p><pre><code> mounted() {
if(this.$router.history.current['query']['tab']) {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},</code></pre><p>That is it now the state changes on page land and on click.</p><p>I can also have it change as the user clicks on their Back button.</p><pre><code> methods: {
changeTab() {
let tab = this.$router.history.current['query']['tab'];
this.$store.commit('tabIndex', this.tabs[tab]);
}
},
mounted() {
if(this.$router.history.current['query']['tab']) {
this.changeTab();
}
},
watch: {
$route(to, from) {
if (to.fullPath != from.fullPath) {
this.changeTab();
}
}
},</code></pre></description><tags>vuejs, laravel</tags></item><item><title>Vuex External File</title><link>https://alfrednutile.info/posts/250/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/250/</guid><description><p>Setup Vuex with external file<a href="https://vuex.vuejs.org/installation.html">https://vuex.vuejs.org/installation.html</a></p><p>But after this make a file in the<code>resources/assets/js</code> called<code>store.js</code> then set it up as needed
Here I will have one loading state</p><pre><code>export default {
state: {
loading: true,
},
getters: {
loading: state => {
return state.loading;
},
},
mutations: {
loading(state, loading) {
state.loading = loading;
}
}
};</code></pre><p>now import it into your app.js</p><p><code>import store from './store';</code></p><p>and</p><pre><code>var app = new Vue({
mixins: [require('spark')],
store: new Vuex.Store(store),
router
});</code></pre><p>That should do it. I do load some state in my<code>resources/views/layouts/app.blade.php</code></p><pre><code> &lt;script>
window.Laravel = {!! json_encode([
"apiToken" => auth()->user()->api_token ?? null
]) !!};
&lt;/script></code></pre><p>Just to help with some basic stuff</p></description><tags>note2self, vuejs, laravel</tags></item><item><title>Simple API_Token Auth for VueJS Components and Laravel</title><link>https://alfrednutile.info/posts/249/</link><pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/249/</guid><description><p>For those non Passport moments just a simple site that has VueJS Components that need to access routes with authentication in place.</p><p>Thanks to</p><ul><li><a href="https://pineco.de/vue-components-laravel-based-apis/">https://pineco.de/vue-components-laravel-based-apis/</a></li><li><a href="https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2">https://andrew.cool/blog/64/How-to-use-API-tokens-for-authentication-in-Laravel-5-2</a></li></ul><h2 id="route-file">Route File</h2><p><code>routes/api.php</code></p><pre><code>Route::get('/trigger_contacts', function (Request $request) {
\Log::info("Triggering Contacts");
return response()->json(null, 200);
})->middleware('auth:api');</code></pre><p>This will not work out of the box, you will get a 401. Let&rsquo;s plug some things in.</p><h2 id="blade">Blade</h2><p>My main<code>resources/views/layouts/app.blade.php</code></p><pre><code> &lt;script>
window.Laravel = {!! json_encode([
"apiToken" => auth()->user()->api_token ?? null
]) !!};
&lt;/script>
&lt;/head></code></pre><h2 id="okay-now-for-vuejs">Okay now for VueJS</h2><p><code>resources/assets/js/bootstrap.js</code></p><pre><code>window.axios = require('axios');<p>window.axios.defaults.headers.common[&lsquo;X-Requested-With&rsquo;] = &lsquo;XMLHttpRequest&rsquo;;
window.axios.defaults.headers.common[&lsquo;Authorization&rsquo;] = &lsquo;Bearer ' + Laravel.apiToken;</p><p/></pre><h2 id="now-the-migration-and-model">Now the migration and model</h2></p><pre><code>php artisan make:migration alter_users_add_api_token --table=users</code></pre><p>Then the migration file:</p><pre><code> Schema::table('users', function (Blueprint $table) {
$table->char('api_token', 60)->nullable()->after('remember_token');
});</code></pre><p>And the User.php model (which is not in the App\Model folder :) ):</p><pre><code> protected $hidden = [
'password', 'remember_token', "api_token"
];
public function getApiTokenAttribute($value)
{
if (!$value) {
$value = str_random(60);
$this->api_token = $value;
$this->save();
}
return $value;
}</code></pre><h2 id="component">Component</h2><p>This is nothing out of the ordinary:</p><pre><code> triggerContacts() {
this.loading = true;
axios
.get('/api/trigger_contacts')
.then(results => {
console.log(results);
this.status_message = 'Triggered Contacts';
setTimeout(() => {
this.loading = false;
this.status_message = null;
}, 3000);
})
.catch(err => {
console.log('issue with trigger');
});
}</code></pre><p>That is it now your component will work with the route.</p></description><tags>vuejs, laravel</tags></item><item><title>Query Strings and VueJS</title><link>https://alfrednutile.info/posts/244/</link><pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/244/</guid><description><p>Quick way to make the url reflect the query string so the user can share the url and filters.</p><p>This is component based VueJS building so not an SPA
But I still install<code>"vue-router": "^3.0.1"</code></p><p>And load it</p><pre><code>import VueRouter from 'vue-router';<p>Vue.use(VueRouter);</code></pre><p>The on the component I set a watch on the router.</p></p><pre><code> watch: {
$route(to, from) {
this.setModelFromQueryString();
this.search();
}
},</code></pre><p>In this case it will set the query strings then trigger the &ldquo;search&rdquo; to load the data into the page. This search becomes the go to to get state<p>when the page is loaded (as seen below) or when the users clicks “search”</p></p><p>Created kicks this off the state:</p><pre><code> created: function() {
this.setModelFromQueryString();
this.search();
},</code></pre><p>Here is<code>setModelFromQueryString</code>:</p><pre><code> setModelFromQueryString() {
this.params.forEach(param => {
this[param.model] = this.getParam(param.display_name);
});
},</code></pre><p>Make sure the model matches the state the user wants. The states or filters that I am trying to set are stored in data.</p><p>The data model stores theys keys and related model values that I want to focus on keeping and restoring:</p><pre><code> data() {
return {
params: [
{
model: 'stack_name',
display_name: 'stack_name'
},
{
model: 'project_name',
display_name: 'project_name'
},
{
model: 'current_page',
display_name: 'page'
},
{
model: 'language',
display_name: 'language'
},
{
model: 'search_name',
display_name: 'name'
}
],</code></pre><p>Now that the model is there I can iterate over these in a few other areas I will show below.</p><p>Page load, and search call the method<code>search</code> and this takes care of a few things</p><ul><li>make sure the the query string reflects the latest model, e.g. what the user set on the page form</li><li>updates the api url to have these params<code>this.getParams('/api/libraries')</code></li></ul><p>Here is search plus those methods:</p><pre><code>search() {
this.setQueryString();
this.loading = true;
axios
.get(this.getParams('/api/libraries'))
.then(results => {
this.libraries = results.data;
this.loading = false;
})
.catch(error => {
console.log(error);
$alerts.send('Error', 'Could not get next page', true);
});
},
getParams(prefix) {
let url_string = prefix + '?';
let query = [];
this.params.forEach(param => {
if (this[param.model]) {
let value = this[param.model];
let name = param.display_name;
query.push(`${name}=${value}`);
}
});
query = query.join('&amp;');
return `${url_string}${query}`;
},
getParam(param) {
return this.$router.history.current.query[param];
},
paginateFunction(page) {
this.current_page = page;
this.search();
},
setQueryString() { //This method builds up the url so the user will see the filter on page load based on their search
let items = {};<pre><code> this.params.forEach(param =&amp;gt; {
if (this[param.model] != undefined) {
items[param.display_name] = this[param.model];
}
});
this.$router.push({
query: items
});
},</code></pre><p/></pre><p><img src="https://dl.dropboxusercontent.com/s/lmnyjw7aub0ggb2/filters.gif?dl=0" alt=""/></p></description><tags>vuejs, note2self, laravel</tags></item><item><title>BrowserSync and Laravel</title><link>https://alfrednutile.info/posts/239/</link><pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/239/</guid><description><p>Quick reminder to take advantage of this amazing feature<a href="https://laravel.com/docs/5.6/mix#browsersync-reloading">https://laravel.com/docs/5.6/mix#browsersync-reloading</a></p><p>No more reloading your browser.</p><pre><code>yarn add browser-sync --dev</code></pre><p>then to your<code>webpack.mix.js</code> e.g. the domain of the site you are working on.</p><pre><code> mix.browserSync('foo.test');</code></pre><p>finally</p><pre><code>yarn run watch</code></pre><blockquote><p>Note turn off sourceMaps when running this else it can be kinda slow</p></blockquote></description><tags>laravel, note2self, vuejs</tags></item><item><title>Passing from Blade to VueJs</title><link>https://alfrednutile.info/posts/236/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/236/</guid><description><p>A lot of posts had<a href="https://medium.com/@m_ramsden/passing-data-from-laravel-to-vue-98b9d2a4bd23">this</a> style.</p><p>I ended up just needing this:</p><p><img src="https://dl.dropboxusercontent.com/s/huucm3vx4uyklq7/Screenshot%202018-02-23%2020.29.22.png?dl=0" alt=""/><p>The controller simply does this:</p><p><img src="https://dl.dropboxusercontent.com/s/qw7x7u7ayr7j441/Screenshot%202018-02-23%2020.29.52.png?dl=0" alt=""/></description><tags>laravel, note2self, vuejs</tags></item><item><title>VueJS Transition Helper</title><link>https://alfrednutile.info/posts/228/</link><pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/228/</guid><description><p>There are docs on how to get a Transition to take effect when an item loads<a href="https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components">https://vuejs.org/v2/guide/transitions.html#Transitioning-Single-Elements-Components</a></p><p>But I was not having much luck with this using<a href="https://uiv.wxsm.space/carousel">https://uiv.wxsm.space/carousel</a>.</p><p>I ended up making a quick helper function to keep it from looking like exploded elements.</p><p>You can see the results of this change here</p><p><img src="https://dl.dropboxusercontent.com/s/osmd4p5zor2jgah/featured_blog.gif?dl=0" alt=""/><p>So the steps followed per the docs above for the most part.</p><p>Add to my scss file:</p><pre><code>
.ibox-content.text-center.carousel {
min-height: 400px;
}<p>.fade-enter-active, .fade-leave-active {
transition: opacity .5s;
}
.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {
opacity: 0;
}</code></pre><p>Make a<code>TransitionHelper.vue</code> componenent:</p></p><pre><code>&lt;template>
&lt;transition name="fade">
&lt;div v-show="show" >
&lt;slot>&lt;/slot>
&lt;/div>
&lt;/transition>
&lt;/template>
&lt;script>
export default {
data() {
return {
show: false
};
},
mounted() {
this.show = true;
}
};
&lt;/script></code></pre><p>Then added to my<code>app.js</code></p><pre><code>Vue.component('transition-helper', require('./components/TransitionHelper.vue'));</code></pre><p>Finally wrapped my blade file output in this helper.</p><pre><code> &lt;transition-helper style="display: none;">
&lt;carousel class="homepage-featured-carousel" :indicators="false" :controls="true" :interval="0">
@foreach($featured_documents->chunk(6) as $chunk)
&lt;slide>
&lt;div class="row-fluid">
@foreach($chunk as $item)
&lt;div class="col-xs-2">
&lt;div class="ibox float-e-margins homepage-featured-item">
&lt;div class="ibox-title">
&lt;img class="img-responsive" src="images/ces/image_placeholder.svg" alt="">
&lt;/div>
&lt;div class="ibox-content"></code></pre><p>You can see the<code>display:none</code> kicking in before the page loads<code>js</code> etc keeping it well hidden.<p>Then once it is all loaded and we are ready I show it and transition it in.</p></p></description><tags>vuejs, note2self</tags></item></channel></rss>