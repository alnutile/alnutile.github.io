<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iron on Alfred Nutile</title><link>https://alfrednutile.info/tags/iron/</link><description>Recent content in iron on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/iron/index.xml" rel="self" type="application/rss+xml"/><item><title>Logging in Iron.io Workers</title><link>https://alfrednutile.info/posts/147/</link><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/147/</guid><description><p>Previously I wrote about how to use<a href="https://alfrednutile.info/posts/143">Lumen and Iron.io</a> this adds to that by modifying the logging technique.</p><p>As noted the worker is basically a class that sets things up, hands off the payload to the handler and returns the results.</p><pre><code>&lt;?php<p>use App\CompareFuseHandler;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Log;</p><p>require_once<strong>DIR</strong> . &lsquo;/libs/bootstrap.php&rsquo;;</p><p>$payload = getPayload(true);</p><p>fire($payload);</p><p>function fire($payload)
{
$logs = storage_path(&lsquo;logs/lumen.log&rsquo;);
Log::info(sprintf("Starting Worker at %s", \Carbon\Carbon::now()));
try
{
//Empty Logs
$handler = App::make(&lsquo;App\CompareFuseHandler&rsquo;);
$handler->handle($payload);
echo "Success See Logs Below: \n";
Log::info(sprintf("Ending Worker at %s", \Carbon\Carbon::now()));
echo File::get($logs);
}</p><pre><code>catch(\Exception $e)
{
echo &amp;quot;Error See Logs Below: \n&amp;quot;;
Log::info(sprintf(&amp;quot;Ending Worker at %s&amp;quot;, \Carbon\Carbon::now()));
echo File::get($logs);
}</code></pre><p>}</code></pre><p>The nice thing about above is that all throughout my handler class I can start the do<code>Log::info(&lsquo;foo&rsquo;)</code> to store up a report for the end of the process on either Success or Error.</p></p><p>Other options of course are<a href="https://bugsnag.com/">BugSnag</a> and<a href="https://papertrailapp.com">PaperTrail</a></p></description><tags>iron, microservices, laravel</tags></item><item><title>Iron.io and Lumen</title><link>https://alfrednutile.info/posts/143/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/143/</guid><description><h1 id="lumen-iron-worker">Lumen Iron Worker</h1><h2 id="what-and-why">What and why</h2><p>A worker is a great way to run tasks as needed taking the load off your applications server and greatly speeding up the process of a task as you can run numerous workers at once.</p><p>A lot of this comes from<a href="http://dev.iron.io/worker/beta/getting_started/">http://dev.iron.io/worker/beta/getting_started/</a> and<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a> and their examples</p><h2 id="topics-covered">Topics covered</h2><ul><li>Creating a Lumen Worker</li><li>Creating a statically linked binary in the worker</li><li>Testing the worker locally with Docker</li><li>Entering your docker environment</li><li>Design patterns</li></ul><h2 id="install-lumen">Install Lumen</h2><pre><code>composer create-project laravel/lumen --prefer-dist</code></pre><p>Add to composer.json</p><blockquote><pre><code> "iron-io/iron_mq": "~1.5",</code></pre></blockquote><pre><code> "iron-io/iron_worker": "~1.4"</code></pre><p>So now it looks like</p><pre><code> "require": {
"laravel/lumen-framework": "5.0.*",
"vlucas/phpdotenv": "~1.0",
"iron-io/iron_mq": "~1.5",
"iron-io/iron_worker": "~1.4"
},</code></pre><h2 id="install-iron-client">Install iron client</h2><p>See their notes here<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a></p><h2 id="install-docker">Install docker</h2><p>On a mac they have great steps here for that<a href="https://docs.docker.com/installation/mac/">https://docs.docker.com/installation/mac/</a></p><h2 id="environment-settings">Environment settings</h2><p>For Lumen we can simply use our typical .env file. For Iron you put your info in the iron.json file in the root of the app (make sure to add this to .gitignore)</p><p>The format is</p><pre><code>{ "token": "foo", "project_id": "bar" }</code></pre><h2 id="the-worker">The worker</h2><p>Make a folder called workers at the root of your app</p><p>In there place your worker file. In this case<code>ExampleOneWorker</code>. This is what gets called, as you will see soon, when the worker starts. This is what will receive the payload.</p><pre><code>workers/ExampleOneWorker.php</code></pre><p>Inside of this to start will be</p><pre><code>&lt;?php<p>require_once<strong>DIR</strong> . &lsquo;/libs/bootstrap.php&rsquo;;</p><p>$payload = getPayload(true);</p><p>fire($payload);</p><p>function fire($payload)
{
try
{
$handler = new \App\ExampleOneHandler();
$handler->handle($payload);
}</p><pre><code>catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error with worker %s&amp;quot;, $e-&amp;gt;getMessage());
echo $message;
}</code></pre><p>}</code></pre><p>For testing reasons and code clarity I do not like to put much code in here. I instantiate a handler class and pass in the payload.</p></p><p>The getPayload in the helper.php file, provided by an Iron.io example, will get the payload for us.</p><p>There is another folder to make in there called libs and for now it has this file<code>bootstrap.php</code> and<code>helper.php</code> [1] The helper is<a href="https://github.com/alnutile/lumen_worker/blob/master/workers/libs/helper.php">here</a></p><p>With the contents as seen below for bootstrap or<a href="https://github.com/alnutile/lumen_worker/tree/master/workers/libs">visit</a> to get the files.</p><pre><code>&lt;?php
require __DIR__ . '/../../vendor/autoload.php';
$app = require_once __DIR__ . '/../../bootstrap/app.php';
if(!function_exists('getPayload'))
require_once __DIR__ . '/helper.php';<p>use Illuminate\Encryption\Encrypter;
$app->boot();</p><p>function decryptPayload($payload)
{
$crypt = new Encrypter(getenv(&lsquo;IRON_ENCRYPTION_KEY&rsquo;));
$payload = $crypt->decrypt($payload);
return json_decode(json_encode($payload), FALSE);
}</code></pre><p><code>helper.php</code> I placed a gist here<a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8"><a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8">https://gist.github.com/alnutile/41ee747bb8e1810d19e8</a></a></p></p><p>Also for this example we will need a<code>payload.json</code> file in the root of our app. More on that shortly, for now put this into the file.</p><pre><code>{
"foo": "bar"
}</code></pre><p>Finally our app folder has the<code>ExampleOneHandler.php</code> file to handle the job.</p><pre><code>&lt;?php<p>namespace App;</p><p>class ExampleOneHandler {</p><pre><code>public function handle($payload)
{
echo &amp;quot;This is the Payload&amp;quot;;
echo print_r($payload, 1);
}</code></pre><p>}</code></pre><p>We will do more shortly.</p></p><p>Here is the folder/file layout</p><p><img src="https://dl.dropboxusercontent.com/s/c561wmsnv8hl2rm/worker_files.png?dl=0" alt="files"/><h2 id="round-1-exampleonehandler">Round 1 ExampleOneHandler</h2><p>Lets now run this and see what happens.</p><p>Using docker we can run this locally</p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleOneWorker.php -payload payload.json"</code></pre><p>You just ran, what ideally will be, the exact worker you will run when you upload the code. It will take a moment on the first run. After that it will be super fast.</p><p>Here is my output</p><p><img src="https://dl.dropboxusercontent.com/s/4qkq5e21jl550sg/worker_command.png?dl=0" alt="outputone"/><h3 id="uploading-to-iron">Uploading to Iron</h3><h4 id="bundle">Bundle</h4><p>This is really easy to make a script for by just adding them to an upload_worker.sh file in the root of your app and running that as needed.</p><pre><code>touch ExampleOneWorker.zip
rm ExampleOneWorker.zip
zip -r ExampleOneWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleOneWorker.zip php workers/ExampleOneWorker.php</code></pre><p>So we are touching the file so there are no errors if it is not there.
Then we rm it
And zip it ignoring .git to keep it slim
and then we upload it with the worker and point to the directory to use.</p><p><strong>Don&rsquo;t run it just yet</strong></p><p>I add my iron.json file to the root of my app as noted above.</p><p>and I make the Project on the Iron HUD</p><p><img src="https://dl.dropboxusercontent.com/s/qq2h0to2epnc0qw/worker_json.png?dl=0" alt="iron"/><p>And then I can run the<code>make_worker.sh</code> I made above</p><p>You should end up with this output</p><p><img src="https://dl.dropboxusercontent.com/s/utb478g6510rssd/worker_iron_upload.png?dl=0" alt="output"/><h4 id="looking-at-the-hud-iron-webui">Looking at the HUD (Iron WebUI)</h4><p>Under Worker and tasks we see</p><p><img src="https://dl.dropboxusercontent.com/s/7d1klwablw037wh/worker_hud_tasks.png?dl=0" alt="worker"/><p>So lets run it from the command line to see it work</p><pre><code>iron worker queue --wait -payload-file payload.json ExampleOneWorker</code></pre><p>The wait is pretty cool since we can get this output. This is key when doing master slave workers as well.</p><p>You get the same output as before. But it was run on the worker</p><p>Here is the HUD</p><p><img src="https://dl.dropboxusercontent.com/s/bxc1dolij0l2f7w/worker_run_example1.png?dl=0" alt="worker ran"/><h2 id="round-2-lets-do-something-real">Round 2 Lets do something real</h2><p>So far the payload has not done much but lets use it in this next example.</p><p>As above we make and<code>ExampleTwoWorker.php</code></p><p>Make payload2.json file</p><pre><code>{
"search_word": "batman"
}</code></pre><p>Then we use it to call our<code>ExampleTwoWorkerHandler</code></p><p><strong>warning this is not an example on good php code</strong></p><pre><code>&lt;?php namespace App;<p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
return file_get_contents($image);
}
}</code></pre><p>}</code></pre><p>I test locally</p></p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleTwoWorker.php -payload payload2.json" > output.png</code></pre><p>But this time put the output into a file and we get</p><p><img src="https://dl.dropboxusercontent.com/s/kmtuvgzhpzws6xz/worker_lego_one.png?dl=0" alt="lego guys"/><h3 id="making-a-custom-binary">Making a custom binary</h3><p>Before I get this to iron lets make it more useful since I will lose that output.png file on the worker. Some workers we have would convert that into a base64 blob and send that back in a callback.</p><p>One enter into docker like I noted above</p><p>Two run<code>apt-get update</code></p><p>Then run<code>apt-get install jp2a</code></p><p>Then make a folder called /worker/builds/</p><p>And in there follow these instructions<a href="http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html">http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html</a> replacing jp2a as needed.</p><p>Then make a folder called /worker/bin and copy jp2a from<code>/worker/builds/jp2a-1.0.6/src/jp2a</code> to this bin folder.</p><p>You should be able to see that run now by ding /worker/bin/jp2a even run<code>apt-get remove jp2a</code> to show it works as a standalone library [3]</p><p>Let&rsquo;s adjust our code</p><pre><code>&lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 4/27/15
* Time: 9:02 PM
*/<p>namespace App;</p><p>use Illuminate\Support\Facades\File;</p><p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
$path_to_worker = base_path('bin/');
exec(&amp;quot;chmod +x {$path_to_worker}/jp2a&amp;quot;);
exec(&amp;quot;TERM=xterm {$path_to_worker}/bin/jp2a $image&amp;quot;, $output);
return implode(&amp;quot;\n&amp;quot;, $output);
}
}</code></pre><p>}</code></pre><p>run locally and you might get some decent output or not :(</p></p><p><img src="https://dl.dropboxusercontent.com/s/76vbdf0iubehf5c/worker_batman.png?dl=0" alt="batman"/><h3 id="make-and-upload-the-worker">Make and upload the worker</h3><p>Then I run<code>sh ./make_worker_two.php</code></p><pre><code>touch ExampleTwoWorker.zip
rm ExampleTwoWorker.zip
zip -r ExampleTwoWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleTwoWorker.zip php workers/ExampleTwoWorker.php</code></pre><p>And run and wait</p><pre><code>iron worker queue --wait -payload-file payload2.json ExampleTwoWorker</code></pre><p>And if all goes well your console and the logs should show something like</p><p><img src="https://dl.dropboxusercontent.com/s/263tlw5vkswqqvp/worker_results.png?dl=0" alt="batman"/><h2 id="entering-your-docker-environment">Entering your docker environment</h2><p>Easy</p><pre><code>docker run -it -v "$(pwd)":/worker -w /worker iron/images:php-5.6 /bin/bash</code></pre><p>Now you can test things in there, download packages etc.</p><h2 id="mvc">MVC</h2><p>Not sure if this really is correct but I tend to see the Worker file as my route file. The handler as the controller and other classes as needed, Service, Repository etc. This makes things more testable etc and better organize imo.</p><h2 id="connecting-the-queue-to-the-worker">Connecting the Queue to the Worker</h2><p>Coming soon&hellip;</p><h2 id="numerous-environments">Numerous Environments</h2><p>Waiting on bug report<a href="https://github.com/iron-io/docs/issues/467">https://github.com/iron-io/docs/issues/467</a></p><p>But part of the process is to setup other projects at iron. For example if my worker is ExampleWorker then I would make ExampleWorker-dev.
I would then switch to my git branch dev and do my changes. Once that is done I would make sure the token and key in my iron.json file matches that new project I made for dev and that is it.</p><p>The other way is slicker cause you do not need to change your iron.json each time but in the mean time this works fine.</p><h2 id="deploy-from-codeship">Deploy from Codeship</h2><p>Codeship will allow you to set custom deploy scripts or bash shells scrips basically.</p><p>In here I placed for the branch I wanted</p><pre><code>curl -sSL -O https://github.com/iron-io/ironcli/releases/download/v0.0.6/ironcli_linux
chmod +x ironcli_linux
touch iron.json
echo "{" >> iron.json
echo '"token": "bar",' >> iron.json
echo '"project_id": "foo"' >> iron.json
echo "}" >> iron.json
zip -r PDF2PagesWorker.zip .
./ironcli_linux worker upload --stack php-5.6 PDF2PagesWorker.zip php workers/PDF2PagesWorker.php</code></pre><p>You can easily then swap out the related project id and token for the environment you are uploading to eg development, staging etc.</p><h2 id="repo">Repo</h2><p><a href="https://github.com/alnutile/lumen_worker">https://github.com/alnutile/lumen_worker</a></p><p>another example<a href="https://github.com/alnutile/thumbnail-maker">Thumbnail Maker</a></p><p>[1] These seems to be a part of the iron worker for version 1 but not sure why not for 2 maybe there is a better pattern for this.</p><p>[2] I renamed it to ExampleOneLumen</p><p>[3] So far this is a 50/50 solution it did not work for pdf2svg but it did work for pdftk</p></description><tags>laravel, php, iron, lumen</tags></item></channel></rss>