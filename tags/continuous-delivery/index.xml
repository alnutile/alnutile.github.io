<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>continuous delivery on Alfred Nutile</title><link>https://alfrednutile.info/tags/continuous-delivery/</link><description>Recent content in continuous delivery on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/continuous-delivery/index.xml" rel="self" type="application/rss+xml"/><item><title>Continuous Delivery in a NutShell</title><link>https://alfrednutile.info/posts/224/</link><pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/224/</guid><description>&lt;h1 id="mainline-workflow">Mainline Workflow&lt;/h1>
&lt;blockquote>
&lt;p>&amp;ldquo;Once you achieve a certain frequency of releases, around once a week or so, it no longer makes sense to branch for release.&amp;rdquo; - Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/p>
&lt;/blockquote>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;p>I want to do a &lt;code>tl;dr&lt;/code> of a workflow, that two years ago seemed insane, but now would seem impossible for me to work without and still feel efficient.
The topic of Continuous Delivery and Mainline workflow.&lt;/p>
&lt;p>To sum it up:&lt;/p>
&lt;p>“Developers that practice working in small blocks of code, writing tests and committing often. Your app has the right amount of tests in place, a CI that runs with each commit, building and testing for every push. Reviewing each others code daily, and the ability to Feature Flag items that are not ready yet that with each push to the only branch, Mainline, the code then goes to production. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>”
Insane right?&lt;/p>
&lt;p>But then when your hear of the many companies following this pattern:&lt;/p>
&lt;ul>
&lt;li>Google&lt;/li>
&lt;li>Facebook&lt;/li>
&lt;li>Amazon&lt;/li>
&lt;li>&lt;a href="https://www.atlassian.com/blog/continuous-delivery/practical-continuous-deployment">Atlassian&lt;/a>&lt;/li>
&lt;li>WordPress&lt;/li>
&lt;li>Intercom&lt;/li>
&lt;li>IMVU, since 2009 (50 deployments/day)&lt;/li>
&lt;li>Wealthfront, since 2010&lt;/li>
&lt;li>Etsy, since 2010&lt;/li>
&lt;li>DISQUS, since 2011&lt;/li>
&lt;li>Box, since 2013&lt;/li>
&lt;li>Hubspot, since 2013 (300 deployments/day)&lt;/li>
&lt;li>Tesla and Adobe&lt;/li>
&lt;/ul>
&lt;p>[^2]&lt;/p>
&lt;p>And watch &lt;a href="https://youtu.be/SjVV3xuYKJs">videos&lt;/a> by Jez Humble and read the book Continuous Delivery, you start to see how you can leave behind a Feature Branch/PR workflow for this much more efficient and still stable workflow.&lt;/p>
&lt;p>That about sums it up but now a bit more details.&lt;/p>
&lt;h2 id="day-to-day-responsibilities-of-the-developers">Day to day responsibilities of the developers&lt;/h2>
&lt;blockquote>
&lt;p>Your team prioritizes keeping the software deployable over working on new features - Martin Fowler &lt;a href="https://martinfowler.com/bliki/ContinuousDelivery.html">ContinuousDelivery&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>First of all this workflow really asks for developers to break down their work to small small steps/blocks. Almost going hand in hand with TDD minus.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/p6amd7n63yqn32g/4_pane_guy_and_getting_started.png?dl=0" alt="">&lt;/p>
&lt;p>With this, and some items I list below, the developer can move forward with confidence that the app is not going to break with the feature they are working on being not 100% done.&lt;/p>
&lt;p>And the developer is working knowing that each block of code has to be production ready so there has to be trust here that they will code at this level. But all of this will surface in the code review that I will talk about below.&lt;/p>
&lt;p>And to top it off they are pushing to the repo and therefore a Continuous Integration system like TravisCI, 3-4 times at least a day.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;blockquote>
&lt;p>Being proud of 100% test coverage is like being proud of reading every word in the newspaper. Some are more important than others. - Kent beck&lt;/p>
&lt;/blockquote>
&lt;p>As noted above coverage and testing is key. This does not mean 100% coverage but as a team you have an agreement to the right amount and your CI system should fail when the code falls below this amount.&lt;/p>
&lt;p>These test should be part of all our blocks of code you are committing and not be an after thought.&lt;/p>
&lt;p>And lastly these tests are what give you all the confidence to have this workflow where you are pushing to a server numerous times a day.&lt;/p>
&lt;h2 id="code-review">Code Review&lt;/h2>
&lt;blockquote>
&lt;p>10 lines of code = 10 issues.
500 lines of code = &amp;ldquo;looks fine.&amp;rdquo;
Code reviews - @iamdevloper&lt;/p>
&lt;/blockquote>
&lt;p>Code Review is key, and this is were many from a PR (Pull Request) work flow would argue is missing. Code is getting into &amp;ldquo;master&amp;rdquo; before being reviewed.&lt;/p>
&lt;p>I get it, but if we are committing often, reviewing often and have good test coverage, then you will see areas of the code where patterns can be optimized or direction changed as you take a couple of times a day to do the code review.&lt;/p>
&lt;p>And this is an pattern that will ideally help every one on the team to grow to the level expected. If some developers are truly too junior to code at this level then maybe there are more root level efforts to be had to help them, e.g. pair coding etc.&lt;/p>
&lt;p>And the Code Review goes both ways not just lead reviewing others but reviewing each others code.&lt;/p>
&lt;h2 id="feature-flags">Feature Flags&lt;/h2>
&lt;blockquote>
&lt;p>Feature Toggles are a powerful technique, allowing teams to modify system behavior without changing code. - Martin Fowler&lt;/p>
&lt;/blockquote>
&lt;p>This is another key pattern to make this possible. Let&amp;rsquo;s say feature Foo is ready for production but feature Bar is not. Both are on mainline and both are pushed to production! But Bar is behind a feature flag/toggle. This means that unless an admin goes in and turns it on in the UI or a setting changed in the ENVIRONMENT is set to on then it will not appear, e.g. the load balancer sends traffic from us-east to server 1 where this feature is on.&lt;/p>
&lt;p>As noted above the developer is working in small blocks that will not impact the application as a whole. Even migrations can be done this way. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;p>This also leaves us open to do A B testing too if we want. Or better yet remove a feature that we find out was not being used! Nothing beats being able to remove code that is not needed.&lt;/p>
&lt;h2 id="ci">CI&lt;/h2>
&lt;blockquote>
&lt;p>From now on, our code in revision control will always build successfully and pass its tests - &lt;a href="http://www.jamesshore.com/Blog/Continuous-Integration-on-a-Dollar-a-Day.html">James Shore: Continuous Integration on a Dollar a Day&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This is the gateway from Developer to Deployment. This is the guard that keeps those accidental typos, missing libraries etc from making it to the server.&lt;/p>
&lt;p>Just one &lt;code>.yml&lt;/code> file later, good example &lt;a href="https://github.com/thephpleague/skeleton/blob/master/.travis.yml">here&lt;/a> for php, and you are ready to use a system like TravisCI.&lt;/p>
&lt;p>And this one step will be a world of difference even if you are working alone.&lt;/p>
&lt;p>This is key in CD is that no code will be deployed till it passes CI. This means:&lt;/p>
&lt;ul>
&lt;li>The code will be built on the server catching &amp;ldquo;it works on my machine issues&amp;rdquo;&lt;/li>
&lt;li>The tests has to pass.&lt;/li>
&lt;li>The style rules have to pass&lt;/li>
&lt;/ul>
&lt;p>And once all this passes then you can have it do the deployment for you!&lt;/p>
&lt;p>Even with tools like &lt;a href="https://laravel.com/docs/5.5/dusk">Dusk&lt;/a> or &lt;a href="http://behat.org/en/latest/">Behat&lt;/a> you can be testing your UI as well.&lt;/p>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;blockquote>
&lt;p>Over time, deployments should tend towards being fully automated. There should be two tasks for a human being to perform to deploy software into a development, test, or production environment: to pick the version and environment and to press the “deploy” button - Humble, Jez. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/p>
&lt;/blockquote>
&lt;p>There are many ways to deploy of course. The CD goal is that you are deploy an &amp;ldquo;Artifact&amp;rdquo;. The reason is that this build and all the steps to make it so, that passed on your CI system should not be run again when deployed.&lt;/p>
&lt;p>A good example of this is say you have 3 servers behind a load balancer and you want to deploy to all of them, one at a time. You then have to hope, if you are not deploying an artifact, that your steps will work on all them as they did on the CI. For me this would mean.&lt;/p>
&lt;ul>
&lt;li>composer install - which can have moments where Github fails or http issue&lt;/li>
&lt;li>yarn install - still some risk here of server issues&lt;/li>
&lt;/ul>
&lt;p>What, for me, has been working well is &lt;a href="https://aws.amazon.com/codedeploy/">CodeDeploy&lt;/a>. This integrates with TravisCI so it fits right into the &lt;code>.yml&lt;/code> file. And during deployment of this artifact its is smart enough to do it one server at a time, removing it from the ELB (Elastic Load Balancer) while this is happening, and then putting it back when done if it passes. Stopping along the way and rolling back if there is a fail.&lt;/p>
&lt;h2 id="long-qa-branches">Long QA Branches&lt;/h2>
&lt;p>There are those moments when QA and regulations are blocking you. But this then turns into a &amp;ldquo;release branch&amp;rdquo; and not a tag.&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/blvz1t41eejrwzs/release_branch.jpg?dl=0" alt="">&lt;/p>
&lt;p>Here are some quotes from the book Continuous Delivery.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;A more manageable branching strategy (when you can not release as often) —our strong recommendation, and arguably the industry standard—is to create long-lived branches only on release, as shown in the image above&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>And&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Branch for Release The one situation when it’s always acceptable to create a branch is shortly before a release. Once the branch is created, testing and validation of the release is done from code on the branch, while new development is performed on mainline.&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>Finally&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;It is important, when branching for release, not to create further branches off the release branch.&amp;rdquo; from &amp;ldquo;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation (Adobe Reader) (Addison-Wesley Signature Series (Fowler))&amp;rdquo; by Jez Humble, David Farley&lt;/p>
&lt;/blockquote>
&lt;p>Again this if for those times when there are systems / departments and regulations in place that leave you no real option.&lt;/p>
&lt;h2 id="links">Links&lt;/h2>
&lt;p>Jez Humble and Continuous Deliver 20017 &lt;a href="https://www.youtube.com/watch?v=SjVV3xuYKJs&amp;amp;t=458s">Keynote: Continous Delivery Sounds Great By Jez Humble @ Agile India 2017 - YouTube&lt;/a>&lt;/p>
&lt;p>The Book &lt;a href="https://www.amazon.com/dp/B003YMNVC0?ref_=k4w_ss_details_rh">here&lt;/a>&lt;/p>
&lt;p>Martin Fowler Continuous Delivery &lt;a href="https://martinfowler.com/bliki/ContinuousDelivery.html">ContinuousDelivery&lt;/a>&lt;/p>
&lt;p>Feature Toggles - &lt;a href="https://martinfowler.com/articles/feature-toggles.html">Feature Toggles (aka Feature Flags)&lt;/a>&lt;/p>
&lt;h2 id="footnotes">Footnotes&lt;/h2>
&lt;p>[^2] Credit to: &lt;a href="https://www.quora.com/What-companies-best-exemplify-IMVU-style-continuous-deployment">What companies best exemplify IMVU-style continuous deployment? - Quora&lt;/a>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Or even going to staging with an &amp;ldquo;artifact&amp;rdquo; will be good enough since that will be sent as a whole to production. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>For us we keep logic in the code and not so much in the database, so when a field is created we tend to allow it to be null since this means we can manage that impact it has on the rest of the application if our code is not ready yet to manage the field. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description>
continuous delivery</item></channel></rss>