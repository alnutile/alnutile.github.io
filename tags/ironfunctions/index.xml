<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ironfunctions on Alfred Nutile</title><link>https://alfrednutile.info/tags/ironfunctions/</link><description>Recent content in ironfunctions on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jul 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/ironfunctions/index.xml" rel="self" type="application/rss+xml"/><item><title>IronFunctions and PHP</title><link>https://alfrednutile.info/posts/213/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/213/</guid><description><p>A colleague of mine<a href="https://twitter.com/skwashd">Dave Hall</a> poing out<a href="https://github.com/iron-io/functions">IronFunctions</a>. And being in the pursuit of serverless options especially ones that even have examples of PHP I had to give it a try. This post is a note2self in that the intro<a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">here</a> has some bits that need fixing BUT I think it is close and I hope to add more updates here about the tool.</p><p>All the steps below will only work once you take on the initial hello world<a href="https://github.com/iron-io/functions/blob/master/README.md">here</a>. After that you have the<code>fn</code> cli tool installed and a running local iron-functions server.</p><p>For one I needed to apply each patch seen<a href="https://github.com/iron-io/functions/pull/444/files">here</a></p><p>Once I had all that in place I re-reran the<code>fn</code> install command from the folder where I download the<code>iron-io/functions</code> repo into</p><pre><code>cd ../functions
curl -LSs https://goo.gl/VZrL8t | sh</code></pre><p>Then I restarted the service</p><pre><code>docker run --rm -it --name functions -v ${PWD}/data:/app/data -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 iron/functions</code></pre><blockquote><p>btw you need to have Docker working on your machine. This is so easy now that, for example<a href="https://docs.docker.com/docker-for-mac/install/">mac</a>, it should be a gui install.</p></blockquote><p>Ok now back to my example project</p><pre><code>cd ../example_php</code></pre><p>In here I have several files since the above fix</p><pre><code>worker.php
func.yml
Dockerfile</code></pre><blockquote><p>the cat hello.payload.php in the example docs did not work so I used curl and POST instead but this is not what I want to do
I want to test this from the CLI first so will come back to that later</p></blockquote><p>This folder has a<code>composer.json</code> file. Just run<code>composer init</code> since it just needs to be a basic install of PHP.</p><p><strong>worker.php</strong></p><pre><code>&lt;?php
require 'vendor/autoload.php';
stream_set_blocking(STDIN, 0);
$payload = json_decode(file_get_contents("php://stdin"), true);
if (isset($payload['name'])) {
var_dump($payload);
echo "Hello 2 ", $payload['name'],"!\n\n";
} else {
var_dump($payload);
echo "Hello World 2!\n\n";
}</code></pre><p><strong>func.yml</strong></p><pre><code>name: alnutile/hello
version: 0.0.7
runtime: php
entrypoint: ./func
build:
- docker run --rm -v "$PWD":/worker -w /worker iron/php:dev composer install</code></pre><p><strong>Dockerfile</strong></p><pre><code>FROM iron/php<p>WORKDIR /app
ADD . /app</p><p>ENTRYPOINT ["php", "worker.php"]</code></pre><p>Then as the docs note<a href="https://github.com/iron-io/functions/tree/master/examples/hello/php"><a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">https://github.com/iron-io/functions/tree/master/examples/hello/php</a></a> I do all the install steps.</p></p><p>Once those are done ran<code>curl</code> to see it work:</p><pre><code>>curl -X POST http://localhost:8080/r/phpapp1/hello -d '{ "name": "bar" }'</code></pre><p>Which results in:</p><pre><code>array(1) {
["name"]=>
string(3) "bar"
}
Hello 2 bar!</code></pre><p>For updates I added one more file<code>update.sh</code></p><pre><code>#!/bin/sh
# update a function with a new version and push it
fn bump &amp;&amp; fn build &amp;&amp; fn push
# then update the route
fn routes update phpapp1 /hello</code></pre><p>just to save some time there.</p><p>More soon on using this with Lumen and other options. I tried this but some PHP items are missing on the Alpine docker image to make this work.</p></description><tags>php, ironfunctions, note2self</tags></item></channel></rss>