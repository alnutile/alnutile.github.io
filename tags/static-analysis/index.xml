<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>static analysis on Alfred Nutile</title><link>https://alfrednutile.info/tags/static-analysis/</link><description>Recent content in static analysis on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/static-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>PHPStan Setup</title><link>https://alfrednutile.info/posts/251/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/251/</guid><description>&lt;p>There is a good episode here &lt;a href="https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases">https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases&lt;/a> that talks about this.&lt;/p>
&lt;p>The short of it is that it can easily catch some issues that your tests or IDE did not. For example I had a class name overlap due to a typo and it found it. From there it will output tons of other info that may just help guide you in your work.&lt;/p>
&lt;p>The install is super easy as seen in the docs &lt;a href="https://github.com/phpstan/phpstan">https://github.com/phpstan/phpstan&lt;/a>&lt;/p>
&lt;p>For me I did&lt;/p>
&lt;pre>&lt;code>composer global require phpstan/phpstan
&lt;/code>&lt;/pre>&lt;p>then in my &lt;code>composer.json&lt;/code> I added&lt;/p>
&lt;pre>&lt;code>&amp;quot;scripts&amp;quot;: {
//see last row but here are some other nice quick shortcuts
&amp;quot;check-style&amp;quot;: &amp;quot;phpcs -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app&amp;quot;,
&amp;quot;fix-style&amp;quot;: &amp;quot;phpcbf -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app&amp;quot;,
&amp;quot;check-metrics&amp;quot;: &amp;quot;phpmetrics --report-json=report.json app &amp;amp;&amp;amp; vendor/bin/quality_run_check.py report.json&amp;quot;,
&amp;quot;check-metrics-html&amp;quot;: &amp;quot;phpmetrics --report-json=report.json --report-html=report app &amp;amp;&amp;amp; open report/index.html&amp;quot;,
&amp;quot;phpstan&amp;quot;: &amp;quot;phpstan analyse app&amp;quot;
}
&lt;/code>&lt;/pre>&lt;p>The initial run found this&lt;/p>
&lt;pre>&lt;code>Cannot declare class App\Observers\QualityReport because the name is already in use in /Users/alfrednutile/Code/cat-quality-service/app/Observers/QualityReport.php on line 7
&lt;/code>&lt;/pre>&lt;p>which was great since I did not catch that in my tests. Another run found a missing variable for my printf which was in an exception area I did not test.&lt;/p>
&lt;p>This may help as well &lt;a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan&lt;/a> for Laravel&lt;/p>
&lt;p>This will avoid some Facade and other issues. Even just trying&lt;/p>
&lt;pre>&lt;code>php artisan code:analyse --paths=app --level=0
&lt;/code>&lt;/pre>&lt;p>Found some issues I did not see, for example object properties I did not define at the top of the Class.&lt;/p></description>
static analysis, laravel</item></channel></rss>