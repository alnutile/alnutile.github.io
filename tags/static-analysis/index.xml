<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>static analysis on Alfred Nutile</title><link>https://alfrednutile.info/tags/static-analysis/</link><description>Recent content in static analysis on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/static-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>PHPStan Setup</title><link>https://alfrednutile.info/posts/251/</link><pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/251/</guid><description><p>There is a good episode here<a href="https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases">https://www.phproundtable.com/episode/using-static-analyzers-to-improve-our-php-codebases</a> that talks about this.</p><p>The short of it is that it can easily catch some issues that your tests or IDE did not. For example I had a class name overlap due to a typo and it found it. From there it will output tons of other info that may just help guide you in your work.</p><p>The install is super easy as seen in the docs<a href="https://github.com/phpstan/phpstan">https://github.com/phpstan/phpstan</a></p><p>For me I did</p><pre><code>composer global require phpstan/phpstan</code></pre><p>then in my<code>composer.json</code> I added</p><pre><code>"scripts": {
//see last row but here are some other nice quick shortcuts
"check-style": "phpcs -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app",
"fix-style": "phpcbf -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 app",
"check-metrics": "phpmetrics --report-json=report.json app &amp;&amp; vendor/bin/quality_run_check.py report.json",
"check-metrics-html": "phpmetrics --report-json=report.json --report-html=report app &amp;&amp; open report/index.html",
"phpstan": "phpstan analyse app"
}</code></pre><p>The initial run found this</p><pre><code>Cannot declare class App\Observers\QualityReport because the name is already in use in /Users/alfrednutile/Code/cat-quality-service/app/Observers/QualityReport.php on line 7</code></pre><p>which was great since I did not catch that in my tests. Another run found a missing variable for my printf which was in an exception area I did not test.</p><p>This may help as well<a href="https://github.com/nunomaduro/larastan">https://github.com/nunomaduro/larastan</a> for Laravel</p><p>This will avoid some Facade and other issues. Even just trying</p><pre><code>php artisan code:analyse --paths=app --level=0</code></pre><p>Found some issues I did not see, for example object properties I did not define at the top of the Class.</p></description><tags>static analysis, laravel</tags></item></channel></rss>