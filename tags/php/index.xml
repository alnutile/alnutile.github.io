<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on Alfred Nutile</title><link>https://alfrednutile.info/tags/php/</link><description>Recent content in php on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows Dev Box Try 3 2020</title><link>https://alfrednutile.info/posts/267/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/267/</guid><description>Yes this is try number 3. See here for the first 2 goes at it.
With WSL2 out and a great laptop I wanted to give this another try.
MariaDB Even though the install is super simple see https://alfrednutile.info/posts/267
I still end up having to do:
$ sudo mysql -u root # I had to use &amp;quot;sudo&amp;quot; since is new installation
mysql&amp;gt; USE mysql;
mysql&amp;gt; UPDATE user SET plugin='mysql_native_password' WHERE User='root';
mysql&amp;gt; FLUSH PRIVILEGES;
mysql&amp;gt; exit;
$ service mysql restart
To allow me to then use this command, for example maraidb -uroot -proot otherwise I have &amp;ldquo;Error connecting on localhost&amp;rdquo; type errors.</description></item><item><title>PHP Xdebug Visual Code</title><link>https://alfrednutile.info/posts/262/</link><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/262/</guid><description>UPDATE: PHP 8 and Xdebug 3 2021.07.18
Ok this took a bit since the Xdebug site talks about arch -x86_64 sudo pecl install xdebug which did not work.
I just did the normal
sudo pecl install xdebug Then I edit the addition it made:
/opt/homebrew/etc/php/8.0/php.ini
zend_extension=&amp;#34;xdebug.so&amp;#34; xdebug.mode = debug xdebug.start_with_request = yes I moved it all to the bottom of the file too. The docs talk about OPCache but not sure this really helped.</description></item><item><title>IronFunctions and PHP</title><link>https://alfrednutile.info/posts/213/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/213/</guid><description>A colleague of mine Dave Hall poing out IronFunctions. And being in the pursuit of serverless options especially ones that even have examples of PHP I had to give it a try. This post is a note2self in that the intro here has some bits that need fixing BUT I think it is close and I hope to add more updates here about the tool.
All the steps below will only work once you take on the initial hello world here.</description></item><item><title>Testing a trait with PHPUnit</title><link>https://alfrednutile.info/posts/212/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/212/</guid><description>In an effort to start recording test coverage using vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover I had some issues with traits being seen.
I tried numerous approaches my default being just to Use the trait in the test class. I ended up with this as I found some online info about trait testing here that references a now missing post by Sebastian Bergman the maker of PHPUnit
&amp;lt;?php
use Symfony\Component\Yaml\Yaml;
/**
* Test class for {@see PfawsYaml}.</description></item><item><title>Instantiate Request for Testing</title><link>https://alfrednutile.info/posts/206/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/206/</guid><description>When I need to make a request for a test in which the Class is expecting a \Illuminate\Http\Request I can do this for a file based or non file based request.
/**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('tests/fixtures/example_profile.jpg');
$originalName = 'example_profile.jpg';
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file-&amp;gt;set('profile_image', $upload);
$request-&amp;gt;files = $file;
$this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' .</description></item><item><title>Super Simple Sending Messages to Slack from Laravel</title><link>https://alfrednutile.info/posts/202/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/202/</guid><description>Laravel 5.3 has this feature. But for those not using that version or who just want to see how easy this is, I will show here how I been doing this for some time now.
Here is the main Class I call to send a message. As you can see I am using Guzzle, in this case &amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;^6.1&amp;quot; but others versions can work.
&amp;lt;?php
namespace App\Services;
use Illuminate\Support\Facades\Log;
use GuzzleHttp\Client;
class SlackWrapper
{
/**
* @var Client $client
*/
protected $client;
protected $slack_url = false;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
}
public function sendMessageToSlack($message)
{
try {
$this-&amp;gt;client-&amp;gt;request(
'POST',
$this-&amp;gt;getSlackUrl(),
[
'body' =&amp;gt; $this-&amp;gt;message($message)
]
);
} catch (\Exception $e) {
Log::debug(sprintf(&amp;quot;Error sending to Slack %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
protected function message($message)
{
return json_encode(
[
'text' =&amp;gt; $message
]
);
}
public function getSlackUrl()
{
if (!</description></item><item><title>Pusher and PHP 'Error Failed to connect to Pusher'</title><link>https://alfrednutile.info/posts/201/</link><pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/201/</guid><description>Note to self. Getting this error &amp;ldquo;Error Failed to connect to Pusher&amp;rdquo; but the front end is working. And you know your credentials are correct, AND it was working just a day ago check the date and time on your machine/vm.
Mine had drift and since it was behind by 20 minutes I would end up with this error.
Oy what a waste or time x 2 :(</description></item><item><title>Guzzle 5 or 6 or ????</title><link>https://alfrednutile.info/posts/198/</link><pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/198/</guid><description>Sometimes Guzzle can be a real pain to use in an library. You choose 5.x and then some other library needed 6.x and heck you really did not care either way.
One interesting package example is aws/aws-sdk-php
If you look in it&amp;rsquo;s composer.json you will see this
&amp;quot;require&amp;quot;: {
&amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.5&amp;quot;,
&amp;quot;guzzlehttp/guzzle&amp;quot;: &amp;quot;~5.3|~6.0.1|~6.1&amp;quot;,
&amp;quot;guzzlehttp/psr7&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;guzzlehttp/promises&amp;quot;: &amp;quot;~1.0&amp;quot;,
&amp;quot;mtdowling/jmespath.php&amp;quot;: &amp;quot;~2.2&amp;quot;
},
So it allows for other libraries to choose as needed and it will deal with the different versions as needed.</description></item><item><title>Mockery Behat and Laravel</title><link>https://alfrednutile.info/posts/190/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/190/</guid><description>This is a quick view of using this library https://github.com/laracasts/Behat-Laravel-Extension and a Mockery Trait (should be included soon but for now put the below in your features/bootstrap folder and run composer dump).
The example here is a method that looks like this
features/bootstrap/ExampleContext.php
$partial = Mockery::mock(\App\Broadcasts\ColumnsAndRowsDoneProcessingEmail::class, [$this-&amp;gt;segment])-&amp;gt;makePartial();
$partial-&amp;gt;shouldReceive('sendEmail')-&amp;gt;never();
$repo = App::make(\App\JobsRepository::class);
$partial-&amp;gt;handle($repo);
When this is done running I would get pass BUT if I change it never to once and run it again I still get green :(</description></item><item><title>Uploading Images in Behat both at Domain Level and UI Level</title><link>https://alfrednutile.info/posts/188/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/188/</guid><description>The goal here is as follows
@fileCleanup @javascript
Scenario: Uploading File
Given I already made a Segmentation and am editing it
Then I add file and the system will process it
And I can not add another file till it is done
And when the system is done I can add another file
In this case they are large files and I want to get an MVP for the users to interact with so one file at a time is enough for now.</description></item><item><title>Behat Laravel Domain Testing Inside Out</title><link>https://alfrednutile.info/posts/187/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/187/</guid><description>I will cover the use of FormRequest, Mockery, Behat and more in this article.
The article will show how to test your Domain code, in this case I mean testing how the code will work outside of the Routing and Controller layer of your Application. But what this will lead to is a &amp;ldquo;lego&amp;rdquo; like moment of plugging in these parts to your Controller so you know it will work. Of course it will be tested as well during the UI testing.</description></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.
In this example I had a Class responsible for saving data, we&amp;rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&amp;rsquo;ll call FooProcessData.</description></item><item><title>Keeping a Controller Method Simple</title><link>https://alfrednutile.info/posts/186/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/186/</guid><description>When I am done with a controller, done mocking up ideas and ready for some long term code, then I think this is the most information a Controller method should have.
public function updateFoor($id, $foo) {
try {
$results = $this-&amp;gt;someRepoOrServiceClass($Id, $foo); return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; &amp;quot;Success doing something&amp;quot;], 202);
} catch (\Exception $e) {
$message = sprintf(&amp;quot;Error doing something %s&amp;quot;, $e-&amp;gt;getMessage());
Log::debug($message);
return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; $message], 400);
}
}
At this point I have someRepoOrServiceClass well tested outside of this Controller.</description></item><item><title>API Token Based Access Laravel 5.1 (Yet another article on this)</title><link>https://alfrednutile.info/posts/183/</link><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/183/</guid><description>API Token Laravel 5.2 introduces the auth token guard setup which is way simpler than Oauth. Also it does not assume a certain level of complexity in needs like Scopes and expirations of tokens that we do not need for our internal app to app communications.
We are using 5.1 so this will implement it.
See some docs here https://gistlog.co/JacobBennett/090369fbab0b31130b51
For creating a user the AppServiceProvider boots the user record and if no api_token is present it will set one.</description></item><item><title>Contract Testing</title><link>https://alfrednutile.info/posts/182/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/182/</guid><description>Sometimes we need to make sure external APIs have not changed. Some of those we have control over some of those we do not.
Either way we can run tests daily, weekly or as needed, outside of our tests we run with every push to Github, that will make sure this API is still delivering what we expect.
This video gave me some good tips on this one being to keep your Contract tests outside of your Domain Logic.</description></item><item><title>AWS, S3 Storage and limited Visibility</title><link>https://alfrednutile.info/posts/180/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/180/</guid><description>Storing files on S3 is great. And many times those files are private so I only want to give temporary access to them. Using Laravel Storage I can interact with the file-system quite easily and seamlessly especially between Cloud and Local.
In this case I want to return a file only for 10 minutes
public function getSignedUrl($filename_and_path, $expires_minutes = '10')
{
$client = Storage::disk('s3')-&amp;gt;getDriver()-&amp;gt;getAdapter()-&amp;gt;getClient();
$bucket = env('BUCKET');
$command = $client-&amp;gt;getCommand('GetObject', [
'Bucket' =&amp;gt; $bucket,
'Key' =&amp;gt; $filename_and_path
]);
$request = $client-&amp;gt;createPresignedRequest($command, Carbon::now()-&amp;gt;addMinutes($expires_minutes));
return (string) $request-&amp;gt;getUri();
}
That is it!</description></item><item><title>Behat and Uploading Files to a Form Even on Remote Selenium2 Servers</title><link>https://alfrednutile.info/posts/179/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/179/</guid><description>Just had to tackle this issue so making some notes for later here :)
Updated and more detailed here
I run selenium on my Windows PC and before that my Mac, either one would have had this issue since my test is running side my VM. This meant when I needed to run a test to interact with a form to upload an image that image path was relative to the machine (VM) that I started the test on and not the Browser that was being manipulated by Selenium2.</description></item><item><title>Laravel, PHPUnit, Require_Once on Routes</title><link>https://alfrednutile.info/posts/178/</link><pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/178/</guid><description>Going crazy running PHPUnit all and getting fail but you run the one route and it works!
The difference is require versus require_once in PHPUnit tests.
For example
require __DIR__ . '/../ConfigurationExamples/routes.php';
Route::get('/', function () {
return view('welcome');
});
Now when I run my tests I get 100% pass
/**
* @test
*/
public function should_auth_user()
{
$user = factory(\App\User::class)-&amp;gt;create();
$results = $this-&amp;gt;call('GET', sprintf(&amp;quot;/example/auth_token?api_token=%s&amp;quot;, $user-&amp;gt;api_token));
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
/**
* @test
*/
public function should_fail_user()
{
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(302, $results-&amp;gt;status());
}
/**
* @test
*/
public function should_pass_auth_with_no_token()
{
$user = factory(\App\User::class)-&amp;gt;create();
$this-&amp;gt;be($user);
$results = $this-&amp;gt;call('GET', '/example/auth_token');
$this-&amp;gt;assertEquals(200, $results-&amp;gt;status());
$this-&amp;gt;assertEquals(&amp;quot;foo&amp;quot;, $results-&amp;gt;getContent());
}
The moment I change it to require_once I get fails on the last or second to last one, it is not consistant except that it will fail.</description></item><item><title>Feature Flags In Laravel</title><link>https://alfrednutile.info/posts/175/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/175/</guid><description>Overview Library is https://github.com/friendsofcat/laravel-feature-flag/
Listen here
Watch https://youtu.be/4nq7FyHQj8I
We are working on using FeatureFlags or Toggles in our applications. For one we are aiming to do all our work on mainline branch at all times so this would be a key coding discipline to use FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application. For example if a hotfix or another feature is ready to go to production we can push that with no worries of the in progress feature.</description></item><item><title>Slack Custom Commands and Laravel to Make an American to British Translater</title><link>https://alfrednutile.info/posts/173/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/173/</guid><description>Laravel or anything you are comfortable with making a Route and Response will work fine really.
This &amp;ldquo;messaging as a platform&amp;rdquo; is a new world for me, challenging my way of thinking in many ways. Some things just do not need a authentication of their own, a UI, etc they just need a place to get info from, or do something with some info etc.
In this case I made a really simple &amp;ldquo;Custom Slash Command&amp;rdquo; to translate British Slang to American and American to British (so I can sound cooler!</description></item><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description>Update: September 06 2016
We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.
Or Listen here
Another article about this written by Loran Jane Mitchell Using Composer Without GitIgnoring Vendor</description></item><item><title>Do I Really Need This Route Anymore?</title><link>https://alfrednutile.info/posts/169/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/169/</guid><description>Clean out old code can be hard. When your application has numerous javascript widgets, blade templates and forms you can not easily say what routes are being used. But with just a few artisan commands we can easily make this happen.
Also this can help with knowing what routes your Tests are NOT covering.
Package can be found here as well.
The Commands to Get Started php artisan make:model RouteUsage
php artisan make:middleware RouteUsageTracker
php artisan make:migration route_usage_tracker_table
php artisan make:console RouteReport
Migration &amp;lt;?</description></item><item><title>Logout User After Inactivity Laravel and Milddleware</title><link>https://alfrednutile.info/posts/168/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/168/</guid><description>Original Post http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user
This Middleware made it super easy to satisfy a requirement to log the user out after 15 minutes of in activity.
I added only a few touchups.
One was the getTimeOut this was so I can work locally and override this by setting it to a large number. I could even use it to just bypass the whole things for a bit since on local I rather not deal with this.</description></item><item><title>Quick Tip Forcing More Complex Passwords in Laravel</title><link>https://alfrednutile.info/posts/166/</link><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/166/</guid><description>With the great Laravel Docs I will quickly show how to &amp;ldquo;encourage&amp;rdquo; the user to set a better password.
Going through the standard docs for Authentication we end up with a registration form.
Then in the AuthController that comes with Laravel I modify it a bit.
protected function validator(array $data)
{
$messages = ['password.regex' =&amp;gt; &amp;quot;Your password must contain 1 lower case character 1 upper case character one number&amp;quot;];
return Validator::make($data, [
'name' =&amp;gt; 'required|max:255',
'email' =&amp;gt; 'required|email|max:255|unique:users',
'password' =&amp;gt; 'required|confirmed|min:8|regex:/^(?</description></item><item><title>Image Uploads, Laravel, Angular and Flow.js</title><link>https://alfrednutile.info/posts/165/</link><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/165/</guid><description>Here is one combination out of many to make this happen.
The libraries are
https://github.com/flowjs/ng-flow
and
https://github.com/flowjs/flow-php-server
Model and Imageable Resource What I like about this is we can make 1 controller to manage uploads. That controller will upload the file, place it into the correct folder, and setup the relationship to the resource.
In this example the Resource will be a Contact.
So I then follow Laravel docs to create the Polymorphic Imageable/Photo example http://laravel.</description></item><item><title>Simple Example of Making Code Easier to Read</title><link>https://alfrednutile.info/posts/164/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/164/</guid><description>Just a quick example
Before
public function updateMarketoFolder($folder)
{
/**
* If parent id found in array then use it else use root
*/
if(isset($this-&amp;gt;folders_and_meta_data[$folder['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['id']];
}
elseif(isset($folder['parent']) &amp;amp;&amp;amp; isset($folder['parent']['id']) &amp;amp;&amp;amp; isset($this-&amp;gt;folders_and_meta_data[$folder['parent']['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['parent']['id']];
}
else
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data['root'];
}
if(isset($folder['name']))
$this-&amp;gt;names[] = $folder['name'] . '--' . $folder_meta_data-&amp;gt;id;
$this-&amp;gt;folders_and_meta_data[$folder['id']] = $folder_meta_data;
}
Here is what we can do to make it easier to come back to six months later.</description></item><item><title>Spark Setup Issue</title><link>https://alfrednutile.info/posts/163/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/163/</guid><description>During the install https://github.com/laravel/spark I kept getting this error
Problem 1
- Installation request for laravel/spark-installer ~1.0 -&amp;gt; satisfiable by laravel/spark-installer[v1.0.0].
- Conclusion: remove illuminate/support v4.2.17
- laravel/spark-installer v1.0.0 requires illuminate/support ~5.0 -&amp;gt; satisfiable by illuminate/support[v5.0.0, v5.0.22, v5.0.25, v5.0.26, v5.0.28, v5.0.33, v5.0.4, v5.1.1, v5.1.13, v5.1.16, v5.1.2, v5.1.6, v5.1.8].
- Can only install one of: illuminate/support[v5.0.0, v4.2.17].
- Can only install one of: illuminate/support[v5.0.22, v4.2.17].
- Can only install one of: illuminate/support[v5.</description></item><item><title>Adding Expose IDS to Laravel MiddleWare</title><link>https://alfrednutile.info/posts/162/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/162/</guid><description>The library is https://github.com/enygma/expose
&amp;ldquo;Expose is an Intrusion Detection System for PHP loosely based on the PHPIDS project (and using it&amp;rsquo;s ruleset for detecting potential threats).&amp;rdquo;
After seeing it in the latest PHPArch magazine on security I wanted to give it a try.
Of course this is far from a complete look.
Step 1 Make the MiddleWare
php artisan make:middleware ExposeMiddleware
Then add Expose as noted in the docs.</description></item><item><title>Laravel and Angular Widgets e.g. Non SPA (Single Page Application) Pattern</title><link>https://alfrednutile.info/posts/160/</link><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/160/</guid><description>Not all apps need to be an SPA (Single Page Application). Sure they have their place but in most cases the task might benefit from just a Blade template and Angular widget. This saves you from having to write an angular route which can be a tedious duplication of work. Also Blade is fast and fun to work with.
Step One Add Data to Global Window Using the Transform PHP Vars to JavaScript you can easily start to inject some content into your templates, if needed, to setup the data your Angular widget can use to build out it&amp;rsquo;s elements.</description></item><item><title>Talking to the Methods Not the Properties</title><link>https://alfrednutile.info/posts/158/</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/158/</guid><description>Just a team related style guide item.
When talking to properties in a class talk via a getter.
&amp;lt;?php
class Foo {
protected $client;
function bar()
{
return $this-&amp;gt;client-&amp;gt;getAll();
}
}
Would then become
&amp;lt;?php
class Foo {
protected $client;
function bar()
{
return $this-&amp;gt;getClient-&amp;gt;getAll();
}
function getClient()
{
return $this-&amp;gt;client;
}
}
There are a few reasons for this
Consistent style for the team Changes to that property can be done in one place.</description></item><item><title>Using your project docs inside the application</title><link>https://alfrednutile.info/posts/157/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/157/</guid><description>The applications I work on have markdown docs. These can be in the docs/ folder for example as docs/webhooks.md
But some of these docs have value to the user of the UI not just the developer, and when we include these docs inside the application repo it is a TON easier to just update them as you fix and make new features in the codebase.
You can have the best of both worlds with a simple to use library https://github.</description></item><item><title>HasMany Through a Many to Many</title><link>https://alfrednutile.info/posts/155/</link><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/155/</guid><description>This thread helped a lot http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many
In the end I had this query
class MetaData extends Model {
public function meta_values()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class);
}
public function meta_data_types()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class)
-&amp;gt;leftJoin('meta_data_type_meta_value', 'meta_values.id', '=', 'meta_data_type_meta_value.meta_value_id')
-&amp;gt;leftJoin('meta_data_types', 'meta_data_types.id', '=', 'meta_data_type_meta_value.meta_data_type_id')
-&amp;gt;groupBy('meta_data_types.id')
-&amp;gt;select('meta_data_types.*');
}
Model meta_data_types had not direct relation to this MetaData model class. But MetaData did relate to meta_values.
So using that info I could get the related MetaValues and then the related MetaDataTypes and that was it.</description></item><item><title>Adding RSS to Your Site</title><link>https://alfrednutile.info/posts/154/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/154/</guid><description>Using this library https://packagist.org/packages/thujohn/rss
We simply install but using a forked version so it works with L5
&amp;quot;require&amp;quot;: {
&amp;quot;php&amp;quot;: &amp;quot;&amp;gt;=5.5.9&amp;quot;,
&amp;quot;laravel/framework&amp;quot;: &amp;quot;5.1.*&amp;quot;,
&amp;quot;thujohn/rss&amp;quot;: &amp;quot;dev-master&amp;quot;
},
&amp;quot;repositories&amp;quot;: [
{
&amp;quot;type&amp;quot;: &amp;quot;vcs&amp;quot;,
&amp;quot;url&amp;quot;: &amp;quot;https://github.com/majortom731/rss-l4.git&amp;quot;
}
],
composer update
And as they note in the docs
'providers' =&amp;gt; array(
'Thujohn\Rss\RssServiceProvider',
)
Now in my route I simply put
Route::get('feed', function() {
$feed = Thujohn\Rss\RssFacade::feed('2.0', 'UTF-8');
$feed-&amp;gt;channel(array('title' =&amp;gt; 'Incomings.io Blog and News', 'description' =&amp;gt; 'Latest News and Blog postings for Incomings.</description></item><item><title>Laravel 5.1 Behat and Codeship</title><link>https://alfrednutile.info/posts/151/</link><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/151/</guid><description>The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.
Here are some steps to getting behat going on Codeship so you get full CI even of Angular.
This is all based off of https://github.</description></item><item><title>Conventions to Help Minimize your ENV File</title><link>https://alfrednutile.info/posts/150/</link><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/150/</guid><description>UPDATE
I think we can also do AWS_BUCKET=foo_$APP_ENV directly in the env file, see https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables
Andrew Cavanagh The .env file can be a real pain and get pretty big. And even though there is a tool, I made :), to move it around easily here is a thought on reducing it a bit so it is the same on all environments.
Typically we have dev, stage, production, testing and local.</description></item><item><title>Codeship and Laravel for Continuous Integration</title><link>https://alfrednutile.info/posts/148/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/148/</guid><description>Getting going on Codeship and Laravel is pretty easy.
Once you setup codeship to work with your github account just pull in your repo and set your Testing scripts as follows. (they have a ui for ENV variables as well)
Codeship Testing Settings [easier copy paste bottom of article] You can do this in their UI as well. But at this point I am
Setting up the composer token for any private repos that application might have Setting up .</description></item><item><title>Writing Commands and Scheduling in Laravel 5.1</title><link>https://alfrednutile.info/posts/146/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/146/</guid><description>Wow, writing Artisan Commands just become even easier. And plugging it into Scheduler makes for a great combination.
For example we need to clean out a folder every so many minutes. The example below I also for fun play around with progress and table output.
Note too protected $signature = 'approve:cleanuploads {--minutes=10}'; simplifies theargument and options features.
&amp;lt;?php namespace App\Console\Commands;
use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
class CleanUploadsCommands extends Command
{
protected $rootPath = 'public/storage';
protected $maxMinutes = 10;
protected $deleted = [];
protected $signature = 'approve:cleanuploads {--minutes=10}';
protected $description = 'Clean all the uploads in the storage folder for security reasons';
protected $pdfFiles = [];
protected $files = [];
public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;maxMinutes = $this-&amp;gt;option('minutes');
$this-&amp;gt;anyPdfFilesHere();
$this-&amp;gt;deletePdfFiles();
$this-&amp;gt;outputResults();
}
protected function anyPdfFilesHere()
{
$this-&amp;gt;files = File::allFiles(base_path($this-&amp;gt;rootPath));
foreach($this-&amp;gt;files as $file)
{
if (File::mimeType($file) == 'application/pdf')
{
$this-&amp;gt;pdfFiles[] = $file;
}
}
}
private function deletePdfFiles()
{
if(count($this-&amp;gt;pdfFiles) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressStart(count($this-&amp;gt;pdfFiles));
foreach($this-&amp;gt;pdfFiles as $file)
{
$modified = File::lastModified($file);
$minutes = Carbon::createFromTimestamp($modified)-&amp;gt;diffInMinutes();
if($minutes &amp;gt; $this-&amp;gt;maxMinutes)
{
$this-&amp;gt;setDeleted(['filename' =&amp;gt; $file]);
File::delete($file);
$this-&amp;gt;output-&amp;gt;progressAdvance();
}
}
}
}
private function outputResults()
{
if(count($this-&amp;gt;deleted) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressFinish();
$headers = ['File Name and Path'];
$this-&amp;gt;table($headers, $this-&amp;gt;getDeleted());
}
else
{
$this-&amp;gt;comment(sprintf(&amp;quot;No files older than %d minutes&amp;quot;, $this-&amp;gt;maxMinutes));
}
}
public function getDeleted()
{
return $this-&amp;gt;deleted;
}
public function setDeleted($deleted)
{
$this-&amp;gt;deleted[] = $deleted;
}
}
Then in the Kernel.</description></item><item><title>Easily Create Fixture Data from Remote Services and Refresh Mock Data</title><link>https://alfrednutile.info/posts/145/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/145/</guid><description>Oops Codeship and Laravel is here
Easily Create Fixture Data from Remote Services and Refresh Mock Data We have integration tests that hit remote apis like Github, S3, DynomoDB, our own APIs etc and we do not want to hit those during out tests but we also want to make sure we have the real data. So when one of those APIs change then our mock data can be refreshed to see if our systems really work with it.</description></item><item><title>Iron.io and Lumen</title><link>https://alfrednutile.info/posts/143/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/143/</guid><description>Lumen Iron Worker What and why A worker is a great way to run tasks as needed taking the load off your applications server and greatly speeding up the process of a task as you can run numerous workers at once.
A lot of this comes from http://dev.iron.io/worker/beta/getting_started/ and http://dev.iron.io/worker/beta/cli/ and their examples
Topics covered Creating a Lumen Worker Creating a statically linked binary in the worker Testing the worker locally with Docker Entering your docker environment Design patterns Install Lumen composer create-project laravel/lumen --prefer-dist
Add to composer.</description></item><item><title>Quick way to mock data for Behat in Laravel</title><link>https://alfrednutile.info/posts/142/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/142/</guid><description>Below allows me to use this type of step in my tests
Scenario: Given I update a Domain get 200 Given I mock &amp;quot;App\Sites\Domain&amp;quot; with properties: &amp;quot;&amp;quot;&amp;quot;
id: &amp;quot;mock-update-1&amp;quot;
site_id: &amp;quot;mock-site-1&amp;quot;
domain: &amp;quot;foo2.com
&amp;quot;&amp;quot;&amp;quot;
Given I have the payload: &amp;quot;&amp;quot;&amp;quot;
{
&amp;quot;data&amp;quot;:
{
&amp;quot;id&amp;quot;: &amp;quot;mock-update-1&amp;quot;,
&amp;quot;site_id&amp;quot;: &amp;quot;mock-site-1&amp;quot;,
&amp;quot;domain&amp;quot;: &amp;quot;foo2.com&amp;quot;
}
}
&amp;quot;&amp;quot;&amp;quot;
Then I request &amp;quot;PUT /api/v1/sites/mock-site-1/domains/mock-update-1&amp;quot;
Then I get a &amp;quot;200&amp;quot; response Here is the code in my FeatureContext.php</description></item><item><title>Simple Look at Laravel Events</title><link>https://alfrednutile.info/posts/132/</link><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/132/</guid><description>Events Getting Started This is part of a larger Laravel Guide I am working on in this case the example is in the Events folder
Start the example
php artisan serve --port=8081
Then visit
http://localhost:8081/example1
So if you look in
app/routes.php
You see route example1 will fire and event and there are two listeners
Do they run async or sync If you hit that route you see the sleep taking effect so it is syncronous</description></item><item><title>Laravel-Flysystem and Creating Time Limited Public Urls on S3</title><link>https://alfrednutile.info/posts/131/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/131/</guid><description>We needed to offer timed links to the urls and we are using Laravel-Flysystem
Aaron Smith found this how to but I wanted it to work with existing use of FlySystem.
I ended up moving the code into a trait so we could use this one feature
&amp;lt;?php namespace AlfredNutileInc\CoreApp\Helpers;
use GrahamCampbell\Flysystem\Facades\Flysystem;
use Illuminate\Support\Facades\Log;
trait S3Helper {
protected $path_for_assets;
protected $expire_time;
public $driver = 'awss3';
/**
* @return string
*/
public function getDriver()
{
return $this-&amp;gt;driver;
}
/**
* @param string $driver
*/
public function setDriver($driver)
{
$this-&amp;gt;driver = $driver;
}
public function iterateOverFiles($files)
{
foreach($files as $key =&amp;gt; $file)
{
if(isset($file['path'])) {
$files[$key]['url'] = $this-&amp;gt;getSignedUrl($file['path']);
}
}
return $files;
}
protected function getFiles()
{
$this-&amp;gt;path_for_assets = $this-&amp;gt;project_id .</description></item><item><title>Laravel Behat and Selenium</title><link>https://alfrednutile.info/posts/130/</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/130/</guid><description>Laracasts has some great videos and libraries for Laravel 5 and Behat integration.
Examples
https://github.com/laracasts/Behat-Laravel-Extension
and
https://laracasts.com/lessons/laravel-5-and-behat-bffs
Two things that I still need and get from this though that I do not think I can get from those are
Laravel 4.2 support which obviously is not going to work with the above L5 libraries :) Mocking APIs when running under APP_ENV=local or testing Also I think with the libraries above only goutte drivers work for the APP_ENV setting.</description></item><item><title>Sqlite and Laravel</title><link>https://alfrednutile.info/posts/128/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/128/</guid><description>It is really really nice to use this for testing and local since any reseed work is quick.
Overall the swap out is easy and I do not think, so far, there has been any issues going to mysql on production.
The only two things to set over all is
Seeding In my DatabaseSeeder.php file I set this
&amp;lt;?php
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;
class DatabaseSeeder extends Seeder {
/**
* Run the database seeds.</description></item><item><title>Timing PHPUnit Tests</title><link>https://alfrednutile.info/posts/127/</link><pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/127/</guid><description>Maybe there is a better way to do this? But using this article https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/ I was able to find a hanging test.
Setup I already have an xml file at the root of my project so I added to that that listener.
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;phpunit backupGlobals=&amp;quot;false&amp;quot;
backupStaticAttributes=&amp;quot;false&amp;quot;
bootstrap=&amp;quot;tests/bootstrap.php&amp;quot;
colors=&amp;quot;true&amp;quot;
convertErrorsToExceptions=&amp;quot;true&amp;quot;
convertNoticesToExceptions=&amp;quot;true&amp;quot;
convertWarningsToExceptions=&amp;quot;true&amp;quot;
processIsolation=&amp;quot;false&amp;quot;
stopOnFailure=&amp;quot;true&amp;quot;
syntaxCheck=&amp;quot;false&amp;quot;
&amp;gt;
&amp;lt;listeners&amp;gt;
&amp;lt;listener file=&amp;quot;./app/tests/listeners/TestTimesListener.php&amp;quot; /&amp;gt;
&amp;lt;/listeners&amp;gt;
&amp;lt;testsuites&amp;gt;
&amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/BehatEditor/Tests&amp;lt;/directory&amp;gt;
&amp;lt;directory&amp;gt;./app/tests/TheHub/Tests&amp;lt;/directory&amp;gt;
&amp;lt;exclude&amp;gt;./app/tests/BehatEditor/Tests/Migrations&amp;lt;/exclude&amp;gt;
&amp;lt;exclude&amp;gt;.</description></item><item><title>Reusable UI/API CRUD Laravel and Angular</title><link>https://alfrednutile.info/posts/126/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/126/</guid><description>related repo
Working on a recent project it finally hit me how repetitive then need was to make a Resource at the API level and to make the UI to Create, Retrieve, Update, Delete, Index. And how easy it would be to make a foundation for this to use for each Resource keeping the UI goals consistent and simple between these Resources. With this came also a set of API tests in Behat that could also be used with the project.</description></item><item><title>Embed Template Data in View (Angular, Laravel)</title><link>https://alfrednutile.info/posts/122/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/122/</guid><description>Sometimes, when your frontend shares the same view rendering of the backend, you can store data in the window object. This can save you queries to the backend when, for example, Profile Data that shows on every pages request.
Embed output into window or $window In the Controller I am using to output the Angular template (app/views/main.blade.php for example) I inject the window data that I want all pages to have.</description></item><item><title>Quick fixture data and mocking external APIs</title><link>https://alfrednutile.info/posts/121/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/121/</guid><description>We are using a number of external APIs on a project (Pusher, Iron.io, Github, Saucelabs etc). Github is key as we are using it to store and retrieve files from for editing on the site. When running phpunit it is easy to mock these Classes but when running behat tests or protractor we had to do to things to make it possible to mock the tests and not hit the external APIs.</description></item><item><title>Mocking Queue Service for faster Behat Testing</title><link>https://alfrednutile.info/posts/120/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/120/</guid><description>As I wrote about here I am using behat to tests our APIs. I could have used Laravel&amp;rsquo;s guzzle and phpunit integration to test the controllers but I decided to go with Behat. But this means when hitting those endpoints I need to find another way to mock services.
Since Laravel has you register Providers you can easily replace or override a provider. In this case the &amp;ldquo;&amp;lsquo;Illuminate\Queue\QueueServiceProvider&amp;rsquo;&amp;rdquo; provider with my own.</description></item><item><title>Docker, MailCatcher and Laravel</title><link>https://alfrednutile.info/posts/118/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/118/</guid><description>I wrote an article on Mailcatcher and Homestead here but as I move into docker I wanted the same setup for my docker website container which was super easy.
First I downloaded this docker images and ran the command as he noted. Once done I had the website up and running.
From there I just started my website container and made a link.
docker run -d -p 80:80 --name website --link mailcatcher:mailcatcher -v $PWD:/share alnutile/nginxlaravel:0.</description></item><item><title>Redirecting back to original Angular.js destination from Laravel Auth</title><link>https://alfrednutile.info/posts/119/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/119/</guid><description>UPDATE
You can see in the comments some updated info.
When a user visits an Angular url (not html5) like http://foo.com/app#some/long/path
Then gets redirected to http://foo.com/auth/login because they are not logged in. It would be nice to send them right back after that.
These steps will make that possible.
Include this file in your authentication page.
#intended.js
(function(){
'use strict';
var intended = window.location.hash;
(intended.length &amp;gt; 0) ? jQuery.cookie('intended', '/app' + intended) : jQuery.</description></item><item><title>PHP quick fixture data for phpunit testing</title><link>https://alfrednutile.info/posts/117/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/117/</guid><description>You can use VCR or other libraries to make fixture data. But sometimes you can just make the request and save the results using this technique. From then on you mock and return the data.
Get the data. In this example I had a Client that would get data and return it for import. I was testing out the class that would take this data and import it and do other things.</description></item><item><title>Laravel and Angular Time/Date Display</title><link>https://alfrednutile.info/posts/114/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/114/</guid><description>Angular seems to, by default, easily deal with milliseconds, https://docs.angularjs.org/api/ng/filter/date.
Laravel outputs created_at as a YYYY-MM-DD HH:MM:SS format that just does not work well with the Angular date filter.
It is really simple to change the output of the date in Laravel just add this to your Model or BaseModel or even better Trait
/**
* Leave as Timestamps for Angular
* @return array
*/
public function getDates()
{
return [];
}
public function getCreatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
public function getUpdatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
This is noted in the docs as well http://laravel.</description></item><item><title>Moving Forge Deploy Script to Envoy</title><link>https://alfrednutile.info/posts/115/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/115/</guid><description>As we start to move off of Forge I still want the automation to take place after all tests pass.
In Codeship or Locally I just follow some instructions from here http://laravel.com/docs/4.2/ssh
Locally Setup Envoy globally as noted.
Run envoy init
And then I pasted this into my Envoy.blade.php
@servers(['dev' =&amp;gt; 'behat_dev'])
@task('deploy_dev', ['on' =&amp;gt; 'dev'])
date
cd /home/forge/foo-dev
git pull origin dev
composer config -g github-oauth.github.com sometoken
composer install
composer dump-autoload
php artisan dump-autoload
php artisan migrate
php artisan migrate:refresh --seed
~/node_modules/bower/bin/bower install
npm install
php artisan queue:restart
@endtask
Setup you .</description></item><item><title>Laravel 4.2 and Dotenv to set environment</title><link>https://alfrednutile.info/posts/113/</link><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/113/</guid><description>To start using Dotenv now it is very simple.
One include the library #composer.js
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.2.*&amp;quot;,
&amp;quot;vlucas/phpdotenv&amp;quot;: &amp;quot;1.0.*@dev&amp;quot;
},
Two update your start.php #bootstrap/start.php line 27
Dotenv::load(__DIR__ .'/../');
$env = $app-&amp;gt;detectEnvironment(
function()
{
return getenv('APP_ENV');
}
);
Make sure to set your .env file #.env
APP_ENV='local'
That is it you are set to use it for all your environments.
Update
For Heroku I used this instead
$env = $app-&amp;gt;detectEnvironment(
function()
{
if(!</description></item><item><title>Speeding up PHPunit tests and Behat in Laravel for Database refreshes</title><link>https://alfrednutile.info/posts/112/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/112/</guid><description>This article covers some good tips on this. Ideally you do not hit the database in unit tests but sometimes you do. Also in behat it hits the db all the time since it is at the Acceptance level.
Sqlite It is a great database and works. We easily can use it on running tests. When seeding the db I have my main seeding class doing this
&amp;lt;?php
use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
class DatabaseSeeder extends Seeder {
/**
* Run the database seeds.</description></item><item><title>Multi Threaded Queue Processing</title><link>https://alfrednutile.info/posts/106/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/106/</guid><description>I needed a way to run a bunch of jobs in parallel and I am use to using the Symfony Process Component for that.
So this post will show how I did this in Laravel 4.3 via the Queue so I can remember next time.
What will come out of this is a workflow as seen here
We will create two Artisan Commands. This allows us to use Symfony Process to run numerous console commands in the background.</description></item><item><title>Team Style Guides and Mind Set</title><link>https://alfrednutile.info/posts/105/</link><pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/105/</guid><description>Been sharing this info with team members a bit lately and want to post it here for reference. Though there is no ONE way to do any of this there are ways that scale better than others. But more importantly having one way as a team to do things can be key to projects from beginning to end (eg the rest of the projects life!)
Project Style Guides The Clean Coder by Robert Martin book is a look at being a &amp;ldquo;Professional&amp;rdquo; coder and all that comes with it.</description></item><item><title>Sorting related models in Laravel</title><link>https://alfrednutile.info/posts/104/</link><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/104/</guid><description>There are a number of related models to this one model that I store in the Models $relations property
protected static $relations = [
'owner',
'apns',
'zoning_urls',
'structures.address',
'structures.comments.user.profiles',
'listings',
'attachments',
'structures.structure_type',
'property_owner',
'primary_property_type',
'address',
'property_specialist.profiles',
'listings.team'
];
This allows me to easily reuse this for each query
$found = $found-&amp;gt;load(static::$relations);
But there is one model I removed from that list to do a dynamic query/sorting on it
$found = $this-&amp;gt;property-&amp;gt;with([
'verifiers' =&amp;gt; function($query) {
$query-&amp;gt;with('user.</description></item><item><title>Behat for testing RESTful APIs</title><link>https://alfrednutile.info/posts/103/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/103/</guid><description>The code for behat&amp;rsquo;s FeatureContext comes from this repo and book https://github.com/philsturgeon/build-apis-you-wont-hate
I will bring it together so before long you can run tests like this
The road map will be
Quick Setup Notes GET requests POST request Tie into your framework Seeding step Query your db step PUT request Quick Setup Notes Setting up behat is beyond the scope of this. If you want try alnutile/behat-seed to get going on testing since it can be used to hit any API.</description></item><item><title>Boris REPL and you Applicatoin (Silex in this case)</title><link>https://alfrednutile.info/posts/102/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/102/</guid><description>This video will cover the details http://youtu.be/RHdxSsCDmNQ
Just a few notes though https://github.com/d11wtq/boris is a better place for getting started overall.
Borisrc This lives in the root of my application which includes the startup file for the application.
&amp;lt;?php
#.borisrc
$core = require_once(__DIR__.'/bootstrap/start.php');
$boris = new \Boris\Boris('base_app&amp;gt; ');
$boris-&amp;gt;setLocal(array('core' =&amp;gt; $core));
$boris-&amp;gt;start();
The start.php file I am using for the core startup needed by index.php, this and later a command line class to run the queue daemon and other things</description></item><item><title>Polymorphic relationship Laravel</title><link>https://alfrednutile.info/posts/99/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/99/</guid><description>This example will show a typical &amp;ldquo;Attachment&amp;rdquo; need. The Laravel docs really do cover alot as seen here especially &amp;ldquo;Polymorphic Relation Table Structure”. I cover many to many polymorphic relationships here
I will cover an example of an Attachment that has some fields. And it is related to a model, in this example &amp;ldquo;Post&amp;rdquo;
Using the Way Generators to make this resource.
php artisan generate:resource attachment --fields=&amp;quot;attachable_type:string, attachable_id:integer, name:string, file_name:string, note:text, tag:string”
As noted in the laravel docs our table for Attachments would look something like this</description></item><item><title>Quick way to traverse a nested php arrray</title><link>https://alfrednutile.info/posts/98/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/98/</guid><description>The RecursiveIteratorIterator makes it super easy to traverse a nested array.
Here is an example though the docs are pretty clear there. For me it was in a class so I defined the array keys at the top of the Class
protected $merged_profile_options = [];
protected $data_values = [
'browser' =&amp;gt; null,
'name' =&amp;gt; null,
'version' =&amp;gt; null,
'platform' =&amp;gt; null,
'base_url' =&amp;gt; null,
'repo' =&amp;gt; null,
'filename' =&amp;gt; null,
'branch' =&amp;gt; null,
'status' =&amp;gt; null,
'user_uuid' =&amp;gt; null,
'remote_job_id' =&amp;gt; null,
'job_id' =&amp;gt; null,
];
Then later on iterated over that array.</description></item><item><title>Using VCR for PHP API Testing</title><link>https://alfrednutile.info/posts/97/</link><pubDate>Wed, 16 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/97/</guid><description>Testing that your code works against an API can take up lots of un-needed time. With this php-vcr library you can do ONE real request that saves a fixture file that will automatically be used with each additional requests!
They have decent docs on setting up but I will walk through them here.
I will base this off a seed phpunit repo I have https://github.com/alnutile/base_library_repo
You will need to add to the composer.</description></item><item><title>Saucelabs PHP Client</title><link>https://alfrednutile.info/posts/96/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/96/</guid><description>It is built off of the php-github-api client seen here by KnpLabs . They made a really nice client that uses Guzzle and an AbstractionAPI to make it easy to code out different classes around the API endpoints.
Anyways I have had such a good experience with github one I figured it would be nice to have one for the Saucelabs work I do.
https://github.com/alnutile/saucelabs_client more features will be added shortly as it is being used in a couple of decent size projects.</description></item><item><title>Many to Many Polymorphic Relations from Laravel to Angular and back</title><link>https://alfrednutile.info/posts/95/</link><pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/95/</guid><description>This will cover having a polymorphic relationship in Laravel, showing it on a form in Angular and saving it back to Laravel. Overall it is well documented here at the great docs at Laravel but this post might help in a few areas.
As someone defines Polymorphic Relationships there
&amp;ldquo;Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model.</description></item><item><title>Laravel Homestead and MailCatcher</title><link>https://alfrednutile.info/posts/93/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/93/</guid><description>Using MailCatcher http://mailcatcher.me/ I can see the emails sent by the website.
First checkout https://github.com/fideloper/Vaprobash/pull/348 to get your box ready All I did was
Log into the vagrant box and run sudo apt-get install libsqlite3-dev
Then
sudo apt-get install ruby1.9.1-dev -y
sudo gem install mailcatcher
Then
sudo gem install mailcatcher -V
Set your mail.php config This is found in app/config and should be copied to app/config/local so it only applies to local</description></item><item><title>Laravel Sentry and UUID</title><link>https://alfrednutile.info/posts/94/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/94/</guid><description>Update October 10 10:07 Have hit a few issues with this model but still working okay.
To start this trait does some of the work to manage incoming POST data.
&amp;lt;?php namespace BehatEditor\Helpers;
use Rhumsaa\Uuid\Uuid;
trait UuidHelper {
protected $uuid;
protected $saved;
public function getUuid()
{
return $this-&amp;gt;uuid;
}
public function setUuid($uuid = null)
{
if($uuid === null)
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
}
$this-&amp;gt;uuid = $uuid;
return $this;
}
/**
* Get a new version 4 (random) UUID.</description></item><item><title>Behat Test more than number of elements</title><link>https://alfrednutile.info/posts/90/</link><pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/90/</guid><description>There is a Mink step to check for the number of elements
//MinkDictionary.php
/**
* Checks, that (?P&amp;lt;num&amp;gt;\d+) CSS elements exist on the page
*
* @Then /^(?:|I )should see (?P&amp;lt;num&amp;gt;\d+) &amp;quot;(?P&amp;lt;element&amp;gt;[^&amp;quot;]*)&amp;quot; elements?$/
*/
public function assertNumElements($num, $element)
{
$this-&amp;gt;assertSession()-&amp;gt;elementsCount('css', $element, intval($num));
}
But I needed one just to make sure there are some elements on the page, more than 1 for example on a reports page. I guess I could have checked for just 1 eg &amp;ldquo;#behat ol li&amp;rdquo; but I think this can come in handy for our reporting tests.</description></item><item><title>Transforming Output from the Database to the View/REST layer</title><link>https://alfrednutile.info/posts/88/</link><pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/88/</guid><description>Having watched the screen cast here by Jeffery Way and reading Phil Sturgeon&amp;rsquo;s Build APIs You Won&amp;rsquo;t Hate I used this approach on a recent project.
Basically, and they both cover it really well, instead of returning the data right to the ui/rest endpoint from the database I pass it through a class to transform the data formats, field name etc. This has been extremely helpful as we also work out some wording of fields that I can not do easily in this one class.</description></item><item><title>Showing nested relationships details</title><link>https://alfrednutile.info/posts/87/</link><pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/87/</guid><description>This is soooo easy but this is always something this easy can be missed. In this example we have a Property Model with Buildings that have an address.
So the model files look like this
//Property.php
//structures = buildings
public function structures()
{
return $this-&amp;gt;hasMany('Structure');
}
//Structure.php
public function address()
{
return $this-&amp;gt;belongsTo(&amp;quot;Address&amp;quot;);
}
So when I query a property I now get
{
&amp;quot;id&amp;quot;: 1,
&amp;quot;structures&amp;quot;: [
{
&amp;quot;id&amp;quot;: 6,
&amp;quot;address_id&amp;quot;: 9,
&amp;quot;address&amp;quot;: {
&amp;quot;id&amp;quot;: 9,
&amp;quot;city&amp;quot;: &amp;quot;Melvinport&amp;quot;,
&amp;quot;state&amp;quot;: &amp;quot;MT&amp;quot;,
&amp;quot;zip&amp;quot;: &amp;quot;75182&amp;quot;,
&amp;quot;lat&amp;quot;: -18.</description></item><item><title>Simple Laravel CMS Example</title><link>https://alfrednutile.info/posts/86/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/86/</guid><description>Quick intro to Laravel using a custom CMS app I made The repo is here
This is mainly to show an example of a small CMS being built in Laravel. CMS (Content Management System) that is at it&amp;rsquo;s most basic level, Authentication, Simple Content Types etc.
What we will cover.
Installing the &amp;ldquo;CMS&amp;rdquo; and what Page Types it comes with Looking at the folder layout &amp;ldquo;Where is&amp;hellip;.&amp;rdquo; App config setting up the site PHP Artisan command to migrate the site Routes Page example looking at the wysiwyg, Controller, View etc Tags - lets add a many to many relationship This is NOT the end all setup just an example.</description></item><item><title>Laravel and non email authentication</title><link>https://alfrednutile.info/posts/84/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/84/</guid><description>Note to self. The Laravel docs are here that cover Authentication. But when it came time to use a filter and a non email based user name I had to modify the auth.basic filter, or any filter you want to use.
It ended up looking like this since I wanted user_account and not email to be the username for authentication.
//app/filters.php
Route::filter('auth.basic', function()
{
return Auth::basic('user_account');
});
You can see this option here</description></item><item><title>Using Beanstalkd to Schedule the release of a post in Laravel</title><link>https://alfrednutile.info/posts/78/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/78/</guid><description>Phase 1 of my master plan is to regularly write more posts on misc web and coding in general related topics. And sometimes I can sit and write a few of them but it would be best not to release them all at once for a lot of reason.
So this will cover the way I setup a schedule feature to my post creation process. Yes there are libraries for this but I just wanted to have fun making this feature.</description></item><item><title>Using Dot Env files to manage settings</title><link>https://alfrednutile.info/posts/76/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/76/</guid><description>Wow. Included in Laravel http://laravel.com/docs/configuration#protecting-sensitive-configuration
removed due to old news
http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/
Update I really like the second link and how it sets up a .env file first to just return a simple string. After that you can have the .env.production.php or .env.local.php that laravel can look for.
//bootstrap/start.php
$env = $app-&amp;gt;detectEnvironment(function()
{
if (file_exists(__DIR__ . '/../.env')) {
return include(__DIR__ . '/../.env');
} else {
return 'production';
}
});
Quite simple at that point to separate all of the environments.</description></item><item><title>Using Scopes in Laravel</title><link>https://alfrednutile.info/posts/69/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/69/</guid><description>I have about 4 models that all share 2 common queries. I want all of them that are &amp;ldquo;Published&amp;rdquo; and or Ordered by a field called Order.
This does help with some DRY goals, but you could easily change or add to a scope as needed to update all the queries involved etc. Especially if at a later point you break this out into a Repository Patter to use a different ORM.</description></item><item><title>Quick way to add text to a hidden ckeditor field</title><link>https://alfrednutile.info/posts/68/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/68/</guid><description>Since I am not testing ckeditor this is a way to get text into a sometimes required field.
//FeaturesContext.php
/**
* @Then /^I fill in wysiwyg on field &amp;quot;([^&amp;quot;]*)&amp;quot; with &amp;quot;([^&amp;quot;]*)&amp;quot;$/
*/
public function iFillInWysiwygOnFieldWith($arg, $arg2)
{
$js = &amp;lt;&amp;lt;&amp;lt;HEREDOC
jQuery(&amp;quot;textarea[name='$arg']&amp;quot;).css('visibility', 'visible');
jQuery(&amp;quot;textarea[name='$arg']&amp;quot;).show();
HEREDOC;
$this-&amp;gt;getSession()-&amp;gt;executeScript($js);
$this-&amp;gt;fillField($arg, $arg2);
}
This will go into FeaturesContext.php. Then to you test you can pass the name and text to place into the field
Then I fill in wysiwyg on field &amp;quot;body&amp;quot; with &amp;quot;Project via Test 1&amp;quot;
If you want to test Ckeditor then just look for a class that it applies to your text editor to know it is showing.</description></item><item><title>Github CLI to get Teams and Members of an Org</title><link>https://alfrednutile.info/posts/67/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/67/</guid><description>Needed to make a quick library for pulling down this info and making it a CSV file.
The libraries made this super easy. But it was hard to get all the emails since these can only been seen if in the users profile.
the link https://github.com/alnutile/org_reports</description></item><item><title>Adding Column using sqlite caused error 'Cannot add a NOT NULL column with default value NULL'</title><link>https://alfrednutile.info/posts/64/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/64/</guid><description>After the security update I had to add a remember_token to my user table. security update
Since I am using sqllite locally I ended up with this error
&amp;gt;php artisan migrate
[Illuminate\Database\QueryException]
SQLSTATE[HY000]: General error: 1 Cannot add a NOT NULL column with default value NULL (SQL: alter table &amp;quot;users&amp;quot; add column &amp;quot;remember_token&amp;quot; text not null)
Finally this post made it clear I had to make this nullable
//migration file
/**
* Run the migrations.</description></item><item><title>Drupal and Composer install or update</title><link>https://alfrednutile.info/posts/65/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/65/</guid><description>Using composer and drupal, even d7, is great. But an update or install can leave you with a broken drupal registry.
So here is a workflow that is pretty bullet proof.
In this example drupal&amp;rsquo;s composer folder where composer.json lives is located in /var/www/drupal/sites/default/files/composer
So in there is composer.json and composer.lock
So when you need to install a new composer library and you updated your json file you can run</description></item><item><title>php artisan migrate:reset not working</title><link>https://alfrednutile.info/posts/63/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/63/</guid><description>This was an issue for me using sqlite. There was a simple fix noted in the irclogs of Laravel!
So under my require-dev or require I placed
//composer.json
&amp;quot;require&amp;quot;: {
&amp;quot;laravel/framework&amp;quot;: &amp;quot;4.1.*&amp;quot;,
&amp;quot;way/generators&amp;quot;: &amp;quot;dev-master&amp;quot;,
&amp;quot;doctrine/dbal&amp;quot;: &amp;quot;~2.3&amp;quot;
},
ran composer update and all was well again!</description></item><item><title>Adding Markdown Editor to your Blog/CMS</title><link>https://alfrednutile.info/posts/60/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/60/</guid><description>In this case it is Laravel but any PHP framework could use this.
Get the Library I used the dflydev-markdown library which uses php-markdown as it&amp;rsquo;s base. 1
As it notes I load it up with composer.json and I am ready to use it.
Inject the class into your controller At the controller level I inject it like this
//BaseController.php
use dflydev\markdown\MarkdownExtraParser;
class BaseController {
public $mk;
public function __construct(MarkdownExtraParser $mk = null)
{
$this-&amp;gt;mk = ($mk == null) ?</description></item></channel></rss>