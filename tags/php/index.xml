<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on Alfred Nutile</title><link>https://alfrednutile.info/tags/php/</link><description>Recent content in php on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Dec 2021 06:32:07 -0400</lastBuildDate><atom:link href="https://alfrednutile.info/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Get Fixture Put Fixture Helpers for Laravel</title><link>https://alfrednutile.info/posts/get_put/</link><pubDate>Sat, 25 Dec 2021 06:32:07 -0400</pubDate><guid>https://alfrednutile.info/posts/get_put/</guid><description><p>I do a lot with fixtures when testing. This means I put files in the<code>tests/fixtures</code> folder that represet the JSON of what ever I am testing. For example maybe I hit an
API that returns</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">"foo"</span>:<span style="color:#e6db74">"bar"</span>
}</code></pre></div><p>And when I mock that API response I want to have that ready for me to use.</p><p>I then save it to the folder<code>tests/fixtures/foo.json</code> and can just use it.</p><p>To do that I just do the following.</p><h2 id="setup-a-helpersphp-file-in-your-app">Setup a helpers.php file in your app</h2><p>Add the file<code>app/helpers.php</code> for now with<code>&lt;?php</code> on top of it.</p><pre><code>&lt;?php</code></pre><p>Not to exciting yet!</p><p>Then add it to<code>composer.json</code></p><pre><code>File: composer.json
38: "autoload-dev": {
39: "psr-4": {
40: "Tests\\": "tests/"
41: },
42: "files": [
43: "app/helpers.php"
44: ]
45: },</code></pre><p>Now run<code>composer dump</code> and you are ready to add helpers to your app.</p><h2 id="add-get-and-put-helpers">Add get and put helpers</h2><p>To that file I add the getter and putter(?):</p><pre><code>&lt;?php<p>use Illuminate\Support\Facades\File;</p><p>if (!function_exists("put_fixture")) {
function put_fixture($file_name, $content = [], $json = true)
{
if ($json) {
$content = json_encode($content, 128);
}
File::put(
base_path(sprintf("tests/fixtures/%s", $file_name)),
$content
);
return true;
}
}</p><p>if (!function_exists("get_fixture")) {
function get_fixture($file_name)
{
$results = File::get(base_path(sprintf(
"tests/fixtures/%s",
$file_name
)));
return json_decode($results, true);
}
}</code></pre><p>and I make the folder<code>tests/fixtures</code></p></p><p>And now in my tests I can do this:</p><pre><code>put_fixture('meta_data.json', $response_from_api_as_array);</code></pre><blockquote><p>NOTE: Many apis have good docs that sometimes show a JSON response I can save. But somtimes I want a real response to save it so I hit the api ONCE from my test
and mock it from then on</p></blockquote><p>and I can use that later just like this</p><pre><code>get_fixture('meta_data.json', $response_from_api_as_array);</code></pre><p>This will simply put a file and get that file<code>tests/fixtures/meta_data.json</code></p><p>And the file will be JSON for example:</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">"foo"</span>:<span style="color:#e6db74">"bar"</span>
}</code></pre></div></description><tags>laravel, php, note2self, helpers</tags></item><item><title>Windows Dev Box Try 3 2020</title><link>https://alfrednutile.info/posts/267/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/267/</guid><description><p>Yes this is try number 3. See<a href="https://alfrednutile.info/posts/247">here</a> for the first 2 goes at it.</p><p>With WSL2 out and a great laptop I wanted to give this another try.</p><h2 id="mariadb">MariaDB</h2><p>Even though the install is super simple see<a href="https://alfrednutile.info/posts/267/">https://alfrednutile.info/posts/267</a></p><p>I still end up having to do:</p><pre><code>$ sudo mysql -u root # I had to use "sudo" since is new installation<p>mysql> USE mysql;
mysql> UPDATE user SET plugin=&lsquo;mysql_native_password&rsquo; WHERE User=&lsquo;root&rsquo;;
mysql> FLUSH PRIVILEGES;
mysql> exit;</p><p>$ service mysql restart</code></pre><p>To allow me to then use this command, for example<code>maraidb -uroot -proot</code> otherwise I have “Error connecting on localhost” type errors.</p></p><p>If using MySQL this worked really well<a href="https://phoenixnap.com/kb/access-denied-for-user-root-localhost">here</a></p><h2 id="xdebug">Xdebug</h2><p>Using my previous notes in the above post and<a href="https://gcompagnon.github.io/wsl2/xdebug/vscode/php-fpm/2019/09/17/WSL2_php_VSCode_Xdebug.html">https://gcompagnon.github.io/wsl2/xdebug/vscode/php-fpm/2019/09/17/WSL2_php_VSCode_Xdebug.html</a></p><p>I removed the reference to the host:</p><pre><code>[xdebug]
xdebug.remote_enable=1
xdebug.remote_autostart=1
xdebug.remote_handler=dbgp
xdebug.remote_port=9009
xdebug.remote_log = /var/log/xdebug.log</code></pre><p>in Visual Code my launch.json ended up looking like this:</p><pre><code>{
// Use IntelliSense to learn about possible attributes.
// Hover to view descriptions of existing attributes.
// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
"version": "0.2.0",
"configurations": [
{
"name": "Listen for XDebug",
"type": "php",
"request": "launch",
"hostname": "0.0.0.0",
"port": 9009
},
{
"name": "Launch currently open script",
"type": "php",
"request": "launch",
"program": "${file}",
"hostname": "0.0.0.0",
"cwd": "${fileDirname}",
"port": 9009
}
]
}</code></pre></description><tags>windows, linux, wsl, php</tags></item><item><title>PHP Xdebug Visual Code</title><link>https://alfrednutile.info/posts/262/</link><pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/262/</guid><description><blockquote><p>UPDATE: PHP 8 and Xdebug 3 2021.07.18</p></blockquote><p>Ok this took a bit since the Xdebug site talks about<code>arch -x86_64 sudo pecl install xdebug</code> which did not work.</p><p>I just did the normal</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo pecl install xdebug</code></pre></div><p>Then I edit the addition it made:</p><p><code>/opt/homebrew/etc/php/8.0/php.ini</code></p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">zend_extension<span style="color:#f92672">=</span><span style="color:#e6db74">"xdebug.so"</span>
xdebug.mode<span style="color:#f92672">=</span> debug
xdebug.start_with_request<span style="color:#f92672">=</span> yes</code></pre></div><p>I moved it all to the bottom of the file too. The docs talk about OPCache but not sure this really helped.</p><p>Anyways after this and a PHP restart (see below) it all worked.</p><p>I ran<code>valet restart</code> since I am using that for PHP.</p><p>Then ran<code>php -v</code> to see</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">PHP 8.0.8<span style="color:#f92672">(</span>cli<span style="color:#f92672">)</span><span style="color:#f92672">(</span>built: Jul<span style="color:#ae81ff">12</span><span style="color:#ae81ff">2021</span> 02:58:53<span style="color:#f92672">)</span><span style="color:#f92672">(</span> NTS<span style="color:#f92672">)</span>
Copyright<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> The PHP Group
Zend Engine v4.0.8, Copyright<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> Zend Technologies
with Xdebug v3.0.4, Copyright<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 2002-2021, by Derick Rethans
with Zend OPcache v8.0.8, Copyright<span style="color:#f92672">(</span>c<span style="color:#f92672">)</span>, by Zend Technologies</code></pre></div><p>And my launch.json for VSCode is</p><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#960050;background-color:#1e0010">//</span><span style="color:#960050;background-color:#1e0010">Use</span><span style="color:#960050;background-color:#1e0010">IntelliSense</span><span style="color:#960050;background-color:#1e0010">to</span><span style="color:#960050;background-color:#1e0010">learn</span><span style="color:#960050;background-color:#1e0010">about</span><span style="color:#960050;background-color:#1e0010">possible</span><span style="color:#960050;background-color:#1e0010">attributes.</span><span style="color:#960050;background-color:#1e0010">//</span><span style="color:#960050;background-color:#1e0010">Hover</span><span style="color:#960050;background-color:#1e0010">to</span><span style="color:#960050;background-color:#1e0010">view</span><span style="color:#960050;background-color:#1e0010">descriptions</span><span style="color:#960050;background-color:#1e0010">of</span><span style="color:#960050;background-color:#1e0010">existing</span><span style="color:#960050;background-color:#1e0010">attributes.</span><span style="color:#960050;background-color:#1e0010">//</span><span style="color:#960050;background-color:#1e0010">For</span><span style="color:#960050;background-color:#1e0010">more</span><span style="color:#960050;background-color:#1e0010">information,</span><span style="color:#960050;background-color:#1e0010">visit:</span><span style="color:#960050;background-color:#1e0010">https://go.microsoft.com/fwlink/?linkid=830387</span><span style="color:#f92672">"version"</span>:<span style="color:#e6db74">"0.2.0"</span>,<span style="color:#f92672">"configurations"</span>: [
{<span style="color:#f92672">"name"</span>:<span style="color:#e6db74">"Listen for Xdebug"</span>,<span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"php"</span>,<span style="color:#f92672">"request"</span>:<span style="color:#e6db74">"launch"</span>,<span style="color:#f92672">"port"</span>:<span style="color:#ae81ff">9003</span>
},
{<span style="color:#f92672">"name"</span>:<span style="color:#e6db74">"Launch currently open script"</span>,<span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"php"</span>,<span style="color:#f92672">"request"</span>:<span style="color:#e6db74">"launch"</span>,<span style="color:#f92672">"program"</span>:<span style="color:#e6db74">"${file}"</span>,<span style="color:#f92672">"cwd"</span>:<span style="color:#e6db74">"${fileDirname}"</span>,<span style="color:#f92672">"port"</span>:<span style="color:#ae81ff">0</span>,<span style="color:#f92672">"runtimeArgs"</span>: [<span style="color:#e6db74">"-dxdebug.start_with_request=yes"</span>
],<span style="color:#f92672">"env"</span>: {<span style="color:#f92672">"XDEBUG_MODE"</span>:<span style="color:#e6db74">"debug,develop"</span>,<span style="color:#f92672">"XDEBUG_CONFIG"</span>:<span style="color:#e6db74">"client_port=${port}"</span>
}
},
{<span style="color:#f92672">"name"</span>:<span style="color:#e6db74">"Launch Built-in web server"</span>,<span style="color:#f92672">"type"</span>:<span style="color:#e6db74">"php"</span>,<span style="color:#f92672">"request"</span>:<span style="color:#e6db74">"launch"</span>,<span style="color:#f92672">"runtimeArgs"</span>: [<span style="color:#e6db74">"-dxdebug.mode=debug"</span>,<span style="color:#e6db74">"-dxdebug.start_with_request=yes"</span>,<span style="color:#e6db74">"-S"</span>,<span style="color:#e6db74">"localhost:0"</span>
],<span style="color:#f92672">"program"</span>:<span style="color:#e6db74">""</span>,<span style="color:#f92672">"cwd"</span>:<span style="color:#e6db74">"${workspaceRoot}"</span>,<span style="color:#f92672">"port"</span>:<span style="color:#ae81ff">9003</span>,<span style="color:#f92672">"serverReadyAction"</span>: {<span style="color:#f92672">"pattern"</span>:<span style="color:#e6db74">"Development Server \\(http://localhost:([0-9]+)\\) started"</span>,<span style="color:#f92672">"uriFormat"</span>:<span style="color:#e6db74">"http://localhost:%s"</span>,<span style="color:#f92672">"action"</span>:<span style="color:#e6db74">"openExternally"</span>
}
}
]
}</code></pre></div><blockquote><p>UPDATE: PHP 7.4
Every time I do<code>value use php</code> I then lose my xdebug setup :( here is me taking a moment to stop having that happen</p></blockquote><pre><code>vim /usr/local/etc/php/7.4/php.ini</code></pre><p>Then add this</p><pre><code>[PHP]<p>zend_extension="xdebug.so"
xdebug.remote_enable = 1
xdebug.remote_autostart = 1
xdebug.remote_handler = dbgp
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 9000
xdebug.remote_mode = req</code></pre><p>And then I am set again! Notice I am using 9000 above my insanity of using 9005 below has passed</p></p><p>I put two files in my home directory, one starts with the above and one does not. Then I put this alias into my<code>~/.zshrc</code></p><pre><code>alias debug_on="cp ~/Code/php.ini.debugon /usr/local/etc/php/7.4/php.ini"
alias debug_off="cp ~/Code/php.ini.debugoff /usr/local/etc/php/7.4/php.ini"</code></pre><p><code>source ~/.zshrc</code></p><p>and now I can easily turn this on and off to save TONS of time with any php job (testing, etc)</p><blockquote><p>END UPDATE</p></blockquote><p>This article got me going on using Xdebug<a href="https://tighten.co/blog/configure-vscode-to-debug-phpunit-tests-with-xdebug">https://tighten.co/blog/configure-vscode-to-debug-phpunit-tests-with-xdebug</a></p><p>But since 7.2 it has been tricky on the Mac.</p><pre><code>pecl install xdebug</code></pre><p>Then<code>vim /usr/local/etc/php/7.2/php.ini</code></p><p>And remove from there any reference to<code>xdebug.so</code></p><p>Then<code>/usr/local/etc/php/7.2/conf.d/ext-xdebug.ini</code></p><pre><code>[xdebug]
zend_extension="xdebug.so"
xdebug.remote_autostart=1
xdebug.remote_port=9005
xdebug.remote_enable=1
xdebug.profiler_enable=1
xdebug.profiler_output_dir="/Users/alfrednutile/xdebugtmp/"</code></pre><p>and restart the services</p><pre><code>brew services restart php72</code></pre><p>You should be able to run<code>php --ini</code> at the command line.</p><pre><code>>php --ini
Configuration File (php.ini) Path: /usr/local/etc/php/7.2
Loaded Configuration File: /usr/local/etc/php/7.2/php.ini
Scan for additional .ini files in: /usr/local/etc/php/7.2/conf.d
Additional .ini files parsed: /usr/local/etc/php/7.2/conf.d/ext-opcache.ini,
/usr/local/etc/php/7.2/conf.d/ext-xdebug.ini,
/usr/local/etc/php/7.2/conf.d/php-memory-limits.ini</code></pre><p>Visual Code&rsquo;s xdebug<code>launch.json</code> looks like:</p><pre><code>{
"version": "0.2.0",
"configurations": [{
"name": "Listen for XDebug",
"type": "php",
"request": "launch",
"port": 9005
},
{
"name": "Launch currently open script",
"type": "php",
"request": "launch",
"program": "${file}",
"cwd": "${fileDirname}",
"port": 9005
}
]
}</code></pre></description><tags>php, xdebug</tags></item><item><title>IronFunctions and PHP</title><link>https://alfrednutile.info/posts/213/</link><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/213/</guid><description><p>A colleague of mine<a href="https://twitter.com/skwashd">Dave Hall</a> poing out<a href="https://github.com/iron-io/functions">IronFunctions</a>. And being in the pursuit of serverless options especially ones that even have examples of PHP I had to give it a try. This post is a note2self in that the intro<a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">here</a> has some bits that need fixing BUT I think it is close and I hope to add more updates here about the tool.</p><p>All the steps below will only work once you take on the initial hello world<a href="https://github.com/iron-io/functions/blob/master/README.md">here</a>. After that you have the<code>fn</code> cli tool installed and a running local iron-functions server.</p><p>For one I needed to apply each patch seen<a href="https://github.com/iron-io/functions/pull/444/files">here</a></p><p>Once I had all that in place I re-reran the<code>fn</code> install command from the folder where I download the<code>iron-io/functions</code> repo into</p><pre><code>cd ../functions
curl -LSs https://goo.gl/VZrL8t | sh</code></pre><p>Then I restarted the service</p><pre><code>docker run --rm -it --name functions -v ${PWD}/data:/app/data -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 iron/functions</code></pre><blockquote><p>btw you need to have Docker working on your machine. This is so easy now that, for example<a href="https://docs.docker.com/docker-for-mac/install/">mac</a>, it should be a gui install.</p></blockquote><p>Ok now back to my example project</p><pre><code>cd ../example_php</code></pre><p>In here I have several files since the above fix</p><pre><code>worker.php
func.yml
Dockerfile</code></pre><blockquote><p>the cat hello.payload.php in the example docs did not work so I used curl and POST instead but this is not what I want to do
I want to test this from the CLI first so will come back to that later</p></blockquote><p>This folder has a<code>composer.json</code> file. Just run<code>composer init</code> since it just needs to be a basic install of PHP.</p><p><strong>worker.php</strong></p><pre><code>&lt;?php
require 'vendor/autoload.php';
stream_set_blocking(STDIN, 0);
$payload = json_decode(file_get_contents("php://stdin"), true);
if (isset($payload['name'])) {
var_dump($payload);
echo "Hello 2 ", $payload['name'],"!\n\n";
} else {
var_dump($payload);
echo "Hello World 2!\n\n";
}</code></pre><p><strong>func.yml</strong></p><pre><code>name: alnutile/hello
version: 0.0.7
runtime: php
entrypoint: ./func
build:
- docker run --rm -v "$PWD":/worker -w /worker iron/php:dev composer install</code></pre><p><strong>Dockerfile</strong></p><pre><code>FROM iron/php<p>WORKDIR /app
ADD . /app</p><p>ENTRYPOINT ["php", "worker.php"]</code></pre><p>Then as the docs note<a href="https://github.com/iron-io/functions/tree/master/examples/hello/php"><a href="https://github.com/iron-io/functions/tree/master/examples/hello/php">https://github.com/iron-io/functions/tree/master/examples/hello/php</a></a> I do all the install steps.</p></p><p>Once those are done ran<code>curl</code> to see it work:</p><pre><code>>curl -X POST http://localhost:8080/r/phpapp1/hello -d '{ "name": "bar" }'</code></pre><p>Which results in:</p><pre><code>array(1) {
["name"]=>
string(3) "bar"
}
Hello 2 bar!</code></pre><p>For updates I added one more file<code>update.sh</code></p><pre><code>#!/bin/sh
# update a function with a new version and push it
fn bump &amp;&amp; fn build &amp;&amp; fn push
# then update the route
fn routes update phpapp1 /hello</code></pre><p>just to save some time there.</p><p>More soon on using this with Lumen and other options. I tried this but some PHP items are missing on the Alpine docker image to make this work.</p></description><tags>php, ironfunctions, note2self</tags></item><item><title>Testing a trait with PHPUnit</title><link>https://alfrednutile.info/posts/212/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/212/</guid><description><p>In an effort to start recording test coverage using<code>vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover</code> I had some issues with traits being seen.</p><p>I tried numerous approaches my default being just to<code>Use</code> the trait in the test class. I ended up with this as I found some online info about trait testing<a href="http://blog.florianwolters.de/educational/2012/09/20/Testing-Traits-with-PHPUnit/">here</a> that references a now missing post by Sebastian Bergman the maker of PHPUnit</p><pre><code>&lt;?php<p>use Symfony\Component\Yaml\Yaml;</p><p>/**</p><ul><li><p>Test class for {@see PfawsYaml}.
*</p></li><li><p>@covers \PfAws\Traits\PfawsYaml
*/
class PfawsYamlTest extends TestCase
{</p><p>/**</p><ul><li>The object under test.
*</li><li>@var object
*/
protected $traitObject;</li></ul><p>public function setUp()
{
parent::setUp(); // TODO: Change the autogenerated stub
$this->traitObject = $this->createObjectForTrait();
}</p><p>/**</p><ul><li><p><em>Creation Method</em> to create an object for the trait under test.
*</p></li><li><p>@return object The newly created object.
*/
private function createObjectForTrait()
{
$traitName = &lsquo;\PfAws\Traits\PfawsYaml&rsquo;;</p><p>return $this->getObjectForTrait($traitName);
}</p></li></ul><p>/**</p><ul><li><p>coversDefaultClass loadPfawsYaml
*/
public function testLoadPfawsYaml()
{
$path =<strong>DIR</strong> . &lsquo;/fixtures/pfaws.yaml&rsquo;;</p><p>$results = $this->traitObject->loadPfawsYaml(&lsquo;staging&rsquo;, $path);</p><p>$this->assertEquals("bar2", $results->getPfawsYamlEnv(&lsquo;aws_key&rsquo;));</p><p>$this->assertEquals("foo2", $results->getPfawsYamlEnv(&lsquo;aws_secret&rsquo;));</p><p>$this->assertNotNull($this->traitObject->getPfawsyaml());
}</p></li></ul><p>/**</p><ul><li><p>@coversDefaultClass getPfawsYamlEnv
*/
public function testGetPfawsYamlEnv()
{
$path =<strong>DIR</strong> . &lsquo;/fixtures/pfaws.yaml&rsquo;;</p><p>$results = $this->traitObject->loadPfawsYaml(&lsquo;staging&rsquo;, $path);</p><p>$this->assertEquals("bar2", $results->getPfawsYamlEnv(&lsquo;aws_key&rsquo;));</p><p>$this->assertEquals("foo2", $results->getPfawsYamlEnv(&lsquo;aws_secret&rsquo;));
}</p></li></ul><p>/**</p><ul><li><p>@coversDefaultClass getPfawsyaml
*/
public function testGetPfawsyaml()
{
$path =<strong>DIR</strong> . &lsquo;/fixtures/pfaws.yaml&rsquo;;</p><p>$results = $this->traitObject->loadPfawsYaml(&lsquo;staging&rsquo;, $path);</p><p>$this->assertNotNull($results->getPfawsyaml());</p><p>$this->assertNotNull($results);</p><p>$this->assertEquals("bar2", $results->getPfawsYamlEnv(&lsquo;aws_key&rsquo;));</p><p>$this->assertEquals("foo2", $results->getPfawsYamlEnv(&lsquo;aws_secret&rsquo;));
}</p></li></ul><p>/**</p><ul><li><p>@coversDefaultClass setS3
*/
public function testSetS3() {
$path =<strong>DIR</strong> . &lsquo;/fixtures/pfaws.yaml&rsquo;;
$this->traitObject->loadPfawsYaml(&lsquo;staging&rsquo;, $path);
$this->traitObject->setS3();</p><p>$filesystem = \League\Flysystem\AwsS3v3\AwsS3Adapter::class;
$this->assertInstanceOf($filesystem, $this->traitObject->getS3());
}</p></li></ul><p>/**</p><ul><li><p>@coversDefaultClass getPfawsYamlKeyValue
*/
public function testGetPfawsYamlKeyValue() {
$path =<strong>DIR</strong> . &lsquo;/fixtures/pfaws.yaml&rsquo;;
$this->traitObject->loadPfawsYaml(&lsquo;staging&rsquo;, $path)->setS3();</p><p>$app_name = $this->traitObject->getPfawsYamlKeyValue(&lsquo;app_name&rsquo;);
$this->assertEquals(&lsquo;foo&rsquo;, $app_name);
}
}</p></li></ul></li></ul><p/></pre><p>The annotations are for the coverage to know what I am testing.</p></p><p>This area puts the Trait in to an object using a method provided by PHPUnit:</p><pre><code>/**
* *Creation Method* to create an object for the trait under test.
*
* @return object The newly created object.
*/
private function createObjectForTrait()
{
$traitName = '\PfAws\Traits\PfawsYaml';<pre><code>return $this-&amp;gt;getObjectForTrait($traitName);</code></pre><p>}</code></pre></p><p>And then I run<code>vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover</code> and the coverage was boosted / recognized.</p><p>On a side note adding to my<code>phpunit.xml</code></p><pre><code> &lt;logging>
&lt;log
type="coverage-html"
target="./docs/coverage"
charset="UTF-8"
yui="true"
lowUpperBound="35"
highLowerBound="70"
showUncoveredFiles="true"
/><pre><code> &amp;lt;log
type=&amp;quot;coverage-text&amp;quot;
target=&amp;quot;php://stdout&amp;quot;
lowUpperBound=&amp;quot;35&amp;quot;
highLowerBound=&amp;quot;70&amp;quot;
/&amp;gt;
&amp;lt;/logging&amp;gt;</code></pre><p/></pre><p>Gave me some really nice code coverage information</p></p><p><img src="https://dl.dropboxusercontent.com/s/2hbocuv8qfyv2u9/code_coverage.png?dl=0" alt=""/></description><tags>php, testing, phpunit</tags></item><item><title>Instantiate Request for Testing</title><link>https://alfrednutile.info/posts/206/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/206/</guid><description><p>When I need to make a request for a test in which the Class is expecting a<code>\Illuminate\Http\Request</code> I can do this for a file based or non file based request.</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('tests/fixtures/example_profile.jpg');
$originalName = 'example_profile.jpg';
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file->set('profile_image', $upload);
$request->files = $file;<pre><code> $this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/example_profile.jpg')), &amp;quot;File Not found&amp;quot;);
}</code></pre><p/></pre><p>Or just Mocked</p></p><pre><code> $fixture = File::get(base_path('tests/fixtures/slack_incoming_run_report.json'));
$fixture = json_decode($fixture, true);
//$request = new \Illuminate\Http\Request([], [], $fixture,[], [], [], false);
$request = Mockery::mock(\Illuminate\Http\Request::class);
$request->shouldReceive('all')->andReturn($fixture);
/** @var \App\PlannerSlackReport $report */
$report = new \App\PlannerSlackReport();
$report->handle($request);</code></pre><blockquote/></description><tags>laravel, note2self, php, testing</tags></item><item><title>Super Simple Sending Messages to Slack from Laravel</title><link>https://alfrednutile.info/posts/202/</link><pubDate>Thu, 29 Dec 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/202/</guid><description><p>Laravel 5.3 has this feature. But for those not using that version or who just want to see how easy this is, I will show here how I been doing this for some time now.</p><p>Here is the main Class I call to send a message. As you can see I am using Guzzle, in this case<code>"guzzlehttp/guzzle": "^6.1"</code> but others versions can work.</p><pre><code>&lt;?php
namespace App\Services;<p>use Illuminate\Support\Facades\Log;
use GuzzleHttp\Client;</p><p>class SlackWrapper
{
/**
* @var Client $client
*/
protected $client;</p><pre><code>protected $slack_url = false;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
}
public function sendMessageToSlack($message)
{
try {
$this-&amp;gt;client-&amp;gt;request(
'POST',
$this-&amp;gt;getSlackUrl(),
[
'body' =&amp;gt; $this-&amp;gt;message($message)
]
);
} catch (\Exception $e) {
Log::debug(sprintf(&amp;quot;Error sending to Slack %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
protected function message($message)
{
return json_encode(
[
'text' =&amp;gt; $message
]
);
}
public function getSlackUrl()
{
if (!$this-&amp;gt;slack_url)
return env('SLACK_URL');
return $this-&amp;gt;slack_url;
}
/**
* @param boolean $slack_url
*/
public function setSlackUrl($slack_url)
{
$this-&amp;gt;slack_url = $slack_url;
return $this;
}</code></pre><p>}</code></pre><p>And that is it. As long as I set this<code>env(&lsquo;SLACK_URL&rsquo;)</code> in my .env OR in the class instantiation it will get to that endpoint.</p></p><p>Then in slack just add get the webhook/room you want to post to</p><p><img src="https://dl.dropboxusercontent.com/s/rk2gd4c5tpflpmi/webhooks_slack.png?dl=0" alt=""/></description><tags>php, laravel, slack</tags></item><item><title>Pusher and PHP 'Error Failed to connect to Pusher'</title><link>https://alfrednutile.info/posts/201/</link><pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/201/</guid><description><p>Note to self. Getting this error &ldquo;Error Failed to connect to Pusher&rdquo; but the front end is working. And you know your credentials are correct, AND it was working just a day ago check the date and time on your machine/vm.</p><p>Mine had drift and since it was behind by 20 minutes I would end up with this error.</p><p>Oy what a waste or time x 2 :(</p></description><tags>php, note2self, laravel</tags></item><item><title>Guzzle 5 or 6 or ????</title><link>https://alfrednutile.info/posts/198/</link><pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/198/</guid><description><p>Sometimes Guzzle can be a real pain to use in an library. You choose 5.x and then some other library needed 6.x and heck you really did not care either way.</p><p>One interesting package example is<a href="https://packagist.org/packages/aws/aws-sdk-php">aws/aws-sdk-php</a></p><p>If you look in it&rsquo;s composer.json you will see this</p><pre><code> "require": {
"php": ">=5.5",
"guzzlehttp/guzzle": "~5.3|~6.0.1|~6.1",
"guzzlehttp/psr7": "~1.0",
"guzzlehttp/promises": "~1.0",
"mtdowling/jmespath.php": "~2.2"
},</code></pre><p>So it allows for other libraries to choose as needed and it will deal with the different versions as needed.</p><p><code>vendor/aws/aws-sdk-php/src/functions.php:263</code></p><pre><code>function default_http_handler()
{
$version = (string) ClientInterface::VERSION;
if ($version[0] === '5') {
return new \Aws\Handler\GuzzleV5\GuzzleHandler();
} elseif ($version[0] === '6') {
return new \Aws\Handler\GuzzleV6\GuzzleHandler();
} else {
throw new \RuntimeException('Unknown Guzzle version: ' . $version);
}
}</code></pre><p>Then each class deals with instantiating the<code>GuzzleHttp\Client</code> as needed.</p></description><tags>php, note2self</tags></item><item><title>Mockery Behat and Laravel</title><link>https://alfrednutile.info/posts/190/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/190/</guid><description><p>This is a quick view of using this library<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a> and a Mockery Trait (should be included soon but for now put the below in your<code>features/bootstrap</code> folder and run<code>composer dump</code>).</p><p>The example here is a method that looks like this</p><p><code>features/bootstrap/ExampleContext.php</code></p><pre><code> $partial = Mockery::mock(\App\Broadcasts\ColumnsAndRowsDoneProcessingEmail::class, [$this->segment])->makePartial();<pre><code> $partial-&amp;gt;shouldReceive('sendEmail')-&amp;gt;never();
$repo = App::make(\App\JobsRepository::class);
$partial-&amp;gt;handle($repo);</code></pre><p/></pre><p>When this is done running I would get pass BUT if I change it<code>never</code> to<code>once</code> and run it again I still get green :(</p></p><p>But I need to include the Mockery. In my case I made this trait that will allow me to also tests and mock events.</p><pre><code>&lt;?php<p>trait MockeryTrait
{</p><pre><code>public $firedEvents = [];
public $beforeApplicationDestroyedCallbacks = [];
/**
* @AfterScenario
*/
public function reviewMocks()
{
if ($this-&amp;gt;app) {
foreach ($this-&amp;gt;beforeApplicationDestroyedCallbacks as $callback) {
call_user_func($callback);
}
$this-&amp;gt;app-&amp;gt;flush();
$this-&amp;gt;app = null;
}
if (class_exists('Mockery')) {
Mockery::close();
}
$this-&amp;gt;beforeApplicationDestroyedCallbacks = [];
}
protected function beforeApplicationDestroyed(callable $callback)
{
$this-&amp;gt;beforeApplicationDestroyedCallbacks[] = $callback;
}
/**
* Specify a list of events that should be fired for the given operation.
*
* These events will be mocked, so that handlers will not actually be executed.
*
* @param array|string $events
* @return $this
*
* @throws \Exception
*/
public function expectsEvents($events)
{
$events = is_array($events) ? $events : func_get_args();
$this-&amp;gt;withoutEvents();
$this-&amp;gt;beforeApplicationDestroyed(function () use ($events) {
$fired = $this-&amp;gt;getFiredEvents($events);
if ($eventsNotFired = array_diff($events, $fired)) {
throw new Exception(
'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
);
}
});
return $this;
}
/**
* Mock the event dispatcher so all events are silenced and collected.
*
* @return $this
*/
protected function withoutEvents()
{
$mock = Mockery::mock('Illuminate\Contracts\Events\Dispatcher');
$mock-&amp;gt;shouldReceive('fire')-&amp;gt;andReturnUsing(function ($called) {
$this-&amp;gt;firedEvents[] = $called;
});
$this-&amp;gt;app-&amp;gt;instance('events', $mock);
return $this;
}
/**
* Filter the given events against the fired events.
*
* @param array $events
* @return array
*/
protected function getFiredEvents(array $events)
{
return $this-&amp;gt;getDispatched($events, $this-&amp;gt;firedEvents);
}
/**
* Filter the given classes against an array of dispatched classes.
*
* @param array $classes
* @param array $dispatched
* @return array
*/
protected function getDispatched(array $classes, array $dispatched)
{
return array_filter($classes, function ($class) use ($dispatched) {
return $this-&amp;gt;wasDispatched($class, $dispatched);
});
}
/**
* Check if the given class exists in an array of dispatched classes.
*
* @param string $needle
* @param array $haystack
* @return bool
*/
protected function wasDispatched($needle, array $haystack)
{
foreach ($haystack as $dispatched) {
if ((is_string($dispatched) &amp;amp;&amp;amp; ($dispatched === $needle || is_subclass_of($dispatched, $needle))) ||
$dispatched instanceof $needle) {
return true;
}
}
return false;
}</code></pre><p>}</code></pre><p>This pulls in a trait Laravel uses in PHPUnit.</p></p><p>So now when I run that test I get red and when I set it back to<code>zero</code> I get green!</p></description><tags>php, laravel, behat, bdd</tags></item><item><title>Uploading Images in Behat both at Domain Level and UI Level</title><link>https://alfrednutile.info/posts/188/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/188/</guid><description><p>The goal here is as follows</p><pre><code> @fileCleanup @javascript
Scenario: Uploading File
Given I already made a Segmentation and am editing it
Then I add file and the system will process it
And I can not add another file till it is done
And when the system is done I can add another file</code></pre><p>In this case they are large files and I want to get an MVP for the users to interact with so one file at a time is enough for now.</p><p>The tricky part is that I am running Selenium on my Mac and running behat in my VM there is no file path connection between the two.
This can also be an issue when using Saucelabs and<a href="https://crossbrowsertesting.com/">https://crossbrowsertesting.com/</a>.</p><h2 id="ui-level">UI Level</h2><p>I am using the Flow Angular library so it is JavaScript heavy (some notes below). Otherwise your work is even easier.</p><p>My step to set things up<code>Given I already made a Segmentation and am editing it</code> just adds that resource to the system and then I visit it.</p><p>From there I hit<code>Then I add file and the system will process it</code> and this is where it all begins</p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there<pre><code> /**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip-&amp;gt;open($tempZip, \ZipArchive::CREATE);
$zip-&amp;gt;addFile($localFile, basename($localFile));
$zip-&amp;gt;close();
$remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this-&amp;gt;attachFileToField('image_upload', $remotePath); //see Flow notes at the bottom of this page
$this-&amp;gt;assertPageNotContainsText('Upload File');
unlink($tempZip);
sleep(5); //Later on I will move this to `spin` see notes below
$this-&amp;gt;assertPageContainsText('data_columns_not_snaked');
}</code></pre><p/></pre><p>Let me show that again but now more simple just a normal input button</p></p><pre><code> /**
* @Then I add file and the system will process it
*/
public function iAddFileAndTheSystemWillProcessIt()
{
$this->visit('/segments/files/' . $this->segment_uuid);
sleep(2); //load up the page
$this->assertPageContainsText('Upload File'); //make sure the button is there
/**
* Here is the meat of it, or tofu, I have to deal with the fact I am running
* Selenium on a different machine than my VM's filesystem
* So I inject this into the WebDriverSession
* Which only exists because this Scenario is marked `@javascript`
*/
$localFile = base_path('features/fixtures/data_columns_not_snaked.xls');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip->open($tempZip, \ZipArchive::CREATE);
$zip->addFile($localFile, basename($localFile));
$zip->close();
$remotePath = $this->getSession()->getDriver()->getWebDriverSession()->file([
'file' => base64_encode(file_get_contents($tempZip))
]);
/** end the hard part **/
$this->attachFileToField('image_upload', $remotePath); //the input field
/** prove the button is gone during this process **/
$this->assertPageNotContainsText('Upload File');
unlink($tempZip);
$this->pressButton('Upload File'); //dealing with normal input button
}</code></pre><h2 id="domain-level">Domain Level</h2><p>Since my Controller gets the info from the incoming<code>Request</code> and hands it to the Repository class, I like to test my classes outside the Controller then plug them in (see<a href="https://alfrednutile.info/posts/187">here</a> for more on that), there is typically no need to pass the full<code>Request</code> to the Repository. But in this case I went about passing the entire<code>Request</code> to the<code>Repository</code> and doing some checking in there as well.</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$request = new \Illuminate\Http\Request();
$file = new \Symfony\Component\HttpFoundation\FileBag();
$path = base_path('features/fixtures/data_columns_not_snaked.xls');
$originalName = 'data_columns_not_snaked.xls';
/** note `true` passed in to `UploadedFile` it defines this as a test request **/
$upload = new \Illuminate\Http\UploadedFile($path, $originalName, null, null, null, true);
$file->set('profile_image', $upload);
$request->files = $file;<pre><code> $this-&amp;gt;repo = new \App\Repositories\ProfileRepository();
$results = $this-&amp;gt;repo-&amp;gt;uploadUserProfileImage($request);
PHPUnit::assertTrue($results, &amp;quot;Repo did not return true&amp;quot;);
PHPUnit::assertTrue(File::exists(public_path('storage/' . $this-&amp;gt;user-&amp;gt;id . '/data_columns_not_snaked.xls')), &amp;quot;File Not found&amp;quot;);
}</code></pre><p/></pre><p>And now that is passing as well.</p></p><h2 id="thats-it">Thats It</h2><p>I am now testing both the UI and the Domain level part of this Application.</p><h2 id="note">Note</h2><p>Using Flow Library<a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow</a> makes it easy to process large files in PHP for me.</p><p>One thing I had to do was do was set<code>flow-attrs</code> to the directive so I can get a<code>name</code> in there to target field.</p><pre><code>&lt;div class="btn btn-xs btn-primary" flow-attrs="{name:'image_upload'}" flow-btn ng-if="vm.file_uploading">
&lt;i class="fa fa-cloud-upload">&lt;/i> Upload File
&lt;/div></code></pre><p>Link to Spin on Behat docs and StackOverflow for a better solution than<code>sleep</code></p><p><a href="http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat">http://stackoverflow.com/questions/28510155/how-to-get-the-mink-selenium-2-driver-to-wait-for-the-page-to-load-with-behat</a></p><p><a href="http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html">http://docs.behat.org/en/v2.5/cookbook/using_spin_functions.html</a></p><p>And a bit more on that<a href="http://www.tentacode.net/10-tips-with-behat-and-mink">http://www.tentacode.net/10-tips-with-behat-and-mink</a></p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Behat Laravel Domain Testing Inside Out</title><link>https://alfrednutile.info/posts/187/</link><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/187/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/055lj0hcljvpp7u/4_pane_guy_and_getting_started.png?dl=0" alt=""/><p>I will cover the use of<code>FormRequest</code>,<code>Mockery</code>,<code>Behat</code> and more in this article.</p><p>The article will show how to test your Domain code, in this case I mean testing how the code will work outside of the Routing and Controller layer of your Application. But what this will lead to is a &ldquo;lego&rdquo; like moment of plugging in these parts to your Controller so you know it will work. Of course it will be tested as well during the UI testing.</p><p>I will start off with this Behat Feature</p><pre><code>Feature: Login Page
Login page to do authenticated tasks
As an anonymous user
So we can protect some personal and administrative parts of the site<p>@happy_path @smoke @javascript @profile
Scenario: A user can login and see their profile
Given I am on the login page
And I fill in the login form with my proper username and password
Then I should be able to see my profile page
Then if I try to see another persons page I should get rejected</p><p>@smoke @profile
Scenario: A non logged in user can not get a profile
Given I am an anonymous user
And I go to the profile page
Then I should get redirected with an error message to let me know the problem</p><p/></pre><p>What we have is the<code>@happy_path</code> that will be the UI<code>Scenario</code> in this case as well as the Domain. And yes I can have more than one UI<code>Scenario</code> but in this case I just want to deliver something that let’s the Product Owner knows her application is working as expected.</p></p><p>What we will start with is<code>Scenario: A user can login and see their profile</code></p><p>In my example there will be a<code>Repository</code> class to manage the Business logic and a<code>FormRequest</code> Class to deal with managing ACL.</p><p>Let&rsquo;s take the Context file one step at a time<code>features/bootstrap/LoginPageDomainContext.php</code></p><pre><code> /**
* @Given I am on the login page
*/
public function iAmOnTheLoginPage()
{
$this->user = factory(\App\User::class)->create();
}</code></pre><p>I setup the state of the world for this<code>Scenario</code> I do not rely on seed data.</p><p>Also at the top of the Class I pull in<code>use \Laracasts\Behat\Context\DatabaseTransactions;</code> and<code>\Laracasts\Behat\Context\Migrator</code></p><p>These come from the Laracast Library on Behat<a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs</a> and<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><p>This next step is written with too much &ldquo;Web&rdquo; in mind. I should try and reword it so it fits more inline with the business goals.</p><pre><code> /**
* @Given I fill in the login form with my proper username and password
*/
public function iFillInTheLoginFormWithMyProperUsernameAndPassword()
{
Auth::login($this->user);
PHPUnit_Framework_Assert::assertFalse(Auth::guest());
}</code></pre><p>Here is where things get fun</p><pre><code> /**
* @Then I should be able to see my profile page
*/
public function iShouldBeAbleToSeeMyProfilePage()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(['user_id' => $user->id]);<pre><code> /** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)-&amp;gt;makePartial();
$auth-&amp;gt;shouldReceive('route')-&amp;gt;andReturn($user-&amp;gt;url);
$results = $auth-&amp;gt;authorize();
PHPUnit::assertTrue($results);
}</code></pre><p/></pre><p>And the next part to that</p></p><pre><code> /**
* @Then if I try to see another persons page I should get rejected
*/
public function ifITryToSeeAnotherPersonsPageIShouldGetRejected()
{
$user = factory(\App\User::class)->create();
factory(\App\Profile::class)->create(
['favorite_comic_character' => "foo", 'user_id' => $user->id]
);
/** @var \App\Http\Requests\ProfileShowRequest $auth */
$auth = Mockery::mock(\App\Http\Requests\ProfileShowRequest::class)->makePartial();
$auth->shouldReceive('route')->andReturn($user->url);
$results = $auth->authorize();
PHPUnit::assertFalse($results);
}</code></pre><p>Making sure to close my<code>Mockery</code> when done</p><pre><code> /**
* @afterScenario
*/
public function cleanUp() {
Mockery::close();
}</code></pre><p>We are testing the two pieces that matter right now, the<code>Repo</code> and the<code>FormRequest</code>.</p><p>All I did was run<code>vendor/bin/behat -slogin_domain --append-snippets --tags=@happy_path</code> and I got to see the one(s) with that tag working.</p><h2 id="the-repo">The Repo</h2><p><code>\App\Repositories\ProfileShowPage</code></p><pre><code>&lt;?php
namespace App\Repositories;<p>use App\Profile;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Auth;</p><p>class ProfileShowPage extends ProfileRepository
{</p><pre><code>public function showProfileForUserFromSlug($slug)
{
return \App\User::fromSlug($slug);
}</code></pre><p>}</code></pre><p>Why not just use the Controller! Well this is still a simple simple example but honestly if you are just building something for fun or something serious and just getting the feel of an idea go for it. I am doing this cause I want to plug in more to this later since it is part of a larger plan.</p></p><p><strong>Note:<code>Profile::fromSlug()</code> is just a scope and the model works out the rest of the query for me</strong></p><pre><code> public function scopeFromSlug($query, $slug)
{
return $query->with('profile')->where('url', $slug)->firstOrFail();
}</code></pre><p>That is it for the repository, now how about this<code>FormRequest</code> at<code>app/Http/Requests/ProfileShowRequest.php</code>?</p><h2 id="formrequest">FormRequest</h2><p>You can read more about this<a href="https://laravel.com/docs/5.2/validation#form-request-validation">here</a> on Laravel Docs</p><pre><code>&lt;?php<p>namespace App\Http\Requests;</p><p>/**</p><ul><li>@NOTE THERE ARE SOME CLASSES HERE SEE GITHUB
*/</li></ul><p>class ProfileShowRequest extends Request
{</p><pre><code>protected $profile;
/**
* Determine if the user is authorized to make this request.
*
* @return bool
*/
public function authorize()
{
if (Auth::guest()) {
return false;
}
/** @var \App\Repositories\ProfileShowPage $profilePage */
$profilePage = App::make(\App\Repositories\ProfileShowPage::class);
$user = $profilePage-&amp;gt;showProfileForUserFromSlug($this-&amp;gt;route('slug'));
return Auth::user()-&amp;gt;id == $user-&amp;gt;profile-&amp;gt;user_id;
}
public function forbiddenResponse()
{
return redirect('login')-&amp;gt;with('message', &amp;quot;You need to login first&amp;quot;);
}
/**
* Get the validation rules that apply to the request.
*
* @return array
*/
public function rules()
{
return [
//
];
}</code></pre><p>}</p><p/></pre><h2 id="the-controller">The Controller</h2></p><p>All right now that step is passing and the pieces are ready to plug in to the Controller!</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Http\Requests\ProfileShowRequest;
use App\Repositories\ProfileShowPage;
use Illuminate\Database\Eloquent\ModelNotFoundException;</p><p>class ProfileShowController extends Controller
{</p><pre><code>public function getProfileForUserUsingSlug(ProfileShowRequest $request, ProfileShowPage $repository, $slug)
{
try {
$profile = $repository-&amp;gt;showProfileForUserFromSlug($slug);
return view('profile.show', compact('profile'));
} catch (ModelNotFoundException $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Could not find your profile :(&amp;quot;);
} catch (\Exception $e) {
return redirect()-&amp;gt;route('home')-&amp;gt;with('message', &amp;quot;Error getting profile :(&amp;quot;);
}
}</code></pre><p>}</code></pre><p>This controller has one Job<code>app/Http/Controllers/ProfileShowController.php</code> Showing the profile.</p></p><p>In with that job it has the ACL taken care of before it even has to think about what it needs to do.</p><p>After that it asks the repo to take care of the request and it deals with the response or inevitable exception!</p><p>So right away I can go to my ui test and make it so you can see the<strong><a href="https://github.com/alnutile/recipes/blob/a5f2522e702ee49d21711d9416c5a659e7761ddc/features/bootstrap/LoginPageUIContext.php">code here</a></strong></p><h2 id="follow-up">Follow Up</h2><p>All code for this can be seen at<a href="https://github.com/alnutile/recipes">https://github.com/alnutile/recipes</a> this is a foundation repo for a new book coming out in 2 months with many day to day Laravel Recipes!</p></description><tags>behat, bdd, php, laravel</tags></item><item><title>Example of Mixing it up Behat BDD and PHPUnit</title><link>https://alfrednutile.info/posts/185/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/185/</guid><description><p>Just wanted to show two things here. One is how sometimes I end up in PHPUnit to work out some ideas. And two how awesome it is to refactor thanks to PHPUnit.</p><p>In this example I had a Class responsible for saving data, we&rsquo;ll call FooSaveData. But before that save it has to process some incoming information against another set of data to save the results of that. So I made another class we&rsquo;ll call FooProcessData.</p><p>The BDD Story for this worked out well in that just like in Konstantin Kudryashov noted in this<a href="http://stakeholderwhisperer.com/posts/2014/10/introducing-modelling-by-example#_=_">article</a> I had a great reading business driven gherkin feature that I then, using<a href="http://docs.behat.org/en/v3.0/guides/5.suites.html">Behat 3 and Suites</a> was able to make some really great names for my classes and methods.</p><p>But this was fine as I was working on FooSaveData, but the fact that FooProcessData had to iterate over a large complex array of data I did not want to do inside of this Gherkin test. It would mean that I had to deal with 5 other steps, x number of model states I needed etc. Instead I just made a unit test for that class &ldquo;FooProcessData&rdquo; and focused on it for a bit outside the rest of this work.</p><p>To begin with I just use</p><pre><code>File::put(base_path('tests/fixtures/data_to_process.json', json_encode($some_data, JSON_PRETTY_PRINT))</code></pre><p>to put that data right where I want it for my unit tests.</p><p>Then from there I go around and around unil the thinking on the left reads more like the thinking on the right</p><p><a href="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0"><img src="https://dl.dropboxusercontent.com/s/evboprnu04gllrn/example_of_crazy_method_to_readable.png?dl=0" alt="start to end"/></p><p>Which is my favorite part of this really as I see code evolve to something I can come back 6 months later and read.</p><blockquote><p>Let&rsquo;s Plan for a Future Where We&rsquo;re All As Stupid as We Are Today - Dan Milstein</p></blockquote><p>At this point that &ldquo;lego&rdquo; like piece is done and I can go back to my Behat BDD Gherkin test to finish off where I left off.</p></description><tags>php, laravel, bdd, behat, phpunit</tags></item><item><title>Keeping a Controller Method Simple</title><link>https://alfrednutile.info/posts/186/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/186/</guid><description><p>When I am done with a controller, done mocking up ideas and ready for some long term code, then I think this is the most information a Controller method should have.</p><pre><code>public function updateFoor($id, $foo) {
        try {
           
            $results = $this->someRepoOrServiceClass($Id, $foo);           
            return Response::json(['data' => [], 'message' => "Success doing something"], 202);
        } catch (\Exception $e) {
            $message = sprintf("Error doing something %s", $e->getMessage());
            Log::debug($message);
           
            return Response::json(['data' => [], 'message' => $message], 400);
        }
}</code></pre><p>At this point I have<code>someRepoOrServiceClass</code> well tested outside of this Controller. And I do not need to do much to this controller since it is just returning the results or dealing with an error.</p><p>Even using<a href="https://laravel.com/docs/5.2/validation#form-request-validation">Form Request Validation</a> I can create logic and test logic outside of my Controller. Making the moment I come back to my controller just about plugging in these &ldquo;lego&rdquo; like pieces.</p></description><tags>php, coding</tags></item><item><title>API Token Based Access Laravel 5.1 (Yet another article on this)</title><link>https://alfrednutile.info/posts/183/</link><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/183/</guid><description><h2 id="api-token">API Token</h2><p>Laravel 5.2 introduces the auth token guard setup which is way simpler than Oauth. Also it does not assume a certain level of complexity in needs like Scopes and expirations of tokens that we do not need for our internal app to app communications.</p><p>We are using 5.1 so this will implement it.</p><p>See some docs here<a href="https://gistlog.co/JacobBennett/090369fbab0b31130b51">https://gistlog.co/JacobBennett/090369fbab0b31130b51</a></p><p>For creating a user the AppServiceProvider boots the user record and if no api_token
is present it will set one. As well as the UUID (we use<a href="https://packagist.org/packages/ramsey/uuid">https://packagist.org/packages/ramsey/uuid</a> for this)</p><p><code>app/Providers/AppServiceProvider.php:18</code></p><pre><code> User::creating(function($user) {
if (!$user->id)
{
$user->id = Uuid::uuid4()->toString();
}<pre><code> if (!$user-&amp;gt;api_token)
{
$user-&amp;gt;api_token = Uuid::uuid4()-&amp;gt;toString();
}
});</code></pre><p/></pre><p>The factory includes this as well<code>database/factories/ModelFactory.php</code></p></p><pre><code>$factory->define(App\User::class, function ($faker) {
return [
'id' => $faker->uuid,
'name' => $faker->name,
'email' => $faker->email,
'api_token' => $faker->uuid,
'password' => str_random(10),
'remember_token' => str_random(10),
];
});</code></pre><p>Note in the<code>\App\User</code> model has this field hidden like the password field<code>app/User.php</code></p><pre><code>///
class User extends Model implements AuthenticatableContract, CanResetPasswordContract
{
use Authenticatable, CanResetPassword;
protected $hidden = ['password', 'remember_token', 'api_token'];
///</code></pre><p>And of course we need the migration for this</p><pre><code>&lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;
class AddApiTokenToUsersTable extends Migration
{
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table->string('api_token', 60)->unique();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
if(Schema::hasColumn('users', 'api_token'))
$table->dropColumn('api_token');
});
}
}</code></pre><p>This is all happening using the<code>api_token</code> middleware seen here<code>app/Http/Middleware/ApiToken.php</code></p><pre><code>&lt;?php
namespace App\Http\Middleware;
use App\User;
use Closure;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\App;
class ApiToken
{
protected $auth;
public function __construct(Guard $auth)
{
$this->auth = $auth;
}
public function handle($request, Closure $next)
{
if($request->input('api_token') &amp;&amp; $this->hasMatchingToken($request->input('api_token'))) {
return $next($request);
}
/**
* This assumes it is behind auth at all times
* so if the above fails we then let auth manage it
*/
if ($this->auth->guest()) {
if ($request->ajax()) {
return response('Unauthorized.', 401);
} else {
return redirect()->guest('auth/login');
}
}
return $next($request);
}
/**
* Laravel 5.2 uses vendor/laravel/framework/src/Illuminate/Auth/TokenGuard.php:66 and then
* vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php:87 to get
* a user based on the password
*
* @NOTE
* We can load the user if we want to manage scopes/roles etc but right now it is
* just pass fail
*/
public function hasMatchingToken($token)
{
if($user = User::where('api_token', $token)->first())
return true;
}
}</code></pre><p>And plug that into the Kernel<code>app/Http/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Http;
use Illuminate\Foundation\Http\Kernel as HttpKernel;
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];
/**
* The application's route middleware.
*
* @var array
*/
protected $routeMiddleware = [
'auth' => \App\Http\Middleware\Authenticate::class,
'auth.token' => \App\Http\Middleware\ApiToken::class,
'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
];
}</code></pre><h2 id="tests">Tests</h2><p>You can see the tests<code>tests/UserTokenTest.php</code></p><pre><code>&lt;?php
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
class UserTokenTest extends TestCase
{
use DatabaseMigrations;
/**
* @test
*/
public function should_pass_auth_with_no_token_since_they_auth()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_auth_user_since_they_have_token()
{
$user = factory(\App\User::class)->create();
$results = $this->call('GET', sprintf("/example/auth_token?api_token=%s", $user->api_token));
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_fail_user_no_token_no_auth()
{
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(302, $results->status());
}
}</code></pre><h2 id="console-commands-to-make-tokens">Console Commands to Make Tokens</h2><p>You can see the commands<code>app/Console/Commands/UserTokenCrud.php</code></p><pre><code>&lt;?php
namespace App\Console\Commands;
use App\User;
use Illuminate\Console\Command;
use Ramsey\Uuid\Uuid;
class UserTokenCrud extends Command
{
/**
* @TODO
* Show, Update, Delete
*/
protected $signature = 'cat:create-token {user_email} {--show=false : Just show the token} ';
protected $description = 'Create the token for the user';
public function __construct()
{
parent::__construct();
}
public function handle()
{
try
{
$user = User::where('email', $this->argument('user_email'))->first();
if(!$user)
throw new \Exception(sprintf("User not found for %s", $this->argument("user_email")));
if($this->option('show'))
{
$this->info(sprintf("User token is %s", $user->api_token));
return false;
}
$token = Uuid::uuid4()->toString();
$user->api_token = $token;
$user->save();
$this->info(sprintf("User with email %s now has token %s", $user->email, $token));
}
catch(\Exception $e)
{
$this->error(sprintf("Error finding user %s", $e->getMessage()));
}
}
}</code></pre><p>Plug that into the Console Kernel<code>Console/Kernel.php</code></p><pre><code>&lt;?php
namespace App\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
//\App\Console\Commands\Inspire::class,
\App\Console\Commands\UserTokenCrud::class
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
//$schedule->command('inspire')
->hourly();
}
}</code></pre><p>Allowing to update, delete and see tokens</p><h2 id="example-routes">Example Routes</h2><pre><code>Route::group(['middleware' => 'auth.token'], function () {
Route::get('example/auth_token', function () {
return "foo";
});
});</code></pre><p>I added some testing / example routes. Once you have your api_token give them a try</p><ul><li>/example/auth_token?api_token=foo to show the API Token working</li><li>/s3?api_token=foo</li><li>/rds?api_token=foo</li><li>/dynamodb?api_token=foo</li></ul><p>Note the token might change if you seed the database. You can ssh into the server and run</p><pre><code>php artisan cat:create-token foo@gmail.com --show</code></pre><p>To get the token.</p></description><tags>php, auth, laravel, api</tags></item><item><title>Contract Testing</title><link>https://alfrednutile.info/posts/182/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/182/</guid><description><p>Sometimes we need to make sure external APIs have not changed. Some of those we have control over some of those we do not.</p><p>Either way we can run tests daily, weekly or as needed, outside of our tests we run with every push to Github, that will make sure this API is still delivering what we expect.</p><p>This<a href="https://www.youtube.com/watch?v=NAF7HWW_eJs">video</a> gave me some good tips on this one being to keep your Contract tests outside of your Domain Logic. Secondly to focus on the KEYS and VALUES you care about.</p><h2 id="keys">KEYS</h2><p>Focusing on the ones you care about can make this a ton easier. If I am calling an API and only want to know the ID and TITLE then I am going to make sure those exist and are in the same place every time.</p><p>Here are some results from the Marvel Comics API</p><pre><code>{
"offset": 0,
"limit": 20,
"total": 733,
"count": 20,
"results": [
{
"id": 55699,
"digitalId": 0,
"title": "Spider-Man (2016) #5",
"issueNumber": 5,
"variantDescription": "",
"description": "BLACK CAT makes her move against SPIDER-MAN!!!",
"modified": "2016-04-05T12:46:27-0400",
"isbn": "",
"upc": "75960608314500511",
"diamondCode": "",
"ean": "",</code></pre><p>I just want to make sure &ldquo;results&rdquo; has a record, with ID and TITLE. So I can call this api via PHPUnit on a scheduled basis and make sure it is working if not ping us in Slack.</p><h2 id="values">VALUES</h2><p>Then there are values. Many times these change so I might not focus on the value of the value but the type. Integer, Array, Not-Null, Empty etc. What am I expecting?</p><h2 id="phpunit">PHPUnit</h2><p>With these two things in place we can have a set of PHPUnit tests that can run on a schedule. You can set your phpunit.xml to hit these as separate Suites.</p><pre><code> &lt;testsuites>
&lt;testsuite name="Application Test Suite">
&lt;directory>./tests/&lt;/directory>
&lt;/testsuite>
&lt;testsuite name="Contracts Test Suite">
&lt;directory>./tests/contracts/&lt;/directory>
&lt;/testsuite>
&lt;/testsuites></code></pre><p>And just run those<code>phpunit --testsuite Contracts Test Suite</code></p></description><tags>php, testing</tags></item><item><title>AWS, S3 Storage and limited Visibility</title><link>https://alfrednutile.info/posts/180/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/180/</guid><description><p>Storing files on S3 is great. And many times those files are private so I only want to give temporary access to them. Using Laravel Storage I can interact with the file-system quite easily and seamlessly especially between Cloud and Local.</p><p>In this case I want to return a file only for 10 minutes</p><pre><code> public function getSignedUrl($filename_and_path, $expires_minutes = '10')
{
$client = Storage::disk('s3')->getDriver()->getAdapter()->getClient();
$bucket = env('BUCKET');<pre><code> $command = $client-&amp;gt;getCommand('GetObject', [
'Bucket' =&amp;gt; $bucket,
'Key' =&amp;gt; $filename_and_path
]);
$request = $client-&amp;gt;createPresignedRequest($command, Carbon::now()-&amp;gt;addMinutes($expires_minutes));
return (string) $request-&amp;gt;getUri();
}</code></pre><p/></pre><p>That is it!</p></p><p>Thanks to this<a href="https://github.com/minio/minio/issues/1285">post</a> for the help.</p></description><tags>php, aws</tags></item><item><title>Behat and Uploading Files to a Form Even on Remote Selenium2 Servers</title><link>https://alfrednutile.info/posts/179/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/179/</guid><description><p>Just had to tackle this issue so making some notes for later here :)</p><p><strong>Updated and more detailed<a href="https://alfrednutile.info/posts/188">here</a></strong></p><p>I run selenium on my Windows PC and before that my Mac, either one would have had this issue since my test is running side my VM. This meant when I needed to run a test to interact with a form to upload an image that image path was relative to the machine (VM) that I started the test on and not the Browser that was being manipulated by Selenium2.</p><p>The solution was &ldquo;easy&rdquo; thanks to this<a href="https://github.com/minkphp/MinkSelenium2Driver/issues/187#issuecomment-112106857">thread</a></p><p>After that my step just looked like this and I was done</p><pre><code> /**
* @Then I should be able to upload an image file
*/
public function iShouldBeAbleToUploadAnImageFile()
{
$localFile = base_path('features/assets/profile.jpg');
$tempZip = tempnam('', 'WebDriverZip');
$zip = new \ZipArchive();
$zip->open($tempZip, \ZipArchive::CREATE);
$zip->addFile($localFile, basename($localFile));
$zip->close();<pre><code> $remotePath = $this-&amp;gt;getSession()-&amp;gt;getDriver()-&amp;gt;getWebDriverSession()-&amp;gt;file([
'file' =&amp;gt; base64_encode(file_get_contents($tempZip))
]);
$this-&amp;gt;attachFileToField('profile_image', $remotePath);
unlink($tempZip);
$this-&amp;gt;pressButton('Save');
}</code></pre><p/></pre><p>I also had to add<code>@javascript</code> to the test to allow this WebDriver feature to work.</p></p><p>That was it, saved me a ton of time suffering through this gotcha moment.</p></description><tags>behat, bdd, php, note2self</tags></item><item><title>Laravel, PHPUnit, Require_Once on Routes</title><link>https://alfrednutile.info/posts/178/</link><pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/178/</guid><description><p>Going crazy running PHPUnit all and getting fail but you run the one route and it works!</p><p>The difference is<code>require</code> versus<code>require_once</code> in PHPUnit tests.</p><p>For example</p><pre><code>require __DIR__ . '/../ConfigurationExamples/routes.php';<p>Route::get('/', function () {
return view(&lsquo;welcome&rsquo;);
});</p><p/></pre><p>Now when I run my tests I get 100% pass</p></p><pre><code>/**
* @test
*/
public function should_auth_user()
{
$user = factory(\App\User::class)->create();
$results = $this->call('GET', sprintf("/example/auth_token?api_token=%s", $user->api_token));
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}
/**
* @test
*/
public function should_fail_user()
{
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(302, $results->status());
}
/**
* @test
*/
public function should_pass_auth_with_no_token()
{
$user = factory(\App\User::class)->create();
$this->be($user);
$results = $this->call('GET', '/example/auth_token');
$this->assertEquals(200, $results->status());
$this->assertEquals("foo", $results->getContent());
}</code></pre><p>The moment I change it to<code>require_once</code> I get fails on the last or second to last one, it is not consistant except that it will fail. I immediately run that one and it passes.</p><p>It is not the database and I can change the order of these tests to have the bottom one fail.</p><p>So<code>require</code> is your friend!!</p></description><tags>note2self, php, laravel</tags></item><item><title>Feature Flags In Laravel</title><link>https://alfrednutile.info/posts/175/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/175/</guid><description><h2 id="overview">Overview</h2><p><strong>Library is<a href="https://github.com/friendsofcat/laravel-feature-flag/">https://github.com/friendsofcat/laravel-feature-flag/</a></strong></p><p><strong>Listen<a href="http://www.readorlisten.com/10">here</a></strong></p><p><strong>Watch<a href="https://youtu.be/4nq7FyHQj8I">https://youtu.be/4nq7FyHQj8I</a></strong></p><p>We are working on using FeatureFlags or Toggles in our applications. For one we are aiming to do all our work on mainline branch at all times so this would be a key coding discipline to use FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application. For example if a hotfix or another feature is ready to go to production we can push that with no worries of the in progress feature.</p><blockquote><p>FeatureFlags so we can hide a feature in progress knowing it will not interfere with the application</p></blockquote><p>You can see many of the reasons in this article<a href="http://martinfowler.com/articles/feature-toggles.html">http://martinfowler.com/articles/feature-toggles.html</a> by Pete Hodgson for using this system. So not just the more common situations of permissions but also Release Toggles, Experiment Toggles and more see list and image below</p><p><img src="http://martinfowler.com/articles/feature-toggles/chart-4.png" alt="flag_types"/><p><strong>[image from martin fowler feature-toggles article</strong></p><ul><li>Release Toggles</li><li>Ops Toggles</li><li>Permission Toggles</li><li>Experiment Toggles</li></ul><p>The core coding logic I will be using is this library<a href="https://github.com/Atriedes/feature">Atriedes/feature</a> as it has the logic needed to consider common feature flag states eg user, users, on, off, groups, admin, internal, random etc.</p><ul><li>on or off value simple!</li><li>on for users</li><li>on for groups</li><li>on for a user</li><li>bucketing random</li><li>random</li><li>percentage</li><li>url query string</li></ul><blockquote><p>The core coding logic I will be using is this library<a href="https://github.com/Atriedes/feature">Atriedes/feature</a></p></blockquote><p>One key thing, as I use this in Laravel, is I will try and mix this with the existing<a href="https://laravel.com/docs/5.2/authorization">Authorization</a> workflow that is already present. This gives me some already prepared ways to think about this both at the view layer, model layer and controller layer and where to register these states. Plus we then get great Laravel docs to help explain some of it.</p><p>For example I can use this in my theme<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-snippet-blade-php">snippet</a></p><h2 id="installing">Installing</h2><p>This will install two things. The library I made to do this and the Example library I am using to show it in action.</p><h3 id="providers">Providers</h3><p>Add the below to your config/app.php</p><pre><code>AlfredNutileInc\LaravelFeatureFlags\FeatureFlagsProvider::class,
AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureProvider::class,</code></pre><h3 id="the-core-library-featureflagsprovider">The Core Library FeatureFlagsProvider</h3><p>What does this do?</p><p>It does some basic Laravel work for registering views for settings, routes for managing settings CRUD and some cache on model changes so we can update the World as needed.</p><p>The big thing it does do is instantiate World.</p><pre><code> public function boot()
{
$this->registerViewFiles();<pre><code> $this-&amp;gt;injectLinks();
$this-&amp;gt;registerFeatureFlags();
}
private function registerFeatureFlags()
{
$features = FeatureFlag::where('active', 1)-&amp;gt;get()-&amp;gt;toArray();
foreach($features as $key =&amp;gt; $value)
{
$features = $this-&amp;gt;transformFeatures($features, $value, $key);
unset($features[$key]);
}
$world = new World();
\Feature\Feature::create($world, $features);
}
private function transformFeatures($features, $value, $key)
{
$features[$value['key']] = $value;
$features[$value['key']]['users'] = (isset($value['variants']['users'])) ? $value['variants']['users'] : [];
return $features;
}</code></pre><p/></pre><blockquote/><p>The big thing it does do is instantiate World.</p></blockquote><p>The database saves the data in a way that I will talk about below. Above is the transformation of that data into a more compatible form to this library.</p><p>So at this point we have World, which is where we set our way of finding truth and<code>$features</code> which is the state of all features.</p><h4 id="world">World</h4><p>This class implements the interface that comes with the library</p><p>You can see that<a href="https://gist.github.com/anonymous/c508101f0a85a4751c93">here</a></p><p>I simply do some logic in there based off User email since that is all I am using right now instead of user id or name. More can be added as needed to react to all the other options.</p><p>But this is how we find things like &lsquo;can this user see this feature&rsquo;, &lsquo;what users are active for this feature&rsquo; etc. Basically it is the class you use to tie your framework into the FeatureFlag logic. So when it asks for groups, users, etc it has the methods and logic needed to compare your data to the feature flag requirements.</p><h3 id="then-the-examplefeature-provider">Then the ExampleFeature Provider</h3><p>Just so I could try out this library on something so I could wrap my head around it I made an example feature that added a twitter field to the user data.</p><p>This was great cause it was a schema change so I had to make sure the field was<code>nullable</code> and it offered some view level interactions with the FeatureFlag.</p><h3 id="in-the-view">In the View</h3><p>I made a view of it<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-partial-blade-php">partial</a></p><p>That can be injected into the main view that this feature will be altering<a href="https://gist.github.com/alnutile/3007022c9880f1c656e1#file-example-blade-php">example.blade.php</a></p><p>All of this is registered in the Provider setup above</p><pre><code>public function boot(GateContract $gate)
{<p>$this->registerPolicies($gate);</p><p>$gate->define(&lsquo;add-twitter-field&rsquo;, &lsquo;\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@addTwitterField&rsquo;);</p><p>$gate->define(&lsquo;see-twitter-field&rsquo;, &lsquo;\AlfredNutileInc\LaravelFeatureFlags\ExampleFeatureFlagLogic@seeTwitterField&rsquo;);
}</code></pre><p>Those logic classes are super simple thanks to this library and really could just have been Closures.</p></p><pre><code>&lt;?php
namespace AlfredNutileInc\LaravelFeatureFlags;
class ExampleFeatureFlagLogic
{
public function addTwitterField()
{
return \Feature\Feature::isEnabled('add-twitter-field');
}
public function seeTwitterField($user)
{
return \Feature\Feature::isEnabled('see-twitter-field');
}
}</code></pre><p>Now you can turn off this info as needed. And in your Controllers/Repository just remember to not assume that field is coming in via request or that it even exists in the Model.</p><pre><code>$user->twitter = ($request->input("twitter")) ? $request->input("twitter") : null;</code></pre><p>Honestly I think it is better to add this to a Laravel Model Event. Then as you listen to that Event you can react to it. And when not having the feature on or installed any longer it is one less place your code is being injected into the application.</p><h3 id="featureflag-migration">FeatureFlag Migration</h3><p>The Migration will make one table for<code>feature_flags</code> and add a column to the user table for the example twitter field feature.</p><p>Note the Example Provider will add the<code>twitter</code> column to the<code>user</code> table. It is nullable so it will not be an issue if other parts of the app do not consider this data.</p><p>In the<code>feature_flags</code> table there we have the id column, the key column, active column to even consider the feature flag and then the variants column if any. I might get rid of the active column but thought it might speed up queries.</p><p>The variant column being json allows us to store unstructured data to hold any data for different situations so we can cover all the possible variants listed above.</p><p>For example</p><pre><code>
$server_config['show-twitter'] => array('users' => array('on' => array('fred')))<p/></pre><p>would store as</p></p><pre><code>|ID |KEY |ACTIVE |VARIANT |
|---|--------------|---------|---------------------------------|
| 2 | show-twitter | 1 |{ 'users': [ 'on': [ 'fred' ] ] }|
| | | | |</code></pre><h2 id="menu">Menu</h2><p>Just a note the demo has the Feature Flag menu. Because this core app uses the ViewComposer pattern to create a &ldquo;links&rdquo; array I can add to that later on in my FeatureFlagProvider</p><p><img src="https://dl.dropbox.com/s/daftzzfq7it6wxx/feature_flag_menu.png?dl=0" alt="menu"/><pre><code> private function injectLinks()
{<pre><code> view()-&amp;gt;composer(
'layouts.default', function($view) {
if ($view-&amp;gt;offsetExists('links')) {
$links_original = $view-&amp;gt;offsetGet('links');
$links = [
['title' =&amp;gt; 'Feature Flags', 'url' =&amp;gt; route('feature_flags.index'), 'icon' =&amp;gt; 'flag-o']
];
$view-&amp;gt;with('links', array_merge($links_original, $links));
}
}
);
}</code></pre><p/></pre><p>But that is for another post!</p></p><h2 id="video">Video</h2><p><iframe width="420" height="315" src="https://www.youtube.com/embed/4nq7FyHQj8I" frameborder="0" allowfullscreen=/></p><h2 id="todo">TODO</h2><ul><li>Use Model Events to do that level of work</li><li>Cache of the FeatureFlag Settings and update Cache on Change</li><li>Show how it works in the menu and other areas eg include and Provider</li></ul></description><tags>laravel, feature_flags, php</tags></item><item><title>Slack Custom Commands and Laravel to Make an American to British Translater</title><link>https://alfrednutile.info/posts/173/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/173/</guid><description><p><img src="https://dl.dropboxusercontent.com/s/b8vwn1peb7s5cet/a2b.gif?dl=0" alt="in use"/><p>Laravel or anything you are comfortable with making a Route and Response will work fine really.</p><p>This &ldquo;messaging as a platform&rdquo; is a new world for me, challenging my way of thinking in many ways. Some things just do not need a authentication of their own, a UI, etc they just need a place to get info from, or do something with some info etc.</p><p>In this case I made a really simple &ldquo;Custom Slash Command&rdquo; to translate British Slang to American and American to British (so I can sound cooler!)</p><p>Later I will look into bots etc but for now here is a look at a custom slash commands.</p><h2 id="getting-api-endpoint-setup">Getting API Endpoint Setup</h2><p>I still do not have a great local workflow for this. There are articles about this online with secure tunnels etc. My next step is to use my wildcard cert or using<a href="https://letsencrypt.org/">https://letsencrypt.org/</a> to have a local url so I can make this workflow a ton easier.</p><p>But to get going I had to setup a domain with valid HTTPS. As linked above, Let&rsquo;s Encrypt might be a great way to setup a play area and solutions like Forge<a href="https://forge.laravel.com/">https://forge.laravel.com/</a> Heroku<a href="https://www.heroku.com/">https://www.heroku.com/</a> are great ways to get going quickly on getting a &ldquo;POSTABLE&rdquo; API in place.</p><p>What I mean by POSTABLE is that your API needs to take a POST from Slack (it can take a GET but not sure the advantage to that) but consider App you are setting up the foundation to so many cool integrations you can do with Slack all using this one server your are setting up, until of course something needs it&rsquo;s own space. One POSTABLE API can be like your own &ldquo;If This Then That&rdquo;<a href="https://ifttt.com/">https://ifttt.com/</a> solution in my opinion. Fun for some of us that is for sure.</p><p>Once that was setup I could start playing around.</p><h2 id="setting-up-the-slack-endpoint">Setting up the Slack Endpoint</h2><p>Once I log into the slack.com website and read up on the API went over to Custom Integrations. Making a Slack App will come later but for not this was more than enough to have some fun.</p><p>In there I added a configuration.</p><p>There are several settings here that matter.</p><p><img src="https://dl.dropboxusercontent.com/s/jbnl2yn9e9odfhg/slack_image_1.png?dl=0" alt="example image"/><ul><li>Command: /b2a</li><li>URL:<a href="https://foo.com/api/v1/brit_to_us">https://foo.com/api/v1/brit_to_us</a></li><li>Method: POST</li><li>Token: TOP_SECRET</li><li>Customize Name: brit2american</li><li>Custom Icon: speaking_head_in_silhouette</li><li>Help Text:</li><li>Description: Translate British slang to American Slang</li><li>Usage hint: Throw A Spanner In The Works</li><li>Descriptive Label: Brit to American Slang</li></ul><p>I made two of them since I also need to turn my boring American into cool British Slang</p><ul><li>Command: /a2b</li><li>URL:<a href="https://foo.com/api/v1/us_to_brit">https://foo.com/api/v1/us_to_brit</a></li><li>Method: POST</li><li>Token: TOP_SECRET</li><li>Customize Name: american2brit</li><li>Custom Icon: speaking_head_in_silhouette</li><li>Help Text:</li><li>Description: Translate American to Cool British Slang</li><li>Usage hint: Throw A Spanner In The Works</li><li>Descriptive Label: Good Morning All!</li></ul><p>Once these are setup we are ready to build our Routes!</p><h2 id="setting-up-the-receiving-api">Setting Up the Receiving API</h2><p>This part could have gone better if I had a local environment setup to receive these Slack commands and next time I will, I just did not realize how easy it was to just setup my own local environment with a good signed cert which Slack requires until I started writing this article.</p><p>This was for fun so I did not go crazy with design. All of it could have been in the route file really. But I do want this domain and Laravel install I made to allow me to plug in other Custom Commands and later Slack App.</p><h3 id="slack-payload">Slack Payload</h3><p>Note this page on Slack<a href="https://api.slack.com/slash-commands">https://api.slack.com/slash-commands</a> you will get a payload like this</p><pre><code>token=gIkuvaNzQIHg97ATvDxqgjtO
team_id=T0001
team_domain=example
channel_id=C2147483705
channel_name=test
user_id=U2147483697
user_name=Steve
command=/weather
text=94070
response_url=https://hooks.slack.com/commands/1234/5678</code></pre><p>For me that meant keeping some things in the .env file as needed to look for a specific Token, User etc BUT later I can see making a Provider class and Config file to setup up for each Slash Command or App I make so that I keep the settings as needed in one grouped place and not in a huge file.</p><p>For now I just use the<code>text</code> and the<code>response_url</code> to my advantage the rest I am not worried about right now.</p><p>This is also I good example of an easy<code>Webhook</code> workflow. Give me your object and where to send the results back to.</p><p>Keeping the routing simple my<code>routes.php</code> file is just this</p><pre><code>Route::post('/api/v1/brit_to_us', 'BritToUSController@britToUs');
Route::post('/api/v1/us_to_brit', 'BritToUSController@usToBrit');</code></pre><p>And that controller is just this</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use Illuminate\Http\Request;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Goutte\Client as GoutteClient;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;</p><p>class BritToUSController extends Controller
{</p><pre><code>protected $url = 'http://www.translatebritish.com/';
/**
* @var GoutteClient
*/
protected $client;
public function __construct(GoutteClient $client)
{
$this-&amp;gt;client = $client;
}
public function usToBrit(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url . 'reverse.php');
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
public function britToUs(Request $request)
{
$this-&amp;gt;validate($request, [ 'token' =&amp;gt; 'required']);
Log::info($request-&amp;gt;input());
$crawler = $this-&amp;gt;client-&amp;gt;request('GET', $this-&amp;gt;url);
$form = $crawler-&amp;gt;siblings()-&amp;gt;filterXPath('//*[@id=&amp;quot;content-area&amp;quot;]/div/div[1]/div[1]/div[1]/div[1]/form')-&amp;gt;form();
$crawler = $this-&amp;gt;client-&amp;gt;submit($form,
array('p' =&amp;gt; $request-&amp;gt;input('text')));
$results = $crawler-&amp;gt;siblings()-&amp;gt;filter('.translation-text')-&amp;gt;text();
return Response::json($this-&amp;gt;respondToSlack($results, $request-&amp;gt;input('text'), 'in_channel'));
}
protected function respondToSlack($message, $original_message, $type = 'in_channel')
{
return ['response_type' =&amp;gt; 'in_channel', 'text' =&amp;gt; trim($message), 'attachments' =&amp;gt; ['text' =&amp;gt; $original_message]];
}
/**
* @return string
*/
public function getUrl()
{
return $this-&amp;gt;url;
}
/**
* @param string $url
*/
public function setUrl($url)
{
$this-&amp;gt;url = $url;
}</code></pre><p>}</p><p/></pre><p>The gist of it is to take the incoming<code>text</code> and pass it to the Translation Site, and return it to the<code>response_url</code> using the Response::json Facade.</p></p><p>Pretty easy. Later I can validate tokens, validate users or query info based on a user eg &ldquo;Get me my tickets from JIRA&rdquo; for example</p><p>That is some of my goals later, how to use Slack to automate some of my, and my teams, day to day needs and workflows.</p><p><strong>UPDATE</strong>
Make sure you exclude this route from the &ldquo;app/Http/Middleware/VerifyCsrfToken.php&rdquo; middleware</p><pre><code> protected $except = [
'api/v1/imports'
];</code></pre></description><tags>laravel, php, slack</tags></item><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description><p><strong>Update: September 06 2016</strong></p><p>We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.</p><p><strong>Or Listen<a href="http://www.readorlisten.com/2">here</a></strong></p><p>Another article about this written by Loran Jane Mitchell<a href="http://www.lornajane.net/posts/2014/using-composer-without-gitignoring">Using Composer Without GitIgnoring Vendor</a></p><p>I have done this for sometime with node_modules because I use to hate waiting for npm to pull down during CI builds. I could have used the CI systems cache for this but I realized once the project starts it is rare that I needed to add more libraries. And when I did it was just as easy to wipe using<code>git rm</code> and do them again fresh. This included my use of Bower.</p><p>But then there is Composer and PHP. The project starts and I might be pulling in libraries quite a bit but at some point we are just running<code>composer install</code> and never<code>composer update</code>. This step included<code>rm -rf vendor</code> which helped with the speed. And this is going great BUT has a few draw backs I will cover below.</p><blockquote><p>&ldquo;I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing&rdquo;</p></blockquote><h2 id="speed-ci-and-deployment">Speed (CI, and Deployment)</h2><p>This is not HUGE but with workflow now each deployment, unless it is a<code>quick</code> one, we tend to just use<code>rm -rf vendor &amp;&amp; composer install</code>. And it does cost us 1/2 a minute. Again not huge but nice to not have that as down time to the user. For at this point the app is not usable. And even worse as I will talk about below. And we do a lot of builds a day in the CI.</p><h2 id="one-point-of-failure-vs-many">One Point of Failure VS Many</h2><p>This is the big reason in my opinion. I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing. This can be caused due to a misconfiguration on our part, eg using anonymous Github connections but at times I have seen it even when authenticated and am not totally sure why.</p><p>Then there are those moments, and they happen, when Github is under DDOS attack! So then it is just a day of no deployments and that is not an option really. And with this technique we have a good chance of getting a deployment in since we are just hitting one repo and not trying our luck at many.</p><h2 id="rollback">Rollback</h2><p>Then there are Rollback moments. Zero down time would be great and this is one step closer. With our releases we use Tags. So if I was to release 1.2.2 and it had a bug I could rollback to tag 1.2.1 in moments. No need to rebuild composer. Sure it saves minor amount of time but when things are down on production 1/2 a minute can feel like a life time. This does not cover all migration issues but that is not a thing we do every deployment and honestly with the migration rollback feature we have in Laravel I think that becomes an edge case that can be dealt with using Artisan and some creative coding.</p><blockquote><p>&ldquo;when things are down on production 1/2 a minute can feel like a life time&rdquo;</p></blockquote><h2 id="fixing-merge-conflicts">Fixing Merge Conflicts</h2><p>Well what happens when there is a conflict in this vendor folder? That is easy really just<code>rm</code> the whole thing and do what I have been doing all along<code>composer install</code> saving<code>composer update</code> only for those moments you are looking for something to really be updated and feeling lucky (and patient).</p></description><tags>laravel, php, workflows, coding, best practices</tags></item><item><title>Do I Really Need This Route Anymore?</title><link>https://alfrednutile.info/posts/169/</link><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/169/</guid><description><p>Clean out old code can be hard. When your application has numerous javascript widgets, blade templates and forms you can not easily say what routes are being used. But with just a few artisan commands we can easily make this happen.</p><p>Also this can help with knowing what routes your Tests are NOT covering.</p><p>Package can be found<a href="https://packagist.org/packages/alfred-nutile-inc/route-tracking">here</a> as well.</p><p><img src="https://dl.dropboxusercontent.com/s/892qdyoy099835b/route_report.png?dl=0" alt="route report"/><h2 id="the-commands-to-get-started">The Commands to Get Started</h2><pre><code>php artisan make:model RouteUsage
php artisan make:middleware RouteUsageTracker
php artisan make:migration route_usage_tracker_table
php artisan make:console RouteReport</code></pre><h2 id="migration">Migration</h2><pre><code>&lt;?php<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p><p>class RouteUsageTrackerTable extends Migration
{
public function up()
{
Schema::create(&lsquo;route_usages&rsquo;, function (Blueprint $table) {
$table->increments(&lsquo;id&rsquo;);</p><pre><code> $table-&amp;gt;string('path');
$table-&amp;gt;timestamps();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('route_usages');
}</code></pre><p>}</p><p/></pre><h2 id="middleware">Middleware</h2></p><pre><code>&lt;?php
namespace App\Http\Middleware;
use App\RouteUsage;
use Closure;
class RouteUsageTracker
{
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next)
{
RouteUsage::create(['path' => $request->path()]);
return $next($request);
}
}</code></pre><p>And plug that into the Kernel.php</p><pre><code>
class Kernel extends HttpKernel
{
/**
* The application's global HTTP middleware stack.
*
* @var array
*/
protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\App\Http\Middleware\RouteUsageTracker::class,
];</code></pre><h3 id="model">Model</h3><pre><code>&lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
class RouteUsage extends Model
{
protected $fillable = ['path'];
}</code></pre><h3 id="artisan-reporting">Artisan Reporting</h3><p>This can use more work like pagination, filtering etc. I used the<code>RouteListCommand</code> to get started</p><pre><code>&lt;?php<p>namespace App\Console\Commands;</p><p>use App\RouteUsage;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;</p><p>class RouteReport extends Command
{
/**
* The name and signature of the console command.
*
* @var string
*/
protected $signature = &lsquo;route:report {page?} {&ndash;count} &lsquo;;</p><pre><code>protected $headers = ['Path', 'Date'];
protected $headers_count = ['count', 'Path'];
/**
* The console command description.
*
* @var string
*/
protected $description = 'Command description';
/**
* Create a new command instance.
*
* @return void
*/
public function __construct()
{
parent::__construct();
}
/**
* Execute the console command.
*
* @return mixed
*/
public function handle()
{
if($this-&amp;gt;option('count'))
{
$report = RouteUsage::select(DB::raw('count(*) as used, path'))-&amp;gt;groupBy('path')-&amp;gt;orderBy('used', 'DESC')-&amp;gt;get()-&amp;gt;toArray();
$this-&amp;gt;table($this-&amp;gt;headers_count, $report);
}
else
{
$report = RouteUsage::select('path', 'created_at')-&amp;gt;paginate(100);
$this-&amp;gt;table($this-&amp;gt;headers, $report-&amp;gt;toArray()['data']);
}
}</code></pre><p>}</p><p/></pre><pre><code>php artisan route:report &ndash;count</code></pre><p>Can give us</p></p><p><img src="https://dl.dropboxusercontent.com/s/kh042i76j6oa6w9/route_counted.png?dl=0" alt="counted"/></description><tags>php</tags></item><item><title>Logout User After Inactivity Laravel and Milddleware</title><link>https://alfrednutile.info/posts/168/</link><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/168/</guid><description><p><strong>Original Post</strong><a href="http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user">http://laravel-tricks.com/tricks/session-timeout-for-logged-in-user</a></p><p>This Middleware made it super easy to satisfy a requirement to log the user out after 15 minutes of in activity.</p><p>I added only a few touchups.</p><p>One was the<code>getTimeOut</code> this was so I can work locally and override this by setting it to a large number. I could even use it to just bypass the whole things for a bit since on<code>local</code> I rather not deal with this.</p><p>Also I removed the message count since it just was not needed for what I was doing.</p><pre><code>&lt;?php namespace App\Http\Middleware;
use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Session\Store;
class SessionTimeout {
protected $session;
protected $timeout=900;
public function __construct(Store $session){
$this->session=$session;
}
/**
* Handle an incoming request.
*
* @param \Illuminate\Http\Request $request
* @param \Closure $next
* @return mixed
*/
public function handle($request, Closure $next)
{
if(!$this->session->has('lastActivityTime'))
$this->session->put('lastActivityTime',time());
elseif(time() - $this->session->get('lastActivityTime') > $this->getTimeOut()){
$this->session->forget('lastActivityTime');
Auth::logout();
return redirect('auth/login')->withErrors(['You had not activity in 15 minutes']);
}
$this->session->put('lastActivityTime',time());
return $next($request);
}<pre><code>protected function getTimeOut()
{
return (env('TIMEOUT')) ?: $this-&amp;gt;timeout;
}</code></pre><p>}</code></pre></p></description><tags>laravel, php</tags></item><item><title>Quick Tip Forcing More Complex Passwords in Laravel</title><link>https://alfrednutile.info/posts/166/</link><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/166/</guid><description><p>With the great<a href="http://laravel.com/docs/5.1/validation">Laravel Docs</a> I will quickly show how to &ldquo;encourage&rdquo; the user to set a better password.</p><p>Going through the standard docs for<a href="http://laravel.com/docs/5.1/authentication">Authentication</a> we end up with a registration form.</p><p>Then in the<a href="https://github.com/laravel/laravel/blob/master/app/Http/Controllers/Auth/AuthController.php">AuthController</a> that comes with Laravel I modify it a bit.</p><pre><code> protected function validator(array $data)
{
$messages = ['password.regex' => "Your password must contain 1 lower case character 1 upper case character one number"];
return Validator::make($data, [
'name' => 'required|max:255',
'email' => 'required|email|max:255|unique:users',
'password' => 'required|confirmed|min:8|regex:/^(?=\S*[a-z])(?=\S*[A-Z])(?=\S*[\d])\S*$/',
], $messages);
}</code></pre><p>Using the<code>regex</code> rule seen in the<a href="http://laravel.com/docs/5.1/validation#available-validation-rules">docs</a><a href="http://php.net/manual/en/function.preg-match.php">http://php.net/manual/en/function.preg-match.php</a> and the Laravel docs I can then set an expression to check for these characters, and I can also set a custom message if it fails.</p><p>And with that little bit of work we get an error message to help the user make a better password.</p><p><img src="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0" alt="https://dl.dropboxusercontent.com/s/y9jloa191jwryfg/regex_error.png?dl=0"/><p>btw this is coming about as I start this<a href="https://onemonth.com/courses/web-security">Web Security Course</a> and try to consider some of these ideas in my day to day Laravel work.</p></description><tags>laravel, php, security</tags></item><item><title>Image Uploads, Laravel, Angular and Flow.js</title><link>https://alfrednutile.info/posts/165/</link><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/165/</guid><description><p>Here is one combination out of many to make this happen.</p><p>The libraries are</p><p><a href="https://github.com/flowjs/ng-flow">https://github.com/flowjs/ng-flow</a></p><p>and</p><p><a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server</a></p><h2 id="model-and-imageable-resource">Model and Imageable Resource</h2><p>What I like about this is we can make 1 controller to manage uploads. That controller will upload the file, place it into the correct folder, and setup the relationship to the resource.</p><p>In this example the Resource will be a Contact.</p><p>So I then follow Laravel docs to create the Polymorphic Imageable/Photo example<a href="http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations">http://laravel.com/docs/master/eloquent-relationships#polymorphic-relations</a></p><p>Ending up with an image model like this</p><pre><code>&lt;?php<p>namespace App;</p><p>use Illuminate\Database\Eloquent\Model;</p><p>class Image extends Model
{
public $timestamps = false;</p><pre><code>/**
* Get all of the owning imageable models.
*/
public function imageable()
{
return $this-&amp;gt;morphTo();
}</code></pre><p>}</code></pre><p>And a Contact.php file like this</p></p><pre><code>&lt;?php
namespace App;
use Illuminate\Database\Eloquent\Model;
use Rhumsaa\Uuid\Uuid;
class Contact extends Model
{
protected $fillable = [
'first_name',
'last_name',
'active'
];
public function images()
{
return $this->morphMany(\App\Image::class, 'imageable');
}
}</code></pre><p>Nothing special really</p><p>Even the migration is right from the docs</p><pre><code>&lt;?php<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p><p>class CreateTableImageable extends Migration
{
public function up()
{
Schema::create(&lsquo;images&rsquo;, function (Blueprint $table) {
$table->increments(&lsquo;id&rsquo;);
$table->string(&lsquo;path&rsquo;);
$table->integer(&lsquo;imageable_id&rsquo;);
$table->string(&lsquo;imageable_type&rsquo;);
});
}</p><pre><code>public function down()
{
Schema::drop('images');
}</code></pre><p>}</code></pre><h2 id="controller">Controller</h2></p><p>Now for the Controller.</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Image;
use Flow\Config;
use Illuminate\Support\Facades\Input;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Response;</p><p>class ImageController extends Controller
{</p><pre><code>public $model_id;
public $model_class_path;
public $destination_path;
public $filename;
public $config;
public function uploadFile(Request $request, $model_id = false)
{
try
{
$this-&amp;gt;model_id = $model_id;
$model_class_path = $this-&amp;gt;getClassName($request);
$path = $this-&amp;gt;getImagePublicDestinationPath($request);
$this-&amp;gt;model_class_path = $model_class_path;
$this-&amp;gt;destination_path = $path;
$this-&amp;gt;config = new Config(array(
'tempDir' =&amp;gt; storage_path('chunks_temp_folder')
));
$this-&amp;gt;filename = Input::get('flowFilename');
$this-&amp;gt;saveImagable();
$flowRequest = new \Flow\Request();
if(\Flow\Basic::save(
public_path($this-&amp;gt;getDestinationPath()). '/' . $this-&amp;gt;filename,
$this-&amp;gt;config,
$flowRequest)) {
return Response::json(['data' =&amp;gt; $model_id, 'message' =&amp;gt; &amp;quot;File Uploaded $this-&amp;gt;filename&amp;quot;], 200);
} else {
return Response::json([], 204);
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf(&amp;quot;Error saving image %s&amp;quot;, $e-&amp;gt;getMessage()));
}
}
public function saveImagable()
{
$imageable = new Image();
$imageable-&amp;gt;path = $this-&amp;gt;destination_path . '/' . $this-&amp;gt;filename;
$imageable-&amp;gt;imageable_id = $this-&amp;gt;model_id;
$imageable-&amp;gt;imageable_type = $this-&amp;gt;model_class_path;
$imageable-&amp;gt;save();
}
public function getDestinationPath()
{
return $this-&amp;gt;destination_path;
}
public function setDestinationPath($destination_path)
{
$this-&amp;gt;destination_path = $destination_path;
}
private function getClassName($request)
{
return ($request-&amp;gt;input('model_class_path')) ? $request-&amp;gt;input('model_class_path') : 'App\Contact';
}
public function getImagePublicDestinationPath(Request $request)
{
return ($request-&amp;gt;input('path')) ? $request-&amp;gt;input('path') : 'images/contacts';
}</code></pre><p>}</p><p/></pre><p>Nothing special there just per the docs of the Flow php library<a href="https://github.com/flowjs/flow-php-server"><a href="https://github.com/flowjs/flow-php-server">https://github.com/flowjs/flow-php-server</a></a></p></p><p>And the route.php file</p><pre><code>Route::get('images/upload/{model_id}', 'ImageController@uploadFile');
Route::post('images/upload/{model_id}', 'ImageController@uploadFile');</code></pre><p>By the time this project is done though all of this is behind auth middleware. While being built it is behind htaccess.</p><p>One catch overall is the resource needs to exist before you can upload a file related to it so on Contact New type pages you may need to wait till the contact is created before you do the upload. There are ways around this but for now we are keeping it simple.</p><h2 id="angular">Angular</h2><p>This is a simple example.</p><p>The route I made a simple example path</p><pre><code>Route::get('/upload_example', function () {
return view('upload');
});</code></pre><p>That view extends the example layout view</p><h3 id="defaultbladephp">default.blade.php</h3><pre><code>&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head><pre><code>&amp;lt;style&amp;gt;
/* This helps the ng-show/ng-hide animations start at the right place. */
/* Since Angular has this but needs to load, this gives us the class early. */
.ng-hide { display: none!important; }
&amp;lt;/style&amp;gt;
&amp;lt;title ng-bind=&amp;quot;title&amp;quot;&amp;gt;Ratsoc v2.0&amp;lt;/title&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge, chrome=1&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&amp;quot; /&amp;gt;
&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;
&amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&amp;quot;&amp;gt;</code></pre><p>&lt;/head></p><p>&lt;body flow-prevent-drop>
&lt;div>
&lt;div ng-include="&lsquo;layout/shell.html&rsquo;">&lt;/div>
&lt;div id="splash-page" ng-show="showSplash">
&lt;div class="page-splash">
&lt;div class="page-splash-message">
Ratsoc v2.0
&lt;/div>
&lt;div class="progress progress-striped active page-progress-bar">
&lt;div class="bar">&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></p><p>@yield(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;script src=&amp;quot;/temp/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/angular.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/ng-flow.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/temp/app.upload.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;</code></pre><p>&lt;/body></p><p>&lt;/html></code></pre><p>Of course this would be setup better with Gulp but for now keeping it simple. The the view that is the content.</p></p><h3 id="uploadbladephp">upload.blade.php</h3><pre><code>@extends('layouts.default')<p>@section(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;div ng-app=&amp;quot;app.upload&amp;quot; flow-init flow-prevent-drop&amp;gt;
&amp;lt;div ng-controller=&amp;quot;MainController as vm&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-8 col-lg-offset-2&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;&amp;quot;
flow-init=&amp;quot;{
target: '/images/upload/' + vm.contact.id, singleFile: true, testChunks: true,
query: { '_token': vm.token, 'model_class_path': 'App\\Contact', 'path': 'images/contacts'}
}&amp;quot;
flow-files-submitted=&amp;quot;vm.upload( $files, $event, $flow )&amp;quot;
flow-file-success=&amp;quot;vm.setFileName($flow.files)&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;
flow-drop flow-drag-enter=&amp;quot;style={opacity: .5}&amp;quot;
flow-drag-leave=&amp;quot;style={}&amp;quot; ng-style=&amp;quot;style&amp;quot;
flow-drop-enabled=true&amp;gt;
&amp;lt;strong&amp;gt;&amp;lt;i class=&amp;quot;fa fa-arrow-right&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; Upload image here by dragging here&amp;lt;/strong&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;btn btn-xs btn-default&amp;quot; ng-click=&amp;quot;vm.removeFile($flow)&amp;quot;
ng-if=&amp;quot;($flow.files.length &amp;gt; 0)&amp;quot; name=&amp;quot;remove-file&amp;quot;&amp;gt; Remove File &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;img ng-src=&amp;quot;@{{ vm.image }}&amp;quot; ng-show=&amp;quot;vm.image&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</code></pre><p>@endsection</code></pre><p>Not much of a looker here. This makes it super easy to work on things though before plugging it into your more complex applications.</p></p><p>Here I am adding a payload so when I use this on a page I can decide then is it at Contact, a Project, a Product etc. and setup the path eg &lsquo;images/projects&rsquo; or Model name &lsquo;App\Contact&rsquo; as needed.</p><p>Then for the app.js file to do all this, again you might break it up into more files just keeping this simple.</p><pre><code>(function () {
'use strict';<pre><code>angular.module('app.upload', [
'flow'
]);
function FlowConfig(flowFactoryProvider)
{
flowFactoryProvider.defaults = {
speedSmoothingFactor: 0.2,
maxChunkRetries: 10,
simultaneousUploads: 10
};
}
function MainController($http, $scope)
{
var vm = this;
vm.contact = {};
vm.contact.id = 'new';
vm.token = false;
vm.upload = upload;
vm.setFileName = setFileName;
vm.image_root = '/images/contacts/';
activate();
////
function activate()
{
getToken();
}
function setFileName(flow_files)
{
vm.image = vm.image_root + flow_files[0].name;
}
function upload(files, event, flow)
{
angular.forEach(files, function(v,i) {
files[i].flowObj.opts.query._token = vm.token;
});
flow.upload();
}
function getToken()
{
$http.get('/auth/token').then(
successGettingToken,
errorGettingToken
);
}
function successGettingToken(response)
{
vm.token = response.data;
}
function errorGettingToken(response)
{
console.log(&amp;quot;Error&amp;quot;);
console.log(response);
}
}
angular.module('app.upload')
.controller(&amp;quot;MainController&amp;quot;, MainController)
.config(FlowConfig);</code></pre><p>})();</p><p/></pre><p>So we use the flow upload event to run our upload method. This then adds the token to the POST request for the CSRF middleware.</p></p><p>Keep in mind my Angular is just a widget in blade. There is no separate session situation that you may have in SPA (Single Page Applications)</p><p>Thats it, drag file, file uploads and you have Flow, Angular and Laravel.</p><p><img src="https://dl.dropboxusercontent.com/s/01l8psl1rpud4ee/laravel_flow_angular.png?dl=0" alt=""/></description><tags>laravel, php, angular</tags></item><item><title>Simple Example of Making Code Easier to Read</title><link>https://alfrednutile.info/posts/164/</link><pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/164/</guid><description><p>Just a quick example</p><p>Before</p><pre><code> public function updateMarketoFolder($folder)
{<pre><code> /**
* If parent id found in array then use it else use root
*/
if(isset($this-&amp;gt;folders_and_meta_data[$folder['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['id']];
}
elseif(isset($folder['parent']) &amp;amp;&amp;amp; isset($folder['parent']['id']) &amp;amp;&amp;amp; isset($this-&amp;gt;folders_and_meta_data[$folder['parent']['id']]))
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data[$folder['parent']['id']];
}
else
{
$folder_meta_data = $this-&amp;gt;folders_and_meta_data['root'];
}
if(isset($folder['name']))
$this-&amp;gt;names[] = $folder['name'] . '--' . $folder_meta_data-&amp;gt;id;
$this-&amp;gt;folders_and_meta_data[$folder['id']] = $folder_meta_data;
}</code></pre><p/></pre><p>Here is what we can do to make it easier to come back to six months later.</p></p><pre><code> public function updateMarketoFolder($folder)
{
if($this->hasOwnFolder($folder))
{
$folder_meta_data = $this->folders_and_meta_data[$folder['id']];
}
elseif($this->hasAParentAndParentHasFolder($folder))
{
$folder_meta_data = $this->folders_and_meta_data[$folder['parent']['id']];
}
else
{
$folder_meta_data = $this->getRootFolder();
}
if($this->checkItHasAName($folder))
$this->names[] = $folder['name'] . '--' . $folder_meta_data->id;
$this->folders_and_meta_data[$folder['id']] = $folder_meta_data;
}
private function hasOwnFolder($folder)
{
return isset($this->folders_and_meta_data[$folder['id']]);
}
private function hasAParentAndParentHasFolder($folder)
{
return isset($folder['parent']) &amp;&amp; isset($folder['parent']['id']) &amp;&amp; isset($this->folders_and_meta_data[$folder['parent']['id']]);
}
private function getRootFolder()
{
return $this->folders_and_meta_data['root'];
}
private function checkItHasAName($folder)
{
return isset($folder['name']);
}</code></pre><p>Just a lot easier to come back to an remember why and what I am doing in the if statements. Also just to read a bit more easily what the needs are here of the data.</p></description><tags>php, clean code</tags></item><item><title>Spark Setup Issue</title><link>https://alfrednutile.info/posts/163/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/163/</guid><description><p>During the install<a href="https://github.com/laravel/spark">https://github.com/laravel/spark</a> I kept getting this error</p><pre><code> Problem 1
- Installation request for laravel/spark-installer ~1.0 -> satisfiable by laravel/spark-installer[v1.0.0].
- Conclusion: remove illuminate/support v4.2.17
- laravel/spark-installer v1.0.0 requires illuminate/support ~5.0 -> satisfiable by illuminate/support[v5.0.0, v5.0.22, v5.0.25, v5.0.26, v5.0.28, v5.0.33, v5.0.4, v5.1.1, v5.1.13, v5.1.16, v5.1.2, v5.1.6, v5.1.8].
- Can only install one of: illuminate/support[v5.0.0, v4.2.17].
- Can only install one of: illuminate/support[v5.0.22, v4.2.17].
- Can only install one of: illuminate/support[v5.0.25, v4.2.17].
- Can only install one of: illuminate/support[v5.0.26, v4.2.17].
- Can only install one of: illuminate/support[v5.0.28, v4.2.17].
- Can only install one of: illuminate/support[v5.0.33, v4.2.17].
- Can only install one of: illuminate/support[v5.0.4, v4.2.17].
- Can only install one of: illuminate/support[v5.1.1, v4.2.17].
- Can only install one of: illuminate/support[v5.1.13, v4.2.17].
- Can only install one of: illuminate/support[v5.1.16, v4.2.17].
- Can only install one of: illuminate/support[v5.1.2, v4.2.17].
- Can only install one of: illuminate/support[v5.1.6, v4.2.17].
- Can only install one of: illuminate/support[v5.1.8, v4.2.17].
- Installation request for illuminate/support == 4.2.17.0 -> satisfiable by illuminate/support[v4.2.17].</code></pre><p>Finally I went into my ~/.composer folder. Removed<code>composer.lock</code> then I edited the<code>composer.json</code> to look like this</p><pre><code>{
"require": {
"laravel/envoy": "~1.0",
"laravel/installer": "~1.1",
"laravel/spark-installer": "~1.0"
}
}</code></pre><p>I use Envoy for a lot of my projects so I left that there and made sure to update my installer.</p><p>Then I ran, in that folder composer update.</p><p>Finally I made sure to add the path to my ~/.bash_profile as</p><pre><code>export PATH=$PATH:/Users/alfrednutile/.composer/vendor/bin/</code></pre><p>Then ran<code>source ~/.bash_profile</code></p><p>With all that in place I could go to my new Laravel install to run<code>spark install</code></p></description><tags>spark, laravel, php</tags></item><item><title>Adding Expose IDS to Laravel MiddleWare</title><link>https://alfrednutile.info/posts/162/</link><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/162/</guid><description><p>The library is<a href="https://github.com/enygma/expose">https://github.com/enygma/expose</a></p><blockquote><p>&ldquo;Expose is an Intrusion Detection System for PHP loosely based on the PHPIDS project (and using it&rsquo;s ruleset for detecting potential threats).&rdquo;</p></blockquote><p>After seeing it in the latest PHPArch<a href="https://www.phparch.com/2015/09/september-2015-issue-release-security-boot-camp/">magazine</a> on security I wanted to give it a try.</p><p>Of course this is far from a complete look.</p><p>Step 1 Make the MiddleWare</p><p><code>php artisan make:middleware ExposeMiddleware</code></p><p>Then add Expose as noted in the docs.</p><pre><code>&lt;?php<p>namespace App\Http\Middleware;</p><p>use Closure;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Log;</p><p>class ExposeMiddleware
{
public function handle($request, Closure $next)
{
$filters = new \Expose\FilterCollection();
$filters->load();
$logger = App::make(&lsquo;log&rsquo;);
$manager = new \Expose\Manager($filters, $logger);
$manager->run($request->input());</p><pre><code> Log::info(sprintf(&amp;quot;Logging results from Expose %d&amp;quot;, $manager-&amp;gt;getImpact()));
return $next($request);
}</code></pre><p>}</p><p/></pre><p>Then in<code>app/Http/Kernel.php</code></p></p><pre><code> protected $middleware = [
\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
\App\Http\Middleware\EncryptCookies::class,
\Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
\Illuminate\Session\Middleware\StartSession::class,
\Illuminate\View\Middleware\ShareErrorsFromSession::class,
\App\Http\Middleware\ExposeMiddleware::class,
\App\Http\Middleware\VerifyCsrfToken::class,
];</code></pre><p>Now to make the route for testing</p><pre><code>&lt;?php
Route::get('/', function () {
return view('welcome');
});
Route::post('/post', function() {
return "Yo";
});</code></pre><p>And now a phpunit test to hit the route</p><pre><code> public function testPost()
{
$token = csrf_token();
$data = array(
'_token' => $token,
'test' => 'foo',
'bar' => array(
'baz' => 'quux',
'testing' => '&lt;script>test&lt;/script>'
)
);
$this->call('POST', '/post', $data);
}</code></pre><p>One more thing is to set the<code>app/Http/Middleware/VerifyCsrfToken.php</code> as such</p><pre><code>
public function handle($request, Closure $next)
{
if ( 'testing' === App::environment() &amp;&amp; $request->exists('_token') ) {
$input = $request->all();
$input['_token'] = $request->session()->token();
$request->replace( $input );
}
if ($this->isReading($request) || $this->shouldPassThrough($request) || $this->tokensMatch($request)) {
return $this->addCookieToResponse($request, $next($request));
}
throw new TokenMismatchException;
}</code></pre><p>Okay so now we can tail the log file in the terminal and hit the route with phpunit</p><p><img src="https://dl.dropboxusercontent.com/s/fgoax2z12mhhf0t/expose.png?dl=0" alt=""/><p>And the logs should output</p><pre><code>[2015-09-02 23:50:44] testing.INFO: Match found on Filter ID 38 [{"id":"38","rule":"(?:\\&lt;[\\/]?(?:[i]?frame|applet|isindex|marquee|keygen|script|audio|video|input|button|textarea|style|base|body|meta|link|object|embed|param|plaintext|xm\\w+|image|im(?:g|port)))","description":"Detects possibly malicious html elements including some attributes","tags":"xss, csrf, id, rfe, lfi","impact":"4"}]
[2015-09-02 23:50:44] testing.INFO: Logging results from Expose 8<p/></pre><p>At this point the MiddleWare can do numerous things</p></p><ul><li>Log to an in memory db IP addresses that violates a rule of a certain level and block them.</li><li>Keep track of issues and notify the team of issues</li><li>Cut through a can without getting dull</li></ul><p>Anyways I have a ways to go with this but just seeing the different tools I could use to make my applications more secure.</p></description><tags>security, laravel, php</tags></item><item><title>Laravel and Angular Widgets e.g. Non SPA (Single Page Application) Pattern</title><link>https://alfrednutile.info/posts/160/</link><pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/160/</guid><description><p>Not all apps need to be an SPA (Single Page Application). Sure they have their place but in most cases the task might benefit from just a Blade template and Angular widget. This saves you from having to write an angular route which can be a tedious duplication of work. Also Blade is fast and fun to work with.</p><h2 id="step-one-add-data-to-global-window">Step One Add Data to Global Window</h2><p>Using the<a href="https://github.com/laracasts/PHP-Vars-To-Js-Transformer">Transform PHP Vars to JavaScript</a> you can easily start to inject some content into your templates, if needed, to setup the data your Angular widget can use to build out it&rsquo;s elements.</p><p>For example the Controller below will push some info into the view that I can use later</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Campaign;
use App\Folder;
use App\Helpers\ReturnWebhook;
use App\Http\Requests;
use App\Providers\WebhookExtendedProvider;
use App\Utilities\GenerateSampleContent;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Response;
use Michelf\MarkdownExtra;
use Rhumsaa\Uuid\Uuid;</p><p>class HelpController extends Controller
{
use GenerateSampleContent;
use ReturnWebhook;</p><pre><code>public function api()
{
$url = url();
$apis['campaigns'] = 'api/v1/campaigns';
$apis['campaigns_get'] = 'api/v1/campaigns/';
$campaigns = Campaign::select('id', 'name')-&amp;gt;groupBy('name')-&amp;gt;orderBy('name')-&amp;gt;get();
$folders = Folder::with('meta_values')-&amp;gt;groupBy('folders.id')-&amp;gt;get();
/**
* Using the Javacript Library
*/
\JavaScript::put([
'campaigns' =&amp;gt; $campaigns,
'token' =&amp;gt; csrf_token(),
'folders' =&amp;gt; $folders,
'url' =&amp;gt; $url,
'apis' =&amp;gt; $apis
]);
$text = file_get_contents(base_path('docs/webhooks.md'));
$webhooks = MarkdownExtra::defaultTransform($text);
$api = file_get_contents(base_path('docs/api.md'));
$api = MarkdownExtra::defaultTransform($api);
return view('help.api', compact('webhooks', 'api', 'campaigns', 'url', 'apis', 'folders'));
}</code></pre><p/></pre><h2 id="setting-up-the-view-and-angular">Setting Up the View and Angular</h2></p><p>Now in the view for the Controller above we use that info. Note the Angular brackets<code>@{{</code></p><p><a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-partial-blade-php">See template here</a></p><p>So now that view is rendering both Blade data<code>{{</code> and Angular.</p><p>You will see too I setup the Angular controller<code>vm.addMarketoFolderNameToQuery</code> keep in mind I already setup that<code>ng-app</code> in my main template file<code>layouts.default</code></p><p><a href="https://gist.github.com/alnutile/51662eac12d0cea9df60#file-default-blade-php">See Default Layout Here</a></p><h2 id="angular-controller">Angular Controller</h2><p>Here is the ApiController injected above. Notice we use Angular&rsquo;s $window to get the data we passed in from the Laravel Controller. You can also see it making API requests later on as the user clicks buttons etc.</p><pre><code>(function(){
'use strict';<pre><code>function ApiControllerUserShow($http, $window, toaster)
{
var vm = this;
vm.getting_token = '';
vm.user = $window.user;
vm.url = $window.url;
vm.message = &amp;quot;You do not have an API Key yet. Click the button below to make one&amp;quot;;
vm.getNewApi = getNewApi;
activate();
///
function activate()
{
console.log($window.user);
setApiToken();
}
function getNewApi()
{
vm.getting_token = 'fa-spin';
toaster.pop('info', &amp;quot;Getting new token&amp;quot;);
$http.get('/api/v1/create_client_token')
.success(function(response) {
toaster.pop('info', &amp;quot;Loading new token&amp;quot;);
console.log(response);
vm.getting_token = ''
vm.api_token = response.data;
})
.error(function(response) {
toaster.pop('error', &amp;quot;Could not get token please contact support&amp;quot;);
console.log(response);
});
}
function setApiToken()
{
//$user-&amp;gt;oauth_client-&amp;gt;oauth_session-&amp;gt;oauth_access_tokens-&amp;gt;id
if(!vm.user.oauth_client)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session)
{
vm.api_token = vm.message;
}
else if(!vm.user.oauth_client.oauth_session.oauth_access_tokens)
{
vm.api_token = vm.message;
}
else
{
vm.api_token = vm.user.oauth_client.oauth_session.oauth_access_tokens.id;
}
}
}
angular.module('app')
.controller('ApiControllerUserShow', ApiControllerUserShow);</code></pre><p>})();</code></pre><p>That is it. Keep in mind that Blade template can have numerous angular “widgets” so different sections of the page can benefit from Angular. Or the one page can have several places that the Angular controller controls some of the output.</p></p><p>So hopefully this sums up a quick way to start putting Angular widgets into your Laravel application and still benefit from all speed that these too tools offer both in developing and in rendering!</p></description><tags>laravel, php, angular</tags></item><item><title>Talking to the Methods Not the Properties</title><link>https://alfrednutile.info/posts/158/</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/158/</guid><description><p>Just a team related style guide item.</p><p>When talking to properties in a class talk via a getter.</p><pre><code>&lt;?php<p>class Foo {</p><p>protected $client;</p><p>function bar()
{
return $this->client->getAll();
}</p><p>}</p><p/></pre><p>Would then become</p></p><pre><code>&lt;?php
class Foo {
protected $client;
function bar()
{
return $this->getClient->getAll();
}
function getClient()
{
return $this->client;
}
}</code></pre><p>There are a few reasons for this</p><ul><li>Consistent style for the team</li><li>Changes to that property can be done in one place. So if we have to for example alter it before it is used then we can do it here.</li><li>PHPUnit Mockery can mock both but mocking a Method over a Property is another style I prefer.</li><li>Easier to have your IDE see all the places that is being used.</li><li>Instantiate on use</li></ul><h2 id="instantiate-on-use">Instantiate on Use</h2><p>When writing a package/libraries that does not have dependency injection and I do not want to make the __constructor too busy I will do this instead.</p><pre><code>&lt;?php<p>class Foo {</p><p>protected $client;</p><p>function bar()
{
return $this->getClient->getAll();
}</p><p>function getClient()
{
if($this->client == null)
$this->setClient();</p><pre><code>return $this-&amp;gt;client;</code></pre><p>}</p><p>function setClient($client = null)
{
if($client == null)
$client = new Client();</p><pre><code>$this-&amp;gt;client = $client;
return $this;</code></pre><p>}</p><p>}</p><p/></pre><p>This makes it simple to mock during testing and simple to instantiate as needed.</p></p></description><tags>team, laravel, php</tags></item><item><title>Using your project docs inside the application</title><link>https://alfrednutile.info/posts/157/</link><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/157/</guid><description><p>The applications I work on have markdown docs. These can be in the docs/ folder for example as<code>docs/webhooks.md</code></p><p>But some of these docs have value to the user of the UI not just the developer, and when we include these docs inside the application repo it is a TON easier to just update them as you fix and make new features in the codebase.</p><p>You can have the best of both worlds with a simple to use library<a href="https://github.com/michelf/php-markdown">https://github.com/michelf/php-markdown</a></p><h2 id="the-controller">The Controller</h2><p>This then allows me, in my controllers to get some content from these docs, for example</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\Http\Requests;
use Michelf\MarkdownExtra;</p><p>class HelpController extends Controller
{
public function api()
{
$text = file_get_contents(base_path(&lsquo;docs/webhooks.md&rsquo;));
$webhooks = MarkdownExtra::defaultTransform($text);</p><pre><code> return view('help.api', compact('webhooks'));
}</code></pre><p>}</code></pre><h2 id="the-blade-template-file">The Blade Template File</h2></p><p>Then in the blade template all I need to do to show those docs are</p><pre><code>@extends('layouts.default')<p>@section(&lsquo;content&rsquo;)</p><pre><code>&amp;lt;div class=&amp;quot;page-header&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;API Help&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-12&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;wrapper wrapper-content animated fadeInRight&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;ibox-content&amp;quot;&amp;gt;
{!! $webhooks !!}
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;</code></pre><p>@endsection</code></pre><p>Being a private repo we review the code so using “{!!” is not so bad. But keep in mind you are trusting what is in these files! Of course a simple</p></p><pre><code>$webhooks = strip_tags($webhooks, "tags you allow here");</code></pre><p>Will help out there.</p><h2 id="the-markdown">The Markdown</h2><p>Then just write your file as normal in markdown!</p></description><tags>laravel, php, docs</tags></item><item><title>HasMany Through a Many to Many</title><link>https://alfrednutile.info/posts/155/</link><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/155/</guid><description><p>This thread helped a lot<a href="http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many">http://laravel.io/forum/03-04-2014-hasmanythrough-with-many-to-many</a></p><p>In the end I had this query</p><pre><code> class MetaData extends Model
{<pre><code>public function meta_values()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class);
}
public function meta_data_types()
{
return $this-&amp;gt;belongsToMany(\App\MetaValue::class)
-&amp;gt;leftJoin('meta_data_type_meta_value', 'meta_values.id', '=', 'meta_data_type_meta_value.meta_value_id')
-&amp;gt;leftJoin('meta_data_types', 'meta_data_types.id', '=', 'meta_data_type_meta_value.meta_data_type_id')
-&amp;gt;groupBy('meta_data_types.id')
-&amp;gt;select('meta_data_types.*');
}</code></pre><p/></pre><p>Model<code>meta_data_types</code> had not direct relation to this MetaData model class. But MetaData did relate to meta_values.</p></p><p>So using that info I could get the related MetaValues and then the related MetaDataTypes and that was it.</p><p>It is a lot easier if just doing this through a One to Many<a href="http://laravel.com/docs/5.1/eloquent-relationships#has-many-through">http://laravel.com/docs/5.1/eloquent-relationships#has-many-through</a></p></description><tags>laravel, php</tags></item><item><title>Adding RSS to Your Site</title><link>https://alfrednutile.info/posts/154/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/154/</guid><description><p>Using this library<a href="https://packagist.org/packages/thujohn/rss">https://packagist.org/packages/thujohn/rss</a></p><p>We simply install but using a forked version so it works with L5</p><pre><code> "require": {
"php": ">=5.5.9",
"laravel/framework": "5.1.*",
"thujohn/rss": "dev-master"
},
"repositories": [
{
"type": "vcs",
"url": "https://github.com/majortom731/rss-l4.git"
}
],</code></pre><pre><code>composer update</code></pre><p>And as they note in the docs</p><pre><code>'providers' => array(
'Thujohn\Rss\RssServiceProvider',
)</code></pre><p>Now in my route I simply put</p><pre><code>Route::get('feed', function() {
$feed = Thujohn\Rss\RssFacade::feed('2.0', 'UTF-8');
$feed->channel(array('title' => 'Incomings.io Blog and News', 'description' => 'Latest News and Blog postings for Incomings.io', 'link' => 'http://incomings.io/feed'));
$blogs = Blog::all();
foreach ($blogs as $blog){
$feed->item(array('title' => $blog->title, 'description|cdata' => $blog->body, 'link' => 'http://incomings.io/blogs/' . $blog->id));
}<pre><code>return Response::make($feed, 200, array('Content-Type' =&amp;gt; 'text/xml'));</code></pre><p>});</code></pre><p>And nothing fancy here I just output my blog model. I could limit to the latest 10 or output the data better but for now.</p></p></description><tags>laravel, php</tags></item><item><title>Laravel 5.1 Behat and Codeship</title><link>https://alfrednutile.info/posts/151/</link><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/151/</guid><description><p>The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.</p><p>Here are some steps to getting behat going on Codeship so you get full CI even of Angular.</p><p>This is all based off of<a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><h2 id="behatyml">Behat.yml</h2><p>behat.yml looks like this for me</p><pre><code>default:
extensions:
Laracasts\Behat:
# env_path: .env.behat
Behat\MinkExtension:
base_url: https://microservicehub.dev:44300
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://192.168.10.1:4444/wd/hub"
browser_name: chrome<p>codeship:
extensions:
Laracasts\Behat:
env_path: .env.codeship
Behat\MinkExtension:
base_url: http://localhost:8080
default_session: laravel
laravel: ~
selenium2:
wd_host: "http://localhost:4444/wd/hub"
browser_name: chrome</code></pre><p>This is so I can run it locally as needed. The Codeship profile will then call in the<code>.env.codeship</code> and update the url as needed.</p></p><h2 id="envcodeship">.env.codeship</h2><p>This file has</p><pre><code>APP_ENV=testing
APP_DEBUG=true
APP_KEY=f5edkkfijPDKQXPLHyYNDhiNZZrpT0Qd<p>DB_HOST=localhost
DB_DATABASE=test</p><p>CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync</p><p>MAIL_DRIVER=smtp
MAIL_HOST=mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</code></pre><h2 id="build-script-for-codeship">Build Script for Codeship</h2></p><p>Using the code they offer on their site I add that to my projects folder under tests/selenium_server.sh it is this file<a href="https://github.com/codeship/scripts/blob/master/packages/selenium_server.sh">here</a></p><p>Maybe some do not need to be there?</p><h2 id="codeship-test-settings">Codeship Test Settings</h2><p>Now in the settings I end up with inside the CodeShip UI are as follows</p><p>Here for example is the URL for my project to find these settings.</p><p><code>https://codeship.com/projects/8844/configure_tests</code></p><p>Under Setup Commands</p><pre><code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foobar
touch .env
echo "APP_ENV='testing'" >> .env
echo "DB_DATABASE='test'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "APP_KEY=DHMbPIbNLd1jI0ZEZZSxRFOHj03SU4P5" >> .env
echo "CACHE_DRIVER=file" >> .env
echo "SESSION_DRIVER=file" >> .env
echo "QUEUE_DRIVER=sync" >> .env
echo "MAIL_DRIVER=smtp" >> .env
echo "MAIL_HOST=smtp.mailgun.org" >> .env
echo "MAIL_PORT=2525" >> .env
composer install --dev
php artisan migrate
php artisan db:seed
nohup bash -c "sh tests/selenium_server.sh &amp;" &amp;&amp; sleep 9
cd public &amp;&amp; nohup bash -c "php -S localhost:8080 &amp;" &amp;&amp; sleep 9
cd ../</code></pre><p>Under Configure Test</p><pre><code>DB_DATABASE=test phpunit
php artisan migrate
php artisan db:seed
vendor/bin/behat --profile=codeship --stop-on-failure</code></pre><p>I run the migration one more time to get it ready for behat</p><p><img src="https://dl.dropboxusercontent.com/s/2uadht5426s40p8/behat_codeship.png?dl=0" alt="behat"/></description><tags>laravel, php, bdd</tags></item><item><title>Conventions to Help Minimize your ENV File</title><link>https://alfrednutile.info/posts/150/</link><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/150/</guid><description><p><strong>UPDATE</strong></p><blockquote><p>I think we can also do AWS_BUCKET=foo_$APP_ENV directly in the env file, see<a href="https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables"> https://mattstauffer.co/blog/laravel-5.0-environment-detection-and-environment-variables</a></p></blockquote><ul><li><a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a></li></ul><p>The .env file can be a real pain and get pretty big. And even though there is a<a href="https://github.com/alfred-nutile-inc/env-deployer">tool</a>, I made :), to move it around easily here is a thought on reducing it a bit so it is the same on all environments.</p><p>Typically we have dev, stage, production, testing and local. And when you consider all are services we might use it can be pretty large for example</p><ul><li>Amazon or Iron.io and different queues</li><li>Database Settings</li><li>AWS Buckets</li></ul><p>So a normal config could look like this on dev for example</p><pre><code>APP_ENV=dev<p>APP_DEBUG=false
APP_KEY=yo</p><p>DB_HOST=localhost
DB_DATABASE=db_name_dev
DB_USERNAME=username_dev
DB_PASSWORD=secret</p><p>AWS_BUCKET=some-bucket-dev
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1</p><p>IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFooDev
IRON_DIFF_QUEUE=QueueNameBarDev</p><p>DYNAMO_RT_TABLE=table_dev
DYNAMO_DIFF_TABLE=table_dev</p><p>IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken</p><p>DYNAMO_OCR_RT_TABLE=&lsquo;some_table_dev&rsquo;
OCR_IRON_TOKEN=&lsquo;sometoken&rsquo;
OCR_IRON_PROJECT_ID=&lsquo;somekey&rsquo;
OCR_IRON_QUEUE=&lsquo;foo_dev&rsquo;</code></pre><p>That is about 24 settings but if we alter our code to do this when getting settings</p></p><pre><code>'some_key' => env('OCR_IRON_QUEUE') . '_' . env('APP_ENV');</code></pre><p>Instead of</p><pre><code>'some_key' => env('OCR_IRON_QUEUE');</code></pre><p>And we name our services and resources as needed<code>_dev</code> or<code>_stage</code> or<code>_production</code> then we can simplify the list above so it is the same for most of the environments.</p><p>For example<code>OCR_IRON_QUEUE='foo_dev'</code> is now<code>OCR_IRON_QUEUE='foo'</code> and can be the same on all servers!</p><pre><code>APP_ENV=dev<p>APP_DEBUG=false
APP_KEY=yo</p><p>DB_HOST=localhost
DB_DATABASE=db_name
DB_USERNAME=username
DB_PASSWORD=secret</p><p>AWS_BUCKET=some_bucket
AWS_ACCESS_KEY=foo
AWS_SECRET_KEY=bar
AWS_REGION=us-east-1</p><p>IRON_TOKEN=sometoken
IRON_PROJECT_ID=someid
IRON_QUEUE=QueueNameFoo
IRON_DIFF_QUEUE=QueueNameBar</p><p>DYNAMO_RT_TABLE=table
DYNAMO_DIFF_TABLE=table</p><p>IRON_WORKER_PROJECT_ID_THUMBNAILS=somekey
IRON_WORKER_TOKEN_ID_THUMBNAILS=sometoken</p><p>DYNAMO_OCR_RT_TABLE=&lsquo;some_table&rsquo;
OCR_IRON_TOKEN=&lsquo;sometoken&rsquo;
OCR_IRON_PROJECT_ID=&lsquo;somekey&rsquo;
OCR_IRON_QUEUE=&lsquo;foo&rsquo;</code></pre><p>Convention over configuration so simple yet so easy for me to forget :)</p></p></description><tags>laravel, php</tags></item><item><title>Codeship and Laravel for Continuous Integration</title><link>https://alfrednutile.info/posts/148/</link><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/148/</guid><description><p>Getting going on Codeship and Laravel is pretty easy.</p><p>Once you setup codeship to work with your github account just pull in your repo and set your Testing scripts as follows. (they have a ui for ENV variables as well)</p><h2 id="codeship-testing-settings-easier-copy-paste-bottom-of-article">Codeship Testing Settings [easier copy paste bottom of article]</h2><p><img src="https://dl.dropboxusercontent.com/s/fh6vv3g5wpqw7ac/codeship1.png?dl=0" alt="codeship"/><p>You can do this in their UI as well. But at this point I am</p><ul><li>Setting up the composer token for any private repos that application might have</li><li>Setting up .env for their specific needs as well eg MYSQL_*</li></ul><p>For the Database to use their settings I have to edit<code>config/database.php</code></p><pre><code>&lt;?php<p>return [</p><pre><code>'fetch' =&amp;gt; PDO::FETCH_CLASS,
'default' =&amp;gt; env('DB_CONNECTION', 'mysql'),
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; env('DB_HOST', 'localhost'),
'database' =&amp;gt; env('DB_DATABASE', env('TEST_ENV_NUMBER')),
'username' =&amp;gt; env('DB_USERNAME', env('MYSQL_USER')),
'password' =&amp;gt; env('DB_PASSWORD', env('MYSQL_PASSWORD')),
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
'strict' =&amp;gt; false,
],
],
.......</code></pre><p>];</p><p/></pre><p>Adding</p></p><pre><code>env('DB_PASSWORD', env('MYSQL_PASSWORD')),
env('DB_USERNAME', env('MYSQL_USER')),
env('DB_DATABASE', env('TEST_ENV_NUMBER')),</code></pre><p>So we default to theirs if ours is not there. Finally when we run the test I set the db to the name they want</p><pre><code>DB_DATABASE=test phpunit</code></pre><h2 id="envoy-deploy">Envoy Deploy</h2><p>After it passes I can use Envoy to deploy it.</p><p>The Envoy scripts are not on Forge but use to be so a lot of the naming matches.</p><p>Under the Codeship Deployment page I set</p><pre><code>composer global require "laravel/envoy=~1.0" &amp;&amp; /home/rof/.composer/vendor/bin/envoy run deploy_dev</code></pre><p>In that script do what ever you need to make this thing deploy for example.</p><pre><code>@servers(['dev' => 'forge@foo.com'])<p>@task(&lsquo;deploy_dev&rsquo;, [&lsquo;on&rsquo; => &lsquo;dev&rsquo;])
cd /home/forge/app
git reset &ndash;hard HEAD
git pull origin dev
composer config -g github-oauth.github.com foo
rm -rf vendor
composer install
composer dump-autoload
php artisan migrate:refresh &ndash;seed
bower install
@endtask</p><p/></pre><p>We do not do this on Prod. Someone with proper permissions will run Envoy locally once the tests are passing.</p></p><p><strong>UPDATE</strong></p><p>Easier copy paste</p><pre><code># Set php version through phpenv. 5.3, 5.4 and 5.5 available
phpenv local 5.5
# Install dependencies through Composer
composer config -g github-oauth.github.com foo
touch .env
echo "APP_ENV='testing'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "MYSQL_TESTING_URL='localhost'" >> .env
echo "APP_KEY=foo" >> .env
echo "CACHE_DRIVER=file" >> .env
echo "SESSION_DRIVER=file" >> .env
echo "QUEUE_DRIVER=sync" >> .env
echo "MAIL_DRIVER=smtp" >> .env
echo "MAIL_HOST=smtp.mailgun.org" >> .env
echo "MAIL_PORT=2525" >> .env
echo "MAIL_USERNAME=postmaster@email.foo.io" >> .env
echo "MAIL_PASSWORD=foo" >> .env
echo "MAIL_ENCRYPTION=true" >> .env
echo "STRIPE_API_SECRET='foo'" >> .env
echo "STRIPE_PUBLIC='foo'" >> .env
composer install --dev</code></pre></description><tags>laravel, testing, phpunit, php, ci, codeship</tags></item><item><title>Writing Commands and Scheduling in Laravel 5.1</title><link>https://alfrednutile.info/posts/146/</link><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/146/</guid><description><p>Wow, writing<a href="http://laravel.com/docs/master/artisan#command-structure">Artisan Commands</a> just become even easier. And plugging it into<a href="http://laravel.com/docs/master/scheduling">Scheduler</a> makes for a great combination.</p><p>For example we need to clean out a folder every so many minutes. The example below I also for fun play around with<code>progress</code> and table output.</p><p>Note too<code>protected $signature = 'approve:cleanuploads {--minutes=10}';</code> simplifies the<code>argument</code> and<code>options</code> features.</p><pre><code>&lt;?php namespace App\Console\Commands;<p>use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;</p><p>class CleanUploadsCommands extends Command
{
protected $rootPath = &lsquo;public/storage&rsquo;;
protected $maxMinutes = 10;
protected $deleted = [];
protected $signature = &lsquo;approve:cleanuploads {&ndash;minutes=10}';
protected $description = &lsquo;Clean all the uploads in the storage folder for security reasons&rsquo;;
protected $pdfFiles = [];
protected $files = [];</p><pre><code>public function __construct()
{
parent::__construct();
}
public function handle()
{
$this-&amp;gt;maxMinutes = $this-&amp;gt;option('minutes');
$this-&amp;gt;anyPdfFilesHere();
$this-&amp;gt;deletePdfFiles();
$this-&amp;gt;outputResults();
}
protected function anyPdfFilesHere()
{
$this-&amp;gt;files = File::allFiles(base_path($this-&amp;gt;rootPath));
foreach($this-&amp;gt;files as $file)
{
if (File::mimeType($file) == 'application/pdf')
{
$this-&amp;gt;pdfFiles[] = $file;
}
}
}
private function deletePdfFiles()
{
if(count($this-&amp;gt;pdfFiles) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressStart(count($this-&amp;gt;pdfFiles));
foreach($this-&amp;gt;pdfFiles as $file)
{
$modified = File::lastModified($file);
$minutes = Carbon::createFromTimestamp($modified)-&amp;gt;diffInMinutes();
if($minutes &amp;gt; $this-&amp;gt;maxMinutes)
{
$this-&amp;gt;setDeleted(['filename' =&amp;gt; $file]);
File::delete($file);
$this-&amp;gt;output-&amp;gt;progressAdvance();
}
}
}
}
private function outputResults()
{
if(count($this-&amp;gt;deleted) &amp;gt; 0)
{
$this-&amp;gt;output-&amp;gt;progressFinish();
$headers = ['File Name and Path'];
$this-&amp;gt;table($headers, $this-&amp;gt;getDeleted());
}
else
{
$this-&amp;gt;comment(sprintf(&amp;quot;No files older than %d minutes&amp;quot;, $this-&amp;gt;maxMinutes));
}
}
public function getDeleted()
{
return $this-&amp;gt;deleted;
}
public function setDeleted($deleted)
{
$this-&amp;gt;deleted[] = $deleted;
}</code></pre><p>}</code></pre><p>Then in the Kernel.php I enter</p></p><pre><code>&lt;?php namespace Approve\Console;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
class Kernel extends ConsoleKernel
{
/**
* The Artisan commands provided by your application.
*
* @var array
*/
protected $commands = [
'App\Console\Commands\CleanUploadsCommands'
];
/**
* Define the application's command schedule.
*
* @param \Illuminate\Console\Scheduling\Schedule $schedule
* @return void
*/
protected function schedule(Schedule $schedule)
{
$schedule->command('approve:cleanuploads --minutes=10')
->everyMinute();
}
}</code></pre><p>And that is it.</p><p>One big thing about Commands is the power of Asynchronous processing that libraries like<a href="http://symfony.com/doc/current/components/process.html">Symfony Process</a> gives us the ability to run numerous commands at once!</p><p><img src="https://dl.dropboxusercontent.com/s/cu1v0wl61ul29qr/cleanFiles.gif?dl=0" alt="running"/></description><tags>laravel, php, commands</tags></item><item><title>Easily Create Fixture Data from Remote Services and Refresh Mock Data</title><link>https://alfrednutile.info/posts/145/</link><pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/145/</guid><description><p><strong>Oops Codeship and Laravel is<a href="https://goo.gl/k62TEB">here</a></strong></p><h1 id="easily-create-fixture-data-from-remote-services-and-refresh-mock-data">Easily Create Fixture Data from Remote Services and Refresh Mock Data</h1><p>We have integration tests that hit remote apis like Github, S3, DynomoDB, our own APIs etc and we do not want to hit those during out tests but we also want to make sure we have the real data. So when one of those APIs change then our mock data can be refreshed to see if our systems really work with it.</p><p>Using Laravel&rsquo;s new integration tests, though this works with any framework, we will swap out these Service classes with a Wrapper class ONLY if we have a matching file. This allows us to delete those files and get another one on the fly.</p><h2 id="lets-start-with-the-controller">Lets start with the Controller</h2><p>This simple Controller will talk to a Repo. Imagine the repo talking to Dynamodb or GithubApi, database etc.</p><pre><code>&lt;?php<p>namespace App\Http\Controllers;</p><p>use App\ExampleRepo;
use Illuminate\Support\Facades\Response;</p><p>class ExampleController extends Controller
{</p><pre><code>public function mocking(ExampleRepo $exampleRepo)
{
return Response::json(&amp;quot;You are here &amp;quot; . $exampleRepo-&amp;gt;get());
}</code></pre><p>}</code></pre><p>So thanks to the dependency injection system; and the use of the Reflection Class,<code>ExampleRepo</code> get constructed as well.</p></p><h2 id="the-tests">The Tests</h2><p>First lets look at a normal test no mock</p><pre><code>&lt;?php<p>use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;</p><p>use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;</p><p>class ExampleTest extends TestCase
{
public function testDefault()
{
$this->get('/mocking')->see("You are here foo");
}
}</code></pre><p>Pretty simple. But not lets…</p></p><h2 id="swap-things-out">Swap Things Out</h2><p>Here we add an example of replacing the default instance<code>App</code> would make with our own Wrapper</p><pre><code>&lt;?php<p>use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;</p><p>use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\File;
use Mockery as m;</p><p>class ExampleTest extends TestCase
{
public function testDefault()
{
$this->get('/mocking')->see("You are here foo");
}</p><pre><code>public function testMocking()
{
$mock = m::mock('App\ExampleRepo');
$mock-&amp;gt;shouldReceive('get')-&amp;gt;once()-&amp;gt;andReturn('bar');
App::instance('App\ExampleRepo', $mock);
$this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here bar&amp;quot;);
}</code></pre><p>}</p><p/></pre><p><code>testMocking</code> will now return bar!</p></p><h2 id="making-fixtures-on-the-fly">Making Fixtures on the Fly</h2><p>Same results BUT we hit my wrapper not the real services. But here is where I think it gets even better. I can return fixture data BUT at the same time I can not worry about returning stale fixture data eg the apis have changed but my fixtures have not. All of this without having my test code wrapped into the app code.</p><p>This will look for the output of a route. That Controller and Repo we will show in a moment</p><pre><code> public function testMakeFixture()
{
$wrapper = App::make('App\ExampleRepoWrapper');
App::instance('App\ExampleRepo', $wrapper);<pre><code> $this-&amp;gt;get('/mocking')-&amp;gt;see(&amp;quot;You are here foo&amp;quot;);
}</code></pre><p/></pre><p>This test has a wrapper which extends the repo</p></p><pre><code>&lt;?php
namespace App;
use Illuminate\Support\Facades\File;
class ExampleRepoWrapper extends ExampleRepo
{
public function get()
{
if(File::exists(base_path('tests/fixtures/foo.json')))
{
$content = File::get(base_path('tests/fixtures/foo.json'));
return json_decode($content, true);
}
$results = parent::get();
if(!File::exists(base_path('tests/fixtures/foo.json')))
{
$content = json_encode($results, JSON_PRETTY_PRINT);
File::put(base_path('tests/fixtures/foo.json'), $content);
}
return $results;
}
}</code></pre><p>So now the Controller will talk to the Wrapper instead which will look for a file<code>(NOTE: You can easily pass in $id or $name to make the fixtures unique)</code></p><p>So now when the Controller hits our Wrapper it goes right to the real<code>ExampleRepo</code> (seen below)<strong>if there is no fixture file</strong> and then the Wrapper kicks in to make the file (as seen in the above class).</p><pre><code>&lt;?php namespace App;<p>class ExampleRepo
{</p><pre><code>protected $results;
public function get()
{
$this-&amp;gt;results = 'foo';
return $this-&amp;gt;results;
}
/**
* @return mixed
*/
public function getResults()
{
return $this-&amp;gt;results;
}</code></pre><p>}</code></pre><p>That is it you can do integration testing on your APIs and not hit external services or even databases.</p></p><h2 id="force-full-integration">Force Full Integration</h2><p>Sometimes you want to hit the external resources. This can be part of a weekly or daily test to make sure you app is working with all the external APIs. You can do this by deleting all the fixtures before running that test.</p><p>So you can setup a provider like this</p><pre><code>
class ExampleProvider extends ServiceProvider
{<p>public function register()
{
if(App::environment() == &lsquo;testing&rsquo; and env(&lsquo;FULL_INTEGRATION&rsquo;) != &lsquo;true&rsquo;)
{
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepoWrapper&rsquo;);<br>
} else {<br>
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepo&rsquo;);
}</p><p>}</p><p>}</p><p>** UPDATE **</p><p>Another good idea, by<a href="https://twitter.com/n_kirschbaum">Nathan Kirschbaum</a>, is to set the<code>FULL_INTEGRATION</code> setting by the user that is logged in.</p><p/></pre><h2 id="cons">Cons</h2></p><p>One is UI testing. Prior to this I would make wrappers as needed to then take over if say<code>APP_MOCK=true</code>. Then I could mock even on Behat testing or the UI. But that meant a lot of Providers and alot of mixing of testing and code. But it worked and ran well on services like CodeShip and locally. If you Behat/Acceptance tests are hitting the API or UI it would be nice to fake all the external responses. Though now with the above the API testing is easy. The UI (when there is javascript) not so easy :(</p><p>Since we are using<code>App::instance</code> we did not need to register a Provider Class. But to make the UI con a non issue you can go that far to register a ServiceProvider</p><pre><code>
class ExampleProvider extends ServiceProvider
{<p>public function register()
{
if(App::environment() == &lsquo;testing&rsquo;
{
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepoWrapper&rsquo;);<br>
} else {<br>
$this->app->bind(&lsquo;App\ExampleRepo&rsquo;, &lsquo;App\ExampleRepo&rsquo;);
}</p><p>}</p><p>}</p><p/></pre><p>Then register as normal in your config/app.php . This can be kinda tedious but would produce the same results.</p></p><p>Great book on the topic<a href="https://leanpub.com/laravel-testing-decoded">Laravel Testing Decoded</a></p><p><img src="https://s3.amazonaws.com/titlepages.leanpub.com/laravel-testing-decoded/large?1425536214" alt="decoded"/></description><tags>testing, laravel, php, phpunit, integration</tags></item><item><title>Iron.io and Lumen</title><link>https://alfrednutile.info/posts/143/</link><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/143/</guid><description><h1 id="lumen-iron-worker">Lumen Iron Worker</h1><h2 id="what-and-why">What and why</h2><p>A worker is a great way to run tasks as needed taking the load off your applications server and greatly speeding up the process of a task as you can run numerous workers at once.</p><p>A lot of this comes from<a href="http://dev.iron.io/worker/beta/getting_started/">http://dev.iron.io/worker/beta/getting_started/</a> and<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a> and their examples</p><h2 id="topics-covered">Topics covered</h2><ul><li>Creating a Lumen Worker</li><li>Creating a statically linked binary in the worker</li><li>Testing the worker locally with Docker</li><li>Entering your docker environment</li><li>Design patterns</li></ul><h2 id="install-lumen">Install Lumen</h2><pre><code>composer create-project laravel/lumen --prefer-dist</code></pre><p>Add to composer.json</p><blockquote><pre><code> "iron-io/iron_mq": "~1.5",</code></pre></blockquote><pre><code> "iron-io/iron_worker": "~1.4"</code></pre><p>So now it looks like</p><pre><code> "require": {
"laravel/lumen-framework": "5.0.*",
"vlucas/phpdotenv": "~1.0",
"iron-io/iron_mq": "~1.5",
"iron-io/iron_worker": "~1.4"
},</code></pre><h2 id="install-iron-client">Install iron client</h2><p>See their notes here<a href="http://dev.iron.io/worker/beta/cli/">http://dev.iron.io/worker/beta/cli/</a></p><h2 id="install-docker">Install docker</h2><p>On a mac they have great steps here for that<a href="https://docs.docker.com/installation/mac/">https://docs.docker.com/installation/mac/</a></p><h2 id="environment-settings">Environment settings</h2><p>For Lumen we can simply use our typical .env file. For Iron you put your info in the iron.json file in the root of the app (make sure to add this to .gitignore)</p><p>The format is</p><pre><code>{ "token": "foo", "project_id": "bar" }</code></pre><h2 id="the-worker">The worker</h2><p>Make a folder called workers at the root of your app</p><p>In there place your worker file. In this case<code>ExampleOneWorker</code>. This is what gets called, as you will see soon, when the worker starts. This is what will receive the payload.</p><pre><code>workers/ExampleOneWorker.php</code></pre><p>Inside of this to start will be</p><pre><code>&lt;?php<p>require_once<strong>DIR</strong> . &lsquo;/libs/bootstrap.php&rsquo;;</p><p>$payload = getPayload(true);</p><p>fire($payload);</p><p>function fire($payload)
{
try
{
$handler = new \App\ExampleOneHandler();
$handler->handle($payload);
}</p><pre><code>catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error with worker %s&amp;quot;, $e-&amp;gt;getMessage());
echo $message;
}</code></pre><p>}</code></pre><p>For testing reasons and code clarity I do not like to put much code in here. I instantiate a handler class and pass in the payload.</p></p><p>The getPayload in the helper.php file, provided by an Iron.io example, will get the payload for us.</p><p>There is another folder to make in there called libs and for now it has this file<code>bootstrap.php</code> and<code>helper.php</code> [1] The helper is<a href="https://github.com/alnutile/lumen_worker/blob/master/workers/libs/helper.php">here</a></p><p>With the contents as seen below for bootstrap or<a href="https://github.com/alnutile/lumen_worker/tree/master/workers/libs">visit</a> to get the files.</p><pre><code>&lt;?php
require __DIR__ . '/../../vendor/autoload.php';
$app = require_once __DIR__ . '/../../bootstrap/app.php';
if(!function_exists('getPayload'))
require_once __DIR__ . '/helper.php';<p>use Illuminate\Encryption\Encrypter;
$app->boot();</p><p>function decryptPayload($payload)
{
$crypt = new Encrypter(getenv(&lsquo;IRON_ENCRYPTION_KEY&rsquo;));
$payload = $crypt->decrypt($payload);
return json_decode(json_encode($payload), FALSE);
}</code></pre><p><code>helper.php</code> I placed a gist here<a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8"><a href="https://gist.github.com/alnutile/41ee747bb8e1810d19e8">https://gist.github.com/alnutile/41ee747bb8e1810d19e8</a></a></p></p><p>Also for this example we will need a<code>payload.json</code> file in the root of our app. More on that shortly, for now put this into the file.</p><pre><code>{
"foo": "bar"
}</code></pre><p>Finally our app folder has the<code>ExampleOneHandler.php</code> file to handle the job.</p><pre><code>&lt;?php<p>namespace App;</p><p>class ExampleOneHandler {</p><pre><code>public function handle($payload)
{
echo &amp;quot;This is the Payload&amp;quot;;
echo print_r($payload, 1);
}</code></pre><p>}</code></pre><p>We will do more shortly.</p></p><p>Here is the folder/file layout</p><p><img src="https://dl.dropboxusercontent.com/s/c561wmsnv8hl2rm/worker_files.png?dl=0" alt="files"/><h2 id="round-1-exampleonehandler">Round 1 ExampleOneHandler</h2><p>Lets now run this and see what happens.</p><p>Using docker we can run this locally</p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleOneWorker.php -payload payload.json"</code></pre><p>You just ran, what ideally will be, the exact worker you will run when you upload the code. It will take a moment on the first run. After that it will be super fast.</p><p>Here is my output</p><p><img src="https://dl.dropboxusercontent.com/s/4qkq5e21jl550sg/worker_command.png?dl=0" alt="outputone"/><h3 id="uploading-to-iron">Uploading to Iron</h3><h4 id="bundle">Bundle</h4><p>This is really easy to make a script for by just adding them to an upload_worker.sh file in the root of your app and running that as needed.</p><pre><code>touch ExampleOneWorker.zip
rm ExampleOneWorker.zip
zip -r ExampleOneWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleOneWorker.zip php workers/ExampleOneWorker.php</code></pre><p>So we are touching the file so there are no errors if it is not there.
Then we rm it
And zip it ignoring .git to keep it slim
and then we upload it with the worker and point to the directory to use.</p><p><strong>Don&rsquo;t run it just yet</strong></p><p>I add my iron.json file to the root of my app as noted above.</p><p>and I make the Project on the Iron HUD</p><p><img src="https://dl.dropboxusercontent.com/s/qq2h0to2epnc0qw/worker_json.png?dl=0" alt="iron"/><p>And then I can run the<code>make_worker.sh</code> I made above</p><p>You should end up with this output</p><p><img src="https://dl.dropboxusercontent.com/s/utb478g6510rssd/worker_iron_upload.png?dl=0" alt="output"/><h4 id="looking-at-the-hud-iron-webui">Looking at the HUD (Iron WebUI)</h4><p>Under Worker and tasks we see</p><p><img src="https://dl.dropboxusercontent.com/s/7d1klwablw037wh/worker_hud_tasks.png?dl=0" alt="worker"/><p>So lets run it from the command line to see it work</p><pre><code>iron worker queue --wait -payload-file payload.json ExampleOneWorker</code></pre><p>The wait is pretty cool since we can get this output. This is key when doing master slave workers as well.</p><p>You get the same output as before. But it was run on the worker</p><p>Here is the HUD</p><p><img src="https://dl.dropboxusercontent.com/s/bxc1dolij0l2f7w/worker_run_example1.png?dl=0" alt="worker ran"/><h2 id="round-2-lets-do-something-real">Round 2 Lets do something real</h2><p>So far the payload has not done much but lets use it in this next example.</p><p>As above we make and<code>ExampleTwoWorker.php</code></p><p>Make payload2.json file</p><pre><code>{
"search_word": "batman"
}</code></pre><p>Then we use it to call our<code>ExampleTwoWorkerHandler</code></p><p><strong>warning this is not an example on good php code</strong></p><pre><code>&lt;?php namespace App;<p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
return file_get_contents($image);
}
}</code></pre><p>}</code></pre><p>I test locally</p></p><pre><code>docker run --rm -v "$(pwd)":/worker -w /worker iron/images:php-5.6 sh -c "php /worker/workers/ExampleTwoWorker.php -payload payload2.json" > output.png</code></pre><p>But this time put the output into a file and we get</p><p><img src="https://dl.dropboxusercontent.com/s/kmtuvgzhpzws6xz/worker_lego_one.png?dl=0" alt="lego guys"/><h3 id="making-a-custom-binary">Making a custom binary</h3><p>Before I get this to iron lets make it more useful since I will lose that output.png file on the worker. Some workers we have would convert that into a base64 blob and send that back in a callback.</p><p>One enter into docker like I noted above</p><p>Two run<code>apt-get update</code></p><p>Then run<code>apt-get install jp2a</code></p><p>Then make a folder called /worker/builds/</p><p>And in there follow these instructions<a href="http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html">http://jurjenbokma.com/ApprenticesNotes/getting_statlinked_binaries_on_debian.html</a> replacing jp2a as needed.</p><p>Then make a folder called /worker/bin and copy jp2a from<code>/worker/builds/jp2a-1.0.6/src/jp2a</code> to this bin folder.</p><p>You should be able to see that run now by ding /worker/bin/jp2a even run<code>apt-get remove jp2a</code> to show it works as a standalone library [3]</p><p>Let&rsquo;s adjust our code</p><pre><code>&lt;?php
/**
* Created by PhpStorm.
* User: alfrednutile
* Date: 4/27/15
* Time: 9:02 PM
*/<p>namespace App;</p><p>use Illuminate\Support\Facades\File;</p><p>class ExampleTwoHandler {</p><pre><code>protected $search_word;
protected $result;
public function handle($payload)
{
$this-&amp;gt;search_word = $payload['search_word'];
$this-&amp;gt;getImage();
return $this-&amp;gt;popFirstResult();
}
protected function getImage()
{
$url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;amp;q=';
$url .= urlencode(&amp;quot;site:www.thebrickfan.com &amp;quot; . $this-&amp;gt;search_word . &amp;quot; lego&amp;quot;);
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, $url);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
$data = curl_exec($curl);
curl_close($curl);
$result = json_decode($data, true);
$this-&amp;gt;result = $result;
}
protected function popFirstResult()
{
$max = count($this-&amp;gt;result['responseData']['results']);
if($max == 0)
{
throw new \Exception(sprintf(&amp;quot;No image found :( for %s&amp;quot;, $this-&amp;gt;search_word));
}
else
{
$image = $this-&amp;gt;result['responseData']['results'][rand(0, $max - 1)]['url'];
$path_to_worker = base_path('bin/');
exec(&amp;quot;chmod +x {$path_to_worker}/jp2a&amp;quot;);
exec(&amp;quot;TERM=xterm {$path_to_worker}/bin/jp2a $image&amp;quot;, $output);
return implode(&amp;quot;\n&amp;quot;, $output);
}
}</code></pre><p>}</code></pre><p>run locally and you might get some decent output or not :(</p></p><p><img src="https://dl.dropboxusercontent.com/s/76vbdf0iubehf5c/worker_batman.png?dl=0" alt="batman"/><h3 id="make-and-upload-the-worker">Make and upload the worker</h3><p>Then I run<code>sh ./make_worker_two.php</code></p><pre><code>touch ExampleTwoWorker.zip
rm ExampleTwoWorker.zip
zip -r ExampleTwoWorker.zip . -x *.git*
iron worker upload --stack php-5.6 ExampleTwoWorker.zip php workers/ExampleTwoWorker.php</code></pre><p>And run and wait</p><pre><code>iron worker queue --wait -payload-file payload2.json ExampleTwoWorker</code></pre><p>And if all goes well your console and the logs should show something like</p><p><img src="https://dl.dropboxusercontent.com/s/263tlw5vkswqqvp/worker_results.png?dl=0" alt="batman"/><h2 id="entering-your-docker-environment">Entering your docker environment</h2><p>Easy</p><pre><code>docker run -it -v "$(pwd)":/worker -w /worker iron/images:php-5.6 /bin/bash</code></pre><p>Now you can test things in there, download packages etc.</p><h2 id="mvc">MVC</h2><p>Not sure if this really is correct but I tend to see the Worker file as my route file. The handler as the controller and other classes as needed, Service, Repository etc. This makes things more testable etc and better organize imo.</p><h2 id="connecting-the-queue-to-the-worker">Connecting the Queue to the Worker</h2><p>Coming soon&hellip;</p><h2 id="numerous-environments">Numerous Environments</h2><p>Waiting on bug report<a href="https://github.com/iron-io/docs/issues/467">https://github.com/iron-io/docs/issues/467</a></p><p>But part of the process is to setup other projects at iron. For example if my worker is ExampleWorker then I would make ExampleWorker-dev.
I would then switch to my git branch dev and do my changes. Once that is done I would make sure the token and key in my iron.json file matches that new project I made for dev and that is it.</p><p>The other way is slicker cause you do not need to change your iron.json each time but in the mean time this works fine.</p><h2 id="deploy-from-codeship">Deploy from Codeship</h2><p>Codeship will allow you to set custom deploy scripts or bash shells scrips basically.</p><p>In here I placed for the branch I wanted</p><pre><code>curl -sSL -O https://github.com/iron-io/ironcli/releases/download/v0.0.6/ironcli_linux
chmod +x ironcli_linux
touch iron.json
echo "{" >> iron.json
echo '"token": "bar",' >> iron.json
echo '"project_id": "foo"' >> iron.json
echo "}" >> iron.json
zip -r PDF2PagesWorker.zip .
./ironcli_linux worker upload --stack php-5.6 PDF2PagesWorker.zip php workers/PDF2PagesWorker.php</code></pre><p>You can easily then swap out the related project id and token for the environment you are uploading to eg development, staging etc.</p><h2 id="repo">Repo</h2><p><a href="https://github.com/alnutile/lumen_worker">https://github.com/alnutile/lumen_worker</a></p><p>another example<a href="https://github.com/alnutile/thumbnail-maker">Thumbnail Maker</a></p><p>[1] These seems to be a part of the iron worker for version 1 but not sure why not for 2 maybe there is a better pattern for this.</p><p>[2] I renamed it to ExampleOneLumen</p><p>[3] So far this is a 50/50 solution it did not work for pdf2svg but it did work for pdftk</p></description><tags>laravel, php, iron, lumen</tags></item><item><title>Quick way to mock data for Behat in Laravel</title><link>https://alfrednutile.info/posts/142/</link><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/142/</guid><description><p>Below allows me to use this type of step in my tests</p><pre><code>Scenario: Given I update a Domain get 200
Given I mock "App\Sites\Domain" with properties:
"""
id: "mock-update-1"
site_id: "mock-site-1"
domain: "foo2.com
"""
Given I have the payload:
"""
{
"data":
{
"id": "mock-update-1",
"site_id": "mock-site-1",
"domain": "foo2.com"
}
}
"""
Then I request "PUT /api/v1/sites/mock-site-1/domains/mock-update-1"
Then I get a "200" response</code></pre><p>Here is the code in my<code>FeatureContext.php</code></p><pre><code> /**
* @Given I mock :arg1 with properties:
*/
public function iMockWithProperties($model, PyStringNode $properties)
{
try
{
$this->setModel($model);
$this->makeFields($properties);
$this->removeMockIfExists();<pre><code> $this-&amp;gt;checkModelForTimeStamps();
$this-&amp;gt;createMock();
}
catch(\Exception $e)
{
$this-&amp;gt;printDebug(sprintf(&amp;quot;Error making mock&amp;quot;, $e-&amp;gt;getMessage()));
}
}
private function checkModelForTimeStamps()
{
if($this-&amp;gt;getModel()-&amp;gt;timestamps)
{
$dateTime = new DateTime('-3 day');
$created_at = $dateTime-&amp;gt;format('Y-m-d H:i:s');
$this-&amp;gt;fields['created_at'] = $created_at;
$this-&amp;gt;fields['updated_at'] = $created_at;
}
}
protected function removeMockIfExists()
{
if(isset($this-&amp;gt;fields['id']) &amp;amp;&amp;amp; $results = $this-&amp;gt;getModel()-&amp;gt;find($this-&amp;gt;fields['id']))
$results-&amp;gt;delete();
}
protected function makeFields($properties)
{
foreach($properties-&amp;gt;getStrings() as $value)
{
$field = explode(&amp;quot;:&amp;quot;, $value);
$this-&amp;gt;fields[trim($field[0])] = str_replace('&amp;quot;', '', trim($field[1]));
}
}
public function createMock()
{
$this-&amp;gt;getModel()-&amp;gt;create($this-&amp;gt;fields);
}
/**
* @return mixed
*/
public function getFields()
{
return $this-&amp;gt;fields;
}
/**
* @param mixed $fields
*/
public function setFields($fields)
{
$this-&amp;gt;fields = $fields;
}
/**
* @return mixed
*/
public function getModel()
{
return $this-&amp;gt;model;
}
/**
* @param mixed $model
*/
public function setModel($model)
{
$this-&amp;gt;model = new $model;
}</code></pre><p/></pre></p></description><tags>laravel, php, behat</tags></item><item><title>Simple Look at Laravel Events</title><link>https://alfrednutile.info/posts/132/</link><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/132/</guid><description><h1 id="events">Events</h1><h2 id="getting-started">Getting Started</h2><p>This is part of a larger<a href="https://github.com/alnutile/laravel_guide/blob/master/index.md">Laravel Guide</a> I am working on in this case the example is in the Events<a href="https://github.com/alnutile/laravel_guide/tree/master/projects/events">folder</a></p><p>Start the example</p><pre><code>php artisan serve --port=8081</code></pre><p>Then visit</p><pre><code>http://localhost:8081/example1</code></pre><p>So if you look in</p><pre><code>app/routes.php</code></pre><p>You see route example1 will fire and event and there are two listeners</p><h2 id="do-they-run-async-or-sync">Do they run async or sync</h2><p>If you hit that<a href="http://localhost:8081/example1">route</a> you see the sleep taking effect so it is syncronous</p><p>See in the image below an example. I reload the page and the results are staggered by the sleep amount in the route.</p><p><img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/events_delay.png" alt="sleep"/><p>On the left I have</p><pre><code>php artisan tail</code></pre><p>Here is the route</p><pre><code>Event::listen('example1', function()
{
sleep(5);
Log::info("Event one is Triggered");
});<p>Event::listen(&lsquo;example1&rsquo;, function()
{
sleep(5);
Log::info("Event two is Triggered");
});</p><p>Route::get('/example1', function()
{
Event::fire(&lsquo;example1&rsquo;);
return "Event Example 1";
});</code></pre><p>So if you did not want to hold up the process you would place these into a queue.</p></p><h2 id="passing-data-to-events">Passing data to events</h2><p>How can Event 1 alter Event 2 and Event 3</p><p>See route would be<a href="http://localhost:8081/example2">/example2</a></p><p>Also there is a registered event listener seen in the route file
that</p><pre><code>$subscriber = new \Acme\ExampleEventHandler;
Event::subscribe($subscriber);</code></pre><p>Which shows how that made it hard to pass a state</p><pre><code>$subscriber = new \Acme\ExampleEventHandler;<p>Event::subscribe($subscriber);</p><p>Event::listen(&lsquo;example2&rsquo;, function($state)
{
$state->total = $state->total + 5;
var_dump(sprintf("From The listener one state %s &lt;br>", $state->total));</p><pre><code>Log::info(sprintf(&amp;quot;Event two listener 1 is Triggered total %s&amp;quot;, $state-&amp;gt;total));</code></pre><p>});</p><p>Event::listen(&lsquo;example2&rsquo;, function($state)
{
$state->total = $state->total + 5;
var_dump(sprintf("From The listener two state %s &lt;br>", $state->total));</p><pre><code>Log::info(sprintf(&amp;quot;Event two listener 2 is Triggered total %s&amp;quot;, $state-&amp;gt;total));</code></pre><p>});</p><p>Route::get('/example2', function()
{
$state = new stdClass();
$state->total = 0;
Event::fire(&lsquo;example2&rsquo;, array($state));</p><pre><code>return sprintf(&amp;quot;Event Example 2 data total state %s&amp;quot;, $state-&amp;gt;total);</code></pre><p>});</code></pre><p>This one you just see in the browser</p></p><p><img src="https://raw.githubusercontent.com/alnutile/laravel_guide/master/docs/img/events/example2.png" alt="example2"/></description><tags>laravel, events, php</tags></item><item><title>Laravel-Flysystem and Creating Time Limited Public Urls on S3</title><link>https://alfrednutile.info/posts/131/</link><pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/131/</guid><description><p>We needed to offer timed links to the urls and we are using<a href="https://github.com/GrahamCampbell/Laravel-Flysystem">Laravel-Flysystem</a></p><p><a href="https://github.com/crypticsymbols">Aaron Smith</a> found this<a href="https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php">how to</a> but I wanted it to work with existing use of FlySystem.</p><p>I ended up moving the code into a trait so we could use this one feature</p><pre><code>&lt;?php namespace AlfredNutileInc\CoreApp\Helpers;
use GrahamCampbell\Flysystem\Facades\Flysystem;
use Illuminate\Support\Facades\Log;<p>trait S3Helper {</p><pre><code>protected $path_for_assets;
protected $expire_time;
public $driver = 'awss3';
/**
* @return string
*/
public function getDriver()
{
return $this-&amp;gt;driver;
}
/**
* @param string $driver
*/
public function setDriver($driver)
{
$this-&amp;gt;driver = $driver;
}
public function iterateOverFiles($files)
{
foreach($files as $key =&amp;gt; $file)
{
if(isset($file['path'])) {
$files[$key]['url'] = $this-&amp;gt;getSignedUrl($file['path']);
}
}
return $files;
}
protected function getFiles()
{
$this-&amp;gt;path_for_assets = $this-&amp;gt;project_id . '/' . $this-&amp;gt;id;
$files = Flysystem::listContents($this-&amp;gt;path_for_assets);
if(!$files)
return [];
return $this-&amp;gt;iterateOverFiles($files);
}
/**
* https://coderwall.com/p/pr-gwg/create-aws-s3-signed-requests-with-php
*/
protected function getSignedUrl($filename)
{
$awsKeyId = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['key'];
$awsSecret = Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['secret'];
$expires = $this-&amp;gt;getExpireTime();
$httpVerb = &amp;quot;GET&amp;quot;;
$contentMD5 = &amp;quot;&amp;quot;;
$contentType = &amp;quot;&amp;quot;;
$amzHeaders = &amp;quot;&amp;quot;;
$amzResource = &amp;quot;/&amp;quot; . Flysystem::getConnectionConfig($this-&amp;gt;getDriver())['bucket'] . &amp;quot;/&amp;quot; . $filename;
$request = sprintf(&amp;quot;%s\n%s\n%s\n%s\n%s%s&amp;quot; , $httpVerb , $contentMD5 , $contentType , $expires , $amzHeaders , $amzResource );
$base64signed = urlencode(base64_encode( hash_hmac( 'sha1' , $request, $awsSecret , true ) ));
$url = &amp;quot;http://s3.amazonaws.com%s?AWSAccessKeyId=%s&amp;amp;Expires=%s&amp;amp;Signature=%s&amp;quot;;
$url = sprintf( $url , $amzResource , $awsKeyId , $expires , $base64signed );
return $url;
}
public function setExpireTime($time = false)
{
if($time == false)
{
$time = time() + (10*60);
}
$this-&amp;gt;expire_time = $time;
}
public function getExpireTime()
{
if($this-&amp;gt;expire_time == false)
{
$this-&amp;gt;setExpireTime();
}
return $this-&amp;gt;expire_time;
}</code></pre><p>}</p><p/></pre><p>Ideally seconds could be passed in too.</p></p><p>Then in any model/repo I can use it like this</p><pre><code> public function assets()
{
try
{
$files = $this->getFiles();
return ['images' => $files, 'videos' => []];
} catch(\Exception $e)
{
throw new \Exception(sprintf("Error getting files %s", $e->getMessage()));
}
}</code></pre></description><tags>laravel, php</tags></item><item><title>Laravel Behat and Selenium</title><link>https://alfrednutile.info/posts/130/</link><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/130/</guid><description><p>Laracasts has some great videos and libraries for Laravel 5 and Behat integration.</p><p>Examples</p><p><a href="https://github.com/laracasts/Behat-Laravel-Extension">https://github.com/laracasts/Behat-Laravel-Extension</a></p><p>and</p><p><a href="https://laracasts.com/lessons/laravel-5-and-behat-bffs">https://laracasts.com/lessons/laravel-5-and-behat-bffs</a></p><p>Two things that I still need and get from this though that I do not think I can get from those are</p><ul><li>Laravel 4.2 support which obviously is not going to work with the above L5 libraries :)</li><li>Mocking APIs when running under APP_ENV=local or testing</li></ul><p>Also I think with the libraries above only goutte drivers work for the APP_ENV setting.</p><h2 id="dealing-with-apis">Dealing with APIs</h2><p>We use a lot of APIs. One for example is Github so make a provider like this</p><h3 id="the-provider">The Provider</h3><p>I register an API Provider like this</p><pre><code>&lt;?php<p>namespace BehatEditor\Services;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\ServiceProvider;
class GitApiServiceProvider extends ServiceProvider {
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(App::environment() == &lsquo;testing&rsquo; || Config::get(&lsquo;app.mock&rsquo;) == true)
{
$this->app->singleton(&lsquo;GithubClientInstance&rsquo;, function($app){
$git = new GithubApiMockService();
$username = getenv(&lsquo;GIT_USERNAME&rsquo;);
$token = getenv(&lsquo;GIT_TOKEN&rsquo;);
$git->setUsername($username);
$git->setToken($token);
$git->setLogger($app[&lsquo;log&rsquo;]);
$git->setLogging(true);
$git->authenticate();
return $git;
});
} else
{
$this->app->singleton(&lsquo;GithubClientInstance&rsquo;, function($app){
$git = new GithubApiService();
$username = getenv(&lsquo;GIT_USERNAME&rsquo;);
$token = getenv(&lsquo;GIT_TOKEN&rsquo;);
$git->setUsername($username);
$git->setToken($token);
$git->setLogger($app[&lsquo;log&rsquo;]);
$git->setLogging(true);
$git->authenticate();
return $git;
});
}
}
}</code></pre><p>The “app.mock” I set in two places</p></p><pre><code>config/local/app.php</code></pre><p>and</p><pre><code>config/testing/app.php</code></pre><pre><code>&lt;?php<p>return array(</p><pre><code>'chat_on' =&amp;gt; false,
'mock' =&amp;gt; true,
'debug' =&amp;gt; true,
'providers' =&amp;gt; append_config(array(
'GuilhermeGuitte\BehatLaravel\BehatLaravelServiceProvider'
))</code></pre><p>);</code></pre><p>Testing works well for Codeship.</p></p><p>Then if we have mock as true for local and I run</p><pre><code>php artisan behat:run --profile=als_local_ui --stop-on-failure ui/people_ui.feature</code></pre><p>I can test all my Angular ui for People</p><p>Here is the behat.yml for that, keep in mind I run this from inside of Vagrant (Homestead) and Selenium is running on my Mac thanks to &ldquo;webdriver-manager&rdquo; and brew install chromedriver you can see more on that<a href="https://www.alfrednutile.info/posts/129">here</a></p><pre><code>default:
filters:
tags: "~@wip"
formatter:
name: pretty
parameters:
decorated: true
verbose: false
time: true
language: en
output_path: null
multiline_arguments: true
paths:
features: app/tests/acceptance/features
bootstrap: app/tests/acceptance/contexts
context:
parameters:
base_url: http://behat.dev
asset_path: '/tmp/'<p>als_local_ui:
extensions:
Behat\MinkExtension\Extension:
default_session: selenium2
goutte:
guzzle_parameters:
curl.options:
CURLOPT_SSL_VERIFYPEER: false
CURLOPT_CERTINFO: false
CURLOPT_TIMEOUT: 120
ssl.certificate_authority: false
selenium2:
wd_host: "http://192.168.33.1:4444/wd/hub"
base_url: &lsquo;<a href="https://admin:foo@behat.dev">https://admin:foo@behat.dev</a>:44300&rsquo;
browser_name: chrome</code></pre><h3 id="the-mock-class">The Mock Class</h3></p><p>The mock class just extends the real class but takes over</p><p>If mock is on it looks for a matching fixture file and uses that, else it makes one real call, saves the fixture and then uses that next time.</p><pre><code>&lt;?php
namespace BehatEditor\Services;<p>use AlfredNutileInc\Fixturizer\FixturizerReader;
use BehatEditor\Exceptions\ModelException;
use BehatEditor\Helpers\BuildFileObject;
use BehatEditor\Helpers\ThrowAndLogErrors;
use BehatEditor\Providers\GithubClientInterface;
use Github\Client;
use Github\ResultPager;
use BehatEditor\Interfaces\BehatUIInterface;
use BehatEditor\Repositories\ProjectsRepository;
use Illuminate\Support\Facades\Log;</p><p>class GithubApiMockService extends GithubApiService implements GithubClientInterface {</p><pre><code>public $sha;
protected $application;
/**
* @var \Github\Client
*/
public $client;
protected $username;
protected $token;
protected $branch;
protected $parent_file;
protected $reponame;
protected $folder;
protected $logging = false;
protected $logger;
/**
* @var RepoSettingRepository
*/
private $repoSettingRepository;
public function __construct(Client $client)
{
$this-&amp;gt;client = $client;
$this-&amp;gt;path = base_path() . '/tests/fixtures/';
}
public function seeIfRepoHasCustomSteps()
{
$this-&amp;gt;logMock('repo_has_custom_steps');
$results = FixturizerReader::getFixture('git_show_repo_custom_steps.yml', $this-&amp;gt;path);
return $results;
}</code></pre><p/></pre><p>I am using this library to quickly make fixtures<a href="https://packagist.org/packages/alfred-nutile-inc/fixturizer"><a href="https://packagist.org/packages/alfred-nutile-inc/fixturizer">https://packagist.org/packages/alfred-nutile-inc/fixturizer</a></a></p></p><p>That makes our tests super fast since we are never hitting out APIs like Github, Pusher, etc.</p><p>I cover it<a href="https://www.alfrednutile.info/posts/120">Mocking Queue Service for faster Behat Testing</a> as well.</p><h2 id="api-testing">API Testing</h2><p>We use Behat to test our API endpoints as seen in the book<a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&rsquo;t Hate</a></p><p>For hitting the API we use basic.once</p><pre><code>#filter.php
Route::filter('basic.once', function()
{<pre><code> if(Auth::guest())
{
/**
* First authenticate as normal
*/
if ($results = Auth::onceBasic() )
{
return $results;
}
}</code></pre><p>});</code></pre><p>And the route would be</p></p><pre><code>Route::group(['prefix' => 'api/v1', 'before' => 'basic.once|auth'], function() {
///routes
}</code></pre><p>This allows our Angular app which happens to live inside the same codebase of the API to login using a standar Laravel Form but also allows other apps to access the API (Oauth coming soon)</p><h2 id="reseeding-the-db">Reseeding the DB</h2><p>This step helps with that</p><pre><code> /**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
$env = getenv('APP_ENV');
if(getenv('APP_ENV') != 'production')
{
try
{
if(getenv('APP_ENV') == 'testing')
{
copy(__DIR__ . '/../../../../app/database/stubdb.sqlite', __DIR__ . '/../../../../app/database/testing.sqlite');
}
else
{
exec("php artisan migrate:refresh --seed -n --env=$env");
}
}
catch(\Exception $e)
{
throw new \Exception(sprintf("Error seeding the database %s", $e->getMessage()));
}
} else {
throw new \Exception(sprintf("You can not seed production"));
}
}</code></pre><p>I cover more on that<a href="https://www.alfrednutile.info/posts/117">PHP quick fixture data for phpunit testing</a></p><h2 id="loading-app">Loading APP</h2><p>FeatureContext has a BaseContext that has these methods</p><pre><code> public function setApp()
{
$app = new Illuminate\Foundation\Application;
$env = $app->detectEnvironment(
function()
{
if(!getenv('APP_ENV'))
{
Dotenv::load(__DIR__ .'/../../../../');
}
return getenv('APP_ENV');
}
);
$app->bindInstallPaths(require __DIR__ . '/../../../../bootstrap/paths.php');
$framework = $app['path.base'].
'/vendor/laravel/framework/src';
require $framework.'/Illuminate/Foundation/start.php';
$this->app = $app;
$this->app->boot();
$this->env = $env;
}<pre><code>public function getApp()
{
return $this-&amp;gt;app;
}</code></pre><p/></pre><p>On the __construct it does</p></p><pre><code> public function __construct(array $parameters) {
$config = isset($parameters['guzzle']) &amp;&amp; is_array($parameters['guzzle']) ? $parameters['guzzle'] : [];
$config['base_url'] = (isset($parameters['base_url'])) ? $parameters['base_url'] : false;
$this->parameters = $parameters;
$this->client = new Client($config);
$this->iSetCredentials();
Factory::$factoriesPath = 'app/tests/factories';
$this->setApp();
}</code></pre><h2 id="laracast-testdummy--factories">Laracast TestDummy / Factories</h2><p>One example of using factories is a step like this</p><pre><code> /**
* @Given /^I create person fixture with "([^"]*)" id$/
*/
public function iCreatePersonFixtureWithId($arg1)
{
Factory::create('TheHub\Profile\User', [ 'id' => $arg1 ]);
}</code></pre><p>Using the Laracast TestDummy library I can quickly stub out data for the test.</p></description><tags>laravel, php, behat, angular</tags></item><item><title>Sqlite and Laravel</title><link>https://alfrednutile.info/posts/128/</link><pubDate>Sun, 18 Jan 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/128/</guid><description><p>It is really really nice to use this for testing and local since any reseed work is quick.</p><p>Overall the swap out is easy and I do not think, so far, there has been any issues going to mysql on production.</p><p>The only two things to set over all is</p><h2 id="seeding">Seeding</h2><p>In my DatabaseSeeder.php file I set this</p><pre><code>&lt;?php<p>use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\DB;</p><p>class DatabaseSeeder extends Seeder {</p><pre><code>/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Eloquent::unguard();
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
if(DB::getDriverName() != 'sqlite') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}</code></pre><p>}</p><p/></pre><p>This allows me to reseed without issues.</p></p><h2 id="null-fields">Null fields</h2><p>On fields that are allowed to be null just add this</p><pre><code>&lt;?php<p>use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;</p><p>class AddGithubTokenToUsersTable extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;string('name')-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('users', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('name');
});
}</code></pre><p>}</p><p/></pre><p>Check out<a href="https://www.alfrednutile.info/posts/112">Speeding up PHPunit tests and Behat in Laravel for Database refreshes</a> to see more info of how you can use this.</p></p><p>Also see<a href="https://www.alfrednutile.info/posts/63">php artisan migrate:reset not working</a> for some extra setup.</p><h2 id="update-2-11-2015">Update 2-11-2015</h2><p><a href="https://twitter.com/cavanaghacea">Andrew Cavanagh</a> noted that since renameColumn does not work with Sqlite you can do this to drop and make the column. Also without the two steps in<code>up()</code> seeding failed.</p><pre><code> /**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table->dropColumn('bundle_id');
});<pre><code> Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;string('project_id', 36)-&amp;gt;nullable();
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::table('diff_requests', function(Blueprint $table)
{
$table-&amp;gt;dropColumn('project_id');
$table-&amp;gt;string('bundle_id', 36)-&amp;gt;nullable();
});
}</code></pre><p/></pre></p></description><tags>laravel, php, sqlite</tags></item><item><title>Timing PHPUnit Tests</title><link>https://alfrednutile.info/posts/127/</link><pubDate>Wed, 31 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/127/</guid><description><p>Maybe there is a better way to do this? But using this article<a href="https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/">https://fatalfailure.wordpress.com/2011/08/22/detecting-slow-tests-with-phpunit/</a> I was able to find a hanging test.</p><h1 id="setup">Setup</h1><p>I already have an xml file at the root of my project so I added to that that listener.</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;phpunit backupGlobals="false"
backupStaticAttributes="false"
bootstrap="tests/bootstrap.php"
colors="true"
convertErrorsToExceptions="true"
convertNoticesToExceptions="true"
convertWarningsToExceptions="true"
processIsolation="false"
stopOnFailure="true"
syntaxCheck="false"
>
&lt;listeners>
&lt;listener file="./app/tests/listeners/TestTimesListener.php" />
&lt;/listeners>
&lt;testsuites>
&lt;testsuite name="Application Test Suite">
&lt;directory>./app/tests/BehatEditor/Tests&lt;/directory>
&lt;directory>./app/tests/TheHub/Tests&lt;/directory>
&lt;exclude>./app/tests/BehatEditor/Tests/Migrations&lt;/exclude>
&lt;exclude>./app/tests/DMPIntegration&lt;/exclude>
&lt;/testsuite>
&lt;/testsuites>
&lt;/phpunit></code></pre><p>the lines are</p><pre><code> &lt;listeners>
&lt;listener file="./app/tests/listeners/TestTimesListener.php" />
&lt;/listeners></code></pre><p>That I added.</p><p>Then that file I ended up with this</p><pre><code>&lt;?php<p>class PHPUnitTestListener implements PHPUnit_Framework_TestListener {
private $time;
private $timeLimit = 0;</p><pre><code>public function startTest(PHPUnit_Framework_Test $test) {
$this-&amp;gt;time = time();
}
public function endTest(PHPUnit_Framework_Test $test, $time) {
$current = time();
$took = $current - $this-&amp;gt;time;
if($took &amp;gt; $this-&amp;gt;timeLimit ) {
echo &amp;quot;\nName: &amp;quot;.$test-&amp;gt;getName().&amp;quot; took &amp;quot;.$took . &amp;quot; second(s) (from: $this-&amp;gt;time, to: $current)\n&amp;quot;;
}
}
public function addError(PHPUnit_Framework_Test $test, Exception $e, $time) {
}
public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time) {
}
public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time){
}
public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time) {
}
public function startTestSuite(PHPUnit_Framework_TestSuite $suite) {
}
public function endTestSuite(PHPUnit_Framework_TestSuite $suite) {
}
/**
* Risky test.
*
* @param PHPUnit_Framework_Test $test
* @param Exception $e
* @param float $time
* @since Method available since Release 4.0.0
*/
public function addRiskyTest(PHPUnit_Framework_Test $test, Exception $e, $time)
{
// TODO: Implement addRiskyTest() method.
}</code></pre><p>}</code></pre><p>Right now I am only using startTest and endTest.</p></p><p>Finally all my tests have a TestCase class they share so in there I ended up with</p><pre><code>&lt;?php<p>use Faker\Factory as Faker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Mockery as m;</p><p>class TestCase extends Illuminate\Foundation\Testing\TestCase {</p><pre><code>public function setUp()
{
parent::setUp();
$this-&amp;gt;listener = new PHPUnitTestListener();
$this-&amp;gt;faker = Faker::create();
$this-&amp;gt;prepareForTests();
$this-&amp;gt;listener-&amp;gt;startTest($this);
}
public function tearDown()
{
$this-&amp;gt;listener-&amp;gt;endTest($this, time());
parent::tearDown();
}</code></pre><p/></pre><p>Overall it is pretty simple once the other post pointed it out. Now to use all the other listeners.</p></p></description><tags>php, phpunit, testing</tags></item><item><title>Reusable UI/API CRUD Laravel and Angular</title><link>https://alfrednutile.info/posts/126/</link><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/126/</guid><description><p><a href="https://github.com/alnutile/angular_stubber">related repo</a></p><p>Working on a recent project it finally hit me how repetitive then need was to make a Resource at the API level and to make the UI to Create, Retrieve, Update, Delete, Index. And how easy it would be to make a foundation for this to use for each Resource keeping the UI goals consistent and simple between these Resources. With this came also a set of API tests in Behat that could also be used with the project.</p><p>What I will cover below is building out the foundation for this code and using it in a &lsquo;real life&rsquo; example.</p><p>You will end up with a UI like this</p><h2 id="index">Index</h2><p>Simple search, create and edit</p><p><img src="https://dl.dropboxusercontent.com/s/9hwu9xzxvlriapc/index.png?dl=0" alt="index"/><h2 id="modal-create">Modal Create</h2><p>Simple Create leaving complexities for Edit</p><p><img src="https://dl.dropboxusercontent.com/s/x5k1zkixgp3a95j/create.png?dl=0" alt="create"/><h2 id="modal-edit">Modal Edit</h2><p><img src="https://dl.dropboxusercontent.com/s/tix8hql68omwvxh/edit.png?dl=0" alt="edit"/><h1 id="now-for-the-code">Now for the code</h1><h2 id="api">API</h2><p>The API follows this pattern</p><h3 id="route">Route</h3><p>Build all the info into one namespace. For example using the a resource like the one in the images above call People and a name space of CoreApp.</p><pre><code>CoreApp\PeopleApi</code></pre><p>What is in here is (we will cover each in detail)</p><p><img src="https://dl.dropboxusercontent.com/s/2go33ai45av8syr/people.png?dl=0" alt="people"/><p>The route file then has</p><pre><code>&lt;?php<p>Route::get(&lsquo;people&rsquo;, &lsquo;CoreApp\People\PeopleController@getAll&rsquo;);
Route::get(&lsquo;people/{uuid}&rsquo;, &lsquo;CoreApp\People\PeopleController@getOne&rsquo;);
Route::post(&lsquo;people&rsquo;, &lsquo;CoreApp\People\PeopleController@postResource&rsquo;);
Route::put(&lsquo;people/{uuid}&rsquo;, &lsquo;CoreApp\People\PeopleController@putResource&rsquo;);</code></pre><p>By using put and post Resource we all of this easier to reuse.</p></p><p>Then include this in your main route file for Laravel or register it with a provider.</p><pre><code>#app/routes.php
require_once(__DIR__ . '/App/PeopleApi/routes.php');</code></pre><p>So now the routes are in place lets go to the Controller</p><h3 id="controller">Controller</h3><pre><code>&lt;?php<p>namespace App\People;</p><p>use App\Teams\Team; //some other model
use App\Users\User; //some other model we rely on
use App\BaseController;
use App\People\PeopleService;//keep logic out of controller
use App\Services\ResponseServices; //just an example of a consistent response patter
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;</p><p>class PeopleController extends BaseController {</p><pre><code>/**
* @var PeopleService
*/
private $peopleService;
public function __construct(PeopleService $service, ResponseServices $responseServices)
{
$this-&amp;gt;service = $peopleService; //@NOTE name it service not people service to ease the reuse.
$this-&amp;gt;responseServices = $responseServices;
}
/**
* @Get('api/v1/people
*/
public function getAll()
{
try
{
$results['people'] = $this-&amp;gt;service-&amp;gt;getAll();
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Get('api/v1/people/{uuid}
*/
public function getOne($uuid)
{
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;getOne($uuid);
if(!empty($results['person']))
{
$results['roles'] = Role::all();
$results['teams'] = Team::all();
}
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Loaded People&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Getting People Failed %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Post('api/v1/people')
*/
public function postResource()
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results['person'] = $this-&amp;gt;service-&amp;gt;postPerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Team&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}
/**
* @Put('api/v1/people/{uuid}
*/
public function putResource($uuid)
{
try
{
$store = $this-&amp;gt;getInput();
} catch(\Exception $e)
{
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), &amp;quot;PUT Failed&amp;quot;), 422);
}
$validator = Validator::make($store, $this-&amp;gt;service-&amp;gt;rulesCreate);
if(!$validator-&amp;gt;passes()) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($validator-&amp;gt;messages(), &amp;quot;Validation failed&amp;quot;), 422);
}
try
{
$results = $this-&amp;gt;service-&amp;gt;updatePerson($store);
/**
* @TODO move Response to a class to not have it tightly coupled here
*/
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($results, &amp;quot;Updated Person&amp;quot;), 200);
}
catch(\Exception $e) {
return Response::json($this-&amp;gt;responseServices-&amp;gt;respond($e-&amp;gt;getMessage(), sprintf(&amp;quot;Error Updating Person %s&amp;quot;, $e-&amp;gt;getMessage())), 422);
}
}</code></pre><p>}</code></pre><p>The Controller talks to the service to get the respond to the request and the consistently responds back using the responseService. (more on that shortly)</p></p><h3 id="the-service">The Service</h3><pre><code>&lt;?php<p>namespace CoreApp\People;</p><p>use CoreApp\Models\User;
use CoreApp\Services\UserService;
use CoreApp\Helpers\RoleHelper;
use CoreApp\Helpers\ThrowAndLogErrors;
use CoreApp\Services\BaseServices;
use CoreApp\Helpers\UuidHelper;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;</p><p>class PeopleService extends BaseServices {
use RoleHelper;
use ThrowAndLogErrors;
use UuidHelper;</p><pre><code>/**
* @var User
*/
private $user;
public $rulesCreate = [
'email' =&amp;gt; 'required|email'
];
public function __construct(UserService $user)
{
$this-&amp;gt;user = $user;
}
public function getAll()
{
try
{
$user_id = Auth::user()-&amp;gt;id;
if($this-&amp;gt;isInRole($user_id, ['role-admin']))
{
$results = $this-&amp;gt;user-&amp;gt;all();
} else {
$results = [];
}
}
catch(NotInRoleException $e)
{
$results = [];
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function getOne($uuid)
{
try
{
if($this-&amp;gt;isAdminRoleOrOwner($uuid))
{
$results = $this-&amp;gt;user-&amp;gt;getPerson($uuid);
} else {
$results = [];
}
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting people message &amp;quot; . $e-&amp;gt;getMessage());
}
return $results;
}
public function updatePerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
try
{
$user = User::findOrFail($store['id']);
$store = (array) $store;
$user-&amp;gt;email = $store['email'];
(isset($store['image'])) ? $user-&amp;gt;image = $store['image'] : false;
$user-&amp;gt;save();
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error updating team %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
public function postPerson($store)
{
$this-&amp;gt;isCurrentUserInRoleAdmin();
$user = new User();
try
{
/**
* @TODO move this into a CoreApp service
* I am moving away from the BehatEditor Service
*/
$uuid = (!isset($store['id'])) ? $this-&amp;gt;generateNewId()-&amp;gt;toString() : $store['id'];
$user-&amp;gt;id = $uuid;
$user-&amp;gt;email = $store['email'];
$user-&amp;gt;password = Hash::make(Str::random(32));
$user-&amp;gt;image = $user-&amp;gt;default_image;
$user-&amp;gt;save();
$user = User::with('roles')-&amp;gt;find($uuid); //due to uuid work
if(isset($store['roles']))
{
$user = $this-&amp;gt;syncRoles($user, $store);
}
}
catch(\Exception $e)
{
$message = sprintf(&amp;quot;Error creating user %s&amp;quot;, $e-&amp;gt;getMessage());
$this-&amp;gt;throw_and_log_error($message);
}
return $user;
}
protected function syncRoles($user, $store)
{
if(isset($store['roles']))
{
foreach($store['roles'] as $role)
{
$roles[] = $role['id'];
}
$user-&amp;gt;roles()-&amp;gt;sync($roles);
}
return $user;
}</code></pre><p>}</code></pre></p></description><tags>laravel, php, angular</tags></item><item><title>Embed Template Data in View (Angular, Laravel)</title><link>https://alfrednutile.info/posts/122/</link><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/122/</guid><description><p>Sometimes, when your frontend shares the same view rendering of the backend, you can store data in the window object. This can save you queries to the backend when, for example, Profile Data that shows on every pages request.</p><p><img src="https://dl.dropboxusercontent.com/s/app0y31xxi3uk80/profile_example.png?dl=0" alt="profile"/><h1 id="embed-output-into-window-or-window">Embed output into window or $window</h1><p>In the Controller I am using to output the Angular template (app/views/main.blade.php for example) I inject the window data that I want all pages to have.</p><pre><code> public function index()
{
$user_id = $this->getUserId();
$profile = $this->userService->getJustProfile($user_id);
$token = csrf_token();
JavaScript::put(
[
'profile' => $profile,
'token' => $token
]
);
return View::make('layouts.main');
}</code></pre><p>So every time the template is rendered it will add this data to the output. Later on I make use of that inside my Angular app using a MainCtrl.</p><h1 id="mainctrl-wrapping-it-all">MainCtrl Wrapping it All</h1><pre><code>&lt;body ng-controller="MainCtrl as main"></code></pre><p>This controller gets called at every page load to setup this base info for the site.</p><pre><code>(function(){
'use strict';<pre><code>function MainCtrl($rootScope, $window) {
var vm = this;
vm.profile = {};
vm.activate = activate;
vm.activate();
///////
function activate()
{
vm.profile = $window.profile;
}
}
/**
*
* Pass all functions into module
*/
angular
.module('app')
.controller('MainCtrl ', MainCtrl)</code></pre><p>})();</code></pre><h1 id="template-calling-to-main">Template calling to Main</h1></p><p>Now on those page that renders the profile image, name and email on the top left of the site I call to that scope.</p><pre><code>&lt;nav class="navbar-default navbar-static-side" role="navigation">
&lt;div class="sidebar-collapse">
&lt;ul side-navigation class="nav" id="side-menu">
&lt;li class="nav-header"><pre><code> &amp;lt;div class=&amp;quot;dropdown profile-element&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;col-lg-6 col-md-6 col-sm-6 col-xs-6&amp;quot;&amp;gt;
&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;
&amp;lt;img alt=&amp;quot;image&amp;quot; class=&amp;quot;img-responsive img-circle&amp;quot; src=&amp;quot;img/profiles/{{main.profile.image}}&amp;quot;/&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;a class=&amp;quot;dropdown-toggle&amp;quot; href&amp;gt;
&amp;lt;span class=&amp;quot;clear&amp;quot;&amp;gt;
&amp;lt;span class=&amp;quot;block m-t-xs&amp;quot;&amp;gt;
&amp;lt;strong class=&amp;quot;font-bold&amp;quot;&amp;gt;
{{ main.profile.email }}
&amp;lt;/strong&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;text-muted text-xs block&amp;quot;&amp;gt;Profile&amp;lt;b class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;ul class=&amp;quot;dropdown-menu animated fadeInRight m-t-xs&amp;quot;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a ui-sref=&amp;quot;profile&amp;quot;&amp;gt;Profile&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/auth/logout&amp;quot;&amp;gt;Logout&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;logo-element&amp;quot;&amp;gt;
BE
&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;</code></pre><p/></pre></p></description><tags>php, laravel, angularjs</tags></item><item><title>Quick fixture data and mocking external APIs</title><link>https://alfrednutile.info/posts/121/</link><pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/121/</guid><description><p>We are using a number of external APIs on a project (Pusher, Iron.io, Github, Saucelabs etc). Github is key as we are using it to store and retrieve files from for editing on the site. When running phpunit it is easy to mock these Classes but when running behat tests or protractor we had to do to things to make it possible to mock the tests and not hit the external APIs.</p><h1 id="swapping-out-providers">Swapping out Providers</h1><p>Using Laravel&rsquo;s config/app.php settings we can easily swap out providers for different environments. For example config/testing/app.php could register my GithubMock class.</p><p>The GithubMock class just extends the real Github Service but overrides the methods that I do not want to really call out to Github eg create file, update file etc.</p><p>That is super easy but now how to return good data.</p><h1 id="quick-fixtures">Quick Fixtures</h1><p>I made a Facade package called Fixturizer<a href="https://github.com/alfred-nutile-inc/fixturizer">https://github.com/alfred-nutile-inc/fixturizer</a></p><p>You can see in the readme.md how to use it to quickly write and read fixture data that you can get from any of these requests. Then when it is the turn of the mocked provider to return the results it just loads up this fixture and you are set. (PHP VCR is another option as well)</p><p>One example</p><pre><code> public function tokens($path)
{
$this->logMock('tokens');
$files = FixturizerReader::getFixture('github_token_show.yml', $this->path);
return $files;
}</code></pre><p>The method overrides the parent class (the real provider) &ldquo;tokens&rdquo; and returns the needed fixture info. I log it as well so I can double check the status of it.</p><p>Now the tests not only run faster but are less fragile since sometimes the services would timeout.</p></description><tags>laravel, php</tags></item><item><title>Mocking Queue Service for faster Behat Testing</title><link>https://alfrednutile.info/posts/120/</link><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/120/</guid><description><p>As I wrote about<a href="http://www.alfrednutile.info/posts/103/edit">here</a> I am using behat to tests our APIs. I could have used Laravel&rsquo;s guzzle and phpunit integration to test the controllers but I decided to go with Behat. But this means when hitting those endpoints I need to find another way to mock services.</p><p>Since Laravel has you register Providers you can easily replace or override a provider. In this case the &ldquo;&lsquo;Illuminate\Queue\QueueServiceProvider&rsquo;&rdquo; provider with my own.</p><p>This allows me to test in my endpoints leaving the queue related classes to be tested during phpunit testing. Using the queue &ldquo;sync&rdquo; driver would help too but it would then cause this to not be an isolated tests since the queue would trigger another classes method. (@fire).</p><h2 id="setup-a-class-to-use-as-the-new-provider">Setup a class to use as the new provider</h2><pre><code>&lt;?php<p>namespace App\Providers;</p><p>use Illuminate\Queue\QueueServiceProvider;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\ServiceProvider;
use Mockery as m;</p><p>class MockedQueue {
public function push($args)
{
return true;
}
}</p><p>class QueueMockProvider extends QueueServiceProvider {</p><pre><code>/**
* Register the service provider.
*
* @return void
*/
public function register()
{
if(getenv('APP_ENV') == 'local' || getenv('APP_ENV') == 'testing')
{
$this-&amp;gt;app-&amp;gt;bind('queue', function(){
$queue = new MockedQueue();
Log::info(&amp;quot;Mock queue in use&amp;quot;);
return $queue;
});
} else {
parent::register();
}
}</code></pre><p>}</code></pre><h2 id="register-mocked-queue-over-real-queue">Register Mocked Queue over Real Queue</h2></p><p>Instead of setting it for config/local/queue.php and config/testing/queue.php I set it in the main config/app.php. I would like to come back to using the config/app.php but had some issues.</p><pre><code>'Illuminate\Queue\QueueServiceProvider',</code></pre><p>becomes</p><pre><code>'App\Providers\QueueMockProvider',</code></pre><p>That was it. From there on my queue related API tests did not trigger a queued job which in this case was supper helpful those where calling external APIs.</p></description><tags>behat, laravel, php</tags></item><item><title>Docker, MailCatcher and Laravel</title><link>https://alfrednutile.info/posts/118/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/118/</guid><description><p>I wrote an article on Mailcatcher and Homestead<a href="http://www.alfrednutile.info/posts/93">here</a> but as I move into docker I wanted the same setup for my docker website container which was super easy.</p><p>First I downloaded this<a href="https://registry.hub.docker.com/u/schickling/mailcatcher/">docker images</a> and ran the command as he noted. Once done I had the website up and running.</p><p><img src="https://dl.dropboxusercontent.com/s/w1mxwcw8129raxg/docker_behat.png?dl=0" alt="mailcatcher_docker"/><p>From there I just started my website container and made a link.</p><pre><code>docker run -d -p 80:80 --name website --link mailcatcher:mailcatcher -v $PWD:/share alnutile/nginxlaravel:0.3.4 /sbin/my_init</code></pre><p>From there I was able to use the server set environments to connect to it as needed. Or more simply I just updated my local/mail.php as follows</p><pre><code>&lt;?php<p>return array(</p><pre><code>'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; getenv('MAILCATCHER_PORT_1080_TCP_ADDR'),
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'foobar@gmail.com', 'name' =&amp;gt; 'Behat Editor Admin'),
'encryption' =&amp;gt; '',
'username' =&amp;gt; null,
'password' =&amp;gt; null,
'pretend' =&amp;gt; false,</code></pre><p>);</p><p/></pre><p>Now I get to see the email as a user would see it and click around as needed!</p></p></description><tags>laravel, php</tags></item><item><title>Redirecting back to original Angular.js destination from Laravel Auth</title><link>https://alfrednutile.info/posts/119/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/119/</guid><description><p><strong>UPDATE</strong></p><p>You can see in the<a href="https://www.alfrednutile.info/posts/119#comment-2448723710">comments</a> some updated info.</p><p>When a user visits an Angular url (not html5) like<a href="http://foo.com/app#some/long/path">http://foo.com/app#some/long/path</a></p><p>Then gets redirected to<a href="http://foo.com/auth/login">http://foo.com/auth/login</a> because they are not logged in. It would be nice to send them right back after that.</p><p>These steps will make that possible.</p><p>Include this file in your authentication page.</p><pre><code>#intended.js
(function(){
'use strict';<pre><code>var intended = window.location.hash;
(intended.length &amp;gt; 0) ? jQuery.cookie('intended', '/app' + intended) : jQuery.cookie('intended', '/app');</code></pre><p>})();</code></pre><p>Then add this library to your app jquery.cookies.js and load that, this script and of course jquery.</p></p><p>Finally after an successful auth add this</p><pre><code>return Redirect::to($_COOKIE['intended']);</code></pre><p>Laravel 4.2 = app/controllers/AuthController.php:61</p><p>Laravel 5 = app/Http/Controllers/AuthController.php:52</p></description><tags>laravel, php, angular</tags></item><item><title>PHP quick fixture data for phpunit testing</title><link>https://alfrednutile.info/posts/117/</link><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/117/</guid><description><p>You can use VCR or other libraries to make fixture data. But sometimes you can just make the request and save the results using this technique. From then on you mock and return the data.</p><h1 id="get-the-data">Get the data.</h1><p>In this example I had a Client that would get data and return it for import. I was testing out the class that would take this data and import it and do other things. So I make my phpunit test methods of that class (not the Client it is fully tested)</p><pre><code>
/**
* @test
*/
public function should_get_data_to_import()
{
//Load up the client I will later mock, but to get some data to mock
$client = new Client();
//Get the results (api return json)
$results = $client->getData();
//Get the yaml library I am using to covert it to Yaml
$yaml = new Yaml();
//Convert it to Yaml from Array
$results_yml = $yaml->dump($results);
//Save it for now
file_put_contents('/tmp/data.yml', $results_yml);
}<p/></pre><p>Once that is done I copy that data.yml file to fixtures/data.yml which is in the tests folder. Here is a quick look at the folders.</p></p><pre><code>tests
tests/fixtures
// @NOTE this is the file we are using for the test example above
tests/NameSpace/Tests/ClassTest.php</code></pre><p>Finally I rewrite that same test method as</p><pre><code>/**
* @test
*/
public function should_get_data_to_import()
{
$yaml = new Yaml();
$fixture = $yaml->parse(__DIR__ . '/../fixtures/data.yml');
$client = m::mock();
$client->shouldReceive('getData')->andReturn($fixture);
$classTesting new ClassTest($client); //we inject the mock into it
$classTesting->importData();
$this->assertCount(100, $classTesting->getDataImported());
}</code></pre><p>The client in this case if a fully tested standalone client so I am not testing it. Just my use of it to migrate data.</p></description><tags>php, phpunit, testing</tags></item><item><title>Laravel and Angular Time/Date Display</title><link>https://alfrednutile.info/posts/114/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/114/</guid><description><p>Angular seems to, by default, easily deal with milliseconds,<a href="https://docs.angularjs.org/api/ng/filter/date">https://docs.angularjs.org/api/ng/filter/date</a>.</p><p>Laravel outputs created_at as a YYYY-MM-DD HH:MM:SS format that just does not work well with the Angular date filter.</p><p>It is really simple to change the output of the date in Laravel just add this to your Model or BaseModel or even better Trait</p><pre><code> /**
* Leave as Timestamps for Angular
* @return array
*/
public function getDates()
{
return [];
}<pre><code>public function getCreatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}
public function getUpdatedAtAttribute($value)
{
$value = date('U', strtotime($value));
return $value * 1000;
}</code></pre><p/></pre><p>This is noted in the docs as well<a href="http://laravel.com/docs/4.2/eloquent#date-mutators"><a href="http://laravel.com/docs/4.2/eloquent#date-mutators">http://laravel.com/docs/4.2/eloquent#date-mutators</a></a> and<a href="http://laravel.com/docs/4.2/eloquent#accessors-and-mutators"><a href="http://laravel.com/docs/4.2/eloquent#accessors-and-mutators">http://laravel.com/docs/4.2/eloquent#accessors-and-mutators</a></a></p></p><p>Then in Angular I can easily format the date</p><pre><code>&lt;small>Created: {{ project.created_at | date:'yyyy-MM-dd' }}&lt;/small></code></pre></description><tags>laravel, php</tags></item><item><title>Moving Forge Deploy Script to Envoy</title><link>https://alfrednutile.info/posts/115/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/115/</guid><description><p>As we start to move off of Forge I still want the automation to take place after all tests pass.</p><p>In Codeship or Locally I just follow some instructions from here<a href="http://laravel.com/docs/4.2/ssh">http://laravel.com/docs/4.2/ssh</a></p><h1 id="locally">Locally</h1><p>Setup Envoy globally as noted.</p><p>Run envoy init</p><p>And then I pasted this into my Envoy.blade.php</p><pre><code>@servers(['dev' => 'behat_dev'])<p>@task(&lsquo;deploy_dev&rsquo;, [&lsquo;on&rsquo; => &lsquo;dev&rsquo;])
date
cd /home/forge/foo-dev
git pull origin dev
composer config -g github-oauth.github.com sometoken
composer install
composer dump-autoload
php artisan dump-autoload
php artisan migrate
php artisan migrate:refresh &ndash;seed
~/node_modules/bower/bin/bower install
npm install
php artisan queue:restart
@endtask</code></pre><h1 id="setup-you-ssh-config">Setup you .ssh config</h1></p><p>The behat_dev is a shortcut to the server I made in my ~/.ssh/config</p><pre><code>Host foo_dev
Hostname 104.111.111.111
User forge</code></pre><p>So now locally I can run</p><pre><code>envoy run deploy_dev</code></pre><h1 id="codeship">Codeship</h1><p>Setup the server</p><pre><code>sudo composer global require "laravel/envoy=~1.0"</code></pre><p>Edit your ~/.ssh/config</p><pre><code>Host behat_dev
Hostname localhost
User forge</code></pre><p>Make sure to put your key into authorized keys</p><pre><code>cd .ssh
cat id_rsa.pub >> authorized_keys</code></pre><p>Try logging in</p><pre><code>ssh behat_dev</code></pre><p>Then setup codeship</p><p>Under the Deployment settings use script</p><pre><code>ssh forge@104.111.111.111 'cd ~/foo-dev &amp;&amp; envoy run deploy_dev'</code></pre><p>Make sure you codeship public key is also on the destination server</p></description><tags>laravel, php</tags></item><item><title>Laravel 4.2 and Dotenv to set environment</title><link>https://alfrednutile.info/posts/113/</link><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/113/</guid><description><p>To start using Dotenv now it is very simple.</p><h1 id="one-include-the-library">One include the library</h1><pre><code>#composer.js
"require": {
"laravel/framework": "4.2.*",
"vlucas/phpdotenv": "1.0.*@dev"
},</code></pre><h1 id="two-update-your-startphp">Two update your start.php</h1><pre><code>#bootstrap/start.php line 27
Dotenv::load(__DIR__ .'/../');<p>$env = $app->detectEnvironment(
function()
{
return getenv(&lsquo;APP_ENV&rsquo;);
}
);</p><p/></pre><h1 id="make-sure-to-set-your-env-file">Make sure to set your .env file</h1></p><pre><code>#.env
APP_ENV='local'</code></pre><p>That is it you are set to use it for all your environments.</p><p><strong>Update</strong></p><p>For Heroku I used this instead</p><pre><code>$env = $app->detectEnvironment(
function()
{
if(!isset(getenv('APP_ENV')))
{
Dotenv::load(__DIR__ .'/../');
}
return getenv('APP_ENV');
}
);</code></pre><p>Setting the initial APP_ENV using heroku config:set APP_ENV=stage</p></description><tags>laravel, php</tags></item><item><title>Speeding up PHPunit tests and Behat in Laravel for Database refreshes</title><link>https://alfrednutile.info/posts/112/</link><pubDate>Thu, 06 Nov 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/112/</guid><description><p>This<a href="http://www.chrisduell.com/blog/development/speeding-up-unit-tests-in-php/">article</a> covers some good tips on this. Ideally you do not hit the database in unit tests but sometimes you do. Also in behat it hits the db all the time since it is at the Acceptance level.</p><h1 id="sqlite">Sqlite</h1><p>It is a great database and works. We easily can use it on running tests. When seeding the db I have my main seeding class doing this</p><pre><code>&lt;?php<p>use Illuminate\Database\Seeder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;</p><p>class DatabaseSeeder extends Seeder {</p><pre><code>/**
* Run the database seeds.
*
* @return void
*/
public function run()
{
Model::unguard();
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=0;');
}
$this-&amp;gt;call('AppTableSeeder');
$this-&amp;gt;call('ParentRequestExample');
$this-&amp;gt;call('ProductionSeeder');
if(App::environment() != 'testing') {
DB::statement('SET FOREIGN_KEY_CHECKS=1;');
}
}</code></pre><p>}</p><p/></pre><p>Since sqlite does not like this we skip it for it but not for production etc.</p></p><p>Second my config/testing/database.php looks like this (as noted in the article)</p><pre><code>&lt;?php<p>return [</p><pre><code>'default' =&amp;gt; 'sqlite',
'connections' =&amp;gt; [
'mysql' =&amp;gt; [
'driver' =&amp;gt; 'mysql',
'host' =&amp;gt; $_ENV['DB_URL'],
'database' =&amp;gt; $_ENV['DB_NAME'],
'username' =&amp;gt; $_ENV['MYSQL_USER'],
'password' =&amp;gt; $_ENV['MYSQL_PASSWORD'],
'charset' =&amp;gt; 'utf8',
'collation' =&amp;gt; 'utf8_unicode_ci',
'prefix' =&amp;gt; '',
],
'pgsql' =&amp;gt; [
'driver' =&amp;gt; 'pgsql',
'host' =&amp;gt; 'localhost',
'database' =&amp;gt; 'homestead',
'username' =&amp;gt; 'homestead',
'password' =&amp;gt; 'secret',
'charset' =&amp;gt; 'utf8',
'prefix' =&amp;gt; '',
'schema' =&amp;gt; 'public',
],
'setup' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__.'/../../database/stubdb.sqlite',
'prefix' =&amp;gt; '',
),
'sqlite' =&amp;gt; array(
'driver' =&amp;gt; 'sqlite',
'database' =&amp;gt; __DIR__ . '/../../database/testing.sqlite',
'prefix' =&amp;gt; '',
),
],</code></pre><p>];</code></pre><p>Which makes the below seeding command to setup the stub db work</p></p><pre><code>php artisan migrate:refresh --seed --database="setup" --env="testing"</code></pre><h1 id="phpunit">PHPUnit</h1><p>What I ended up with is a base TestCase like this</p><pre><code>
public function setUp()
{
parent::setUp();
$this->faker = Faker::create();
$this->prepareForTests();
}<pre><code>private function prepareForTests()
{
if(!file_exists(base_path() . '/app/database/testing.sqlite'))
{
$this-&amp;gt;refreshDb();
}
}
public function refreshDb()
{
copy(base_path() . '/app/database/stubdb.sqlite', base_path() . '/app/database/testing.sqlite');
}</code></pre><p/></pre><p>And with any new migrations I run this command</p></p><pre><code>php artisan migrate:refresh --seed --database="setup" --env="testing"</code></pre><p>That file is kept in git since it is just seed data. If there are any conflicts just rm and start over. Testing.sqlite is not kept in git.</p><p>#Behat</p><p>Behat is the same idea. In the main FeatureContext file I have</p><pre><code>
/**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
try
{
dd(getenv('APP_ENV'));
//exec("php artisan migrate:refresh --seed");
copy(__DIR__ . '/../../../../database/stubdb.sqlite', __DIR__ . '/../../../../database/testing.sqlite');
}
catch(\Exception $e)
{
throw new \Exception(sprintf("Error seeding the database %s", $e->getMessage()));
}
}</code></pre><p>So as we test the ui or api we can reload the data.</p><p>#Behat / Laravel</p><p>This package<a href="https://github.com/GuilhermeGuitte/behat-laravel">https://github.com/GuilhermeGuitte/behat-laravel</a></p><p>This integrates behat into artisan command line helping with environment settings for behat.</p></description><tags>laravel, php, behat, phpunit</tags></item><item><title>Multi Threaded Queue Processing</title><link>https://alfrednutile.info/posts/106/</link><pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/106/</guid><description><p>I needed a way to run a bunch of jobs in parallel and I am use to using the Symfony Process Component for that.</p><p>So this post will show how I did this in Laravel 4.3 via the Queue so I can remember next time.</p><p>What will come out of this is a workflow as seen here</p><div markdown=0><img src="ttps://dl.dropboxusercontent.com/s/url0i1ibk40u5o7/Screenshot%202014-09-10%2007.59.23.png?dl=" width="0"/><p>We will create two Artisan Commands. This allows us to use Symfony Process to run numerous<strong>console commands</strong> in the background.</p><p>I will not go over how to add a job to the queue there is plenty on that. I will show the class I used for the Queue and it&rsquo;s attributes.</p><pre><code>{
"job":"Foo\\\\Reporting\\\\RequestsCommandQueueRunner",
"data":{
"results_uuid":"4a13aaee-4289-4f95-afe5-ea5abaaed869"
}
}</code></pre><p>This gets pushed into the Queue. It is the &ldquo;Parent&rdquo; that will run x number of children commands. The x is defined in my .env.local.php or .env.production.php files. This way I can increase or decrease the number of threads it will run as needed.</p><p>The results_uuid is the data I need to get the children. In this case the children have that uuid in their table as belongsTo that parent.</p><h2 id="requestscommandqueuerunner">RequestsCommandQueueRunner</h2><p>This Artisan command is quite simple</p><pre><code>&lt;?php<p>#app/Foo/RequestsCommandQueueRunner.php</p><p>namespace Foo\Reporting;</p><p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\QueueServices\QueueInterface;</p><p>class RequestsCommandQueueRunner implements QueueInterface {</p><pre><code>protected $job_limit;
protected $results_uuid;
public function __construct()
{
$this-&amp;gt;job_limit = $_ENV['RESULTS_QUEUE_LIMIT'];
}
public function fire($job, $params)
{
$this-&amp;gt;results_uuid = $params['results_uuid'];
exec(&amp;quot;php artisan request:trigger $this-&amp;gt;results_uuid&amp;quot;, $results);
$job-&amp;gt;delete(); //@TODO make delete if all goes well catch error though and fail it
}</code></pre><p>}</code></pre><p>All it does is passes the parent id to the trigger command. Below is the trigger command.</p></p><p>Note too I am not using the job limit yet. Later I will make x number of Queue jobs as I divide the number of children that parent has by the limit set.</p><h2 id="requestsqueuecommand">RequestsQueueCommand</h2><pre><code>&lt;?php namespace Foo\Console;<p>#app/Foo/Console/RequestsQueueCommand.php</p><p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Process\Process;</p><p>class RequestsQueueCommand extends Command {</p><pre><code>protected $name = 'request:trigger';
protected $run = [];
protected $description = 'Trigger the running of related jobs';
protected $request_uuid;
protected $projects;
/**
* @var \Foo\Models\ReportingOverviewBatchRequestJob
*/
private $reporting_overview_batch_request_jobs;
public function __construct(
ReportingOverviewBatchRequestJob $reporting_overview_batch_request_jobs
)
{
parent::__construct();
$this-&amp;gt;reporting_overview_batch_request_jobs = $reporting_overview_batch_request_jobs;
}
public function fire()
{
$this-&amp;gt;request_uuid = $this-&amp;gt;argument('request_uuid');
$this-&amp;gt;setRelatedProjects();
$this-&amp;gt;setRun();
$this-&amp;gt;runRelatedProjectsCommand();
return &amp;quot;Fired&amp;quot;;
}
protected function getArguments()
{
return array(
array('request_uuid', InputArgument::REQUIRED, 'The uuid of the Request to trigger the jobs for'),
);
}
protected function setRelatedProjects()
{
$projects =
$this-&amp;gt;reporting_overview_batch_request_jobs-&amp;gt;getAllJobsForReportOverviewBatchRequestUuid($this-&amp;gt;request_uuid);
$this-&amp;gt;projects = $projects-&amp;gt;toArray();
return $this-&amp;gt;projects;
}
protected function setRun()
{
foreach($this-&amp;gt;projects as $project)
{
$this-&amp;gt;addToRun($project['id']);
}
}
protected function runRelatedProjectsCommand()
{
foreach($this-&amp;gt;run as $process)
{
$process-&amp;gt;start();
}
while(count($this-&amp;gt;run) &amp;gt; 0)
{
foreach($this-&amp;gt;run as $key =&amp;gt; $process)
{
if(!$process-&amp;gt;isRunning())
{
\Log::info(&amp;quot;Done running process&amp;quot;);
unset($this-&amp;gt;run[$key]);
}
}
}
}
protected function addToRun($project_id)
{
$this-&amp;gt;run[] = new Process(&amp;quot;php artisan request:run $project_id&amp;quot;);
}</code></pre><p>}</p><p/></pre><p>Here is where things get interesting. I begin the work of finding the children Ids then making an array of<strong>console commands</strong> to run using the children id as the argument I pass.</p></p><p>The Process Component allows me to<strong>start them in the background</strong> and then check on them while they are running.</p><p>Now for the command it runs &ldquo;php artisan request:run $project_id&rdquo;</p><h2 id="requestsjobruncommand">RequestsJobRunCommand</h2><p>This is the process that does the long running work. In this case logs into Github, get some info and reports on it.</p><pre><code>&lt;?php namespace Foo\Console;<p>use Foo\Models\ReportingOverviewBatchRequestJob;
use Foo\Services\RequestJobRunService;
use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;</p><p>class RequestsJobRunCommand extends Command {</p><pre><code>protected $name = 'request:run';
protected $description = 'Run the related job';
protected $job_uuid;
/**
* @var RequestJobRunService
*/
private $requestJobRunService;
/**
* Id of the job we will run
* @var
*/
protected $related_job;
public function __construct(RequestJobRunService $requestJobRunService)
{
parent::__construct();
$this-&amp;gt;requestJobRunService = $requestJobRunService;
}
public function fire()
{
$this-&amp;gt;job_uuid = $this-&amp;gt;argument('job_uuid');
$this-&amp;gt;loadTheJobsInfo();
$this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()-&amp;gt;authenticate();
$this-&amp;gt;getJobsAndCount();
return &amp;quot;Fired&amp;quot;;
}
protected function getJobsAndCount()
{
try {
$tests = $this-&amp;gt;getRelatedTests();
$tests_count = count($tests);
\Log::info(sprintf(&amp;quot;Updating ReportingOverviewRequest with uuid %s&amp;quot;, $this-&amp;gt;job_uuid));
$this-&amp;gt;related_job-&amp;gt;status = 1;
$this-&amp;gt;related_job-&amp;gt;number_of_tests = $tests_count;
$this-&amp;gt;related_job-&amp;gt;save();
} catch(\Exception $e) {
$this-&amp;gt;related_job-&amp;gt;status = 1; // mark done for now though a fail noted in message box
$this-&amp;gt;related_job-&amp;gt;message = $e-&amp;gt;getMessage();
$this-&amp;gt;related_job-&amp;gt;save();
\Log::error(sprintf(&amp;quot;Error processing job %s for request job request parent uuid %s error &amp;quot;, $this-&amp;gt;related_job-&amp;gt;id, $this-&amp;gt;related_job-&amp;gt;reporting_overview_batch_request_id, $e-&amp;gt;getMessage()));
}
}
protected function getRelatedTests()
{
try {
return $this-&amp;gt;requestJobRunService-&amp;gt;getGithubApi()
-&amp;gt;setReponame($this-&amp;gt;related_job-&amp;gt;repo_name)
-&amp;gt;setAccountName($this-&amp;gt;related_job-&amp;gt;account_name)
-&amp;gt;setBranch($this-&amp;gt;related_job-&amp;gt;branch)
-&amp;gt;index($this-&amp;gt;related_job-&amp;gt;folder);
}
catch(\Exception $e)
{
throw new \Exception(&amp;quot;Error getting index of github &amp;quot; . $e-&amp;gt;getMessage());
}
}
protected function loadTheJobsInfo()
{
$this-&amp;gt;related_job = $this-&amp;gt;requestJobRunService-&amp;gt;getReportingOverviewBatchRepository()-&amp;gt;getReportingOverviewBatchRequestJobsModelInterface()
-&amp;gt;findOrFail($this-&amp;gt;job_uuid);
}
protected function getArguments()
{
return array(
array('job_uuid', InputArgument::REQUIRED, 'The uuid of the related request job to run'),
);
}</code></pre><p>}</code></pre><p>There still is some work to do. I have to set the limit so my initial run does not timeout. I also need to clean up some code so that these classes are digging so deep into the other classes.</p></p><p>But this was just to show how to use Symfony Process Component, Laravel Queue, and Laravel Artisan to run a multi threaded task.</p></description><tags>laravel, php, note2self, 4.3</tags></item><item><title>Team Style Guides and Mind Set</title><link>https://alfrednutile.info/posts/105/</link><pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/105/</guid><description><p>Been sharing this info with team members a bit lately and want to post it here for reference.
Though there is no ONE way to do any of this there are ways that scale better than others. But more importantly having one way as a team to do things can be key to projects from beginning to end (eg the rest of the projects life!)</p><h1 id="project-style-guides">Project Style Guides</h1><p><a href="https://kindle.amazon.com/work/the-clean-coder-professional-programmers-ebook/B004SJU478/B0050JLC9Y">The Clean Coder</a> by Robert Martin book is a look at being a &ldquo;Professional&rdquo; coder and all that comes with it.
It is a great look at not only how one should be in the role of a Programmer but what to expect of each other as a team.</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/51MoTaVrS7L._SS130_.jpg" alt="clean code"/><p><a href="https://kindle.amazon.com/work/domain-driven-design-tackling-complexity-software-ebook/B001KBG6RO/B00794TAUG">Domain Driven Deisgn</a>
A great look at being a programmer that not only makes code but more importantly bridges the gap between the vision of the business with the goals of the code.</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/51WLtI-uLcL._SS130_.jpg" alt="ddd"/><hr><h1 id="php-style-guides">PHP Style Guides</h1><p>Back to Robert Martin again on this to start<a href="https://kindle.amazon.com/work/clean-code-handbook-software-craftsmanship-ebook/B001GTWCJG/B001GSTOAM">Clean Code</a></p><p>It is not about PHP directly but it all applies to good Oo PHP design patterns and thinking. There are so many classics he quotes that could be added here as well.</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/41XojFFhYlL._SS130_.jpg" alt="clean code"/><hr><h1 id="angular-style-guides">Angular Style Guides</h1><p>I use to start with Angular Seed but always thought it fell short when the project grew and this guide made it clear to me why. IMO it is a much better approach to Angular<a href="https://github.com/johnpapa/angularjs-styleguide">John Papa</a>. This guide includes examples which is great.</p><hr><h1 id="api-guides">API Guides</h1><p>There are a number of great books on this as well. Right now a short and simple look at how to make an API, I think, is<a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&rsquo;t Hate</a> by Phil Sturgeon. Great code example too on Behat and API testing</p><p><img src="https://s3.amazonaws.com/titlepages.leanpub.com/build-apis-you-wont-hate/small?1408731468" alt="apis"/><hr><h1 id="uml-20">UML 2.0</h1><p>A unified means to communicate ideas to each other and to product owners. Before digging into code this is a great way for teams to communicate all the way from higher level overview down to the classes and constructors.</p><p>Seems the Gang of Four book, Robert Martin books and Domain Driven Design all point to this as a way to sketch out ideas or even use it as a long term blueprint to go hand and hand with deployed code. The<a href="http://www.amazon.com/UML-2-0-Nutshell-OReilly-ebook/dp/B0026OR2L8/ref=tmm_kin_title_0?_encoding=UTF8&amp;sr=8-1&amp;qid=1410697423">UML 2.0 in a Nutshell</a> along with the more in depth O&rsquo;Reilly book UML 2.0 second edition.</p><p><img src="http://ecx.images-amazon.com/images/I/41FVsizkpIL._BO2,204,203,200_PIsitb-sticker-v3-big,TopRight,0,-55_SX278_SY278_PIkin4,BottomRight,1,22_AA300_SH20_OU01_.jpg" alt="nutshell"/><hr><h1 id="bdd--tdd">BDD / TDD</h1><p>Testing is really key I think know one anymore doubts that. What you end up with is Code that you can refactor and make better over time with confidence. And as a team that is important. It also leads to one of the best sources of documentation. This presentation talks about<a href="https://amsterdam2014.drupal.org/session/doing-behaviour-driven-development-behat">BDD</a> and<a href="http://everzet.com/post/99045129766/introducing-modelling-by-example">article</a> really take it to the next level. As the test become the glue between the goals of the business and the code of the developers.</p><h1 id="final-notes">Final Notes</h1><p>Robert Martin really hones in for me why testing is so important. It is not about TDD in the end<strong>but maintainable and changeable code</strong>. And so even though much of the above seems like more work upfront it really leads to better code and better experiences as a coder and more importantly as a team.</p><p>Also Pair programming is a great use of time and should not be feared. Too much of it wears me out but just the right amount can be a powerful way to get a team member up to speed on a new part to a project or just to check in with each other and spend some time coding and growing as a team. It is scary to share in something as personal as coding but in the end we all can learn from each other.</p><hr><h1 id="misc-reads">Misc Reads</h1><p>Not as key as the ones above imo but still super helpful. Though POODR could easily be moved above.</p><h2 id="practical-object-oriented-design-in-ruby-an-agile-primerhttpskindleamazoncomworkpractical-object-oriented-design-ruby-addison-wesley-ebookb0096gequeb0096byg7c"><a href="https://kindle.amazon.com/work/practical-object-oriented-design-ruby-addison-wesley-ebook/B0096GEQUE/B0096BYG7C">Practical Object-Oriented Design in Ruby: An Agile Primer</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/51lFbn3LPCL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51lFbn3LPCL.SS130.jpg"/><h2 id="php-objects-patterns-and-practicehttpskindleamazoncomworkobjects-patterns-practice-experts-source-ebookb003xrx1qmb003xqf3nw"><a href="https://kindle.amazon.com/work/objects-patterns-practice-experts-source-ebook/B003XRX1QM/B003XQF3NW">PHP Objects, Patterns and Practice</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/51bJaFjTZnL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51bJaFjTZnL.SS130.jpg"/><h2 id="laravel-from-apprentice-to-artisanhttpsleanpubcomlaravel"><a href="https://leanpub.com/laravel">Laravel: From Apprentice To Artisan</a></h2><p><img src="https://s3.amazonaws.com/titlepages.leanpub.com/laravel/small?1387959278" alt="https://s3.amazonaws.com/titlepages.leanpub.com/laravel/small?1387959278"/><h2 id="eloquent-javascript-a-modern-introduction-to-programminghttpskindleamazoncomworkeloquent-javascript-modern-introduction-programming-ebookb00409onimb004oejnq0"><a href="https://kindle.amazon.com/work/eloquent-javascript-modern-introduction-programming-ebook/B00409ONIM/B004OEJNQ0">Eloquent JavaScript: A Modern Introduction to Programming</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/519WDGN-9DL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/519WDGN-9DL.SS130.jpg"/><h2 id="nodejs-the-right-way-practical-server-side-javascript-that-scaleshttpskindleamazoncomworknode-js-right-way-server-side-javascript-ebookb00hsocscyb00hso6yd8"><a href="https://kindle.amazon.com/work/node-js-right-way-server-side-javascript-ebook/B00HSOCSCY/B00HSO6YD8">Node.js the Right Way: Practical, Server-Side JavaScript That Scales</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/51%2BVjuSvKJL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51%2BVjuSvKJL.SS130.jpg"/><h2 id="the-pragmatic-programmer-from-journeyman-to-masterhttpskindleamazoncomworknode-js-right-way-server-side-javascript-ebookb00hsocscyb00hso6yd8"><a href="https://kindle.amazon.com/work/node-js-right-way-server-side-javascript-ebook/B00HSOCSCY/B00HSO6YD8">The Pragmatic Programmer: From Journeyman to Master</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/41oqLxoTYsL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/41oqLxoTYsL.SS130.jpg"/><h2 id="restful-web-apishttpskindleamazoncomworkrestful-web-apis-leonard-richardson-ebookb00dduvtr2b00f5bs966"><a href="https://kindle.amazon.com/work/restful-web-apis-leonard-richardson-ebook/B00DDUVTR2/B00F5BS966">RESTful Web APIs</a></h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/51KhFuo-5%2BL._SS130_.jpg" alt="https://images-na.ssl-images-amazon.com/images/I/51KhFuo-5%2BL.SS130.jpg"/></description><tags>php, angular.js, coder</tags></item><item><title>Sorting related models in Laravel</title><link>https://alfrednutile.info/posts/104/</link><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/104/</guid><description><p>There are a number of related models to this one model that I store in the Models $relations property</p><pre><code> protected static $relations = [
'owner',
'apns',
'zoning_urls',
'structures.address',
'structures.comments.user.profiles',
'listings',
'attachments',
'structures.structure_type',
'property_owner',
'primary_property_type',
'address',
'property_specialist.profiles',
'listings.team'
];</code></pre><p>This allows me to easily reuse this for each query</p><pre><code>$found = $found->load(static::$relations);</code></pre><p>But there is one model I removed from that list to do a dynamic query/sorting on it</p><pre><code> $found = $this->property->with([
'verifiers' => function($query) {
$query->with('user.profiles')->orderBy('id', 'DESC');
},
])->findOrFail($id);
$found = $found->load(static::$relations);</code></pre><p>veifiers was part of the protected static $relations list but I moved it out since, for each query, I need to sort them from last to first.</p></description><tags>laravel, php, note2self</tags></item><item><title>Behat for testing RESTful APIs</title><link>https://alfrednutile.info/posts/103/</link><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/103/</guid><description><p>The code for behat&rsquo;s FeatureContext comes from this repo and book<a href="https://github.com/philsturgeon/build-apis-you-wont-hate">https://github.com/philsturgeon/build-apis-you-wont-hate</a></p><p>I will bring it together so before long you can run tests like this</p><p><a href="http://youtu.be/K4DoYv9X-bQ"><img src="https://dl.dropboxusercontent.com/s/u7v2uw6ged5uz9g/behat_api_youtube.png?dl=0" alt="test"/></p><p>The road map will be</p><ul><li>Quick Setup Notes</li><li>GET requests</li><li>POST request</li><li>Tie into your framework</li><li>Seeding step</li><li>Query your db step</li><li>PUT request</li></ul><h2 id="quick-setup-notes">Quick Setup Notes</h2><p>Setting up behat is beyond the scope of this. If you want try<a href="https://github.com/alnutile/behat-seed">alnutile/behat-seed</a> to get going on testing since it can be used to hit any API. But using the FeatureContext file from the<a href="https://github.com/philsturgeon/build-apis-you-wont-hate">https://github.com/philsturgeon/build-apis-you-wont-hate</a> instead. So with that and his composer.json info we are ready to build out our testing environment.</p><p>With that setup we are using composer to pull in all the packages and now have guzzle at our disposal.</p><p>Also the behat.yml file needs the default context parameters setup.</p><pre><code>default:
paths:
features: behat/features
bootstrap: features/bootstrap
context:
parameters:
base_url: http://local.dev</code></pre><p>Sometimes I would not set this since I do mostly selenium work.</p><h2 id="get-request">GET Request</h2><p>To start with we will test using GET, a very simple start.</p><pre><code>Feature: Projects
This projects data
As an authenticated user
I should be able to see all the projects of my team<p>Scenario: I should see projects output
Given I reseed the database
When I request "GET /api/v1/projects"
Then I get a "200" response
And data has 5 items</code></pre><p>That is it! Behat will not hit that endpoint using Guzzle and do a get request. We test the response and then count the results.</p></p><p>Here is the count code</p><pre><code> /**
* @Given /^data has (\d+) items/
*/
public function dataHasItems($arg)
{
$results = $this->getResponsePayload();
assertCount($arg, $results->data);
}</code></pre><h2 id="post-request">POST Request</h2><p>This got a bit trickier</p><p>The final result looked like this</p><pre><code>Scenario: Creating a new Project and new Site
Given I reseed the database
Given I have the payload:
"""
{ "data":
{
"name": "test foo",
"branch": "test",
"folder": "foo",
"active": 1,
"team_id": "foo-bar-foo-baz-5",
"site_id": "test-foo-site-id-test-new",
"urls": [
{"name": "Url 1 Behat", "path": "http://foo1.behat" },
{"name": "Url 2 Behat", "path": "http://foo2.behat" }
],
"site_object": {
"id": "test-foo-site-id-test-new",
"name": "Site via Behat",
"repo_name": "foo_repo",
"active": 1
},
"team_object": {
"id": "foo-bar-foo-baz-5",
"name": "Team 5"
}
}
}
"""
When I request "POST /api/v1/projects"
Then I get a "200" response
When I request "GET /api/v1/projects"
And data has 6 items
And there are 6 rows of "\BehatEditor\Models\Site"</code></pre><p>Lets cover it one line or so at a time</p><pre><code>Given I reseed the database</code></pre><p>Sometimes I want to start with a new data set and this is what triggers it. I will cover this more in the sections below &ldquo;Tie into your framework&rdquo; and &ldquo;Seeding step&rdquo;</p><p>Now the payload</p><pre><code>Given I have the payload:
"""
{ "data":
{
"name": "test foo",
"branch": "test",
"folder": "foo",
"active": 1,
"team_id": "foo-bar-foo-baz-5",
"site_id": "test-foo-site-id-test-new",
"urls": [
{"name": "Url 1 Behat", "path": "http://foo1.behat" },
{"name": "Url 2 Behat", "path": "http://foo2.behat" }
],
"site_object": {
"id": "test-foo-site-id-test-new",
"name": "Site via Behat",
"repo_name": "foo_repo",
"active": 1
},
"team_object": {
"id": "foo-bar-foo-baz-5",
"name": "Team 5"
}
}
}
"""</code></pre><p>The API expects the payload to be in the data object. From there it is just a object of data relative to the Project endpoint. We will see too this gets pretty cool cause we will make sure new sites are made, new urls are made etc as needed.</p><pre><code>When I request "POST /api/v1/projects"
Then I get a "200" response</code></pre><p>Then we post it. Phil&rsquo;s code was modified a bit here</p><pre><code> /**
* @When /^I request "(GET|PUT|POST|DELETE) ([^"]*)"$/
*/
public function iRequest($httpMethod, $resource)
{
$this->resource = $resource;<pre><code> $method = strtolower($httpMethod);
try {
switch ($httpMethod) {
case 'PUT':
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource, null, $this-&amp;gt;requestPayload);
break;
case 'POST':
$post = \GuzzleHttp\json_decode($this-&amp;gt;requestPayload, true);
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource, array('body' =&amp;gt; $post));
break;
default:
$this-&amp;gt;response = $this
-&amp;gt;client
-&amp;gt;$method($resource);
}
} catch (BadResponseException $e) {
$response = $e-&amp;gt;getResponse();
// Sometimes the request will fail, at which point we have
// no response at all. Let Guzzle give an error here, it's
// pretty self-explanatory.
if ($response === null) {
throw $e;
}
$this-&amp;gt;response = $e-&amp;gt;getResponse();
}
}</code></pre><p/></pre><p>I added the post line (hmm need to pull out the json_decode just noticed that) anyways we send this off to Guzzle’s post method to send to the API.</p></p><p>Basically I added this</p><pre><code>case 'POST':
$post = \GuzzleHttp\json_decode($this->requestPayload, true);
$this->response = $this
->client
->$method($resource, array('body' => $post));
break;</code></pre><p>As you see above.</p><pre><code>When I request "GET /api/v1/projects"
And data has 6 items
And there are 6 rows of "\BehatEditor\Models\Site"</code></pre><p>This is to verify new items where made. The last line is to verify that a new Site was made since it does not have a restful endpoint to GET a count nor POST since it is only part of the Project and from an external API. The step for that is</p><pre><code> /**
* @Given /^there are (\d+) rows of "([^"]*)"$/
*/
public function thereAreRowsOf($arg1, $arg2)
{
$count = $arg2::all()->count();
if($count != $arg1) {
throw new Exception(
"Actual count is:\n" . $count
);
}
}</code></pre><p>We pass in the namespace of the Model and the expected count and then run the query. More on that in the integration area.</p><h2 id="tie-into-your-framework">Tie into your framework</h2><p>For this project, Silex, it was quite easy. In the FeatureContext class I do this following making $this->core the app.</p><pre><code> public function __construct(array $parameters)
{
$config = isset($parameters['guzzle']) &amp;&amp; is_array($parameters['guzzle']) ? $parameters['guzzle'] : [];<pre><code> $config['base_url'] = $parameters['base_url'];
$this-&amp;gt;client = new Client($config);
$this-&amp;gt;core = require_once __DIR__.'/../../../../bootstrap/start.php';
}</code></pre><p/></pre><p>I basically pull in the boostrap file with all the info to setup the database, methods etc used by the index.php and command line tools.
Then later on I can do queries of the db and other things that really need to tie into the framework. Like</p></p><pre><code> /**
* @Given /^there are (\d+) rows of "([^"]*)"$/
*/
public function thereAreRowsOf($arg1, $arg2)
{
$count = $arg2::all()->count();
if($count != $arg1) {
throw new Exception(
"Actual count is:\n" . $count
);
}
}</code></pre><p>This takes the request</p><pre><code>And there are 6 rows of "\BehatEditor\Models\Site"</code></pre><p>And queries the db using the Model class to do a simple all()->count() on the results.</p><h2 id="seeding">Seeding</h2><p>Now that things are tied in I made a simple step for this</p><pre><code> /**
* @Given /^I reseed the database$/
*/
public function iReseedTheDatabase()
{
if($this->core->getEnv() != 'production') {
$path = __DIR__.'/../../../../' . 'setup/seed.php';
exec("php $path");
}
}</code></pre><h2 id="put-coming-soon">PUT Coming soon</h2><h2 id="delete-coming-soon">Delete Coming Soon</h2><h2 id="auth-coming-soon">Auth Coming soon</h2></description><tags>behat, php</tags></item><item><title>Boris REPL and you Applicatoin (Silex in this case)</title><link>https://alfrednutile.info/posts/102/</link><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/102/</guid><description><p>This video will cover the details<a href="http://youtu.be/RHdxSsCDmNQ">http://youtu.be/RHdxSsCDmNQ</a></p><p><img src="https://camo.githubusercontent.com/18c23fa613beeb044a7ba1ba58a5dfefe120ca6f/687474703a2f2f646c2e64726f70626f782e636f6d2f752f3530383630372f426f72697344656d6f2d76342e676966" alt="boris"/><p>Just a few notes though<a href="https://github.com/d11wtq/boris">https://github.com/d11wtq/boris</a> is a better place for getting started overall.</p><h2 id="borisrc">Borisrc</h2><p>This lives in the root of my application which includes the startup file for the application.</p><pre><code>&lt;?php
#.borisrc<p>$core = require_once(<strong>DIR</strong>.'/bootstrap/start.php');
$boris = new \Boris\Boris(&lsquo;base_app> &lsquo;);
$boris->setLocal(array(&lsquo;core&rsquo; => $core));
$boris->start();</code></pre><p>The start.php file I am using for the core startup needed by index.php, this and later a command line class to run the queue daemon and other things</p></p><pre><code>&lt;?php
#bootstrap/start.php
require __DIR__.'/../bootstrap/autoload.php';
$core = new \App\Core();
$core->getApp();
if (file_exists(__DIR__ . '/../.env')) {
\Dotenv::load(__DIR__.'/../');
}
$paths = include(__DIR__.'/paths.php');
$core->setUpPaths($paths);
$core->setEnv();
$core->setDatabaseConnection();
$core->getApp()->register(new Silex\Provider\MonologServiceProvider(), array(
'monolog.logfile' => $core->getStoragePath() . '/logs/core.log',
));
require_once(__DIR__.'/../custom_start.php');
return $core;</code></pre><p>So index.php like .borisrc calls to this</p><pre><code>&lt;?php
#public/index.php
$core = require_once __DIR__.'/../bootstrap/start.php';
$core = require_once __DIR__.'/../app/routes.php';
$core->getApp()->run();</code></pre><p>At this point, as seen in the video we can interact with the core app and other methods!</p></description><tags>boris, php, silex</tags></item><item><title>Polymorphic relationship Laravel</title><link>https://alfrednutile.info/posts/99/</link><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/99/</guid><description><p>This example will show a typical &ldquo;Attachment&rdquo; need. The Laravel docs really do cover alot as seen<a href="http://laravel.com/docs/eloquent#polymorphic-relations">here</a> especially<strong>&ldquo;Polymorphic Relation Table Structure”</strong>. I cover many to many polymorphic relationships<a href="http://www.alfrednutile.info/posts/95">here</a></p><p>I will cover an example of an Attachment that has some fields. And it is related to a model, in this example &ldquo;Post&rdquo;</p><p>Using the<a href="https://github.com/JeffreyWay/Laravel-4-Generators">Way Generators</a> to make this resource.</p><pre><code>php artisan generate:resource attachment --fields="attachable_type:string, attachable_id:integer, name:string, file_name:string, note:text, tag:string”</code></pre><p>As noted in the laravel docs our table for Attachments would look something like this</p><pre><code>post
id - integer
name - string
body - text<p>attachments
id - integer
file_name - string
attachable_id - integer
attachable_type - string</code></pre><p>So we are making a table/model Attachment. The model will use the “attachable” syntax to dynamically reference another model and model id.</p></p><p>In the Post model I set that this relationship exists</p><pre><code>#app/models/Post.php
public function attachments()
{
return $this->morphTo("Attachment", "attachable");
}</code></pre><p>The Attachment model file is this</p><pre><code>
&lt;?php
#app/models/Attachment.php
class Attachment extends \Eloquent {
protected $fillable = [
"attachable_type",
"attachable_id",
"name”,
“file_name”,
"note",
"tag"
];<pre><code>public function attachable()
{
return $this-&amp;gt;morphTo();
}</code></pre><p>}</code></pre><p>Finally if we where to seed the db or add content the table for Attachments would look like this</p></p><p><img src="https://photos-1.dropbox.com/t/0/AADRAfBTNcMG8puEahtElixkH6F6rsoCXD1zgM_aFoUiRQ/12/54803135/png/1024x768/3/1405868400/0/2/Screenshot%202014-07-20%2009.12.12.png/bA938wfNJbWkPlOIKMlD5gJKsBGGGJCH-RTweCGQqwk" alt="example"/><p>the attachable_type is the model class so if the namespace was Acme\Post then that would be &ldquo;Acme\Post</p><p>That is it. As long as you include it in your results you will see it in your output.</p></description><tags>laravel, php, note2self</tags></item><item><title>Quick way to traverse a nested php arrray</title><link>https://alfrednutile.info/posts/98/</link><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/98/</guid><description><p>The<a href="http://php.net/manual/en/class.recursiveiteratoriterator.php">RecursiveIteratorIterator</a> makes it super easy to traverse a nested array.</p><p>Here is an example though the docs are pretty clear there. For me it was in a class so I defined the array keys at the top of the Class</p><pre><code> protected $merged_profile_options = [];
protected $data_values = [
'browser' => null,
'name' => null,
'version' => null,
'platform' => null,
'base_url' => null,
'repo' => null,
'filename' => null,
'branch' => null,
'status' => null,
'user_uuid' => null,
'remote_job_id' => null,
'job_id' => null,
];<p/></pre><p>Then later on iterated over that array.</p></p><pre><code> protected function setAllDataValues() {
$traverse = new \RecursiveIteratorIterator(
new \RecursiveArrayIterator($this->merged_profile_options));
foreach($traverse as $key=>$value)
{
if(array_key_exists($key, $this->data_values))
{
$this->setDataValues($key, $value);
}
}
}
public function setDataValues($key, $value)
{
$this->data_values[$key] = $value;
}</code></pre><p>Super easy. This array was 4 levels deep.</p></description><tags>php, note2self</tags></item><item><title>Using VCR for PHP API Testing</title><link>https://alfrednutile.info/posts/97/</link><pubDate>Wed, 16 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/97/</guid><description><p>Testing that your code works against an API can take up lots of un-needed time. With this<a href="https://github.com/php-vcr/php-vcr">php-vcr</a> library you can do ONE real request that saves a fixture file that will automatically be used with each additional requests!</p><p>They have decent docs on setting up but I will walk through them here.</p><p>I will base this off a seed phpunit repo I have<a href="https://github.com/alnutile/base_library_repo">https://github.com/alnutile/base_library_repo</a></p><p>You will need to add to the composer.json the packages for this library</p><pre><code> "require": {
"php": ">=5.4.0",
"ext-curl": "*",
"symfony/process": ">=2.3",
"symfony/event-dispatcher": ">=2.3",
"guzzle/guzzle": "~3.7",
"vlucas/phpdotenv": "1.0.6"
},
"require-dev": {
"phpunit/phpunit": "~3.0",
"mockery/mockery": "dev-master",
"php-vcr/php-vcr": "dev-master",
"php-vcr/phpunit-testlistener-vcr": "dev-master"
}</code></pre><p>I have another post that talks about the dotenv package<a href="http://www.alfrednutile.info/posts/76">here</a></p><p>Then if you test folder make a a fixtures folder. So you layout is</p><pre><code>.
--test
-----fixtures</code></pre><p>And open your phpunit.xml file to add the code to intercept your requests.</p><pre><code>#/phpunit.xml<p>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;phpunit backupGlobals="false"
backupStaticAttributes="false"
bootstrap="test/bootstrap.php"
colors="true"
convertErrorsToExceptions="true"
convertNoticesToExceptions="true"
convertWarningsToExceptions="true"
processIsolation="false"
stopOnFailure="false"
syntaxCheck="false"
>
&lt;listeners>
&lt;listener class="PHPUnit_Util_Log_VCR" file="vendor/php-vcr/phpunit-testlistener-vcr/PHPUnit/Util/Log/VCR.php" />
&lt;/listeners>
&lt;testsuites>
&lt;testsuite name="Application Test Suite">
&lt;directory>test&lt;/directory>
&lt;/testsuite>
&lt;/testsuites>
&lt;/phpunit></code></pre><p>Lastly edit your phpunit bootstrap file to setup VCR</p></p><pre><code>#test/bootstrap.php
&lt;?php
function includeIfExists($file)
{
if (file_exists($file)) {
return include $file;
}
}
if ((!$loader = includeIfExists(__DIR__.'/../vendor/autoload.php')) &amp;&amp; (!$loader = includeIfExists(__DIR__.'/../../../.composer/autoload.php'))) {
die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
'php composer.phar install'.PHP_EOL);
}
\VCR\VCR::configure()->setCassettePath(__DIR__ .'/../test/fixtures');
$loader->add('Foo\SauceLabs', __DIR__);
return $loader;</code></pre><p>Now you are ready to use the API. This repo has a ton of tests using the api<a href="https://github.com/alnutile/saucelabs_client">https://github.com/alnutile/saucelabs_client</a></p><p>You will see in this file for example how it is called in the doc blocks</p><pre><code>#test/SauceLabs/Tests/JobsTest.php
use SauceLabs\Client;
use VCR\VCR;
use SauceLabs\Tests\BaseTest as Base;<p>class JobsTest extends Base {</p><pre><code>protected function tearDown()
{
m::close();
}
/**
* @test
* @@vcr get_jobs
*/
public function get_jobs()
{
$username = $_ENV['USERNAME_KEY'];
VCR::turnOn();
//VCR::insertCassette('authenticate');
VCR::insertCassette('get_jobs');
//Arrange
$sauce_api = new Client();
$sauce_api-&amp;gt;authenticate($username, $_ENV['TOKEN_PASSWORD'], Client::AUTH_HTTP_PASSWORD);
//Act
$response = $sauce_api-&amp;gt;api('jobs')-&amp;gt;getJobs($username);
//Assert
$this-&amp;gt;assertGreaterThan(15, count($response));
// To stop recording requests, eject the cassette
VCR::eject();
// Turn off VCR to stop intercepting requests
VCR::turnOff();
}</code></pre><p/></pre><p>After the first time you run that you will have a new “cassette” in the test/fixtures folder that you can use as needed</p></p><pre><code>#test/fixtures/get_jobs
-
request:
method: GET
url: 'https://saucelabs.com/rest/v1/api-test-user/jobs'
headers:
Host: saucelabs.com
Accept: application/vnd.SauceLabs.beta+json
User-Agent: 'php-github-api (http://github.com/alnutile/saucelabs_client)'
Authorization: 'Basic YmVoYXQtc2VlZDpmYzViNjg4YS1mMjdjLTRjNzMtYTkxNC1lYjVkN2UyY2RmMWU='
Content-Length: '0'
response:
status: 200
headers:
Server: nginx
Date: 'Fri, 11 Jul 2014 11:03:19 GMT'
Content-Type: 'application/json; charset=utf-8'
Transfer-Encoding: chunked
Connection: keep-alive
X-Backend: mix
body: '[{"id": "79bd34f42d584da6ad59c051388134d9"}, {"id": "d75177a863ec4a458c7222813e10ee84"}, {"id": "67591976001c4c5a9522b93281e0e8ef"}, {"id": "ada6876f799d4b589ef0e2c4069c7438"}, {"id": "3e676ac921aa43f5a5628d231ca7115d"}, {"id": "222cdddafb9e4c3fb0722bccc9891a15"}, {"id": "6393dc7ca1ea447eb509b5e1dd6821ac"}, {"id": "789004fc2ec34d0d8e03945759fc25b0"}, {"id": "3331badd2da140d08613a786257d177d"}, {"id": "9437a50a354e4fca8252447b03d21348"}, {"id": "dec07ca1c30e40f4a693de7f7a102eab"}, {"id": "3a1a0fb2d4be4580b00a3e35b86aa6fa"}, {"id": "55de27651bf14c92b901cbd0a62b1603"}, {"id": "7e12ec786ad544008c5f4e3e4340d5a8"}, {"id": "a8edb7ab8a8f408a9b0829cc45ca4563"}, {"id": "b67a4d7187cc4dc8ad661ef7045d15e9"}]'
-
request:
method: GET
url: 'https://saucelabs.com/rest/v1/behat-seed/jobs'
headers:
Host: saucelabs.com
Accept: application/vnd.SauceLabs.beta+json
User-Agent: 'php-github-api (http://github.com/alnutile/saucelabs_client)'
Authorization: 'Basic YmVoYXQdtc2VlZssDpmYzViNjdfasdfg4YS1mMjdrerjLTRjNzMtYTkxNC1l3eYjVkN2UyY2RmMadsfWUj='
Content-Length: '0'
response:
status: 200
headers:
Server: nginx
Date: 'Fri, 11 Jul 2014 13:41:38 GMT'
Content-Type: 'application/json; charset=utf-8'
Transfer-Encoding: chunked
Connection: keep-alive
X-Backend: mix
body: '[{"id": "3a4136e1bb6f4f6b8cae6fbd0bf2e6aa"}, {"id": "1cde7b77e8744ff5b6198489ceffce81"}, {"id": "79bd34f42d584da6ad59c051388134d9"}, {"id": "d75177a863ec4a458c7222813e10ee84"}, {"id": "67591976001c4c5a9522b93281e0e8ef"}, {"id": "ada6876f799d4b589ef0e2c4069c7438"}, {"id": "3e676ac921aa43f5a5628d231ca7115d"}, {"id": "222cdddafb9e4c3fb0722bccc9891a15"}, {"id": "6393dc7ca1ea447eb509b5e1dd6821ac"}, {"id": "789004fc2ec34d0d8e03945759fc25b0"}, {"id": "3331badd2da140d08613a786257d177d"}, {"id": "9437a50a354e4fca8252447b03d21348"}, {"id": "dec07ca1c30e40f4a693de7f7a102eab"}, {"id": "3a1a0fb2d4be4580b00a3e35b86aa6fa"}, {"id": "55de27651bf14c92b901cbd0a62b1603"}, {"id": "7e12ec786ad544008c5f4e3e4340d5a8"}, {"id": "a8edb7ab8a8f408a9b0829cc45ca4563"}, {"id": "b67a4d7187cc4dc8ad661ef7045d15e9"}]'</code></pre><p>That library should be a big help to try it out. You just need a Saucelabs account and make a file in the root of your folder called .env as noted in the README with your username and token for saucelabs and then run bin/phpunit.</p></description><tags>php, api, testing</tags></item><item><title>Saucelabs PHP Client</title><link>https://alfrednutile.info/posts/96/</link><pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/96/</guid><description><p>It is built off of the php-github-api client seen<a href="https://github.com/KnpLabs/php-github-api">here</a> by KnpLabs . They made a really nice client that uses Guzzle and an AbstractionAPI to make it easy to code out different classes around the API endpoints.</p><p>Anyways I have had such a good experience with github one I figured it would be nice to have one for the Saucelabs work I do.</p><p><a href="https://github.com/alnutile/saucelabs_client">https://github.com/alnutile/saucelabs_client</a> more features will be added shortly as it is being used in a couple of decent size projects.</p><p>There are plenty of Tests to show how to use it.</p></description><tags>bdd, testing, php</tags></item><item><title>Many to Many Polymorphic Relations from Laravel to Angular and back</title><link>https://alfrednutile.info/posts/95/</link><pubDate>Sat, 05 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/95/</guid><description><p>This will cover having a polymorphic relationship in Laravel, showing it on a form in Angular and saving it back to Laravel. Overall it is well documented<a href="http://laravel.com/docs/eloquent#many-to-many-polymorphic-relations">here</a> at the great docs at Laravel but this post might help in a few areas.</p><p>As someone defines Polymorphic Relationships there</p><blockquote><p>&ldquo;Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model. "</p></blockquote><h2 id="output-the-data-to-angular">Output the data to Angular</h2><p>Taking the User Model as an example I query the user but then before returning the data to Angular I append the polymorphic results. In this case we will call it Specialties</p><pre><code>protected function transformOutgoingData($data)
{
$data->specialties = $data->specialties()->getResults()->lists('id');
return $data;
}</code></pre><p>This returns just an array to Angular to deal with. When sending it an Object trouble getting Angular to set the selected options. The hard part, since by default it just worked, was to send not only the 2 selected Specialties but the 20 other possible ones and make the list out of that.</p><pre><code>#angular html file
&lt;div class="form-group" ng-if="userHasAdminRole(user)" markdown="1">
&lt;label>Specialties:&lt;/label>
&lt;select ng-options="specialty.id as specialty.name for specialty in user.specialties_all"
name="specialty"
multiple
ng-model="user.specialties"
ng-required="true"
class="form-control">
&lt;/select>
&lt;/div></code></pre><p>The specialties_all comes from the method I run on the data before output it which I do anyways on many data models. This comes right before the transformOutgoingData.</p><pre><code> protected function addDataToOutGoingModel($user)
{
$user = $this->addAllSpecialtiesToModel($user);
return $user;
}</code></pre><p>This way all my select lists on that page and other data lists, checkboxes etc have the data they need.</p><p>Finally when the person clicks Submit it is sent back to Laravel. So far I could not just save or update the user with this info. For example</p><pre><code>#app/models/User.php
public function update($user_id, $all)
{
$all = $this->transformIncomingData($all);
try {
$user = \User::findOrFail($user_id);
}
catch(\Expection $e){
throw new \Exception("User not found");
}<pre><code> $user-&amp;gt;update($all);
$user = $this-&amp;gt;saveDataToModel($user);
return $user;
}</code></pre><p/></pre><p>The $user->update($all); will crash with this extra “specialties” data coming in with this error.</p></p><blockquote><p>&ldquo;preg_replace(): Parameter mismatch, pattern is a string while replacement is an array&rdquo;</p></blockquote><p>So instead I do a step before and after</p><p>Before I run transformIncomingData and unset the $all[&lsquo;specialties&rsquo;] key I get from Input::all() and save that to a property</p><pre><code> protected function transformIncomingData($data)
{
$data = ( isset($data['specialties'])) ? $this->transformSpecialtiesIncoming($data) : $data;
return $data;
}</code></pre><p>which goes to</p><pre><code> protected function transformSpecialtiesIncoming($data)
{
$this->original_specialities = $data['specialties'];
unset($data['specialties']);
return $data;
}</code></pre><p>Then after I update the User I run saveDataToModel($user) which triggers this method</p><pre><code> protected function setSpecialties($user)
{
$user->specialties()->sync($this->original_specialities);
return $user;
}</code></pre><p>Finally back to Angular with the results.</p><p>Another good way to tie all this together is the Model Observer Pattern noted here<a href="http://laravel.com/docs/eloquent#model-observers">http://laravel.com/docs/eloquent#model-observers</a></p></description><tags>laravel, php, angular.js</tags></item><item><title>Laravel Homestead and MailCatcher</title><link>https://alfrednutile.info/posts/93/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/93/</guid><description><p>Using MailCatcher<a href="http://mailcatcher.me/">http://mailcatcher.me/</a> I can see the emails sent by the website.</p><p>First checkout<a href="https://github.com/fideloper/Vaprobash/pull/348">https://github.com/fideloper/Vaprobash/pull/348</a> to get your box ready
All I did was</p><h2 id="log-into-the-vagrant-box-and-run">Log into the vagrant box and run</h2><pre><code>sudo apt-get install libsqlite3-dev</code></pre><p>Then</p><pre><code>sudo apt-get install ruby1.9.1-dev -y
sudo gem install mailcatcher</code></pre><p>Then</p><pre><code>sudo gem install mailcatcher -V</code></pre><h2 id="set-your-mailphp-config">Set your mail.php config</h2><p>This is found in app/config and should be copied to app/config/local so it only applies to local</p><pre><code>#app/config/local/mail.php
&lt;?php
return array(<pre><code>'driver' =&amp;gt; 'smtp',
'host' =&amp;gt; '192.168.33.10',
'port' =&amp;gt; 1025,
'from' =&amp;gt; array('address' =&amp;gt; 'admin@test.com', 'name' =&amp;gt; 'Foo Bar'),
'encryption' =&amp;gt; '',</code></pre><p>// &lsquo;username&rsquo; => null,
// &lsquo;password&rsquo; => null,</p><p>);</code></pre><p>Finally reload vagrant</p></p><pre><code>vagrant reload</code></pre><p>And start up mailcatcher inside of vagrant.</p><pre><code>mailcatcher --ip=192.168.33.10</code></pre><p>And you are set. http://192.168.33.10:1080 works</p><h3 id="links">Links</h3><ul><li><a href="https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0">https://laracasts.com/forum/?p=1896-mailcatcher-vagrant-and-multiple-developers/0</a></li></ul></description><tags>laravel, php, homestead</tags></item><item><title>Laravel Sentry and UUID</title><link>https://alfrednutile.info/posts/94/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/94/</guid><description><h2 id="update-october-10-1007">Update October 10 10:07</h2><p>Have hit a few issues with this model but still working okay.</p><p>To start this trait does some of the work to manage incoming POST data.</p><pre><code>&lt;?php namespace BehatEditor\Helpers;<p>use Rhumsaa\Uuid\Uuid;</p><p>trait UuidHelper {</p><pre><code>protected $uuid;
protected $saved;
public function getUuid()
{
return $this-&amp;gt;uuid;
}
public function setUuid($uuid = null)
{
if($uuid === null)
{
$uuid = $this-&amp;gt;generateNewId()-&amp;gt;toString();
}
$this-&amp;gt;uuid = $uuid;
return $this;
}
/**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}
protected function setModelParamsIdWithUuid($params)
{
if(!isset($params['id'])) {
$this-&amp;gt;setUuid($this-&amp;gt;generateNewId()-&amp;gt;toString());
$params['id'] = $this-&amp;gt;getUuid();
}
$this-&amp;gt;uuid = $params['id'];
return $params;
}
public function dealWithUsingUuidNotReturningIdFromCreate($model)
{
$this-&amp;gt;saved = $model-&amp;gt;find($this-&amp;gt;uuid);
}</code></pre><p>}</code></pre><p>Here is an example of me using it.</p></p><pre><code>
/**
* Incoming Post request from the Controller to a Service and finally to this Repository Class.
*/
public function createNewBatch($batch)
{
try {
$this->post = $batch; //Incoming post data
$this->setRelatedObjectsFromPost(); //I deal with some of the related data or incoming data before hand
$setUuid = $this->setModelParamsIdWithUuid($batch); //this is the traits setting the UUID on the incoming POST data.
$this->batch->create($setUuid); //Finally I create using the auto-generated UUID OR the id/uuid that came in via the post
/**
* Again the trait takes care of this ONE issue I can not get around is returning the results of Create with the an ID
* It works and saves the data but the ID is missing. Though looking at Eloquent this most likely is because I need to be using save.
* Any ways I load it back up again for further processing.
* Also some of this work started when I was using Eloquent outside of Laravel so it may need to be refactored since we are back in Laravel.
*/
$this->dealWithUsingUuidNotReturningIdFromCreate($this->batch);
$this->extractAndSyncRelatedObjects(); //This is the further processing I do not really related to this post
return $this->uuid; //This was set in the Trait see the trait class for this uuid field.
} catch (\Exception $e) {
throw new \Exception('The batch could not be created ' . $e->getMessage());
}
}</code></pre><p>Also note the model class needs this property set</p><pre><code>public $incrementing = false;</code></pre><h2 id="end-updates">END UPDATES</h2><hr><p>I needed to have UUID setup for users since we will be syncing users from site to site. I also wanted to use sentry as a starting point for user auth, roles and groups.</p><p>Using this starter package for a demo<a href="https://github.com/alnutile/L4withSentry/tree/uuid">https://github.com/alnutile/L4withSentry/tree/uuid</a> which is a fork of<a href="https://github.com/rydurham/L4withSentry">https://github.com/rydurham/L4withSentry</a></p><p>A lot of this comes from<a href="http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/">http://garrettstjohn.com/entry/using-uuids-laravel-eloquent-orm/</a></p><p><a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba">The repo will show the changes</a></p><h2 id="add-the-method-and-class-to-the-base-controllerhttpsgithubcomalnutilel4withsentrycommit8584933cda24e4101ed96cd5c3e8547b8fe249badiff-672d7136f99d93d53f1316b3fc946826r3"><a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-672d7136f99d93d53f1316b3fc946826R3">Add the method and class to the base controller</a></h2><p>This way we can call to it from other controllers as needed</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-0ad2286fb1ab9c8b1ec84d26853bf8f1L117">Update the UserController</a></p><p>There are lots of changes in here to replace is_numeric wtih $this->isValue($id) to check the uuid</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-31ad8f46f16744031d2d9092c100ffc1R3">Update the seeder</a></p><p>This will setup our seed data to work as well</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b7b60617536fe5447b0ab052b1878990R5">Update the user model</a></p><p>We call the boot method to generate a uuid if there is none being passed in.</p><h2 id="update-october-10-1018">Update October 10 10:18</h2><p>This below setup for the model has not worked which is why I have the update at the start of this article</p><h2 id="end-update">End update</h2><pre><code>/**
* The "booting" method of the model.
*
* @return void
*/
public static function boot()
{
parent::boot();<pre><code> /**
* Attach to the 'creating' Model Event to provide a UUID
* for the `id` field (provided by $model-&amp;gt;getKeyName())
*/
static::creating(function ($model) {
$model-&amp;gt;id = (string)$model-&amp;gt;generateNewId();
});
}</code></pre><p/></pre><p>and then generateNewId method down below</p></p><pre><code> /**
* Get a new version 4 (random) UUID.
*
* @return \Rhumsaa\Uuid\Uuid
*/
public function generateNewId()
{
return Uuid::uuid4();
}</code></pre><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-4a87548edb6f75cbf33358b912d43775L22">Update Route file</a></p><p>Replace the regular expressions to allow uuid</p><pre><code>+Route::get('users/{id}/reset/{code}', 'UserController@reset')->where('id', '[a-z0-9\-]+');
Route::get('users/{id}/suspend', array('as' => 'suspendUserForm', function($id)
{
return View::make('users.suspend')->with('id', $id);
}));</code></pre><p>There are a number of them in there</p><p>##<a href="https://github.com/alnutile/L4withSentry/commit/8584933cda24e4101ed96cd5c3e8547b8fe249ba#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780R5">Composer</a></p><p>Of course you need it in your composer file</p><pre><code> "require": {
"laravel/framework": "4.2.*",
"cartalyst/sentry": "~2.1",
"r15ch13/peculiar": "1.0.*@dev"
},</code></pre><p>##User Migration file</p><p>This repo the sentry migration files are copied into app/database/migrations</p><p>This being key</p><pre><code>$table->string('id', '36')->primary();</code></pre><pre><code>#app/database/migrations/2012_12_06_225921_migration_cartalyst_sentry_install_users.php<p>&lt;?php</p><p>use Illuminate\Database\Migrations\Migration;</p><p>class MigrationCartalystSentryInstallUsers extends Migration {</p><pre><code>/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::create('users', function($table)
{
$table-&amp;gt;string('id', '36')-&amp;gt;primary();
$table-&amp;gt;string('email');
$table-&amp;gt;string('password');
$table-&amp;gt;text('permissions')-&amp;gt;nullable();
$table-&amp;gt;boolean('activated')-&amp;gt;default(0);
$table-&amp;gt;string('activation_code')-&amp;gt;nullable();
$table-&amp;gt;timestamp('activated_at')-&amp;gt;nullable();
$table-&amp;gt;timestamp('last_login')-&amp;gt;nullable();
$table-&amp;gt;string('persist_code')-&amp;gt;nullable();
$table-&amp;gt;string('reset_password_code')-&amp;gt;nullable();
$table-&amp;gt;string('first_name')-&amp;gt;nullable();
$table-&amp;gt;string('last_name')-&amp;gt;nullable();
$table-&amp;gt;timestamps();
// We'll need to ensure that MySQL uses the InnoDB engine to
// support the indexes, other engines aren't affected.
$table-&amp;gt;engine = 'InnoDB';
$table-&amp;gt;unique('email');
$table-&amp;gt;index('activation_code');
$table-&amp;gt;index('reset_password_code');
});
}
/**
* Reverse the migrations.
*
* @return void
*/
public function down()
{
Schema::drop('users');
}</code></pre><p>}</code></pre></p></description><tags>laravel, php</tags></item><item><title>Behat Test more than number of elements</title><link>https://alfrednutile.info/posts/90/</link><pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/90/</guid><description><p>There is a Mink step to check for the number of elements</p><pre><code>//MinkDictionary.php
/**
* Checks, that (?P&lt;num>\d+) CSS elements exist on the page
*
* @Then /^(?:|I )should see (?P&lt;num>\d+) "(?P&lt;element>[^"]*)" elements?$/
*/
public function assertNumElements($num, $element)
{
$this->assertSession()->elementsCount('css', $element, intval($num));
}</code></pre><p>But I needed one just to make sure there are some elements on the page, more than 1 for example on a reports page. I guess I could have checked for just 1 eg &ldquo;#behat ol li&rdquo; but I think this can come in handy for our reporting tests.</p><pre><code>//FeatureContext.php
/**
* Check that there are more than or = to a number of elements on a page
*
* @Then /^I should see more "([^"]*)" or more "([^"]*)" elements$/
*/
public function iShouldSeeMoreOrMoreElements($num, $element)
{<pre><code> $container = $this-&amp;gt;getSession()-&amp;gt;getPage();
$nodes = $container-&amp;gt;findAll('css', $element);
if (intval($num) &amp;gt; count($nodes)) {
$message = sprintf('%d elements less than %s &amp;quot;%s&amp;quot; found on the page, but should be %d.', count($nodes), $selectorType, $selector, $count);
throw new ExpectationException($message, $this-&amp;gt;session);
}
}</code></pre><p/></pre></p></description><tags>behat, php</tags></item><item><title>Transforming Output from the Database to the View/REST layer</title><link>https://alfrednutile.info/posts/88/</link><pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/88/</guid><description><p>Having watched the screen cast<a href="https://laracasts.com/series/incremental-api-development/episodes/4">here</a> by Jeffery Way and reading Phil Sturgeon&rsquo;s<a href="https://leanpub.com/build-apis-you-wont-hate">Build APIs You Won&rsquo;t Hate</a> I used this approach on a recent project.</p><p>Basically, and they both cover it really well, instead of returning the data right to the ui/rest endpoint from the database I pass it through a class to transform the data formats, field name etc. This has been extremely helpful as we also work out some wording of fields that I can not do easily in this one class.</p><p>Also I can do output alterations using this Class and replace text depending on say a users permission level or maybe just to set a default image if there is none. So that user gets and Address Value Object that only shows the State.</p><p>Another good example was one server was LAMP and the other Nginx. Same db, etc but one has a setting to output a boolean as &ldquo;1&rdquo; and the other 1 so again I could verify and set these as needed as I built out the output. (yes I could have just Google the setting or better yet use a Vagrant box running Nginx to dev on)</p><p>Anyways just a really simple layer to add to a project.</p><p>Some good learning</p><ul><li>Incremental API<a href="https://laracasts.com/series/incremental-api-development/episodes/4">https://laracasts.com/series/incremental-api-development/episodes/4</a></li><li>Build APIs You Won&rsquo;t Hate<a href="https://leanpub.com/build-apis-you-wont-hate">https://leanpub.com/build-apis-you-wont-hate</a></li><li>Fractal<a href="http://fractal.thephpleague.com/simple-example/">http://fractal.thephpleague.com/simple-example/</a></li><li>Fractal Class<a href="https://github.com/thephpleague/fractal">https://github.com/thephpleague/fractal</a></li></ul></description><tags>REST, php, patterns</tags></item><item><title>Showing nested relationships details</title><link>https://alfrednutile.info/posts/87/</link><pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/87/</guid><description><p>This is soooo easy but this is always something this easy can be missed.
In this example we have a Property Model with Buildings that have an address.</p><p>So the model files look like this</p><pre><code>//Property.php<pre><code>//structures = buildings
public function structures()
{
return $this-&amp;gt;hasMany('Structure');
}</code></pre><p/></pre><pre><code>//Structure.php
public function address()
{
return $this->belongsTo("Address");
}</code></pre><p>So when I query a property I now get</p></p><pre><code> {
"id": 1,
"structures": [
{
"id": 6,
"address_id": 9,
"address": {
"id": 9,
"city": "Melvinport",
"state": "MT",
"zip": "75182",
"lat": -18.370000839233,
"lng": 36.270000457764,
"created_at": "2014-06-09 16:18:40",
"updated_at": "2014-06-09 16:18:40"
}</code></pre><p>Then in my query for properties I just included this with statement.</p><pre><code>
public function search($args)
{
$term = $args['terms'];
$found = $this->property->with('structures.address')
->where("name", "LIKE", "%{$term}%")
->get();
return $found;
}</code></pre><p>the dot notation basically showing load Structures and the Address data related to those.</p></description><tags>laravel, php, note2self</tags></item><item><title>Simple Laravel CMS Example</title><link>https://alfrednutile.info/posts/86/</link><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/86/</guid><description><h2 id="quick-intro-to-laravel-using-a-custom-cms-app-i-made">Quick intro to Laravel using a custom CMS app I made</h2><p>The repo is<a href="https://github.com/alnutile/l4cms">here</a></p><p><img src="https://dl-web.dropbox.com/get/Screenshots/intro_image.png?_subject_uid=54803135&amp;w=AADdI8YLw5iRjK91_3LjSHq7b7z0ibM8KY4P7MicRH9UFA" alt="intro"/><p>This is mainly to show an example of a small CMS being built in Laravel. CMS (Content Management System) that is at it&rsquo;s most basic level, Authentication, Simple Content Types etc.</p><p>What we will cover.</p><ul><li>Installing the &ldquo;CMS&rdquo; and what Page Types it comes with</li><li>Looking at the folder layout &ldquo;Where is&hellip;.&rdquo;</li><li>App config setting up the site</li><li>PHP Artisan command to migrate the site</li><li>Routes</li><li>Page example looking at the wysiwyg, Controller, View etc</li><li>Tags - lets add a many to many relationship</li></ul><p>This is NOT the end all setup just an example. There are links below to quality videos, blogs posts docs etc to take you to the next level, not only in Laravel but just Object Oriented Design and good Architecture in general.</p><p>Note the theme has it&rsquo;s own license and you need to purchase it<a href="https://wrapbootstrap.com/theme/colorfrog-WB01PG0H4">here</a> in order to use it.</p><h2 id="install-the-cms-and-what-page-types-it-comes-with">Install the &ldquo;CMS&rdquo; and what Page Types it comes with</h2><p>The repo is here<a href="https://github.com/alnutile/cms">https://github.com/alnutile/cms</a></p><p>In time I will add more features but it really is an app that was made for a client that the base of it I wanted to fork off for later use.</p><p>Run the basic laravel install steps noted on their site<a href="http://laravel.com/docs/quick">http://laravel.com/docs/quick</a></p><h2 id="what-page-types">What Page Types</h2><ul><li>Pages are the main landing pages for most of the site with a slug to manage the url [1]. More on Pages shortly.</li><li>Portfolios was how this project started. Basically you make One and then make projects that reference it.</li><li>Projects are just that. They fit in a Portfolio</li><li>Menu Sorting there is an admin area for menu sorting as well. Right now it is just for the top left menu. (not the black top nav)</li></ul><p>All these &ldquo;Admin&rdquo; links can be seen below</p><p><img src="https://dl-web.dropbox.com/get/Screenshots/admin_link.png?_subject_uid=54803135&amp;w=AAAXvu_aZZUUGLFbgByRli-WjFgDpVmUDnQxverzi5_ISg" alt="admin_bar"/><h3 id="every-landing-page-is-a-page">Every landing page is a Page</h3><p>Every URLs is Page, Project or Portfolio so the editor can always edit the description of the page even if there is a &ldquo;collection&rdquo; under it. For example /all_projects is a Page that just happens to also show a collection of &ldquo;Projects&rdquo; under it. Ideally this will be a less hard coded relationship BUT this particular example just needed a simple data set.</p><p>There are Portfolio and Project pages as well that the edit can edit the description on etc.</p><h2 id="looking-at-the-folder-layout">Looking at the folder layout</h2><p>This is a standard Laravel App. The one key folder is<strong>app/CMS</strong> for some items. But otherwise the Controllers, Models etc have all the needed data. [2]</p><p>In app/CMS there is the Menu Facade, and the MenuService to make managing the menu system easier. [3]</p><p>The system puts it&rsquo;s uploaded files under public/img in settings, banners etc</p><h2 id="app-config-setting-up-the-site">App config setting up the site</h2><p>The app default to sqlite and the bootstrap/start.php will default to local without you needing to set anything.</p><p>Running migrations will get you a good sample set of data. You can always turn this off in app/database/seeds</p><p>In the app/database/seeds/UsersTableSeeder.php file is the admin and test user emails and passwords to login.</p><h2 id="routes">Routes</h2><p>The app/routes.php is where you can manage routes and see what is there right now.</p><h2 id="page-example">Page Example</h2><p>You can edit a page or add a page.</p><p>Once in there you will see this</p><p><img src="https://dl-web.dropbox.com/get/Screenshots/edit.png?_subject_uid=54803135&amp;w=AADonXAFhGpiKY5JL9u6d248TPQKJMPCDcHTwUi2s2Hk5Q" alt="image_page_edit"/><p>You can give the page a title, SEO title, upload images and files via the wysiwyg and set the slug (Published coming soon so there can be a workflow)</p><h2 id="tags">Tags</h2><p>There is a tagging feature that does not yet have the UI setup. (coming soon). The resource is setup but needs to be placed in the view</p><p>In php artisan tinker we can mess around with tags thought</p><pre><code>
php artisan tinker
$tag = new Tag(['name' => "Test 4"]);
Portfolio::find(1)->tags()->save($tag);
Portfolio::find(1)->tags->toArray();
Tag::find(1)->portfolios->toArray();
Portfolio::find(1)->tags()->detach(1);
Portfolio::find(1)->tags()->attach(1);</code></pre><p>So we are making a tag, saving it to Portfolio 1. Seeing it attached to Portfolio 1 and Seeing Portfolios attached to it.</p><h2 id="links">Links</h2><ul><li>Great videos on Laravel, Oop and design patters<a href="https://laracasts.com/">https://laracasts.com/</a></li><li>Laravel own docs are great<a href="http://laravel.com/docs">http://laravel.com/docs</a></li><li>Forums and Chat room<a href="http://laravel.io/forum">http://laravel.io/forum</a></li><li>Great overview of Laravel app building<a href="http://culttt.com/2013/04/29/getting-started-with-laravel-4/">http://culttt.com/2013/04/29/getting-started-with-laravel-4/</a></li></ul><h2 id="footnotes">Footnotes</h2><ul><li>[1] This will be refactored shortly</li><li>[2] This will be moved shortly to make it way more extendable but leaving the core easy to manage.</li><li>[3] Refactor this out so menu is a manyToMany relationship with the models that will use it.</li></ul></description><tags>laravel, php, cms</tags></item><item><title>Laravel and non email authentication</title><link>https://alfrednutile.info/posts/84/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/84/</guid><description><p>Note to self. The Laravel docs are here that cover Authentication. But when it came time to use a filter and a non email based user name I had to modify the auth.basic filter, or any filter you want to use.</p><p>It ended up looking like this since I wanted user_account and not email to be the username for authentication.</p><pre><code>//app/filters.php
Route::filter('auth.basic', function()
{
return Auth::basic('user_account');
});</code></pre><p>You can see this option here</p><pre><code>//vendor/laravel/framework/src/Illuminate/Auth/Guard.php
public function basic($field = 'email', Request $request = null)</code></pre></description><tags>laravel, php, note2self</tags></item><item><title>Using Beanstalkd to Schedule the release of a post in Laravel</title><link>https://alfrednutile.info/posts/78/</link><pubDate>Mon, 19 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/78/</guid><description><p>Phase 1 of my master plan is to regularly write more posts on misc web and coding in general related topics. And sometimes I can sit and write a few of them but it would be best not to release them all at once for a lot of reason.</p><p>So this will cover the way I setup a schedule feature to my post creation process. Yes there are libraries for this but I just wanted to have fun making this feature. There are three key posts that helped me get through this.</p><ul><li><a href="http://laravel.com/docs/queues">Laravel Docs</a></li><li><a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper</a></li><li><a href="https://laracasts.com/search?q=beanstalkd">Laracasts</a></li><li><a href="https://help.ubuntu.com/community/UFW">Ubuntu Firewall Rules</a></li></ul><p>I will not repeat what they offer but link to them as needed.</p><h4 id="we-will-cover">We will cover</h4><ul><li>Setup up a schedule field</li><li>Setting up a Beanstalkd server</li></ul><h4 id="setting-up-the-field">Setting up the field</h4><p>My Post model has a published or active field and now a scheduled field. It is just a timestamp format field. I could have done other solutions and tighten this up a bit so any feedback is welcome below. When making a post I have two options at the bottom.</p><p>I also use the<a href="http://trentrichardson.com/examples/timepicker">Timepicker addon</a></p><p><img src="https://photos-1.dropbox.com/t/0/AAAsUCPPbu9uo1HSy-yLiCUzN2lytkbgUtaef0dYAGMUyg/12/54803135/png/2048x1536/3/1400529600/0/2/Screenshot%202014-05-19%2014.44.00.png/xW1tZgTGBYh1YDH0M1ThFzeg7PnA1tegBAscZQDwM6E" alt="Schedule Options"/><p>If the new post is not Active &amp;&amp; has a Scheduled date then this method kicks into place in my Posts controller during the creation process. I will most likely move this to a Service or Model since it really is not the job of the Controller but this is v1 of my idea.</p><pre><code>//app/controllers/PostsController.php<pre><code> public function __construct(MarkdownExtraParser $mk = null, SchedulerAls $scheduler = null)
{
//other code here
$this-&amp;gt;scheduler = ($scheduler == null) ? new SchedulerAls() : $scheduler;
}
/**
* Store a newly created post in storage.
*
* @return Response
*/
public function store()
{
//basic code here for laravel
$this-&amp;gt;scheduler-&amp;gt;sendToQueue($post);</code></pre><p/></pre><h4 id="first">First</h4></p><p>The<strong>SchedulerAls Class</strong> is pretty simple, using the<a href="http://laravel.com/docs/queues">Laravel Queue</a></p><p>The sendToQueue($post) method just does that</p><pre><code>//app/Als/Services/SchedulerAls.php<p>class SchedulerAls</p><p>public function sendToQueue($post) {
if(!empty($post->scheduled)) {
\Log::info("Testing: PushJob {$post->id}");
\Queue::push(&lsquo;Als\Services\SchedulerAls&rsquo;, array(&lsquo;post&rsquo; => $post->id));
}
}</code></pre><p>This adds a row to the queue to check the “Als\Services|SchedulerAls” class and trigger the fire method (more on that below) passing it the $post->id.</p></p><p>I make my fire method call to a<strong>processPost</strong> method that decides if this post is not active and if it has a date set. If so and that date is not greater than today make it active else release it for 30 minutes and the next command needed into the queue.</p><p>Eg if I post 1 for tomorrow (#100) and after that one for today (#101), it will see #100 is not ready and move on to #101.</p><p>Here is that the fire method and the processPost. Really it can all be in the fire method.</p><pre><code>//app/Als/Facades/Services/SchedulerAls.php
class SchedulerAls {<pre><code>public function fire($job, $data)
{
$this-&amp;gt;processPost($job, $data);
}
protected function processPost($job, $data)
{
$id = $data['post'];
$post = \Post::find($id);
$scheduled = Carbon::createFromFormat('Y-m-d H:i:s', $post-&amp;gt;scheduled);
$now = Carbon::create();
if($scheduled-&amp;gt;lt($now)) {
$post-&amp;gt;active = 1;
$post-&amp;gt;save();
$job-&amp;gt;delete();
} else {
$job-&amp;gt;release(30);
}
}</code></pre><p/></pre><p>So that is it really. Set to active or not. Delete job or release it back to the queue with a 30 minute delay etc.</p></p><h3 id="setting-up-the-server">Setting up the server.</h3><p>This was really not bad. I ended up using the existing server but will move to another server shortly. One thing to keep in mind is your firewall. You really want to make sure that you are only allowing certain IPs to visit this server or limit beanstalkd to localhost.</p><p>As noted this tutorial handles most of this really well<a href="http://fideloper.com/ubuntu-beanstalkd-and-laravel4">Fideloper</a></p><p>Finally<a href="https://github.com/ptrofimov/beanstalk_console">beanstalk console</a> is a great way, especially locally if you are not using &ldquo;sync&rdquo; driver to see what is going on. Just make sure to block it with htaccess so no one can just visit it on your server.</p><p>That is about it. Later I will add an even to allow other things to be triggered maybe via IFTT!</p></description><tags>laravel, php, queue</tags></item><item><title>Using Dot Env files to manage settings</title><link>https://alfrednutile.info/posts/76/</link><pubDate>Sun, 18 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/76/</guid><description><p>Wow. Included in Laravel<a href="http://laravel.com/docs/configuration#protecting-sensitive-configuration">http://laravel.com/docs/configuration#protecting-sensitive-configuration</a></p><ol><li><p>removed due to old news</p></li><li><p><a href="http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/">http://mattstauffer.co/blog/laravel-forge-using-environment-variables-for-environment-detection/</a></p></li></ol><h2 id="update">Update</h2><p>I really like the second link and how it sets up a .env file first to just return a simple string. After that you can have the .env.production.php or .env.local.php that laravel can look for.</p><pre><code>//bootstrap/start.php
$env = $app->detectEnvironment(function()
{
if (file_exists(__DIR__ . '/../.env')) {
return include(__DIR__ . '/../.env');
} else {
return 'production';
}
});</code></pre><p>Quite simple at that point to separate all of the environments.</p></description><tags>laravel, php, note2self</tags></item><item><title>Using Scopes in Laravel</title><link>https://alfrednutile.info/posts/69/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/69/</guid><description><p>I have about 4 models that all share 2 common queries. I want all of them that are &ldquo;Published&rdquo; and or Ordered by a field called Order.</p><p>This does help with some<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> goals, but you could easily change or add to a scope as needed to update all the queries involved etc. Especially if at a later point you break this out into a Repository Patter to use a different ORM.</p><p>So using<a href="http://laravel.com/docs/eloquent#query-scopes">Scopes</a> I can make one shared query. All my Model classes extend a BaseModel class I made that looks like this</p><pre><code>//app/models/BaseModel.php
&lt;?php<p>class BaseModel extends \Eloquent {</p><pre><code>public function scopePublished($query)
{
return $query-&amp;gt;where(&amp;quot;published&amp;quot;, &amp;quot;=&amp;quot;, 1);
}
public function scopeOrderByOrder($query)
{
return $query-&amp;gt;orderBy('order');
}</code></pre><p>}</code></pre><p>So with any of the three class all I have to do is use these scopes.</p></p><pre><code>//app/controllers/PortfoliosController.php
public function adminIndex()
{
$portfolios = Portfolio::OrderByOrder()->get();
return View::make('portfolios.admin_index', compact('portfolios'));
}</code></pre><p>or even a Models relationships</p><pre><code>//app/models/Portfolio.php
public function projects()
{
return $this->hasMany('Project')->Published()->OrderByOrder();
}</code></pre><blockquote/></description><tags>laravel, php, note2self</tags></item><item><title>Quick way to add text to a hidden ckeditor field</title><link>https://alfrednutile.info/posts/68/</link><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/68/</guid><description><p>Since I am not testing ckeditor this is a way to get text into a sometimes required field.</p><pre><code>//FeaturesContext.php
/**
* @Then /^I fill in wysiwyg on field "([^"]*)" with "([^"]*)"$/
*/
public function iFillInWysiwygOnFieldWith($arg, $arg2)
{
$js = &lt;&lt;&lt;HEREDOC
jQuery("textarea[name='$arg']").css('visibility', 'visible');
jQuery("textarea[name='$arg']").show();
HEREDOC;
$this->getSession()->executeScript($js);
$this->fillField($arg, $arg2);
}</code></pre><p>This will go into FeaturesContext.php. Then to you test you can pass the name and text to place into the field</p><pre><code> Then I fill in wysiwyg on field "body" with "Project via Test 1"</code></pre><p>If you want to test Ckeditor then just look for a class that it applies to your text editor to know it is showing. Otherwise assume it is tested and working if it is there.</p></description><tags>behat, php</tags></item><item><title>Github CLI to get Teams and Members of an Org</title><link>https://alfrednutile.info/posts/67/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/67/</guid><description><p>Needed to make a quick library for pulling down this info and making it a CSV file.</p><p>The libraries made this super easy. But it was hard to get all the emails since these can only been seen if in the users profile.</p><h3 id="the-link">the link</h3><p><a href="https://github.com/alnutile/org_reports">https://github.com/alnutile/org_reports</a></p></description><tags>github, tools, apis, php</tags></item><item><title>Adding Column using sqlite caused error 'Cannot add a NOT NULL column with default value NULL'</title><link>https://alfrednutile.info/posts/64/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/64/</guid><description><p>After the<a href="http://laravel.com/docs/upgrade#upgrade-4.1.26">security update</a> I had to add a remember_token to my user table.<a href="">security update</a></p><p>Since I am using sqllite locally I ended up with this error</p><pre><code>>php artisan migrate<p>[Illuminate\Database\QueryException]
SQLSTATE[HY000]: General error: 1 Cannot add a NOT NULL column with default value NULL (SQL: alter table "users" add column "remember_token" text not null)</code></pre><p>Finally<a href="http://forumsarchive.laravel.io/viewtopic.php?id=13320">this post</a> made it clear I had to make this nullable</p></p><pre><code>//migration file
/**
* Run the migrations.
*
* @return void
*/
public function up()
{
Schema::table('users', function(Blueprint $table)
{
$table->text('remember_token')->nullable();
});
}</code></pre><blockquote/></description><tags>laravel, php, note2self</tags></item><item><title>Drupal and Composer install or update</title><link>https://alfrednutile.info/posts/65/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/65/</guid><description><p>Using composer and drupal, even d7, is great.
But an update or install can leave you with a broken drupal registry.</p><p>So here is a workflow that is pretty bullet proof.</p><p>In this example drupal&rsquo;s composer folder where composer.json lives is located in /var/www/drupal/sites/default/files/composer</p><p>So in there is composer.json and composer.lock</p><p>So when you need to install a new composer library and you updated your json file you can run</p><pre><code>cd /var/www/drupal/
drush composer-rebuild-file
composer --working-dir=/var/www/drupal/sites/default/files/composer update</code></pre><p>If you get an broken registry issue the typically happens when you run</p><pre><code>drush composer-manager update</code></pre><p>You can clear that up with</p><pre><code>drush rr</code></pre><p>And then use composer directly as I did above to update/install your composer related files.</p></description><tags>composer, drupal, php</tags></item><item><title>php artisan migrate:reset not working</title><link>https://alfrednutile.info/posts/63/</link><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/63/</guid><description><p>This was an issue for me using sqlite. There was a simple fix noted in the<a href="http://irclogs.laravel.io/2014-03-02/04:41#log-5312b66d1937b8f547005cde">irclogs</a> of Laravel!</p><p>So under my require-dev or require I placed</p><pre><code>//composer.json
"require": {
"laravel/framework": "4.1.*",
"way/generators": "dev-master",
"doctrine/dbal": "~2.3"
},</code></pre><p>ran composer update and all was well again!</p></description><tags>laravel, php</tags></item><item><title>Adding Markdown Editor to your Blog/CMS</title><link>https://alfrednutile.info/posts/60/</link><pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/60/</guid><description><p>In this case it is Laravel but any PHP framework could use this.</p><h2 id="get-the-library">Get the Library</h2><p>I used the<a href="https://github.com/dflydev/dflydev-markdown">dflydev-markdown</a> library which uses<a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown</a> as it&rsquo;s base.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p><p>As it notes I load it up with composer.json and I am ready to use it.</p><h2 id="inject-the-class-into-your-controller">Inject the class into your controller</h2><p>At the controller level I inject it like this</p><pre><code>//BaseController.php<p>use dflydev\markdown\MarkdownExtraParser;</p><p>class BaseController {</p><pre><code>public $mk;
public function __construct(MarkdownExtraParser $mk = null)
{
$this-&amp;gt;mk = ($mk == null) ? new MarkdownExtraParser() : $mk;
}</code></pre><p/></pre><p>Later on I call to it on both update and store on any of my Controllers that extend this class.</p></p><h2 id="add-a-new-field-to-your-posts-or-other-content-type">Add a new field to your Posts or other content type</h2><p>But the other step here is to add a rendered_body field to my models/tables. Then on store and update I write to these but on edit I am working on the body field which is markdown.</p><pre><code>$data['rendered_body'] = $this->mk->transformMarkdown($data['body']);</code></pre><h2 id="render-it-in-the-view">Render it in the View</h2><p>And in my Views I render the rendered_body field and NOT the body field which stores the raw text. This idea I got from<a href="http://www.danneu.com/posts/9-rails-3-2-markdown-pygments-redcarpet-heroku/">danneu.com</a></p><p>Now with the help of the docs on<a href="http://michelf.ca/projects/php-markdown/extra/">php-markdown</a> I can do most of the work I need to make a post, embed video, images etc.</p><h2 id="thoughts">Thoughts</h2><p>As far as uploading<strong>images</strong> I use Dropbox for that so it is really not part of my needs. With dropbox I just take a snapshot and it auto uploads the image and I get the url in my clipboard. Though I then have to go to the URL and get the real URL. Still working on that.</p><pre><code>{
"name": "laravel/laravel",
"description": "The Laravel Framework.",
"keywords": ["framework", "laravel"],
"license": "MIT",
"repositories": [
{
"type": "git",
"url": "https://github.com/alnutile/dflydev-markdown"
}
],
"require": {
"laravel/framework": "4.1.*",
"dflydev/markdown": "dev-master"
},
"autoload": {
"classmap": [
"app/commands",
"app/controllers",
"app/models",
"app/database/migrations",
"app/database/seeds",
"app/tests/TestCase.php"
]
},
"require-dev": {
"way/generators": "2.*",
"schickling/backup": "dev-master"
},
"scripts": {
"post-install-cmd": [
"php artisan clear-compiled",
"php artisan optimize"
],
"post-update-cmd": [
"php artisan clear-compiled",
"php artisan optimize"
],
"post-create-project-cmd": [
"php artisan key:generate"
]
},
"config": {
"preferred-install": "dist"
},
"minimum-stability": "stable"
}</code></pre><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn:1" role="doc-endnote"><p>I may start using this<a href="https://github.com/michelf/php-markdown">michelf</a> since the one I am using now is marked depreciated. But I have already made a change to this one so it works a little better with my settings. My fork is here<a href="https://github.com/alnutile/dflydev-markdown">my fork</a> and my composer.json looks below<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup><a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:2" role="doc-endnote"><a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></li></ol></section></description><tags>laravel, php</tags></item></channel></rss>