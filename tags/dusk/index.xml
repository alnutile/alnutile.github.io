<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dusk on Alfred Nutile</title><link>https://alfrednutile.info/tags/dusk/</link><description>Recent content in dusk on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/dusk/index.xml" rel="self" type="application/rss+xml"/><item><title>Dusk Screenshots to S3 of Failing tests</title><link>https://alfrednutile.info/posts/248/</link><pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/248/</guid><description><p>I can be really annoying to troubleshoot a failed test in Dusk when using CI systems. What I ended up doing was setting up my project to send these files to S3 on fail.</p><p>Here are the steps</p><h2 id="setup-you-app">Setup You App</h2><p>This is just S3 storage so make sure you have a bucket and a folder in the bucket to write to. Basically for AWS you make an IAM with a key and secret and let it read/write to this folder. Might look like this policy</p><pre><code>{
"Version": "2012-10-17",
"Statement": [
{
"Action": [
"s3:ListBucket"
],
"Resource": [
"arn:aws:s3:::your-bucket"
],
"Effect": "Allow"
},
{
"Action": [
"*"
],
"Resource": [
"arn:aws:s3:::your-bucket/*"
],
"Effect": "Allow"
}
]
}</code></pre><p>or limited it just to the folder<code>screenshots</code></p><pre><code>{
"Version": "2012-10-17",
"Statement": [
{
"Action": [
"s3:ListAllMyBuckets",
"s3:HeadBucket"
],
"Resource": "*",
"Effect": "Allow",
"Sid": "VisualEditor1"
},
{
"Action": [
"s3:ListBucket",
"s3:GetBucketLocation"
],
"Resource": [
"arn:aws:s3:::your-bucket",
"arn:aws:s3:::your-bucket/*"
],
"Effect": "Allow",
"Sid": "VisualEditor0"
},
{
"Action": [
"s3:GetObject"
],
"Resource": [
"arn:aws:s3:::your-bucket/screenshots",
"arn:aws:s3:::your-bucket/screenshots/*"
],
"Effect": "Allow",
"Sid": "VisualEditor2"
}
]
}</code></pre><p>Now in your<code>tests/DuskTestCase.php</code> file add this:</p><pre><code> public function tearDown()
{
if (env("TRAVIS")) {
$files = \File::files(base_path("tests/Browser/screenshots"));<pre><code> if ($files) {
foreach ($files as $file) {
Storage::disk('travis_fails')
-&amp;gt;put($file-&amp;gt;getFileName(), $file-&amp;gt;getContents());
}
}
}
parent::tearDown();
}</code></pre><p/></pre><p>This will run on Travis based tests saving files to the bucket.</p></p><p>I added to my<code>config/filesystems.php</code> file this:</p><pre><code> 'disks' => [
'travis_fails' => [
'driver' => 's3',
'key' => env('AWS_ACCESS_KEY_ID'),
'secret' => env('AWS_SECRET_ACCESS_KEY'),
'region' => "eu-west-1",
'root' => "screenshots",
'bucket' => 'foo-bucket',
'url' => env('AWS_URL'),
],
///</code></pre><p>Now for TravisCI</p><h2 id="setup-travisci">Setup TravisCI</h2><p>Then in Travis under Settings -> Environment Variables we make sure to add our key and secret with the proper key format:</p><pre><code>AWS_SECRET_ACCESS_KEY=foo
AWS_ACCESS_KEY_ID=bar</code></pre><p><img src="https://dl.dropboxusercontent.com/s/nez8f4hz4anmghl/Screenshot%202018-06-26%2009.36.26.png?dl=0" alt=""/><h2 id="now-you-are-ready-to-fail">Now You are Ready to Fail!</h2><p>Ok so on your next fail you will see in your s3 bucket some of those super handy screenshots.</p></description><tags>dusk, laravel, testing, aws</tags></item><item><title>Dusk Notes</title><link>https://alfrednutile.info/posts/225/</link><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/225/</guid><description><p>Just keeping a list of gotchas around dusk.</p><h2 id="use-refreshdatabase-not-working">use RefreshDatabase not working</h2><p>Cost: 1 hour lost</p><p>Basically I had to go back to the slower &ldquo;use DatabaseMigrations;&rdquo; otherwise it would not work. The user was null.</p><p>Links:<a href="https://laracasts.com/discuss/channels/testing/dusk-problem-databasetransactions">This thread helped</a></p><h2 id="headless-or-not">Headless or not</h2><p>Cost: 1 hour lost or less</p><p>For some odd reasons my tests started coming up blank.</p><p>I turned off headless in this class<code>DuskTestCase</code></p><pre><code> protected function driver()
{
$args = [
'--disable-gpu',
'--headless'
];
if (env("HEADLESS_OFF")) {
$args = [
'--disable-gpu'
];
}
$options = (new ChromeOptions)->addArguments($args);<pre><code> return RemoteWebDriver::create(
'http://localhost:9515',
DesiredCapabilities::chrome()-&amp;gt;setCapability(
ChromeOptions::CAPABILITY,
$options
)
);
}</code></pre><p/></pre><p>And this way it still works on travis.</p></p></description><tags>note2self, laravel, dusk</tags></item></channel></rss>