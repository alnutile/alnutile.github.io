<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>orchestra on Alfred Nutile</title><link>https://alfrednutile.info/tags/orchestra/</link><description>Recent content in orchestra on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/orchestra/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with Orchestra Testbench for Laravel Package Development</title><link>https://alfrednutile.info/posts/241/</link><pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/241/</guid><description><p>The goal of this article will allow one to setup a stand alone package working with it&rsquo;s own tests and has access to all of the normal Laravel workflows outside of Laravel. So you can build it using the easier conventions and helpers Laravel offers.</p><p>Since my work will include database usage I will grab both packages:</p><pre><code>composer require --dev "orchestra/testbench:&lt;=3.5" "orchestra/database:v3.5.0"</code></pre><p>I will setup my<code>composer.json</code> after this as such:</p><pre><code> "autoload-dev": {
"psr-4": {
"Tests\\": "tests/"
}
}</code></pre><p>This way my classes will just have the Tests namespace.</p><p>And then add<code>tests/TestCase.php</code></p><pre><code>&lt;?php<p>namespace Tests;</p><p>use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Mockery;
use AlfredNutileInc\HPClient\HubPlannerProvider;</p><p>class TestCase extends \Orchestra\Testbench\TestCase
{</p><pre><code>/**
* Load any providers I am offering
*/
protected function getPackageProviders($app)
{
return
[
HubPlannerProvider::class,
];
}
public function setUp()
{
parent::setUp();
//I can load any local factories if I want to
//$this-&amp;gt;withFactories(__DIR__ . '/../database/factories');
//make the bast path under tests folder
$this-&amp;gt;app-&amp;gt;setBasePath(__DIR__ . '/../');
//Because I use dynamic facades
\File::makeDirectory(base_path(&amp;quot;storage/framework/cache&amp;quot;), 0755, true, true);
//I can deliver routes for testing
//$this-&amp;gt;app['router']-&amp;gt;get('example', function () {
// return view(&amp;quot;testing&amp;quot;);
//})-&amp;gt;name('featured');
//Load a view for testing
//\View::addLocation(__DIR__ . '/../views');
//$this-&amp;gt;loadLaravelMigrations(['--database' =&amp;gt; 'testing']);
//Any migrations I need to bring in
$this-&amp;gt;loadMigrationsFrom([
'--database' =&amp;gt; 'testing',
'--path' =&amp;gt; realpath(__DIR__ . '/migrations')
]);
//$output = $this-&amp;gt;artisan('migrate', ['--database' =&amp;gt; 'testing']);
}
/**
* Setup logging
*/
protected function getEnvironmentSetUp($app)
{
$app-&amp;gt;configureMonologUsing(function ($monolog) {
$path = __DIR__ . &amp;quot;/logs/laravel.log&amp;quot;;
$handler = $handler = new StreamHandler($path, 'debug');
$handler-&amp;gt;setFormatter(tap(new LineFormatter(null, null, true, true), function ($formatter) {
/** @var LineFormatter $formatter */
$formatter-&amp;gt;includeStacktraces();
}));
/** @var \Monolog\Logger $monolog */
$monolog-&amp;gt;pushHandler($handler);
});
//setup db config if needed
//$app['config']-&amp;gt;set('database.default', 'testbench');
//$app['config']-&amp;gt;set('database.connections.testbench', [
// 'driver' =&amp;gt; 'sqlite',
// 'database' =&amp;gt; ':memory:',
// 'prefix' =&amp;gt; '',
//]);
$app['config']-&amp;gt;set('app.debug', env('APP_DEBUG', true));
//Does my pacakge had any default configurations I want to set
//$app['config']-&amp;gt;set('laravel-feature-flag.logging', true);
}</code></pre><p>}</code></pre><p>Also:</p></p><pre><code>composer require --dev "mockery/mockery:0.9.*"</code></pre><p>Since I use this a lot to mock and it does not come with &ldquo;orchestra/testbench&rdquo;</p><p>Now I am ready to run tests.</p><p>Here is a sample on</p><pre><code>&lt;?php<p>namespace Tests\Feature;</p><p>use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use AlfredNutileInc\HPClient\UserFromResource;
use function GuzzleHttp\json_decode;</p><p>class UserFromResourceTest extends TestCase
{</p><pre><code>use UserFromResource;
public function testResultsFromPayload()
{
$users = \File::get(base_path(&amp;quot;tests/fixtures/resources.json&amp;quot;));
$payload = \File::get(base_path(&amp;quot;tests/fixtures/comments_report_limited.json&amp;quot;));
$results = $this-&amp;gt;transformResouceToResourceName(json_decode($payload, true), json_decode($users, true));
$result = array_first($results);
$this-&amp;gt;assertArrayHasKey('user_name', $result);
$this-&amp;gt;assertEquals('Rob Sherali', $result['user_name']);
}</code></pre><p>}</p><p/></pre><p>I can easily use Facades, helpers etc that I am use to from Laravel.
And I can see logs in<code>logs/laravel.log</code></p></p><p>Also I add</p><pre><code> &lt;php>
&lt;env name="APP_ENV" value="testing"/>
&lt;env name="CACHE_DRIVER" value="array"/>
&lt;env name="SESSION_DRIVER" value="array"/>
&lt;env name="QUEUE_DRIVER" value="sync"/>
&lt;env name="MAIL_DRIVER" value="array"/>
&lt;/php></code></pre><p>To my<code>phpunit.xml.dist</code> so it can set defaults as Laravel does.</p></description><tags>laravel, testing, orchestra</tags></item></channel></rss>