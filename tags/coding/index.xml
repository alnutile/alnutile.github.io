<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on Alfred Nutile</title><link>https://alfrednutile.info/tags/coding/</link><description>Recent content in coding on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>We Code in the Context of our Quoting</title><link>https://alfrednutile.info/posts/207/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/207/</guid><description>&lt;p>This article can be listened too &lt;a href="http://www.readorlisten.com/16">here&lt;/a> or in your favorite podcast player&lt;/p>
&lt;p>Whether you are working Waterfall, or Agile we still need to quote out the time it will take for new features . We still need to give the product owners, or the people with the money, a sense of timing. And it is this skill or lack thereof that drives the experience we are going to have when we code.&lt;/p>
&lt;p>There are many, many, many formulas around on how to quote and how not to quote. And I am not talking about &lt;strong>Fixed Bids&lt;/strong> here those are a story in an of themselves. I am talking about sprint planning, task planning anything that is part of the relationship between you and the owner to have a sense of how much something might cost.&lt;/p>
&lt;blockquote>
&lt;p>And it is this skill or lack there of that drives experience we are going to have when we code&lt;/p>
&lt;/blockquote>
&lt;p>In this article I will cover two main concepts. One is about pacing yourself for the &amp;ldquo;race&amp;rdquo; ahead. Every task/feature or what ever is like a little, or big, jog. If you start the jog not knowing how long it is then you have no clue how to pace your self. And if you have not idea where you are in the &amp;ldquo;track&amp;rdquo; or race then you have no clue if you should speed up or slow down. So to begin with we need to consider how to quote items. Second I will cover how to know where I am in the race.&lt;/p>
&lt;blockquote>
&lt;p>Be warned I suck at spreadsheets. I use them to their bare minimum but that is for me enough to make all the difference in my day to day work&lt;/p>
&lt;/blockquote>
&lt;h2 id="who-is-this-article-for">Who is this article for&lt;/h2>
&lt;p>It is for developers who find themselves not working in the ideal Agile situation and maybe still in Waterfall. Where Story Points are not an option and the clients need a sense of time a feature might take so they can budget for it. This is not for Fixed bids. Sure it can work for that but those always are risky and may take different tools.&lt;/p>
&lt;p>This is also for developers who know quoting sucks, who know things go wrong and this &amp;ldquo;technique&amp;rdquo; will help to, sooner than later, check in with the client so they and you can have a good sense of how things are really going.&lt;/p>
&lt;h2 id="thoughts-on-quoting">Thoughts on Quoting&lt;/h2>
&lt;blockquote>
&lt;p>And above all remember, you are not building features you are building an application, so with each new feature you are responsible for the bigger picture or health of your application.&lt;/p>
&lt;/blockquote>
&lt;p>Story points are an interesting practice BUT I find it hard to use them most of the time with clients. It seems a bit too abstract. Sure there might be a client who really get&amp;rsquo;s Story points but this article is more about that middle ground, where you want to write good code in the context of a client who is confident in the time &amp;ldquo;range&amp;rdquo; you quote for the feature.&lt;/p>
&lt;p>I am going to share some spreadsheets, but be warned I suck at spreadsheets. I use them to their bare minimum but that is for me enough to make all the difference in my day to day work.&lt;/p>
&lt;p>The first &amp;ldquo;tool&amp;rdquo; is &lt;a href="https://docs.google.com/spreadsheets/d/1RJeqqF0BIeYgww_pcbQvszFdkFCexRLSrN1a5u9faw8/edit?usp=sharing">here&lt;/a> basically I am doing two things. A simple Quoting template with ideas from the book &amp;ldquo;Agile Estimating and Planning&amp;rdquo; no offense to them if I got it totally wrong.&lt;/p>
&lt;p>First I will write out all the tasks that make this feature. And second I will write down assumptions so I make sure they are presented to the client as well.&lt;/p>
&lt;p>Keep in mind this is not quoting out an entire project. Sure you can do that but I will focus on a feature. Some of which might take a week or two weeks or maybe less.&lt;/p>
&lt;p>This sheet will take your items and instead of buffering each item it will buffer the results and add them to the total of the columns you quoted at 60% confidence to hopefully end up with a more realistic result. I will cover Confidence levels in a moment.&lt;/p>
&lt;p>And as the book &amp;ldquo;Agile Estimating and Planning&amp;rdquo;; which I link to below, notes if you buffer each item then you are going to end up with too high of a quote, so that is why we use this formula.&lt;/p>
&lt;p>The book uses a really simple example of having to do 5 things in the morning before going to the airport. If you buffer all 5 things then you will end up in the airport way too early. But with this approach you end up with a better buffer.&lt;/p>
&lt;h3 id="confidence-level">Confidence Level&lt;/h3>
&lt;p>To begin with I consider confidence levels. Have I done this before, has it been done before, etc. Then I quote at two levels. 60% confidence and 90% confidence.&lt;/p>
&lt;p>It is these two numbers that help us make the final &amp;ldquo;buffered&amp;rdquo; results.&lt;/p>
&lt;p>What to consider in this thinking? This is what at my job, we call a &amp;ldquo;Done Done&amp;rdquo; list.&lt;/p>
&lt;ul>
&lt;li>Testing&lt;/li>
&lt;li>Documentation&lt;/li>
&lt;li>Time to model out ideas&lt;/li>
&lt;li>Feedback&lt;/li>
&lt;li>CI and deployment&lt;/li>
&lt;li>Manual QA&lt;/li>
&lt;li>Deployment&lt;/li>
&lt;/ul>
&lt;p>Seriously give your self time to do these things right!&lt;/p>
&lt;p>And above all remember, you are not building a features you are building an application, so with each new feature you are responsible for the bigger picture or health of your application.&lt;/p>
&lt;p>Take time to consider what else this feature might be touching that needs to be fixed, tightened up or just made better. Should you include all of these little touches in your conversation with the client? In my opinion no, I think you are responsible for so much that already does not always get brought up in conversations that this falls in that area. For example maybe you know testing is weak because you had to rush the last feature, well add a few more tests while doing this feature. I think that this type of detail work goes beyond any todo list and is just the nature of being an artisan building and maintaining such a complex system.&lt;/p>
&lt;p>Remember in the end if your buffer is too big or too small it leaves you in an unprofessional situation. As a professional I want to have a sense of honesty with the client that I am not over quoting items so I can sit around on Facebook or over compensate for my lack of skill in quoting. And that I am not under quoting forcing myself into a situation where I am not able to deliver a quality product and not enjoy quality coding time.&lt;/p>
&lt;p>It is key to keep each item in this sheet under one day. I will cover that shortly.&lt;/p>
&lt;h3 id="ticket-system-numbers">Ticket System Numbers&lt;/h3>
&lt;p>You will notice in my sheet a column for &amp;ldquo;Ticket System Numbers&amp;rdquo;. This number I will use in the sheet that helps me pace myself. It is not a perfect number but it is a flexible formula (I change as needed) so the total matches the total that comes from the overall buffer the system makes for me. I could maybe make it a bit more dynamic and relative to the spread of each item related to the 60% and 90% quote but in the mean time I just adjust the multiplier as needed till the total matches the &amp;ldquo;Total Days&amp;rdquo; that system originally totaled up for me. Not ideals but just to help me pace myself in the bigger picture of the total time quoted.&lt;/p>
&lt;h3 id="assumptions">Assumptions&lt;/h3>
&lt;p>Before I move on to &amp;ldquo;Pacing Yourself&amp;rdquo; I want to note this area of the sheet.
This is very import. The hardest part of our job is not coding but communicating with other humans, especially those who we are trying to comprehend what it is they want us to build.&lt;/p>
&lt;blockquote>
&lt;p>The hardest part of our job is not coding but communicating with other humans, especially those who we are trying to comprehend what it is they want us to build&lt;/p>
&lt;/blockquote>
&lt;p>So write them out, no matter how dumb they might sound and review them with the client to make sure you are both assuming the same things.&lt;/p>
&lt;h2 id="pacing-yourself">Pacing Yourself&lt;/h2>
&lt;blockquote>
&lt;p>Human nature, in my opinion, when we do not know the length of the course we are on, is too start off too slow and end off in a desperate pace when finally we see the finish line and realize it is too late.&lt;/p>
&lt;/blockquote>
&lt;p>The client approved your numbers now it is time to start the project. Ah the first few days, so nice, so easy to relax, write a test, go for a jog, code slowly, chit chat on Slack but then it happens! You finally see there is a week left in the project, you can finally see the due date outside the abstraction of gantt charts or a ticket system, and you finally see you have a ton more work to do, and you start to run really, really fast, do not sleep, eat, do not test, do not QA or do anything but code hoping to get to the finish line.&lt;/p>
&lt;p>For me this very simple system showed me how I can easily start and manage my pace. Not only that but help me to see when I am falling behind as early as possible, so I can talk to the client and let them know up front what is happening. It is a lot nicer for them to see 2 weeks before the deadline versus 2 days before the deadline how the project is really going.&lt;/p>
&lt;blockquote>
&lt;p>I hated when managers asked me how are things going as if I could stick my thumb in the air to measure the wind and tell them &amp;ldquo;Yup things are great project is on time&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>The simple stupid spread sheet can be seen &lt;a href="https://docs.google.com/spreadsheets/d/1p1xBV9xj0vEbZlpu1Zwv9g1VBgm0OGogkY86QZxeiyA/edit#gid=7">here&lt;/a> the broken site explaining it is &lt;a href="http://www.agilistapm.com/burn-chart-tutorial/">here&lt;/a> by Joel Wenzel&lt;/p>
&lt;p>&lt;img src="https://dl.dropboxusercontent.com/s/2iy7d6c9igghdug/burn_down.png?dl=0" alt="">&lt;/p>
&lt;p>And let&amp;rsquo;s keep it simple stupid by following a few key rules.&lt;/p>
&lt;p>One, who cares if you are 1/2 way done or 75% done or 90% done, it is just not done. So an item is either Complete or not. And until it is Complete do not consider it as a task done. Once Complete then add that day to the section where you total up the work you did for that day.&lt;/p>
&lt;p>Second, check in the morning and see how to pace your day. It is a great way to start.&lt;/p>
&lt;p>Third, you will not make up time! So do not start behind, and once you fall behind talk sooner than later to the client. It might be hard to admit you are falling behind but do it.&lt;/p>
&lt;p>Fourth, one day tops per quoted item. No item can be more than a day, why? Cause you will fool yourself and if an item is say 2 days long and on the 3rd day you finally admit to yourself you fell behind then now you are possibly 2-3 more days behind than you think. Where if you had it at one day then by the next day&amp;rsquo;s morning check in you would know that you are not done and falling behind.&lt;/p>
&lt;p>That really is it for this, keep it simple, check in daily and keep the tasks small.&lt;/p>
&lt;h2 id="spikes">Spikes&lt;/h2>
&lt;p>Quoting is hard. I mean how do you quote things you have never done before! Sometimes a Spike is a great way to just say to the client, I am not sure how long this will take, let me take 1-2 days to take a stab at it, paid days of course, and then let&amp;rsquo;s see what comes from that. If anything you will have a sense of how possible the task is and in what timeframe. In a Spike you can set aside some of the detail work and just code away knowing the code will be thrown out once done. You are mainly just trying to get an idea of how and if this task is possible.&lt;/p>
&lt;p>Well, that is it! I just wanted to share these simple tools and concepts that I think are really key to &lt;strong>coding in the context of less stressful expectations&lt;/strong> and therefore giving your self space to code well and happily.&lt;/p>
&lt;h2 id="links-to-resources">Links to Resources&lt;/h2>
&lt;p>Agile Estimating and Planning &lt;a href="https://www.mountaingoatsoftware.com/books/agile-estimating-and-planning">here&lt;/a>&lt;/p>
&lt;p>Joel&amp;rsquo;s burn down &lt;a href="https://docs.google.com/spreadsheets/d/1p1xBV9xj0vEbZlpu1Zwv9g1VBgm0OGogkY86QZxeiyA/edit#gid=7">here&lt;/a>&lt;/p>
&lt;p>My Quoting Template &lt;a href="https://docs.google.com/spreadsheets/d/1RJeqqF0BIeYgww_pcbQvszFdkFCexRLSrN1a5u9faw8/edit?usp=sharing">here&lt;/a>
Figured from the book linked to above&lt;/p></description><tags>coding, planning</tags></item><item><title>Keeping a Controller Method Simple</title><link>https://alfrednutile.info/posts/186/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/186/</guid><description>&lt;p>When I am done with a controller, done mocking up ideas and ready for some long term code, then I think this is the most information a Controller method should have.&lt;/p>
&lt;pre>&lt;code>public function updateFoor($id, $foo) {
        try {
           
            $results = $this-&amp;gt;someRepoOrServiceClass($Id, $foo);           
            return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; &amp;quot;Success doing something&amp;quot;], 202);
        } catch (\Exception $e) {
            $message = sprintf(&amp;quot;Error doing something %s&amp;quot;, $e-&amp;gt;getMessage());
            Log::debug($message);
           
            return Response::json(['data' =&amp;gt; [], 'message' =&amp;gt; $message], 400);
        }
}
&lt;/code>&lt;/pre>&lt;p>At this point I have &lt;code>someRepoOrServiceClass&lt;/code> well tested outside of this Controller. And I do not need to do much to this controller since it is just returning the results or dealing with an error.&lt;/p>
&lt;p>Even using &lt;a href="https://laravel.com/docs/5.2/validation#form-request-validation">Form Request Validation&lt;/a> I can create logic and test logic outside of my Controller. Making the moment I come back to my controller just about plugging in these &amp;ldquo;lego&amp;rdquo; like pieces.&lt;/p></description><tags>php, coding</tags></item><item><title>Put It All Into Version Control Even Composer!</title><link>https://alfrednutile.info/posts/171/</link><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/171/</guid><description>&lt;p>&lt;strong>Update: September 06 2016&lt;/strong>&lt;/p>
&lt;p>We stopped doing this. I do not think it is a bad idea but we ended up going with CodeDeploy on AWS. So after our CI does a Composer install and all passes, CodeDeploy will just bundle everything up as a Zip file and deploy that to the server.&lt;/p>
&lt;p>&lt;strong>Or Listen &lt;a href="http://www.readorlisten.com/2">here&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Another article about this written by Loran Jane Mitchell &lt;a href="http://www.lornajane.net/posts/2014/using-composer-without-gitignoring">Using Composer Without GitIgnoring Vendor&lt;/a>&lt;/p>
&lt;p>I have done this for sometime with node_modules because I use to hate waiting for npm to pull down during CI builds. I could have used the CI systems cache for this but I realized once the project starts it is rare that I needed to add more libraries. And when I did it was just as easy to wipe using &lt;code>git rm&lt;/code> and do them again fresh. This included my use of Bower.&lt;/p>
&lt;p>But then there is Composer and PHP. The project starts and I might be pulling in libraries quite a bit but at some point we are just running &lt;code>composer install&lt;/code> and never &lt;code>composer update&lt;/code>. This step included &lt;code>rm -rf vendor&lt;/code> which helped with the speed. And this is going great BUT has a few draw backs I will cover below.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="speed-ci-and-deployment">Speed (CI, and Deployment)&lt;/h2>
&lt;p>This is not HUGE but with workflow now each deployment, unless it is a &lt;code>quick&lt;/code> one, we tend to just use &lt;code>rm -rf vendor &amp;amp;&amp;amp; composer install&lt;/code>. And it does cost us 1/2 a minute. Again not huge but nice to not have that as down time to the user. For at this point the app is not usable. And even worse as I will talk about below. And we do a lot of builds a day in the CI.&lt;/p>
&lt;h2 id="one-point-of-failure-vs-many">One Point of Failure VS Many&lt;/h2>
&lt;p>This is the big reason in my opinion. I have seen it too many times. Our CI goes well even our stage goes well but then git via Github gets stuck on one repo out of the many you are installing. This can be caused due to a misconfiguration on our part, eg using anonymous Github connections but at times I have seen it even when authenticated and am not totally sure why.&lt;/p>
&lt;p>Then there are those moments, and they happen, when Github is under DDOS attack! So then it is just a day of no deployments and that is not an option really. And with this technique we have a good chance of getting a deployment in since we are just hitting one repo and not trying our luck at many.&lt;/p>
&lt;h2 id="rollback">Rollback&lt;/h2>
&lt;p>Then there are Rollback moments. Zero down time would be great and this is one step closer. With our releases we use Tags. So if I was to release 1.2.2 and it had a bug I could rollback to tag 1.2.1 in moments. No need to rebuild composer. Sure it saves minor amount of time but when things are down on production 1/2 a minute can feel like a life time. This does not cover all migration issues but that is not a thing we do every deployment and honestly with the migration rollback feature we have in Laravel I think that becomes an edge case that can be dealt with using Artisan and some creative coding.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;when things are down on production 1/2 a minute can feel like a life time&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h2 id="fixing-merge-conflicts">Fixing Merge Conflicts&lt;/h2>
&lt;p>Well what happens when there is a conflict in this vendor folder? That is easy really just &lt;code>rm&lt;/code> the whole thing and do what I have been doing all along &lt;code>composer install&lt;/code> saving &lt;code>composer update&lt;/code> only for those moments you are looking for something to really be updated and feeling lucky (and patient).&lt;/p></description><tags>laravel, php, workflows, coding, best practices</tags></item></channel></rss>