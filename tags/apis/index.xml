<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>apis on Alfred Nutile</title><link>https://alfrednutile.info/tags/apis/</link><description>Recent content in apis on Alfred Nutile</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Feb 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://alfrednutile.info/tags/apis/index.xml" rel="self" type="application/rss+xml"/><item><title>Dealing with Oauth2 Server and Laravel for both a local app login and for remote apps using Lucadegasperi/oauth2-server-laravel</title><link>https://alfrednutile.info/posts/133/</link><pubDate>Mon, 23 Feb 2015 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/133/</guid><description><p>This is all based around this library<a href="https://github.com/lucadegasperi/oauth2-server-laravel">https://github.com/lucadegasperi/oauth2-server-laravel</a></p><p>I am building and API to be used by an iOs and Android client I will be making soon.<strong>But</strong> I also needed the filter system to deal with my local Laravel view that was using the api via an Angular driven widget so the user can go to the website as well.</p><p>So the website is where the user can go to do change settings, subscription updates etc, but in that case they are logged in via the Laravel login form. From there they land on the profile page where the Angular widget will do n xhr request to the api to fill in the table/settings.</p><p>The routes ends up looking like this</p><pre><code>
Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});<p>//The view they see using Laravel Blade and an embedded angular widget
Route::get(&lsquo;profile&rsquo;, [&lsquo;middleware&rsquo; => &lsquo;auth&rsquo;, &lsquo;uses&rsquo; => &lsquo;ProfileController@getProfile&rsquo;]);</p><p>//The API
Route::group([&lsquo;prefix&rsquo; => &lsquo;api/v1&rsquo;, &lsquo;before&rsquo; => &lsquo;oauth|setUser|auth&rsquo;], function() {
Route::get(&lsquo;profile&rsquo;, &lsquo;ProfileController@getApiProfile&rsquo;);
});</code></pre><p>The thing is the Oauth2 filter was causing some issues</p></p><p>1 Looks for a access_token query string or header
2 Does not load the user like I need</p><p>The first issue I just made a class to extend the core filter for the Oauth2 library.</p><h3 id="my-provider">My provider</h3><pre><code>&lt;?php namespace App\Providers;<p>use App\Filters\OauthTotalRecalls;
use Illuminate\Support\ServiceProvider;
class OauthFilterProvider extends ServiceProvider {
public function boot()
{
$this->app->bindShared(&lsquo;LucaDegasperi\OAuth2Server\Filters\OAuthFilter&rsquo;, function ($app) {
$httpHeadersOnly = $app[&lsquo;config&rsquo;]->get(&lsquo;oauth2.http_headers_only&rsquo;);
return new OauthTotalRecalls($app[&lsquo;oauth2-server.authorizer&rsquo;], $httpHeadersOnly);
});
}
/**
* Register the service provider.
*
* @return void
*/
public function register()
{
// TODO: Implement register() method.
}
}</code></pre><p>Then I register that in my app.conf after I register his.</p></p><h3 id="my-filter">My Filter</h3><p>It overrides the filter to do one thing and that is to check if the user is a guest. Which they would not be if they are logging in via the Laravel login form.</p><pre><code>&lt;?php namespace App\Filters;
use Illuminate\Support\Facades\Auth;
use LucaDegasperi\OAuth2Server\Filters\OAuthFilter;
class OauthTotalRecalls extends OAuthFilter {
/**
* Run the oauth filter
*
* @internal param mixed $route, mixed $request, mixed $scope,...
* @return void a bad response in case the request is invalid
*/
public function filter()
{
if(Auth::guest())
{
if (func_num_args() > 2) {
$args = func_get_args();
$this->scopes = array_slice($args, 2);
}
$this->authorizer->validateAccessToken($this->httpHeadersOnly);
$this->validateScopes();
}
}
}</code></pre><h3 id="loading-user">Loading user</h3><p>So at this point the user is logged in via Laravel so the Auth::user() is fully set. But lastly if this was the token based log in the &ldquo;setUser&rdquo; filter will kick in and load the user from the token. If the token is wrong then this all will fail.</p><pre><code>Route::filter('setUser', function()
{
if(Auth::guest())
{
$user_id = Authorizer::getResourceOwnerId();
Auth::loginUsingId($user_id);
}
});</code></pre></description><tags>oauth, laravel, apis</tags></item><item><title>Github CLI to get Teams and Members of an Org</title><link>https://alfrednutile.info/posts/67/</link><pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate><guid>https://alfrednutile.info/posts/67/</guid><description><p>Needed to make a quick library for pulling down this info and making it a CSV file.</p><p>The libraries made this super easy. But it was hard to get all the emails since these can only been seen if in the users profile.</p><h3 id="the-link">the link</h3><p><a href="https://github.com/alnutile/org_reports">https://github.com/alnutile/org_reports</a></p></description><tags>github, tools, apis, php</tags></item></channel></rss>